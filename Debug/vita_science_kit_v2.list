
vita_science_kit_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d08  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007e98  08007e98  00008e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f28  08007f28  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007f28  08007f28  00008f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f30  08007f30  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f30  08007f30  00008f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f34  08007f34  00008f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007f38  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  20000068  08007fa0  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005d4  08007fa0  000095d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d789  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eeb  00000000  00000000  00026821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  0002a710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001432  00000000  00000000  0002c0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bbbb  00000000  00000000  0002d52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021c48  00000000  00000000  000590e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010cc69  00000000  00000000  0007ad2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00187996  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074fc  00000000  00000000  001879dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0018eed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e80 	.word	0x08007e80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007e80 	.word	0x08007e80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
 8000580:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000582:	4b3e      	ldr	r3, [pc, #248]	@ (800067c <MX_ADC1_Init+0x11c>)
 8000584:	4a3e      	ldr	r2, [pc, #248]	@ (8000680 <MX_ADC1_Init+0x120>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000588:	4b3c      	ldr	r3, [pc, #240]	@ (800067c <MX_ADC1_Init+0x11c>)
 800058a:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b3a      	ldr	r3, [pc, #232]	@ (800067c <MX_ADC1_Init+0x11c>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000596:	4b39      	ldr	r3, [pc, #228]	@ (800067c <MX_ADC1_Init+0x11c>)
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800059c:	4b37      	ldr	r3, [pc, #220]	@ (800067c <MX_ADC1_Init+0x11c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a2:	4b36      	ldr	r3, [pc, #216]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005a4:	2204      	movs	r2, #4
 80005a6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a8:	4b34      	ldr	r3, [pc, #208]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ae:	4b33      	ldr	r3, [pc, #204]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80005b4:	4b31      	ldr	r3, [pc, #196]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005b6:	2203      	movs	r2, #3
 80005b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ba:	4b30      	ldr	r3, [pc, #192]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c2:	4b2e      	ldr	r3, [pc, #184]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c8:	4b2c      	ldr	r3, [pc, #176]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ce:	4b2b      	ldr	r3, [pc, #172]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d6:	4b29      	ldr	r3, [pc, #164]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005dc:	4b27      	ldr	r3, [pc, #156]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e4:	4825      	ldr	r0, [pc, #148]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005e6:	f001 faf9 	bl	8001bdc <HAL_ADC_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80005f0:	f000 fad8 	bl	8000ba4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	4619      	mov	r1, r3
 80005fe:	481f      	ldr	r0, [pc, #124]	@ (800067c <MX_ADC1_Init+0x11c>)
 8000600:	f002 f854 	bl	80026ac <HAL_ADCEx_MultiModeConfigChannel>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800060a:	f000 facb 	bl	8000ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800060e:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <MX_ADC1_Init+0x124>)
 8000610:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000612:	2306      	movs	r3, #6
 8000614:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000616:	2303      	movs	r3, #3
 8000618:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800061a:	237f      	movs	r3, #127	@ 0x7f
 800061c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800061e:	2304      	movs	r3, #4
 8000620:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4619      	mov	r1, r3
 800062a:	4814      	ldr	r0, [pc, #80]	@ (800067c <MX_ADC1_Init+0x11c>)
 800062c:	f001 fc26 	bl	8001e7c <HAL_ADC_ConfigChannel>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000636:	f000 fab5 	bl	8000ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800063a:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <MX_ADC1_Init+0x128>)
 800063c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800063e:	230c      	movs	r3, #12
 8000640:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4619      	mov	r1, r3
 8000646:	480d      	ldr	r0, [pc, #52]	@ (800067c <MX_ADC1_Init+0x11c>)
 8000648:	f001 fc18 	bl	8001e7c <HAL_ADC_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000652:	f000 faa7 	bl	8000ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <MX_ADC1_Init+0x12c>)
 8000658:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800065a:	2312      	movs	r3, #18
 800065c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4619      	mov	r1, r3
 8000662:	4806      	ldr	r0, [pc, #24]	@ (800067c <MX_ADC1_Init+0x11c>)
 8000664:	f001 fc0a 	bl	8001e7c <HAL_ADC_ConfigChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 800066e:	f000 fa99 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	3728      	adds	r7, #40	@ 0x28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000084 	.word	0x20000084
 8000680:	50040000 	.word	0x50040000
 8000684:	14f00020 	.word	0x14f00020
 8000688:	19200040 	.word	0x19200040
 800068c:	25b00200 	.word	0x25b00200

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b0ac      	sub	sp, #176	@ 0xb0
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2288      	movs	r2, #136	@ 0x88
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f006 fdcc 	bl	800724e <memset>
  if(adcHandle->Instance==ADC1)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a3d      	ldr	r2, [pc, #244]	@ (80007b0 <HAL_ADC_MspInit+0x120>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d172      	bne.n	80007a6 <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006c4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006c6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80006ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006ce:	2302      	movs	r3, #2
 80006d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006d6:	2308      	movs	r3, #8
 80006d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006da:	2307      	movs	r3, #7
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80006ea:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 fcdd 	bl	80040b0 <HAL_RCCEx_PeriphCLKConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006fc:	f000 fa52 	bl	8000ba4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000700:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <HAL_ADC_MspInit+0x124>)
 8000702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000704:	4a2b      	ldr	r2, [pc, #172]	@ (80007b4 <HAL_ADC_MspInit+0x124>)
 8000706:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800070a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070c:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <HAL_ADC_MspInit+0x124>)
 800070e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <HAL_ADC_MspInit+0x124>)
 800071a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071c:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <HAL_ADC_MspInit+0x124>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000724:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <HAL_ADC_MspInit+0x124>)
 8000726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = temperature_Pin|light_Pin|GPIO_PIN_4;
 8000730:	2313      	movs	r3, #19
 8000732:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000736:	230b      	movs	r3, #11
 8000738:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000746:	4619      	mov	r1, r3
 8000748:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800074c:	f002 fb26 	bl	8002d9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 8000750:	4b19      	ldr	r3, [pc, #100]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 8000752:	4a1a      	ldr	r2, [pc, #104]	@ (80007bc <HAL_ADC_MspInit+0x12c>)
 8000754:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000756:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 8000758:	2200      	movs	r2, #0
 800075a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800075c:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000762:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800076e:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 8000770:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000774:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000776:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 8000778:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800077c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 8000780:	2220      	movs	r2, #32
 8000782:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800078a:	480b      	ldr	r0, [pc, #44]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 800078c:	f002 f920 	bl	80029d0 <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000796:	f000 fa05 	bl	8000ba4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a06      	ldr	r2, [pc, #24]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 800079e:	64da      	str	r2, [r3, #76]	@ 0x4c
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007a6:	bf00      	nop
 80007a8:	37b0      	adds	r7, #176	@ 0xb0
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	50040000 	.word	0x50040000
 80007b4:	40021000 	.word	0x40021000
 80007b8:	200000e8 	.word	0x200000e8
 80007bc:	40020430 	.word	0x40020430

080007c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c6:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <MX_DMA_Init+0x60>)
 80007c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ca:	4a15      	ldr	r2, [pc, #84]	@ (8000820 <MX_DMA_Init+0x60>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <MX_DMA_Init+0x60>)
 80007d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <MX_DMA_Init+0x60>)
 80007e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000820 <MX_DMA_Init+0x60>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80007ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <MX_DMA_Init+0x60>)
 80007ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	200b      	movs	r0, #11
 80007fc:	f002 f8be 	bl	800297c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000800:	200b      	movs	r0, #11
 8000802:	f002 f8d7 	bl	80029b4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	203a      	movs	r0, #58	@ 0x3a
 800080c:	f002 f8b6 	bl	800297c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000810:	203a      	movs	r0, #58	@ 0x3a
 8000812:	f002 f8cf 	bl	80029b4 <HAL_NVIC_EnableIRQ>

}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000

08000824 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	@ 0x28
 8000828:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	4b3c      	ldr	r3, [pc, #240]	@ (800092c <MX_GPIO_Init+0x108>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a3b      	ldr	r2, [pc, #236]	@ (800092c <MX_GPIO_Init+0x108>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b39      	ldr	r3, [pc, #228]	@ (800092c <MX_GPIO_Init+0x108>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	4b36      	ldr	r3, [pc, #216]	@ (800092c <MX_GPIO_Init+0x108>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a35      	ldr	r2, [pc, #212]	@ (800092c <MX_GPIO_Init+0x108>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b33      	ldr	r3, [pc, #204]	@ (800092c <MX_GPIO_Init+0x108>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b30      	ldr	r3, [pc, #192]	@ (800092c <MX_GPIO_Init+0x108>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4a2f      	ldr	r2, [pc, #188]	@ (800092c <MX_GPIO_Init+0x108>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4b2d      	ldr	r3, [pc, #180]	@ (800092c <MX_GPIO_Init+0x108>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <MX_GPIO_Init+0x108>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4a29      	ldr	r2, [pc, #164]	@ (800092c <MX_GPIO_Init+0x108>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4b27      	ldr	r3, [pc, #156]	@ (800092c <MX_GPIO_Init+0x108>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	4b24      	ldr	r3, [pc, #144]	@ (800092c <MX_GPIO_Init+0x108>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	4a23      	ldr	r2, [pc, #140]	@ (800092c <MX_GPIO_Init+0x108>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a6:	4b21      	ldr	r3, [pc, #132]	@ (800092c <MX_GPIO_Init+0x108>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ultrason_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008bc:	f002 fc18 	bl	80030f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2104      	movs	r1, #4
 80008c4:	481a      	ldr	r0, [pc, #104]	@ (8000930 <MX_GPIO_Init+0x10c>)
 80008c6:	f002 fc13 	bl	80030f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4814      	ldr	r0, [pc, #80]	@ (8000934 <MX_GPIO_Init+0x110>)
 80008e2:	f002 fa5b 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|ultrason_Pin;
 80008e6:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000902:	f002 fa4b 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000906:	2304      	movs	r3, #4
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_GPIO_Init+0x10c>)
 800091e:	f002 fa3d 	bl	8002d9c <HAL_GPIO_Init>

}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	@ 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000
 8000930:	48000c00 	.word	0x48000c00
 8000934:	48000800 	.word	0x48000800

08000938 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800093c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ac <MX_I2C1_Init+0x74>)
 800093e:	4a1c      	ldr	r2, [pc, #112]	@ (80009b0 <MX_I2C1_Init+0x78>)
 8000940:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000942:	4b1a      	ldr	r3, [pc, #104]	@ (80009ac <MX_I2C1_Init+0x74>)
 8000944:	4a1b      	ldr	r2, [pc, #108]	@ (80009b4 <MX_I2C1_Init+0x7c>)
 8000946:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000948:	4b18      	ldr	r3, [pc, #96]	@ (80009ac <MX_I2C1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094e:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <MX_I2C1_Init+0x74>)
 8000950:	2201      	movs	r2, #1
 8000952:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000954:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <MX_I2C1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800095a:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_I2C1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <MX_I2C1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_I2C1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_I2C1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000972:	480e      	ldr	r0, [pc, #56]	@ (80009ac <MX_I2C1_Init+0x74>)
 8000974:	f002 fbd4 	bl	8003120 <HAL_I2C_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800097e:	f000 f911 	bl	8000ba4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000982:	2100      	movs	r1, #0
 8000984:	4809      	ldr	r0, [pc, #36]	@ (80009ac <MX_I2C1_Init+0x74>)
 8000986:	f002 fc66 	bl	8003256 <HAL_I2CEx_ConfigAnalogFilter>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000990:	f000 f908 	bl	8000ba4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000994:	2100      	movs	r1, #0
 8000996:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_I2C1_Init+0x74>)
 8000998:	f002 fca8 	bl	80032ec <HAL_I2CEx_ConfigDigitalFilter>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009a2:	f000 f8ff 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000130 	.word	0x20000130
 80009b0:	40005400 	.word	0x40005400
 80009b4:	10d19ce4 	.word	0x10d19ce4

080009b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b0ac      	sub	sp, #176	@ 0xb0
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2288      	movs	r2, #136	@ 0x88
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f006 fc38 	bl	800724e <memset>
  if(i2cHandle->Instance==I2C1)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a21      	ldr	r2, [pc, #132]	@ (8000a68 <HAL_I2C_MspInit+0xb0>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d13b      	bne.n	8000a60 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009e8:	2340      	movs	r3, #64	@ 0x40
 80009ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 fb5b 	bl	80040b0 <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a00:	f000 f8d0 	bl	8000ba4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a08:	4a18      	ldr	r2, [pc, #96]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a0a:	f043 0302 	orr.w	r3, r3, #2
 8000a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a10:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a24:	2312      	movs	r3, #18
 8000a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a36:	2304      	movs	r3, #4
 8000a38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a40:	4619      	mov	r1, r3
 8000a42:	480b      	ldr	r0, [pc, #44]	@ (8000a70 <HAL_I2C_MspInit+0xb8>)
 8000a44:	f002 f9aa 	bl	8002d9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4c:	4a07      	ldr	r2, [pc, #28]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a52:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a60:	bf00      	nop
 8000a62:	37b0      	adds	r7, #176	@ 0xb0
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	48000400 	.word	0x48000400

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a78:	f000 fee4 	bl	8001844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7c:	f000 f818 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a80:	f7ff fed0 	bl	8000824 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a84:	f7ff fe9c 	bl	80007c0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a88:	f7ff ff56 	bl	8000938 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000a8c:	f7ff fd68 	bl	8000560 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a90:	f000 fb64 	bl	800115c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000a94:	f000 fab6 	bl	8001004 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000a98:	f000 fe16 	bl	80016c8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000a9c:	f000 fbd4 	bl	8001248 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000aa0:	f000 fc9a 	bl	80013d8 <MX_TIM8_Init>
  MX_TIM5_Init();
 8000aa4:	f000 fc48 	bl	8001338 <MX_TIM5_Init>
  MX_SPI3_Init();
 8000aa8:	f000 f882 	bl	8000bb0 <MX_SPI3_Init>

//  int min_pwm=600; //us
//  int max_pwm=2600; //us
//  int pwm_value=min_pwm;
//  int step = 0;
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <main+0x38>

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b096      	sub	sp, #88	@ 0x58
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	2244      	movs	r2, #68	@ 0x44
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f006 fbc5 	bl	800724e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ad2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ad6:	f002 fc63 	bl	80033a0 <HAL_PWREx_ControlVoltageScaling>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ae0:	f000 f860 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aee:	2310      	movs	r3, #16
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af2:	2302      	movs	r3, #2
 8000af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af6:	2302      	movs	r3, #2
 8000af8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000afe:	230a      	movs	r3, #10
 8000b00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b02:	2307      	movs	r3, #7
 8000b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 fc9a 	bl	800344c <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b1e:	f000 f841 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	230f      	movs	r3, #15
 8000b24:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2303      	movs	r3, #3
 8000b28:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b36:	463b      	mov	r3, r7
 8000b38:	2104      	movs	r1, #4
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 f862 	bl	8003c04 <HAL_RCC_ClockConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b46:	f000 f82d 	bl	8000ba4 <Error_Handler>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3758      	adds	r7, #88	@ 0x58
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <_write+0x28>)
 8000b6c:	f005 f9ac 	bl	8005ec8 <HAL_UART_Transmit>
  return len;
 8000b70:	687b      	ldr	r3, [r7, #4]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200003fc 	.word	0x200003fc

08000b80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d101      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b92:	f000 fe77 	bl	8001884 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40000800 	.word	0x40000800

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <Error_Handler+0x8>

08000bb0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c24 <MX_SPI3_Init+0x74>)
 8000bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c28 <MX_SPI3_Init+0x78>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <MX_SPI3_Init+0x74>)
 8000bbc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bc0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc2:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <MX_SPI3_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc8:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <MX_SPI3_Init+0x74>)
 8000bca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000bce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <MX_SPI3_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <MX_SPI3_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <MX_SPI3_Init+0x74>)
 8000bde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000be2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <MX_SPI3_Init+0x74>)
 8000be6:	2238      	movs	r2, #56	@ 0x38
 8000be8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <MX_SPI3_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_SPI3_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <MX_SPI3_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_SPI3_Init+0x74>)
 8000bfe:	2207      	movs	r2, #7
 8000c00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <MX_SPI3_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <MX_SPI3_Init+0x74>)
 8000c0a:	2208      	movs	r2, #8
 8000c0c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <MX_SPI3_Init+0x74>)
 8000c10:	f003 ff0a 	bl	8004a28 <HAL_SPI_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c1a:	f7ff ffc3 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000184 	.word	0x20000184
 8000c28:	40003c00 	.word	0x40003c00

08000c2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	@ 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a17      	ldr	r2, [pc, #92]	@ (8000ca8 <HAL_SPI_MspInit+0x7c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d128      	bne.n	8000ca0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c4e:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <HAL_SPI_MspInit+0x80>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c52:	4a16      	ldr	r2, [pc, #88]	@ (8000cac <HAL_SPI_MspInit+0x80>)
 8000c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c5a:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <HAL_SPI_MspInit+0x80>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <HAL_SPI_MspInit+0x80>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	4a10      	ldr	r2, [pc, #64]	@ (8000cac <HAL_SPI_MspInit+0x80>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <HAL_SPI_MspInit+0x80>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000c7e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c90:	2306      	movs	r3, #6
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <HAL_SPI_MspInit+0x84>)
 8000c9c:	f002 f87e 	bl	8002d9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	@ 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40003c00 	.word	0x40003c00
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	48000800 	.word	0x48000800

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd6:	4a08      	ldr	r2, [pc, #32]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40021000 	.word	0x40021000

08000cfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08e      	sub	sp, #56	@ 0x38
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000d0a:	4b34      	ldr	r3, [pc, #208]	@ (8000ddc <HAL_InitTick+0xe0>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0e:	4a33      	ldr	r2, [pc, #204]	@ (8000ddc <HAL_InitTick+0xe0>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d16:	4b31      	ldr	r3, [pc, #196]	@ (8000ddc <HAL_InitTick+0xe0>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d22:	f107 0210 	add.w	r2, r7, #16
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f003 f92d 	bl	8003f8c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d32:	6a3b      	ldr	r3, [r7, #32]
 8000d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d103      	bne.n	8000d44 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d3c:	f003 f8fa 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 8000d40:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d42:	e004      	b.n	8000d4e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d44:	f003 f8f6 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d50:	4a23      	ldr	r2, [pc, #140]	@ (8000de0 <HAL_InitTick+0xe4>)
 8000d52:	fba2 2303 	umull	r2, r3, r2, r3
 8000d56:	0c9b      	lsrs	r3, r3, #18
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000d5c:	4b21      	ldr	r3, [pc, #132]	@ (8000de4 <HAL_InitTick+0xe8>)
 8000d5e:	4a22      	ldr	r2, [pc, #136]	@ (8000de8 <HAL_InitTick+0xec>)
 8000d60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000d62:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <HAL_InitTick+0xe8>)
 8000d64:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d68:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000de4 <HAL_InitTick+0xe8>)
 8000d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d6e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <HAL_InitTick+0xe8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d76:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <HAL_InitTick+0xe8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7c:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <HAL_InitTick+0xe8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000d82:	4818      	ldr	r0, [pc, #96]	@ (8000de4 <HAL_InitTick+0xe8>)
 8000d84:	f003 fef3 	bl	8004b6e <HAL_TIM_Base_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d8e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d11b      	bne.n	8000dce <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000d96:	4813      	ldr	r0, [pc, #76]	@ (8000de4 <HAL_InitTick+0xe8>)
 8000d98:	f003 ff40 	bl	8004c1c <HAL_TIM_Base_Start_IT>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000da2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d111      	bne.n	8000dce <HAL_InitTick+0xd2>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000daa:	201e      	movs	r0, #30
 8000dac:	f001 fe02 	bl	80029b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b0f      	cmp	r3, #15
 8000db4:	d808      	bhi.n	8000dc8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000db6:	2200      	movs	r2, #0
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	201e      	movs	r0, #30
 8000dbc:	f001 fdde 	bl	800297c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <HAL_InitTick+0xf0>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	e002      	b.n	8000dce <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3738      	adds	r7, #56	@ 0x38
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	431bde83 	.word	0x431bde83
 8000de4:	200001e8 	.word	0x200001e8
 8000de8:	40000800 	.word	0x40000800
 8000dec:	20000004 	.word	0x20000004

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <NMI_Handler+0x4>

08000df8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	volatile uint32_t csfr= SCB->CFSR ; // load into variable
 8000dfe:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <HardFault_Handler+0x1c>)
 8000e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e02:	607b      	str	r3, [r7, #4]
	 printf ( "SCB-> CSFR 0x%08x \n", SCB->CFSR); // print
 8000e04:	4b03      	ldr	r3, [pc, #12]	@ (8000e14 <HardFault_Handler+0x1c>)
 8000e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4803      	ldr	r0, [pc, #12]	@ (8000e18 <HardFault_Handler+0x20>)
 8000e0c:	f006 f9ca 	bl	80071a4 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <HardFault_Handler+0x18>
 8000e14:	e000ed00 	.word	0xe000ed00
 8000e18:	08007e98 	.word	0x08007e98

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <MemManage_Handler+0x4>

08000e24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8000e70:	4802      	ldr	r0, [pc, #8]	@ (8000e7c <DMA1_Channel1_IRQHandler+0x10>)
 8000e72:	f001 fee4 	bl	8002c3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200003b4 	.word	0x200003b4

08000e80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e84:	4802      	ldr	r0, [pc, #8]	@ (8000e90 <TIM4_IRQHandler+0x10>)
 8000e86:	f003 ff9a 	bl	8004dbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001e8 	.word	0x200001e8

08000e94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e98:	4802      	ldr	r0, [pc, #8]	@ (8000ea4 <USART2_IRQHandler+0x10>)
 8000e9a:	f005 f89f 	bl	8005fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200003fc 	.word	0x200003fc

08000ea8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000eac:	4802      	ldr	r0, [pc, #8]	@ (8000eb8 <TIM5_IRQHandler+0x10>)
 8000eae:	f003 ff86 	bl	8004dbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000031c 	.word	0x2000031c

08000ebc <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ec0:	4802      	ldr	r0, [pc, #8]	@ (8000ecc <DMA2_Channel3_IRQHandler+0x10>)
 8000ec2:	f001 febc 	bl	8002c3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200000e8 	.word	0x200000e8

08000ed0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	e00a      	b.n	8000ef8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ee2:	f3af 8000 	nop.w
 8000ee6:	4601      	mov	r1, r0
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	1c5a      	adds	r2, r3, #1
 8000eec:	60ba      	str	r2, [r7, #8]
 8000eee:	b2ca      	uxtb	r2, r1
 8000ef0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	dbf0      	blt.n	8000ee2 <_read+0x12>
  }

  return len;
 8000f00:	687b      	ldr	r3, [r7, #4]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f32:	605a      	str	r2, [r3, #4]
  return 0;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <_isatty>:

int _isatty(int file)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f7c:	4a14      	ldr	r2, [pc, #80]	@ (8000fd0 <_sbrk+0x5c>)
 8000f7e:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <_sbrk+0x60>)
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f88:	4b13      	ldr	r3, [pc, #76]	@ (8000fd8 <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f90:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <_sbrk+0x64>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	@ (8000fdc <_sbrk+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f96:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d207      	bcs.n	8000fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa4:	f006 f9a2 	bl	80072ec <__errno>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	220c      	movs	r2, #12
 8000fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	e009      	b.n	8000fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fba:	4b07      	ldr	r3, [pc, #28]	@ (8000fd8 <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a05      	ldr	r2, [pc, #20]	@ (8000fd8 <_sbrk+0x64>)
 8000fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20018000 	.word	0x20018000
 8000fd4:	00000400 	.word	0x00000400
 8000fd8:	20000234 	.word	0x20000234
 8000fdc:	200005d8 	.word	0x200005d8

08000fe0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <SystemInit+0x20>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fea:	4a05      	ldr	r2, [pc, #20]	@ (8001000 <SystemInit+0x20>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim2_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b09a      	sub	sp, #104	@ 0x68
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001018:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001024:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
 8001034:	615a      	str	r2, [r3, #20]
 8001036:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	222c      	movs	r2, #44	@ 0x2c
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f006 f905 	bl	800724e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001044:	4b43      	ldr	r3, [pc, #268]	@ (8001154 <MX_TIM1_Init+0x150>)
 8001046:	4a44      	ldr	r2, [pc, #272]	@ (8001158 <MX_TIM1_Init+0x154>)
 8001048:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 800104a:	4b42      	ldr	r3, [pc, #264]	@ (8001154 <MX_TIM1_Init+0x150>)
 800104c:	224f      	movs	r2, #79	@ 0x4f
 800104e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b40      	ldr	r3, [pc, #256]	@ (8001154 <MX_TIM1_Init+0x150>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8001056:	4b3f      	ldr	r3, [pc, #252]	@ (8001154 <MX_TIM1_Init+0x150>)
 8001058:	22c7      	movs	r2, #199	@ 0xc7
 800105a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105c:	4b3d      	ldr	r3, [pc, #244]	@ (8001154 <MX_TIM1_Init+0x150>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001062:	4b3c      	ldr	r3, [pc, #240]	@ (8001154 <MX_TIM1_Init+0x150>)
 8001064:	2200      	movs	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001068:	4b3a      	ldr	r3, [pc, #232]	@ (8001154 <MX_TIM1_Init+0x150>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800106e:	4839      	ldr	r0, [pc, #228]	@ (8001154 <MX_TIM1_Init+0x150>)
 8001070:	f003 fd7d 	bl	8004b6e <HAL_TIM_Base_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800107a:	f7ff fd93 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001082:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001084:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001088:	4619      	mov	r1, r3
 800108a:	4832      	ldr	r0, [pc, #200]	@ (8001154 <MX_TIM1_Init+0x150>)
 800108c:	f004 f8ae 	bl	80051ec <HAL_TIM_ConfigClockSource>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001096:	f7ff fd85 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800109a:	482e      	ldr	r0, [pc, #184]	@ (8001154 <MX_TIM1_Init+0x150>)
 800109c:	f003 fe2e 	bl	8004cfc <HAL_TIM_PWM_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80010a6:	f7ff fd7d 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010b6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010ba:	4619      	mov	r1, r3
 80010bc:	4825      	ldr	r0, [pc, #148]	@ (8001154 <MX_TIM1_Init+0x150>)
 80010be:	f004 fd91 	bl	8005be4 <HAL_TIMEx_MasterConfigSynchronization>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80010c8:	f7ff fd6c 	bl	8000ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010cc:	2360      	movs	r3, #96	@ 0x60
 80010ce:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 100;
 80010d0:	2364      	movs	r3, #100	@ 0x64
 80010d2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010d8:	2300      	movs	r3, #0
 80010da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010ec:	2200      	movs	r2, #0
 80010ee:	4619      	mov	r1, r3
 80010f0:	4818      	ldr	r0, [pc, #96]	@ (8001154 <MX_TIM1_Init+0x150>)
 80010f2:	f003 ff67 	bl	8004fc4 <HAL_TIM_PWM_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80010fc:	f7ff fd52 	bl	8000ba4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001114:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001118:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001122:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	4807      	ldr	r0, [pc, #28]	@ (8001154 <MX_TIM1_Init+0x150>)
 8001136:	f004 fddd 	bl	8005cf4 <HAL_TIMEx_ConfigBreakDeadTime>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001140:	f7ff fd30 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001144:	4803      	ldr	r0, [pc, #12]	@ (8001154 <MX_TIM1_Init+0x150>)
 8001146:	f000 fa3f 	bl	80015c8 <HAL_TIM_MspPostInit>

}
 800114a:	bf00      	nop
 800114c:	3768      	adds	r7, #104	@ 0x68
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000238 	.word	0x20000238
 8001158:	40012c00 	.word	0x40012c00

0800115c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08e      	sub	sp, #56	@ 0x38
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800118e:	4b2d      	ldr	r3, [pc, #180]	@ (8001244 <MX_TIM2_Init+0xe8>)
 8001190:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001194:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001196:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <MX_TIM2_Init+0xe8>)
 8001198:	2200      	movs	r2, #0
 800119a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b29      	ldr	r3, [pc, #164]	@ (8001244 <MX_TIM2_Init+0xe8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80011a2:	4b28      	ldr	r3, [pc, #160]	@ (8001244 <MX_TIM2_Init+0xe8>)
 80011a4:	2264      	movs	r2, #100	@ 0x64
 80011a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b26      	ldr	r3, [pc, #152]	@ (8001244 <MX_TIM2_Init+0xe8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ae:	4b25      	ldr	r3, [pc, #148]	@ (8001244 <MX_TIM2_Init+0xe8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b4:	4823      	ldr	r0, [pc, #140]	@ (8001244 <MX_TIM2_Init+0xe8>)
 80011b6:	f003 fcda 	bl	8004b6e <HAL_TIM_Base_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80011c0:	f7ff fcf0 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ce:	4619      	mov	r1, r3
 80011d0:	481c      	ldr	r0, [pc, #112]	@ (8001244 <MX_TIM2_Init+0xe8>)
 80011d2:	f004 f80b 	bl	80051ec <HAL_TIM_ConfigClockSource>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80011dc:	f7ff fce2 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011e0:	4818      	ldr	r0, [pc, #96]	@ (8001244 <MX_TIM2_Init+0xe8>)
 80011e2:	f003 fd8b 	bl	8004cfc <HAL_TIM_PWM_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80011ec:	f7ff fcda 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	4811      	ldr	r0, [pc, #68]	@ (8001244 <MX_TIM2_Init+0xe8>)
 8001200:	f004 fcf0 	bl	8005be4 <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800120a:	f7ff fccb 	bl	8000ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120e:	2360      	movs	r3, #96	@ 0x60
 8001210:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800121e:	463b      	mov	r3, r7
 8001220:	2208      	movs	r2, #8
 8001222:	4619      	mov	r1, r3
 8001224:	4807      	ldr	r0, [pc, #28]	@ (8001244 <MX_TIM2_Init+0xe8>)
 8001226:	f003 fecd 	bl	8004fc4 <HAL_TIM_PWM_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001230:	f7ff fcb8 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001234:	4803      	ldr	r0, [pc, #12]	@ (8001244 <MX_TIM2_Init+0xe8>)
 8001236:	f000 f9c7 	bl	80015c8 <HAL_TIM_MspPostInit>

}
 800123a:	bf00      	nop
 800123c:	3738      	adds	r7, #56	@ 0x38
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000284 	.word	0x20000284

08001248 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	@ 0x38
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]
 8001276:	615a      	str	r2, [r3, #20]
 8001278:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800127a:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <MX_TIM3_Init+0xe8>)
 800127c:	4a2d      	ldr	r2, [pc, #180]	@ (8001334 <MX_TIM3_Init+0xec>)
 800127e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8001280:	4b2b      	ldr	r3, [pc, #172]	@ (8001330 <MX_TIM3_Init+0xe8>)
 8001282:	224f      	movs	r2, #79	@ 0x4f
 8001284:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b2a      	ldr	r3, [pc, #168]	@ (8001330 <MX_TIM3_Init+0xe8>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800128c:	4b28      	ldr	r3, [pc, #160]	@ (8001330 <MX_TIM3_Init+0xe8>)
 800128e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001292:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <MX_TIM3_Init+0xe8>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b25      	ldr	r3, [pc, #148]	@ (8001330 <MX_TIM3_Init+0xe8>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012a0:	4823      	ldr	r0, [pc, #140]	@ (8001330 <MX_TIM3_Init+0xe8>)
 80012a2:	f003 fc64 	bl	8004b6e <HAL_TIM_Base_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012ac:	f7ff fc7a 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ba:	4619      	mov	r1, r3
 80012bc:	481c      	ldr	r0, [pc, #112]	@ (8001330 <MX_TIM3_Init+0xe8>)
 80012be:	f003 ff95 	bl	80051ec <HAL_TIM_ConfigClockSource>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012c8:	f7ff fc6c 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012cc:	4818      	ldr	r0, [pc, #96]	@ (8001330 <MX_TIM3_Init+0xe8>)
 80012ce:	f003 fd15 	bl	8004cfc <HAL_TIM_PWM_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80012d8:	f7ff fc64 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	4811      	ldr	r0, [pc, #68]	@ (8001330 <MX_TIM3_Init+0xe8>)
 80012ec:	f004 fc7a 	bl	8005be4 <HAL_TIMEx_MasterConfigSynchronization>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012f6:	f7ff fc55 	bl	8000ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fa:	2360      	movs	r3, #96	@ 0x60
 80012fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	2204      	movs	r2, #4
 800130e:	4619      	mov	r1, r3
 8001310:	4807      	ldr	r0, [pc, #28]	@ (8001330 <MX_TIM3_Init+0xe8>)
 8001312:	f003 fe57 	bl	8004fc4 <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800131c:	f7ff fc42 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001320:	4803      	ldr	r0, [pc, #12]	@ (8001330 <MX_TIM3_Init+0xe8>)
 8001322:	f000 f951 	bl	80015c8 <HAL_TIM_MspPostInit>

}
 8001326:	bf00      	nop
 8001328:	3738      	adds	r7, #56	@ 0x38
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200002d0 	.word	0x200002d0
 8001334:	40000400 	.word	0x40000400

08001338 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001356:	4b1e      	ldr	r3, [pc, #120]	@ (80013d0 <MX_TIM5_Init+0x98>)
 8001358:	4a1e      	ldr	r2, [pc, #120]	@ (80013d4 <MX_TIM5_Init+0x9c>)
 800135a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8000-1;
 800135c:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <MX_TIM5_Init+0x98>)
 800135e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001362:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <MX_TIM5_Init+0x98>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3000;
 800136a:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <MX_TIM5_Init+0x98>)
 800136c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001370:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001372:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <MX_TIM5_Init+0x98>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001378:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <MX_TIM5_Init+0x98>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800137e:	4814      	ldr	r0, [pc, #80]	@ (80013d0 <MX_TIM5_Init+0x98>)
 8001380:	f003 fbf5 	bl	8004b6e <HAL_TIM_Base_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800138a:	f7ff fc0b 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001392:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4619      	mov	r1, r3
 800139a:	480d      	ldr	r0, [pc, #52]	@ (80013d0 <MX_TIM5_Init+0x98>)
 800139c:	f003 ff26 	bl	80051ec <HAL_TIM_ConfigClockSource>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80013a6:	f7ff fbfd 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	4619      	mov	r1, r3
 80013b6:	4806      	ldr	r0, [pc, #24]	@ (80013d0 <MX_TIM5_Init+0x98>)
 80013b8:	f004 fc14 	bl	8005be4 <HAL_TIMEx_MasterConfigSynchronization>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80013c2:	f7ff fbef 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	3720      	adds	r7, #32
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000031c 	.word	0x2000031c
 80013d4:	40000c00 	.word	0x40000c00

080013d8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013de:	f107 0310 	add.w	r3, r7, #16
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013f6:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <MX_TIM8_Init+0xa0>)
 80013f8:	4a20      	ldr	r2, [pc, #128]	@ (800147c <MX_TIM8_Init+0xa4>)
 80013fa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 80-1;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <MX_TIM8_Init+0xa0>)
 80013fe:	224f      	movs	r2, #79	@ 0x4f
 8001400:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001402:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <MX_TIM8_Init+0xa0>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <MX_TIM8_Init+0xa0>)
 800140a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800140e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001410:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <MX_TIM8_Init+0xa0>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001416:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <MX_TIM8_Init+0xa0>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <MX_TIM8_Init+0xa0>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001422:	4815      	ldr	r0, [pc, #84]	@ (8001478 <MX_TIM8_Init+0xa0>)
 8001424:	f003 fba3 	bl	8004b6e <HAL_TIM_Base_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800142e:	f7ff fbb9 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001432:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001436:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	4619      	mov	r1, r3
 800143e:	480e      	ldr	r0, [pc, #56]	@ (8001478 <MX_TIM8_Init+0xa0>)
 8001440:	f003 fed4 	bl	80051ec <HAL_TIM_ConfigClockSource>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800144a:	f7ff fbab 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	4619      	mov	r1, r3
 800145e:	4806      	ldr	r0, [pc, #24]	@ (8001478 <MX_TIM8_Init+0xa0>)
 8001460:	f004 fbc0 	bl	8005be4 <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800146a:	f7ff fb9b 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	3720      	adds	r7, #32
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000368 	.word	0x20000368
 800147c:	40013400 	.word	0x40013400

08001480 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a47      	ldr	r2, [pc, #284]	@ (80015ac <HAL_TIM_Base_MspInit+0x12c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d10c      	bne.n	80014ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001492:	4b47      	ldr	r3, [pc, #284]	@ (80015b0 <HAL_TIM_Base_MspInit+0x130>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001496:	4a46      	ldr	r2, [pc, #280]	@ (80015b0 <HAL_TIM_Base_MspInit+0x130>)
 8001498:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800149c:	6613      	str	r3, [r2, #96]	@ 0x60
 800149e:	4b44      	ldr	r3, [pc, #272]	@ (80015b0 <HAL_TIM_Base_MspInit+0x130>)
 80014a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80014aa:	e07a      	b.n	80015a2 <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014b4:	d138      	bne.n	8001528 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b6:	4b3e      	ldr	r3, [pc, #248]	@ (80015b0 <HAL_TIM_Base_MspInit+0x130>)
 80014b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ba:	4a3d      	ldr	r2, [pc, #244]	@ (80015b0 <HAL_TIM_Base_MspInit+0x130>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014c2:	4b3b      	ldr	r3, [pc, #236]	@ (80015b0 <HAL_TIM_Base_MspInit+0x130>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	61bb      	str	r3, [r7, #24]
 80014cc:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 80014ce:	4b39      	ldr	r3, [pc, #228]	@ (80015b4 <HAL_TIM_Base_MspInit+0x134>)
 80014d0:	4a39      	ldr	r2, [pc, #228]	@ (80015b8 <HAL_TIM_Base_MspInit+0x138>)
 80014d2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 80014d4:	4b37      	ldr	r3, [pc, #220]	@ (80015b4 <HAL_TIM_Base_MspInit+0x134>)
 80014d6:	2204      	movs	r2, #4
 80014d8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014da:	4b36      	ldr	r3, [pc, #216]	@ (80015b4 <HAL_TIM_Base_MspInit+0x134>)
 80014dc:	2210      	movs	r2, #16
 80014de:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e0:	4b34      	ldr	r3, [pc, #208]	@ (80015b4 <HAL_TIM_Base_MspInit+0x134>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80014e6:	4b33      	ldr	r3, [pc, #204]	@ (80015b4 <HAL_TIM_Base_MspInit+0x134>)
 80014e8:	2280      	movs	r2, #128	@ 0x80
 80014ea:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014ec:	4b31      	ldr	r3, [pc, #196]	@ (80015b4 <HAL_TIM_Base_MspInit+0x134>)
 80014ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014f2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014f4:	4b2f      	ldr	r3, [pc, #188]	@ (80015b4 <HAL_TIM_Base_MspInit+0x134>)
 80014f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014fa:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80014fc:	4b2d      	ldr	r3, [pc, #180]	@ (80015b4 <HAL_TIM_Base_MspInit+0x134>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001502:	4b2c      	ldr	r3, [pc, #176]	@ (80015b4 <HAL_TIM_Base_MspInit+0x134>)
 8001504:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001508:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800150a:	482a      	ldr	r0, [pc, #168]	@ (80015b4 <HAL_TIM_Base_MspInit+0x134>)
 800150c:	f001 fa60 	bl	80029d0 <HAL_DMA_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_TIM_Base_MspInit+0x9a>
      Error_Handler();
 8001516:	f7ff fb45 	bl	8000ba4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a25      	ldr	r2, [pc, #148]	@ (80015b4 <HAL_TIM_Base_MspInit+0x134>)
 800151e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001520:	4a24      	ldr	r2, [pc, #144]	@ (80015b4 <HAL_TIM_Base_MspInit+0x134>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001526:	e03c      	b.n	80015a2 <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM3)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a23      	ldr	r2, [pc, #140]	@ (80015bc <HAL_TIM_Base_MspInit+0x13c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d10c      	bne.n	800154c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001532:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <HAL_TIM_Base_MspInit+0x130>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001536:	4a1e      	ldr	r2, [pc, #120]	@ (80015b0 <HAL_TIM_Base_MspInit+0x130>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6593      	str	r3, [r2, #88]	@ 0x58
 800153e:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <HAL_TIM_Base_MspInit+0x130>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697b      	ldr	r3, [r7, #20]
}
 800154a:	e02a      	b.n	80015a2 <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM5)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a1b      	ldr	r2, [pc, #108]	@ (80015c0 <HAL_TIM_Base_MspInit+0x140>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d114      	bne.n	8001580 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <HAL_TIM_Base_MspInit+0x130>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155a:	4a15      	ldr	r2, [pc, #84]	@ (80015b0 <HAL_TIM_Base_MspInit+0x130>)
 800155c:	f043 0308 	orr.w	r3, r3, #8
 8001560:	6593      	str	r3, [r2, #88]	@ 0x58
 8001562:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <HAL_TIM_Base_MspInit+0x130>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2032      	movs	r0, #50	@ 0x32
 8001574:	f001 fa02 	bl	800297c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001578:	2032      	movs	r0, #50	@ 0x32
 800157a:	f001 fa1b 	bl	80029b4 <HAL_NVIC_EnableIRQ>
}
 800157e:	e010      	b.n	80015a2 <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM8)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0f      	ldr	r2, [pc, #60]	@ (80015c4 <HAL_TIM_Base_MspInit+0x144>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d10b      	bne.n	80015a2 <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <HAL_TIM_Base_MspInit+0x130>)
 800158c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800158e:	4a08      	ldr	r2, [pc, #32]	@ (80015b0 <HAL_TIM_Base_MspInit+0x130>)
 8001590:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001594:	6613      	str	r3, [r2, #96]	@ 0x60
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_TIM_Base_MspInit+0x130>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
}
 80015a2:	bf00      	nop
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40012c00 	.word	0x40012c00
 80015b0:	40021000 	.word	0x40021000
 80015b4:	200003b4 	.word	0x200003b4
 80015b8:	40020008 	.word	0x40020008
 80015bc:	40000400 	.word	0x40000400
 80015c0:	40000c00 	.word	0x40000c00
 80015c4:	40013400 	.word	0x40013400

080015c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	@ 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a34      	ldr	r2, [pc, #208]	@ (80016b8 <HAL_TIM_MspPostInit+0xf0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d11e      	bne.n	8001628 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b34      	ldr	r3, [pc, #208]	@ (80016bc <HAL_TIM_MspPostInit+0xf4>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	4a33      	ldr	r2, [pc, #204]	@ (80016bc <HAL_TIM_MspPostInit+0xf4>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f6:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <HAL_TIM_MspPostInit+0xf4>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001602:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001614:	2301      	movs	r3, #1
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001622:	f001 fbbb 	bl	8002d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001626:	e043      	b.n	80016b0 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001630:	d11d      	bne.n	800166e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <HAL_TIM_MspPostInit+0xf4>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	4a21      	ldr	r2, [pc, #132]	@ (80016bc <HAL_TIM_MspPostInit+0xf4>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800163e:	4b1f      	ldr	r3, [pc, #124]	@ (80016bc <HAL_TIM_MspPostInit+0xf4>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800164a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800165c:	2301      	movs	r3, #1
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4816      	ldr	r0, [pc, #88]	@ (80016c0 <HAL_TIM_MspPostInit+0xf8>)
 8001668:	f001 fb98 	bl	8002d9c <HAL_GPIO_Init>
}
 800166c:	e020      	b.n	80016b0 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM3)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a14      	ldr	r2, [pc, #80]	@ (80016c4 <HAL_TIM_MspPostInit+0xfc>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d11b      	bne.n	80016b0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001678:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <HAL_TIM_MspPostInit+0xf4>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167c:	4a0f      	ldr	r2, [pc, #60]	@ (80016bc <HAL_TIM_MspPostInit+0xf4>)
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001684:	4b0d      	ldr	r3, [pc, #52]	@ (80016bc <HAL_TIM_MspPostInit+0xf4>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001690:	2320      	movs	r3, #32
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016a0:	2302      	movs	r3, #2
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <HAL_TIM_MspPostInit+0xf8>)
 80016ac:	f001 fb76 	bl	8002d9c <HAL_GPIO_Init>
}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	@ 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40012c00 	.word	0x40012c00
 80016bc:	40021000 	.word	0x40021000
 80016c0:	48000400 	.word	0x48000400
 80016c4:	40000400 	.word	0x40000400

080016c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016cc:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <MX_USART2_UART_Init+0x58>)
 80016ce:	4a15      	ldr	r2, [pc, #84]	@ (8001724 <MX_USART2_UART_Init+0x5c>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016d2:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <MX_USART2_UART_Init+0x58>)
 80016d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <MX_USART2_UART_Init+0x58>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <MX_USART2_UART_Init+0x58>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <MX_USART2_UART_Init+0x58>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <MX_USART2_UART_Init+0x58>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <MX_USART2_UART_Init+0x58>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <MX_USART2_UART_Init+0x58>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <MX_USART2_UART_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <MX_USART2_UART_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <MX_USART2_UART_Init+0x58>)
 800170c:	f004 fb8e 	bl	8005e2c <HAL_UART_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001716:	f7ff fa45 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200003fc 	.word	0x200003fc
 8001724:	40004400 	.word	0x40004400

08001728 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b0ac      	sub	sp, #176	@ 0xb0
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2288      	movs	r2, #136	@ 0x88
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f005 fd80 	bl	800724e <memset>
  if(uartHandle->Instance==USART2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a25      	ldr	r2, [pc, #148]	@ (80017e8 <HAL_UART_MspInit+0xc0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d143      	bne.n	80017e0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001758:	2302      	movs	r3, #2
 800175a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800175c:	2300      	movs	r3, #0
 800175e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fca3 	bl	80040b0 <HAL_RCCEx_PeriphCLKConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001770:	f7ff fa18 	bl	8000ba4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001774:	4b1d      	ldr	r3, [pc, #116]	@ (80017ec <HAL_UART_MspInit+0xc4>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001778:	4a1c      	ldr	r2, [pc, #112]	@ (80017ec <HAL_UART_MspInit+0xc4>)
 800177a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800177e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001780:	4b1a      	ldr	r3, [pc, #104]	@ (80017ec <HAL_UART_MspInit+0xc4>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b17      	ldr	r3, [pc, #92]	@ (80017ec <HAL_UART_MspInit+0xc4>)
 800178e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001790:	4a16      	ldr	r2, [pc, #88]	@ (80017ec <HAL_UART_MspInit+0xc4>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001798:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <HAL_UART_MspInit+0xc4>)
 800179a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017a4:	230c      	movs	r3, #12
 80017a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017bc:	2307      	movs	r3, #7
 80017be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017c6:	4619      	mov	r1, r3
 80017c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017cc:	f001 fae6 	bl	8002d9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	2026      	movs	r0, #38	@ 0x26
 80017d6:	f001 f8d1 	bl	800297c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017da:	2026      	movs	r0, #38	@ 0x26
 80017dc:	f001 f8ea 	bl	80029b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017e0:	bf00      	nop
 80017e2:	37b0      	adds	r7, #176	@ 0xb0
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40004400 	.word	0x40004400
 80017ec:	40021000 	.word	0x40021000

080017f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001828 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f4:	f7ff fbf4 	bl	8000fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f8:	480c      	ldr	r0, [pc, #48]	@ (800182c <LoopForever+0x6>)
  ldr r1, =_edata
 80017fa:	490d      	ldr	r1, [pc, #52]	@ (8001830 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <LoopForever+0xe>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001810:	4c0a      	ldr	r4, [pc, #40]	@ (800183c <LoopForever+0x16>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181e:	f005 fd6b 	bl	80072f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001822:	f7ff f927 	bl	8000a74 <main>

08001826 <LoopForever>:

LoopForever:
    b LoopForever
 8001826:	e7fe      	b.n	8001826 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001828:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001834:	08007f38 	.word	0x08007f38
  ldr r2, =_sbss
 8001838:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800183c:	200005d4 	.word	0x200005d4

08001840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC1_2_IRQHandler>
	...

08001844 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800184e:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <HAL_Init+0x3c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a0b      	ldr	r2, [pc, #44]	@ (8001880 <HAL_Init+0x3c>)
 8001854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001858:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185a:	2003      	movs	r0, #3
 800185c:	f001 f883 	bl	8002966 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001860:	200f      	movs	r0, #15
 8001862:	f7ff fa4b 	bl	8000cfc <HAL_InitTick>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	71fb      	strb	r3, [r7, #7]
 8001870:	e001      	b.n	8001876 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001872:	f7ff fa1f 	bl	8000cb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001876:	79fb      	ldrb	r3, [r7, #7]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40022000 	.word	0x40022000

08001884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001888:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_IncTick+0x20>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <HAL_IncTick+0x24>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <HAL_IncTick+0x24>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008
 80018a8:	20000484 	.word	0x20000484

080018ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b03      	ldr	r3, [pc, #12]	@ (80018c0 <HAL_GetTick+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000484 	.word	0x20000484

080018c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	609a      	str	r2, [r3, #8]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	609a      	str	r2, [r3, #8]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3360      	adds	r3, #96	@ 0x60
 800193e:	461a      	mov	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <LL_ADC_SetOffset+0x44>)
 800194e:	4013      	ands	r3, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	4313      	orrs	r3, r2
 800195c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001964:	bf00      	nop
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	03fff000 	.word	0x03fff000

08001974 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3360      	adds	r3, #96	@ 0x60
 8001982:	461a      	mov	r2, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3360      	adds	r3, #96	@ 0x60
 80019b0:	461a      	mov	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	431a      	orrs	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019ca:	bf00      	nop
 80019cc:	371c      	adds	r7, #28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b087      	sub	sp, #28
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3330      	adds	r3, #48	@ 0x30
 80019e6:	461a      	mov	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	4413      	add	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	211f      	movs	r1, #31
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	401a      	ands	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	0e9b      	lsrs	r3, r3, #26
 8001a0e:	f003 011f 	and.w	r1, r3, #31
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a22:	bf00      	nop
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b087      	sub	sp, #28
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3314      	adds	r3, #20
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	0e5b      	lsrs	r3, r3, #25
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	4413      	add	r3, r2
 8001a4c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	0d1b      	lsrs	r3, r3, #20
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	2107      	movs	r1, #7
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	401a      	ands	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	0d1b      	lsrs	r3, r3, #20
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	431a      	orrs	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a78:	bf00      	nop
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f003 0318 	and.w	r3, r3, #24
 8001aa6:	4908      	ldr	r1, [pc, #32]	@ (8001ac8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001aa8:	40d9      	lsrs	r1, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	400b      	ands	r3, r1
 8001aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	0007ffff 	.word	0x0007ffff

08001acc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001adc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6093      	str	r3, [r2, #8]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b04:	d101      	bne.n	8001b0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b54:	d101      	bne.n	8001b5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <LL_ADC_IsEnabled+0x18>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <LL_ADC_IsEnabled+0x1a>
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d101      	bne.n	8001ba6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d101      	bne.n	8001bcc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b089      	sub	sp, #36	@ 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e130      	b.n	8001e58 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7fe fd43 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff67 	bl	8001af0 <LL_ADC_IsDeepPowerDownEnabled>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d004      	beq.n	8001c32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff4d 	bl	8001acc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff82 	bl	8001b40 <LL_ADC_IsInternalRegulatorEnabled>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d115      	bne.n	8001c6e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff66 	bl	8001b18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c4c:	4b84      	ldr	r3, [pc, #528]	@ (8001e60 <HAL_ADC_Init+0x284>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	099b      	lsrs	r3, r3, #6
 8001c52:	4a84      	ldr	r2, [pc, #528]	@ (8001e64 <HAL_ADC_Init+0x288>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	099b      	lsrs	r3, r3, #6
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c60:	e002      	b.n	8001c68 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f9      	bne.n	8001c62 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff64 	bl	8001b40 <LL_ADC_IsInternalRegulatorEnabled>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10d      	bne.n	8001c9a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c82:	f043 0210 	orr.w	r2, r3, #16
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8e:	f043 0201 	orr.w	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff75 	bl	8001b8e <LL_ADC_REG_IsConversionOngoing>
 8001ca4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 80c9 	bne.w	8001e46 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f040 80c5 	bne.w	8001e46 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001cc4:	f043 0202 	orr.w	r2, r3, #2
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff49 	bl	8001b68 <LL_ADC_IsEnabled>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d115      	bne.n	8001d08 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cdc:	4862      	ldr	r0, [pc, #392]	@ (8001e68 <HAL_ADC_Init+0x28c>)
 8001cde:	f7ff ff43 	bl	8001b68 <LL_ADC_IsEnabled>
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	4861      	ldr	r0, [pc, #388]	@ (8001e6c <HAL_ADC_Init+0x290>)
 8001ce6:	f7ff ff3f 	bl	8001b68 <LL_ADC_IsEnabled>
 8001cea:	4603      	mov	r3, r0
 8001cec:	431c      	orrs	r4, r3
 8001cee:	4860      	ldr	r0, [pc, #384]	@ (8001e70 <HAL_ADC_Init+0x294>)
 8001cf0:	f7ff ff3a 	bl	8001b68 <LL_ADC_IsEnabled>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4323      	orrs	r3, r4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4619      	mov	r1, r3
 8001d02:	485c      	ldr	r0, [pc, #368]	@ (8001e74 <HAL_ADC_Init+0x298>)
 8001d04:	f7ff fdde 	bl	80018c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	7e5b      	ldrb	r3, [r3, #25]
 8001d0c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d12:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d18:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d1e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d26:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d106      	bne.n	8001d44 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	045b      	lsls	r3, r3, #17
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d009      	beq.n	8001d60 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d50:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d58:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	4b44      	ldr	r3, [pc, #272]	@ (8001e78 <HAL_ADC_Init+0x29c>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	69b9      	ldr	r1, [r7, #24]
 8001d70:	430b      	orrs	r3, r1
 8001d72:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff1b 	bl	8001bb4 <LL_ADC_INJ_IsConversionOngoing>
 8001d7e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d13d      	bne.n	8001e02 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d13a      	bne.n	8001e02 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d90:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d98:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001da8:	f023 0302 	bic.w	r3, r3, #2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	69b9      	ldr	r1, [r7, #24]
 8001db2:	430b      	orrs	r3, r1
 8001db4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d118      	bne.n	8001df2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001dca:	f023 0304 	bic.w	r3, r3, #4
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001dd6:	4311      	orrs	r1, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ddc:	4311      	orrs	r1, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001de2:	430a      	orrs	r2, r1
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	611a      	str	r2, [r3, #16]
 8001df0:	e007      	b.n	8001e02 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0201 	bic.w	r2, r2, #1
 8001e00:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d10c      	bne.n	8001e24 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	f023 010f 	bic.w	r1, r3, #15
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	1e5a      	subs	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e22:	e007      	b.n	8001e34 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 020f 	bic.w	r2, r2, #15
 8001e32:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e38:	f023 0303 	bic.w	r3, r3, #3
 8001e3c:	f043 0201 	orr.w	r2, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e44:	e007      	b.n	8001e56 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4a:	f043 0210 	orr.w	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e56:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3724      	adds	r7, #36	@ 0x24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd90      	pop	{r4, r7, pc}
 8001e60:	20000000 	.word	0x20000000
 8001e64:	053e2d63 	.word	0x053e2d63
 8001e68:	50040000 	.word	0x50040000
 8001e6c:	50040100 	.word	0x50040100
 8001e70:	50040200 	.word	0x50040200
 8001e74:	50040300 	.word	0x50040300
 8001e78:	fff0c007 	.word	0xfff0c007

08001e7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b0b6      	sub	sp, #216	@ 0xd8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x22>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e3c9      	b.n	8002632 <HAL_ADC_ConfigChannel+0x7b6>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fe6f 	bl	8001b8e <LL_ADC_REG_IsConversionOngoing>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 83aa 	bne.w	800260c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b05      	cmp	r3, #5
 8001ec6:	d824      	bhi.n	8001f12 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	3b02      	subs	r3, #2
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d81b      	bhi.n	8001f0a <HAL_ADC_ConfigChannel+0x8e>
 8001ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed8 <HAL_ADC_ConfigChannel+0x5c>)
 8001ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed8:	08001ee9 	.word	0x08001ee9
 8001edc:	08001ef1 	.word	0x08001ef1
 8001ee0:	08001ef9 	.word	0x08001ef9
 8001ee4:	08001f01 	.word	0x08001f01
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001ee8:	230c      	movs	r3, #12
 8001eea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001eee:	e010      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001ef0:	2312      	movs	r3, #18
 8001ef2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ef6:	e00c      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001ef8:	2318      	movs	r3, #24
 8001efa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001efe:	e008      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001f00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f08:	e003      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001f0a:	2306      	movs	r3, #6
 8001f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f10:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001f20:	f7ff fd59 	bl	80019d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fe30 	bl	8001b8e <LL_ADC_REG_IsConversionOngoing>
 8001f2e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fe3c 	bl	8001bb4 <LL_ADC_INJ_IsConversionOngoing>
 8001f3c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f040 81a4 	bne.w	8002292 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f040 819f 	bne.w	8002292 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	461a      	mov	r2, r3
 8001f62:	f7ff fd64 	bl	8001a2e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	08db      	lsrs	r3, r3, #3
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d00a      	beq.n	8001f9e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	6919      	ldr	r1, [r3, #16]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f98:	f7ff fcc8 	bl	800192c <LL_ADC_SetOffset>
 8001f9c:	e179      	b.n	8002292 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fce5 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10a      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x14e>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fcda 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	0e9b      	lsrs	r3, r3, #26
 8001fc4:	f003 021f 	and.w	r2, r3, #31
 8001fc8:	e01e      	b.n	8002008 <HAL_ADC_ConfigChannel+0x18c>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fccf 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fe8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001fec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ff0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001ff8:	2320      	movs	r3, #32
 8001ffa:	e004      	b.n	8002006 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001ffc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002000:	fab3 f383 	clz	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x1a4>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0e9b      	lsrs	r3, r3, #26
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	e018      	b.n	8002052 <HAL_ADC_ConfigChannel+0x1d6>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002034:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002038:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800203c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002044:	2320      	movs	r3, #32
 8002046:	e004      	b.n	8002052 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002048:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002052:	429a      	cmp	r2, r3
 8002054:	d106      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fc9e 	bl	80019a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2101      	movs	r1, #1
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fc82 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8002070:	4603      	mov	r3, r0
 8002072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10a      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x214>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2101      	movs	r1, #1
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fc77 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8002086:	4603      	mov	r3, r0
 8002088:	0e9b      	lsrs	r3, r3, #26
 800208a:	f003 021f 	and.w	r2, r3, #31
 800208e:	e01e      	b.n	80020ce <HAL_ADC_ConfigChannel+0x252>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2101      	movs	r1, #1
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fc6c 	bl	8001974 <LL_ADC_GetOffsetChannel>
 800209c:	4603      	mov	r3, r0
 800209e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80020ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80020b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80020be:	2320      	movs	r3, #32
 80020c0:	e004      	b.n	80020cc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80020c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d105      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x26a>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	0e9b      	lsrs	r3, r3, #26
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	e018      	b.n	8002118 <HAL_ADC_ConfigChannel+0x29c>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80020fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002102:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800210a:	2320      	movs	r3, #32
 800210c:	e004      	b.n	8002118 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800210e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002118:	429a      	cmp	r2, r3
 800211a:	d106      	bne.n	800212a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2200      	movs	r2, #0
 8002122:	2101      	movs	r1, #1
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fc3b 	bl	80019a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2102      	movs	r1, #2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fc1f 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x2da>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2102      	movs	r1, #2
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fc14 	bl	8001974 <LL_ADC_GetOffsetChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	0e9b      	lsrs	r3, r3, #26
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	e01e      	b.n	8002194 <HAL_ADC_ConfigChannel+0x318>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2102      	movs	r1, #2
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fc09 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8002162:	4603      	mov	r3, r0
 8002164:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002174:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002178:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800217c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002184:	2320      	movs	r3, #32
 8002186:	e004      	b.n	8002192 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002188:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219c:	2b00      	cmp	r3, #0
 800219e:	d105      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x330>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	e014      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x35a>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80021ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80021c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80021c8:	2320      	movs	r3, #32
 80021ca:	e004      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80021cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d106      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2200      	movs	r2, #0
 80021e0:	2102      	movs	r1, #2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fbdc 	bl	80019a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2103      	movs	r1, #3
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fbc0 	bl	8001974 <LL_ADC_GetOffsetChannel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10a      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x398>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2103      	movs	r1, #3
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fbb5 	bl	8001974 <LL_ADC_GetOffsetChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	0e9b      	lsrs	r3, r3, #26
 800220e:	f003 021f 	and.w	r2, r3, #31
 8002212:	e017      	b.n	8002244 <HAL_ADC_ConfigChannel+0x3c8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2103      	movs	r1, #3
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fbaa 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8002220:	4603      	mov	r3, r0
 8002222:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800222c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800222e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002230:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002236:	2320      	movs	r3, #32
 8002238:	e003      	b.n	8002242 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800223a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224c:	2b00      	cmp	r3, #0
 800224e:	d105      	bne.n	800225c <HAL_ADC_ConfigChannel+0x3e0>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	0e9b      	lsrs	r3, r3, #26
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	e011      	b.n	8002280 <HAL_ADC_ConfigChannel+0x404>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800226a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800226c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800226e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002274:	2320      	movs	r3, #32
 8002276:	e003      	b.n	8002280 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002278:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002280:	429a      	cmp	r2, r3
 8002282:	d106      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2200      	movs	r2, #0
 800228a:	2103      	movs	r1, #3
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fb87 	bl	80019a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fc66 	bl	8001b68 <LL_ADC_IsEnabled>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f040 8140 	bne.w	8002524 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	6819      	ldr	r1, [r3, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	461a      	mov	r2, r3
 80022b2:	f7ff fbe7 	bl	8001a84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	4a8f      	ldr	r2, [pc, #572]	@ (80024f8 <HAL_ADC_ConfigChannel+0x67c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	f040 8131 	bne.w	8002524 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10b      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x46e>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	0e9b      	lsrs	r3, r3, #26
 80022d8:	3301      	adds	r3, #1
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	2b09      	cmp	r3, #9
 80022e0:	bf94      	ite	ls
 80022e2:	2301      	movls	r3, #1
 80022e4:	2300      	movhi	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	e019      	b.n	800231e <HAL_ADC_ConfigChannel+0x4a2>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80022f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80022fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002302:	2320      	movs	r3, #32
 8002304:	e003      	b.n	800230e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3301      	adds	r3, #1
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2b09      	cmp	r3, #9
 8002316:	bf94      	ite	ls
 8002318:	2301      	movls	r3, #1
 800231a:	2300      	movhi	r3, #0
 800231c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800231e:	2b00      	cmp	r3, #0
 8002320:	d079      	beq.n	8002416 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232a:	2b00      	cmp	r3, #0
 800232c:	d107      	bne.n	800233e <HAL_ADC_ConfigChannel+0x4c2>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	0e9b      	lsrs	r3, r3, #26
 8002334:	3301      	adds	r3, #1
 8002336:	069b      	lsls	r3, r3, #26
 8002338:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800233c:	e015      	b.n	800236a <HAL_ADC_ConfigChannel+0x4ee>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800234c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800234e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002350:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002356:	2320      	movs	r3, #32
 8002358:	e003      	b.n	8002362 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800235a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	3301      	adds	r3, #1
 8002364:	069b      	lsls	r3, r3, #26
 8002366:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_ADC_ConfigChannel+0x50e>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	0e9b      	lsrs	r3, r3, #26
 800237c:	3301      	adds	r3, #1
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	2101      	movs	r1, #1
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	e017      	b.n	80023ba <HAL_ADC_ConfigChannel+0x53e>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800239a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800239c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80023a2:	2320      	movs	r3, #32
 80023a4:	e003      	b.n	80023ae <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80023a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	3301      	adds	r3, #1
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	2101      	movs	r1, #1
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	ea42 0103 	orr.w	r1, r2, r3
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10a      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x564>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	0e9b      	lsrs	r3, r3, #26
 80023d0:	3301      	adds	r3, #1
 80023d2:	f003 021f 	and.w	r2, r3, #31
 80023d6:	4613      	mov	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4413      	add	r3, r2
 80023dc:	051b      	lsls	r3, r3, #20
 80023de:	e018      	b.n	8002412 <HAL_ADC_ConfigChannel+0x596>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80023ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80023f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80023f8:	2320      	movs	r3, #32
 80023fa:	e003      	b.n	8002404 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80023fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	3301      	adds	r3, #1
 8002406:	f003 021f 	and.w	r2, r3, #31
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002412:	430b      	orrs	r3, r1
 8002414:	e081      	b.n	800251a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241e:	2b00      	cmp	r3, #0
 8002420:	d107      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x5b6>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	0e9b      	lsrs	r3, r3, #26
 8002428:	3301      	adds	r3, #1
 800242a:	069b      	lsls	r3, r3, #26
 800242c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002430:	e015      	b.n	800245e <HAL_ADC_ConfigChannel+0x5e2>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800244a:	2320      	movs	r3, #32
 800244c:	e003      	b.n	8002456 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800244e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	3301      	adds	r3, #1
 8002458:	069b      	lsls	r3, r3, #26
 800245a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <HAL_ADC_ConfigChannel+0x602>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	0e9b      	lsrs	r3, r3, #26
 8002470:	3301      	adds	r3, #1
 8002472:	f003 031f 	and.w	r3, r3, #31
 8002476:	2101      	movs	r1, #1
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	e017      	b.n	80024ae <HAL_ADC_ConfigChannel+0x632>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	61bb      	str	r3, [r7, #24]
  return result;
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e003      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	3301      	adds	r3, #1
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	2101      	movs	r1, #1
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	ea42 0103 	orr.w	r1, r2, r3
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10d      	bne.n	80024da <HAL_ADC_ConfigChannel+0x65e>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	0e9b      	lsrs	r3, r3, #26
 80024c4:	3301      	adds	r3, #1
 80024c6:	f003 021f 	and.w	r2, r3, #31
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	3b1e      	subs	r3, #30
 80024d2:	051b      	lsls	r3, r3, #20
 80024d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024d8:	e01e      	b.n	8002518 <HAL_ADC_ConfigChannel+0x69c>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	60fb      	str	r3, [r7, #12]
  return result;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d104      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80024f2:	2320      	movs	r3, #32
 80024f4:	e006      	b.n	8002504 <HAL_ADC_ConfigChannel+0x688>
 80024f6:	bf00      	nop
 80024f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f003 021f 	and.w	r2, r3, #31
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	3b1e      	subs	r3, #30
 8002512:	051b      	lsls	r3, r3, #20
 8002514:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002518:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800251e:	4619      	mov	r1, r3
 8002520:	f7ff fa85 	bl	8001a2e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b44      	ldr	r3, [pc, #272]	@ (800263c <HAL_ADC_ConfigChannel+0x7c0>)
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d07a      	beq.n	8002626 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002530:	4843      	ldr	r0, [pc, #268]	@ (8002640 <HAL_ADC_ConfigChannel+0x7c4>)
 8002532:	f7ff f9ed 	bl	8001910 <LL_ADC_GetCommonPathInternalCh>
 8002536:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a41      	ldr	r2, [pc, #260]	@ (8002644 <HAL_ADC_ConfigChannel+0x7c8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d12c      	bne.n	800259e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002544:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002548:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d126      	bne.n	800259e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a3c      	ldr	r2, [pc, #240]	@ (8002648 <HAL_ADC_ConfigChannel+0x7cc>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d004      	beq.n	8002564 <HAL_ADC_ConfigChannel+0x6e8>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a3b      	ldr	r2, [pc, #236]	@ (800264c <HAL_ADC_ConfigChannel+0x7d0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d15d      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002564:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002568:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800256c:	4619      	mov	r1, r3
 800256e:	4834      	ldr	r0, [pc, #208]	@ (8002640 <HAL_ADC_ConfigChannel+0x7c4>)
 8002570:	f7ff f9bb 	bl	80018ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002574:	4b36      	ldr	r3, [pc, #216]	@ (8002650 <HAL_ADC_ConfigChannel+0x7d4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	099b      	lsrs	r3, r3, #6
 800257a:	4a36      	ldr	r2, [pc, #216]	@ (8002654 <HAL_ADC_ConfigChannel+0x7d8>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	099b      	lsrs	r3, r3, #6
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800258e:	e002      	b.n	8002596 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	3b01      	subs	r3, #1
 8002594:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1f9      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800259c:	e040      	b.n	8002620 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002658 <HAL_ADC_ConfigChannel+0x7dc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d118      	bne.n	80025da <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d112      	bne.n	80025da <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a23      	ldr	r2, [pc, #140]	@ (8002648 <HAL_ADC_ConfigChannel+0x7cc>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d004      	beq.n	80025c8 <HAL_ADC_ConfigChannel+0x74c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a22      	ldr	r2, [pc, #136]	@ (800264c <HAL_ADC_ConfigChannel+0x7d0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d12d      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025d0:	4619      	mov	r1, r3
 80025d2:	481b      	ldr	r0, [pc, #108]	@ (8002640 <HAL_ADC_ConfigChannel+0x7c4>)
 80025d4:	f7ff f989 	bl	80018ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025d8:	e024      	b.n	8002624 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1f      	ldr	r2, [pc, #124]	@ (800265c <HAL_ADC_ConfigChannel+0x7e0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d120      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d11a      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a14      	ldr	r2, [pc, #80]	@ (8002648 <HAL_ADC_ConfigChannel+0x7cc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d115      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002602:	4619      	mov	r1, r3
 8002604:	480e      	ldr	r0, [pc, #56]	@ (8002640 <HAL_ADC_ConfigChannel+0x7c4>)
 8002606:	f7ff f970 	bl	80018ea <LL_ADC_SetCommonPathInternalCh>
 800260a:	e00c      	b.n	8002626 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002610:	f043 0220 	orr.w	r2, r3, #32
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800261e:	e002      	b.n	8002626 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002620:	bf00      	nop
 8002622:	e000      	b.n	8002626 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002624:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800262e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002632:	4618      	mov	r0, r3
 8002634:	37d8      	adds	r7, #216	@ 0xd8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	80080000 	.word	0x80080000
 8002640:	50040300 	.word	0x50040300
 8002644:	c7520000 	.word	0xc7520000
 8002648:	50040000 	.word	0x50040000
 800264c:	50040200 	.word	0x50040200
 8002650:	20000000 	.word	0x20000000
 8002654:	053e2d63 	.word	0x053e2d63
 8002658:	cb840000 	.word	0xcb840000
 800265c:	80000001 	.word	0x80000001

08002660 <LL_ADC_IsEnabled>:
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <LL_ADC_IsEnabled+0x18>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <LL_ADC_IsEnabled+0x1a>
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <LL_ADC_REG_IsConversionOngoing>:
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b04      	cmp	r3, #4
 8002698:	d101      	bne.n	800269e <LL_ADC_REG_IsConversionOngoing+0x18>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b09f      	sub	sp, #124	@ 0x7c
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e093      	b.n	80027f2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80026d2:	2300      	movs	r3, #0
 80026d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80026d6:	2300      	movs	r3, #0
 80026d8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a47      	ldr	r2, [pc, #284]	@ (80027fc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d102      	bne.n	80026ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026e4:	4b46      	ldr	r3, [pc, #280]	@ (8002800 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	e001      	b.n	80026ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10b      	bne.n	800270c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f8:	f043 0220 	orr.w	r2, r3, #32
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e072      	b.n	80027f2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ffb9 	bl	8002686 <LL_ADC_REG_IsConversionOngoing>
 8002714:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ffb3 	bl	8002686 <LL_ADC_REG_IsConversionOngoing>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d154      	bne.n	80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002726:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002728:	2b00      	cmp	r3, #0
 800272a:	d151      	bne.n	80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800272c:	4b35      	ldr	r3, [pc, #212]	@ (8002804 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800272e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d02c      	beq.n	8002792 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002738:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800274a:	035b      	lsls	r3, r3, #13
 800274c:	430b      	orrs	r3, r1
 800274e:	431a      	orrs	r2, r3
 8002750:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002752:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002754:	4829      	ldr	r0, [pc, #164]	@ (80027fc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002756:	f7ff ff83 	bl	8002660 <LL_ADC_IsEnabled>
 800275a:	4604      	mov	r4, r0
 800275c:	4828      	ldr	r0, [pc, #160]	@ (8002800 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800275e:	f7ff ff7f 	bl	8002660 <LL_ADC_IsEnabled>
 8002762:	4603      	mov	r3, r0
 8002764:	431c      	orrs	r4, r3
 8002766:	4828      	ldr	r0, [pc, #160]	@ (8002808 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002768:	f7ff ff7a 	bl	8002660 <LL_ADC_IsEnabled>
 800276c:	4603      	mov	r3, r0
 800276e:	4323      	orrs	r3, r4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d137      	bne.n	80027e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800277c:	f023 030f 	bic.w	r3, r3, #15
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	6811      	ldr	r1, [r2, #0]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	6892      	ldr	r2, [r2, #8]
 8002788:	430a      	orrs	r2, r1
 800278a:	431a      	orrs	r2, r3
 800278c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800278e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002790:	e028      	b.n	80027e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002792:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800279a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800279c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800279e:	4817      	ldr	r0, [pc, #92]	@ (80027fc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80027a0:	f7ff ff5e 	bl	8002660 <LL_ADC_IsEnabled>
 80027a4:	4604      	mov	r4, r0
 80027a6:	4816      	ldr	r0, [pc, #88]	@ (8002800 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80027a8:	f7ff ff5a 	bl	8002660 <LL_ADC_IsEnabled>
 80027ac:	4603      	mov	r3, r0
 80027ae:	431c      	orrs	r4, r3
 80027b0:	4815      	ldr	r0, [pc, #84]	@ (8002808 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80027b2:	f7ff ff55 	bl	8002660 <LL_ADC_IsEnabled>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4323      	orrs	r3, r4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d112      	bne.n	80027e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80027be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80027c6:	f023 030f 	bic.w	r3, r3, #15
 80027ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80027cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027ce:	e009      	b.n	80027e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d4:	f043 0220 	orr.w	r2, r3, #32
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80027e2:	e000      	b.n	80027e6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80027ee:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	377c      	adds	r7, #124	@ 0x7c
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd90      	pop	{r4, r7, pc}
 80027fa:	bf00      	nop
 80027fc:	50040000 	.word	0x50040000
 8002800:	50040100 	.word	0x50040100
 8002804:	50040300 	.word	0x50040300
 8002808:	50040200 	.word	0x50040200

0800280c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800281c:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002834:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002838:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	@ (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002858:	4b04      	ldr	r3, [pc, #16]	@ (800286c <__NVIC_GetPriorityGrouping+0x18>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 0307 	and.w	r3, r3, #7
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db0b      	blt.n	800289a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4907      	ldr	r1, [pc, #28]	@ (80028a8 <__NVIC_EnableIRQ+0x38>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2001      	movs	r0, #1
 8002892:	fa00 f202 	lsl.w	r2, r0, r2
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000e100 	.word	0xe000e100

080028ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	db0a      	blt.n	80028d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	490c      	ldr	r1, [pc, #48]	@ (80028f8 <__NVIC_SetPriority+0x4c>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	0112      	lsls	r2, r2, #4
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	440b      	add	r3, r1
 80028d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d4:	e00a      	b.n	80028ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4908      	ldr	r1, [pc, #32]	@ (80028fc <__NVIC_SetPriority+0x50>)
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3b04      	subs	r3, #4
 80028e4:	0112      	lsls	r2, r2, #4
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	440b      	add	r3, r1
 80028ea:	761a      	strb	r2, [r3, #24]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000e100 	.word	0xe000e100
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	@ 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f1c3 0307 	rsb	r3, r3, #7
 800291a:	2b04      	cmp	r3, #4
 800291c:	bf28      	it	cs
 800291e:	2304      	movcs	r3, #4
 8002920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3304      	adds	r3, #4
 8002926:	2b06      	cmp	r3, #6
 8002928:	d902      	bls.n	8002930 <NVIC_EncodePriority+0x30>
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3b03      	subs	r3, #3
 800292e:	e000      	b.n	8002932 <NVIC_EncodePriority+0x32>
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	f04f 32ff 	mov.w	r2, #4294967295
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43da      	mvns	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	401a      	ands	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002948:	f04f 31ff 	mov.w	r1, #4294967295
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	43d9      	mvns	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	4313      	orrs	r3, r2
         );
}
 800295a:	4618      	mov	r0, r3
 800295c:	3724      	adds	r7, #36	@ 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff ff4c 	bl	800280c <__NVIC_SetPriorityGrouping>
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800298e:	f7ff ff61 	bl	8002854 <__NVIC_GetPriorityGrouping>
 8002992:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	6978      	ldr	r0, [r7, #20]
 800299a:	f7ff ffb1 	bl	8002900 <NVIC_EncodePriority>
 800299e:	4602      	mov	r2, r0
 80029a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff80 	bl	80028ac <__NVIC_SetPriority>
}
 80029ac:	bf00      	nop
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff ff54 	bl	8002870 <__NVIC_EnableIRQ>
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e098      	b.n	8002b14 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002b20 <HAL_DMA_Init+0x150>)
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d80f      	bhi.n	8002a0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002b24 <HAL_DMA_Init+0x154>)
 80029f6:	4413      	add	r3, r2
 80029f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002b28 <HAL_DMA_Init+0x158>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	009a      	lsls	r2, r3, #2
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a48      	ldr	r2, [pc, #288]	@ (8002b2c <HAL_DMA_Init+0x15c>)
 8002a0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a0c:	e00e      	b.n	8002a2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b46      	ldr	r3, [pc, #280]	@ (8002b30 <HAL_DMA_Init+0x160>)
 8002a16:	4413      	add	r3, r2
 8002a18:	4a43      	ldr	r2, [pc, #268]	@ (8002b28 <HAL_DMA_Init+0x158>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	009a      	lsls	r2, r3, #2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a42      	ldr	r2, [pc, #264]	@ (8002b34 <HAL_DMA_Init+0x164>)
 8002a2a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a86:	d039      	beq.n	8002afc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	4a27      	ldr	r2, [pc, #156]	@ (8002b2c <HAL_DMA_Init+0x15c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d11a      	bne.n	8002ac8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a92:	4b29      	ldr	r3, [pc, #164]	@ (8002b38 <HAL_DMA_Init+0x168>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9a:	f003 031c 	and.w	r3, r3, #28
 8002a9e:	210f      	movs	r1, #15
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	4924      	ldr	r1, [pc, #144]	@ (8002b38 <HAL_DMA_Init+0x168>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002aac:	4b22      	ldr	r3, [pc, #136]	@ (8002b38 <HAL_DMA_Init+0x168>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab8:	f003 031c 	and.w	r3, r3, #28
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	491d      	ldr	r1, [pc, #116]	@ (8002b38 <HAL_DMA_Init+0x168>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]
 8002ac6:	e019      	b.n	8002afc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b3c <HAL_DMA_Init+0x16c>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad0:	f003 031c 	and.w	r3, r3, #28
 8002ad4:	210f      	movs	r1, #15
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	4917      	ldr	r1, [pc, #92]	@ (8002b3c <HAL_DMA_Init+0x16c>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ae2:	4b16      	ldr	r3, [pc, #88]	@ (8002b3c <HAL_DMA_Init+0x16c>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aee:	f003 031c 	and.w	r3, r3, #28
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	4911      	ldr	r1, [pc, #68]	@ (8002b3c <HAL_DMA_Init+0x16c>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40020407 	.word	0x40020407
 8002b24:	bffdfff8 	.word	0xbffdfff8
 8002b28:	cccccccd 	.word	0xcccccccd
 8002b2c:	40020000 	.word	0x40020000
 8002b30:	bffdfbf8 	.word	0xbffdfbf8
 8002b34:	40020400 	.word	0x40020400
 8002b38:	400200a8 	.word	0x400200a8
 8002b3c:	400204a8 	.word	0x400204a8

08002b40 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d008      	beq.n	8002b6a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e022      	b.n	8002bb0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 020e 	bic.w	r2, r2, #14
 8002b78:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0201 	bic.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f003 021c 	and.w	r2, r3, #28
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	2101      	movs	r1, #1
 8002b98:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d005      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	e029      	b.n	8002c34 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 020e 	bic.w	r2, r2, #14
 8002bee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0201 	bic.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c04:	f003 021c 	and.w	r2, r3, #28
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c12:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	4798      	blx	r3
    }
  }
  return status;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	f003 031c 	and.w	r3, r3, #28
 8002c5e:	2204      	movs	r2, #4
 8002c60:	409a      	lsls	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d026      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x7a>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d021      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d107      	bne.n	8002c92 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0204 	bic.w	r2, r2, #4
 8002c90:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c96:	f003 021c 	and.w	r2, r3, #28
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	2104      	movs	r1, #4
 8002ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d071      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002cb6:	e06c      	b.n	8002d92 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbc:	f003 031c 	and.w	r3, r3, #28
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d02e      	beq.n	8002d2a <HAL_DMA_IRQHandler+0xec>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d029      	beq.n	8002d2a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10b      	bne.n	8002cfc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 020a 	bic.w	r2, r2, #10
 8002cf2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d00:	f003 021c 	and.w	r2, r3, #28
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d08:	2102      	movs	r1, #2
 8002d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d038      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002d28:	e033      	b.n	8002d92 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2e:	f003 031c 	and.w	r3, r3, #28
 8002d32:	2208      	movs	r2, #8
 8002d34:	409a      	lsls	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d02a      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x156>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d025      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 020e 	bic.w	r2, r2, #14
 8002d56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5c:	f003 021c 	and.w	r2, r3, #28
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	2101      	movs	r1, #1
 8002d66:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d92:	bf00      	nop
 8002d94:	bf00      	nop
}
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002daa:	e17f      	b.n	80030ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	2101      	movs	r1, #1
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	4013      	ands	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8171 	beq.w	80030a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d005      	beq.n	8002ddc <HAL_GPIO_Init+0x40>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d130      	bne.n	8002e3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	2203      	movs	r2, #3
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e12:	2201      	movs	r2, #1
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	f003 0201 	and.w	r2, r3, #1
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d118      	bne.n	8002e7c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e50:	2201      	movs	r2, #1
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	08db      	lsrs	r3, r3, #3
 8002e66:	f003 0201 	and.w	r2, r3, #1
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d017      	beq.n	8002eb8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2203      	movs	r2, #3
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d123      	bne.n	8002f0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	08da      	lsrs	r2, r3, #3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3208      	adds	r2, #8
 8002ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	220f      	movs	r2, #15
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	08da      	lsrs	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3208      	adds	r2, #8
 8002f06:	6939      	ldr	r1, [r7, #16]
 8002f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	2203      	movs	r2, #3
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4013      	ands	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0203 	and.w	r2, r3, #3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80ac 	beq.w	80030a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4e:	4b5f      	ldr	r3, [pc, #380]	@ (80030cc <HAL_GPIO_Init+0x330>)
 8002f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f52:	4a5e      	ldr	r2, [pc, #376]	@ (80030cc <HAL_GPIO_Init+0x330>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f5a:	4b5c      	ldr	r3, [pc, #368]	@ (80030cc <HAL_GPIO_Init+0x330>)
 8002f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f66:	4a5a      	ldr	r2, [pc, #360]	@ (80030d0 <HAL_GPIO_Init+0x334>)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	089b      	lsrs	r3, r3, #2
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	220f      	movs	r2, #15
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f90:	d025      	beq.n	8002fde <HAL_GPIO_Init+0x242>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a4f      	ldr	r2, [pc, #316]	@ (80030d4 <HAL_GPIO_Init+0x338>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d01f      	beq.n	8002fda <HAL_GPIO_Init+0x23e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a4e      	ldr	r2, [pc, #312]	@ (80030d8 <HAL_GPIO_Init+0x33c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d019      	beq.n	8002fd6 <HAL_GPIO_Init+0x23a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a4d      	ldr	r2, [pc, #308]	@ (80030dc <HAL_GPIO_Init+0x340>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <HAL_GPIO_Init+0x236>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a4c      	ldr	r2, [pc, #304]	@ (80030e0 <HAL_GPIO_Init+0x344>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00d      	beq.n	8002fce <HAL_GPIO_Init+0x232>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a4b      	ldr	r2, [pc, #300]	@ (80030e4 <HAL_GPIO_Init+0x348>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d007      	beq.n	8002fca <HAL_GPIO_Init+0x22e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a4a      	ldr	r2, [pc, #296]	@ (80030e8 <HAL_GPIO_Init+0x34c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d101      	bne.n	8002fc6 <HAL_GPIO_Init+0x22a>
 8002fc2:	2306      	movs	r3, #6
 8002fc4:	e00c      	b.n	8002fe0 <HAL_GPIO_Init+0x244>
 8002fc6:	2307      	movs	r3, #7
 8002fc8:	e00a      	b.n	8002fe0 <HAL_GPIO_Init+0x244>
 8002fca:	2305      	movs	r3, #5
 8002fcc:	e008      	b.n	8002fe0 <HAL_GPIO_Init+0x244>
 8002fce:	2304      	movs	r3, #4
 8002fd0:	e006      	b.n	8002fe0 <HAL_GPIO_Init+0x244>
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e004      	b.n	8002fe0 <HAL_GPIO_Init+0x244>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e002      	b.n	8002fe0 <HAL_GPIO_Init+0x244>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_GPIO_Init+0x244>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	f002 0203 	and.w	r2, r2, #3
 8002fe6:	0092      	lsls	r2, r2, #2
 8002fe8:	4093      	lsls	r3, r2
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ff0:	4937      	ldr	r1, [pc, #220]	@ (80030d0 <HAL_GPIO_Init+0x334>)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	089b      	lsrs	r3, r3, #2
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80030ec <HAL_GPIO_Init+0x350>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003022:	4a32      	ldr	r2, [pc, #200]	@ (80030ec <HAL_GPIO_Init+0x350>)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003028:	4b30      	ldr	r3, [pc, #192]	@ (80030ec <HAL_GPIO_Init+0x350>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	43db      	mvns	r3, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800304c:	4a27      	ldr	r2, [pc, #156]	@ (80030ec <HAL_GPIO_Init+0x350>)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003052:	4b26      	ldr	r3, [pc, #152]	@ (80030ec <HAL_GPIO_Init+0x350>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	43db      	mvns	r3, r3
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4013      	ands	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003076:	4a1d      	ldr	r2, [pc, #116]	@ (80030ec <HAL_GPIO_Init+0x350>)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800307c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ec <HAL_GPIO_Init+0x350>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	43db      	mvns	r3, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030a0:	4a12      	ldr	r2, [pc, #72]	@ (80030ec <HAL_GPIO_Init+0x350>)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	3301      	adds	r3, #1
 80030aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f47f ae78 	bne.w	8002dac <HAL_GPIO_Init+0x10>
  }
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40010000 	.word	0x40010000
 80030d4:	48000400 	.word	0x48000400
 80030d8:	48000800 	.word	0x48000800
 80030dc:	48000c00 	.word	0x48000c00
 80030e0:	48001000 	.word	0x48001000
 80030e4:	48001400 	.word	0x48001400
 80030e8:	48001800 	.word	0x48001800
 80030ec:	40010400 	.word	0x40010400

080030f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	807b      	strh	r3, [r7, #2]
 80030fc:	4613      	mov	r3, r2
 80030fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003100:	787b      	ldrb	r3, [r7, #1]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003106:	887a      	ldrh	r2, [r7, #2]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800310c:	e002      	b.n	8003114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800310e:	887a      	ldrh	r2, [r7, #2]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e08d      	b.n	800324e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fd fc36 	bl	80009b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2224      	movs	r2, #36	@ 0x24
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0201 	bic.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003170:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003180:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d107      	bne.n	800319a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	e006      	b.n	80031a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80031a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d108      	bne.n	80031c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	e007      	b.n	80031d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69d9      	ldr	r1, [r3, #28]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1a      	ldr	r2, [r3, #32]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b20      	cmp	r3, #32
 800326a:	d138      	bne.n	80032de <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003276:	2302      	movs	r3, #2
 8003278:	e032      	b.n	80032e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2224      	movs	r2, #36	@ 0x24
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0201 	bic.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032a8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6819      	ldr	r1, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0201 	orr.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	e000      	b.n	80032e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032de:	2302      	movs	r3, #2
  }
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d139      	bne.n	8003376 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800330c:	2302      	movs	r3, #2
 800330e:	e033      	b.n	8003378 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2224      	movs	r2, #36	@ 0x24
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800333e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0201 	orr.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e000      	b.n	8003378 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003376:	2302      	movs	r3, #2
  }
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003388:	4b04      	ldr	r3, [pc, #16]	@ (800339c <HAL_PWREx_GetVoltageRange+0x18>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40007000 	.word	0x40007000

080033a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033ae:	d130      	bne.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033b0:	4b23      	ldr	r3, [pc, #140]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033bc:	d038      	beq.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033be:	4b20      	ldr	r3, [pc, #128]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003444 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2232      	movs	r2, #50	@ 0x32
 80033d4:	fb02 f303 	mul.w	r3, r2, r3
 80033d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003448 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	0c9b      	lsrs	r3, r3, #18
 80033e0:	3301      	adds	r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033e4:	e002      	b.n	80033ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ec:	4b14      	ldr	r3, [pc, #80]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033f8:	d102      	bne.n	8003400 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f2      	bne.n	80033e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003400:	4b0f      	ldr	r3, [pc, #60]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003408:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800340c:	d110      	bne.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e00f      	b.n	8003432 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003412:	4b0b      	ldr	r3, [pc, #44]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800341a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800341e:	d007      	beq.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003420:	4b07      	ldr	r3, [pc, #28]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003428:	4a05      	ldr	r2, [pc, #20]	@ (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800342a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800342e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40007000 	.word	0x40007000
 8003444:	20000000 	.word	0x20000000
 8003448:	431bde83 	.word	0x431bde83

0800344c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e3ca      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800345e:	4b97      	ldr	r3, [pc, #604]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003468:	4b94      	ldr	r3, [pc, #592]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 80e4 	beq.w	8003648 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d007      	beq.n	8003496 <HAL_RCC_OscConfig+0x4a>
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b0c      	cmp	r3, #12
 800348a:	f040 808b 	bne.w	80035a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b01      	cmp	r3, #1
 8003492:	f040 8087 	bne.w	80035a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003496:	4b89      	ldr	r3, [pc, #548]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_RCC_OscConfig+0x62>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e3a2      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1a      	ldr	r2, [r3, #32]
 80034b2:	4b82      	ldr	r3, [pc, #520]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d004      	beq.n	80034c8 <HAL_RCC_OscConfig+0x7c>
 80034be:	4b7f      	ldr	r3, [pc, #508]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034c6:	e005      	b.n	80034d4 <HAL_RCC_OscConfig+0x88>
 80034c8:	4b7c      	ldr	r3, [pc, #496]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80034ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ce:	091b      	lsrs	r3, r3, #4
 80034d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d223      	bcs.n	8003520 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fd87 	bl	8003ff0 <RCC_SetFlashLatencyFromMSIRange>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e383      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ec:	4b73      	ldr	r3, [pc, #460]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a72      	ldr	r2, [pc, #456]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80034f2:	f043 0308 	orr.w	r3, r3, #8
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	4b70      	ldr	r3, [pc, #448]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	496d      	ldr	r1, [pc, #436]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003506:	4313      	orrs	r3, r2
 8003508:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800350a:	4b6c      	ldr	r3, [pc, #432]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	4968      	ldr	r1, [pc, #416]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800351a:	4313      	orrs	r3, r2
 800351c:	604b      	str	r3, [r1, #4]
 800351e:	e025      	b.n	800356c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003520:	4b66      	ldr	r3, [pc, #408]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a65      	ldr	r2, [pc, #404]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003526:	f043 0308 	orr.w	r3, r3, #8
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	4b63      	ldr	r3, [pc, #396]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4960      	ldr	r1, [pc, #384]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800353e:	4b5f      	ldr	r3, [pc, #380]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	495b      	ldr	r1, [pc, #364]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d109      	bne.n	800356c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fd47 	bl	8003ff0 <RCC_SetFlashLatencyFromMSIRange>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e343      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800356c:	f000 fc4a 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8003570:	4602      	mov	r2, r0
 8003572:	4b52      	ldr	r3, [pc, #328]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	4950      	ldr	r1, [pc, #320]	@ (80036c0 <HAL_RCC_OscConfig+0x274>)
 800357e:	5ccb      	ldrb	r3, [r1, r3]
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
 8003588:	4a4e      	ldr	r2, [pc, #312]	@ (80036c4 <HAL_RCC_OscConfig+0x278>)
 800358a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800358c:	4b4e      	ldr	r3, [pc, #312]	@ (80036c8 <HAL_RCC_OscConfig+0x27c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7fd fbb3 	bl	8000cfc <HAL_InitTick>
 8003596:	4603      	mov	r3, r0
 8003598:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d052      	beq.n	8003646 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	e327      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d032      	beq.n	8003612 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035ac:	4b43      	ldr	r3, [pc, #268]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a42      	ldr	r2, [pc, #264]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035b8:	f7fe f978 	bl	80018ac <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035c0:	f7fe f974 	bl	80018ac <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e310      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035d2:	4b3a      	ldr	r3, [pc, #232]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035de:	4b37      	ldr	r3, [pc, #220]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a36      	ldr	r2, [pc, #216]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80035e4:	f043 0308 	orr.w	r3, r3, #8
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b34      	ldr	r3, [pc, #208]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4931      	ldr	r1, [pc, #196]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035fc:	4b2f      	ldr	r3, [pc, #188]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	021b      	lsls	r3, r3, #8
 800360a:	492c      	ldr	r1, [pc, #176]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]
 8003610:	e01a      	b.n	8003648 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003612:	4b2a      	ldr	r3, [pc, #168]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a29      	ldr	r2, [pc, #164]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800361e:	f7fe f945 	bl	80018ac <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003626:	f7fe f941 	bl	80018ac <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e2dd      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003638:	4b20      	ldr	r3, [pc, #128]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1f0      	bne.n	8003626 <HAL_RCC_OscConfig+0x1da>
 8003644:	e000      	b.n	8003648 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003646:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d074      	beq.n	800373e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b08      	cmp	r3, #8
 8003658:	d005      	beq.n	8003666 <HAL_RCC_OscConfig+0x21a>
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b0c      	cmp	r3, #12
 800365e:	d10e      	bne.n	800367e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2b03      	cmp	r3, #3
 8003664:	d10b      	bne.n	800367e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003666:	4b15      	ldr	r3, [pc, #84]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d064      	beq.n	800373c <HAL_RCC_OscConfig+0x2f0>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d160      	bne.n	800373c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e2ba      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003686:	d106      	bne.n	8003696 <HAL_RCC_OscConfig+0x24a>
 8003688:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a0b      	ldr	r2, [pc, #44]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 800368e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	e026      	b.n	80036e4 <HAL_RCC_OscConfig+0x298>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800369e:	d115      	bne.n	80036cc <HAL_RCC_OscConfig+0x280>
 80036a0:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a05      	ldr	r2, [pc, #20]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80036a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a02      	ldr	r2, [pc, #8]	@ (80036bc <HAL_RCC_OscConfig+0x270>)
 80036b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	e014      	b.n	80036e4 <HAL_RCC_OscConfig+0x298>
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000
 80036c0:	08007eac 	.word	0x08007eac
 80036c4:	20000000 	.word	0x20000000
 80036c8:	20000004 	.word	0x20000004
 80036cc:	4ba0      	ldr	r3, [pc, #640]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a9f      	ldr	r2, [pc, #636]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80036d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4b9d      	ldr	r3, [pc, #628]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a9c      	ldr	r2, [pc, #624]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80036de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d013      	beq.n	8003714 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fe f8de 	bl	80018ac <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f4:	f7fe f8da 	bl	80018ac <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	@ 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e276      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003706:	4b92      	ldr	r3, [pc, #584]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x2a8>
 8003712:	e014      	b.n	800373e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fe f8ca 	bl	80018ac <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800371c:	f7fe f8c6 	bl	80018ac <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	@ 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e262      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800372e:	4b88      	ldr	r3, [pc, #544]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x2d0>
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d060      	beq.n	800380c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b04      	cmp	r3, #4
 800374e:	d005      	beq.n	800375c <HAL_RCC_OscConfig+0x310>
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b0c      	cmp	r3, #12
 8003754:	d119      	bne.n	800378a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d116      	bne.n	800378a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800375c:	4b7c      	ldr	r3, [pc, #496]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_OscConfig+0x328>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e23f      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003774:	4b76      	ldr	r3, [pc, #472]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	061b      	lsls	r3, r3, #24
 8003782:	4973      	ldr	r1, [pc, #460]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003784:	4313      	orrs	r3, r2
 8003786:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003788:	e040      	b.n	800380c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d023      	beq.n	80037da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003792:	4b6f      	ldr	r3, [pc, #444]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a6e      	ldr	r2, [pc, #440]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800379c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379e:	f7fe f885 	bl	80018ac <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a6:	f7fe f881 	bl	80018ac <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e21d      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037b8:	4b65      	ldr	r3, [pc, #404]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c4:	4b62      	ldr	r3, [pc, #392]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	495f      	ldr	r1, [pc, #380]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
 80037d8:	e018      	b.n	800380c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037da:	4b5d      	ldr	r3, [pc, #372]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a5c      	ldr	r2, [pc, #368]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80037e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e6:	f7fe f861 	bl	80018ac <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ee:	f7fe f85d 	bl	80018ac <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e1f9      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003800:	4b53      	ldr	r3, [pc, #332]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f0      	bne.n	80037ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d03c      	beq.n	8003892 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01c      	beq.n	800385a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003820:	4b4b      	ldr	r3, [pc, #300]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003826:	4a4a      	ldr	r2, [pc, #296]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fe f83c 	bl	80018ac <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003838:	f7fe f838 	bl	80018ac <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e1d4      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800384a:	4b41      	ldr	r3, [pc, #260]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 800384c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ef      	beq.n	8003838 <HAL_RCC_OscConfig+0x3ec>
 8003858:	e01b      	b.n	8003892 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800385a:	4b3d      	ldr	r3, [pc, #244]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 800385c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003860:	4a3b      	ldr	r2, [pc, #236]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003862:	f023 0301 	bic.w	r3, r3, #1
 8003866:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fe f81f 	bl	80018ac <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003872:	f7fe f81b 	bl	80018ac <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e1b7      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003884:	4b32      	ldr	r3, [pc, #200]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1ef      	bne.n	8003872 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80a6 	beq.w	80039ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a0:	2300      	movs	r3, #0
 80038a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10d      	bne.n	80038cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b0:	4b27      	ldr	r3, [pc, #156]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80038b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b4:	4a26      	ldr	r2, [pc, #152]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80038b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80038bc:	4b24      	ldr	r3, [pc, #144]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c8:	2301      	movs	r3, #1
 80038ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038cc:	4b21      	ldr	r3, [pc, #132]	@ (8003954 <HAL_RCC_OscConfig+0x508>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d118      	bne.n	800390a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003954 <HAL_RCC_OscConfig+0x508>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003954 <HAL_RCC_OscConfig+0x508>)
 80038de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e4:	f7fd ffe2 	bl	80018ac <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ec:	f7fd ffde 	bl	80018ac <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e17a      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038fe:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <HAL_RCC_OscConfig+0x508>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d108      	bne.n	8003924 <HAL_RCC_OscConfig+0x4d8>
 8003912:	4b0f      	ldr	r3, [pc, #60]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003918:	4a0d      	ldr	r2, [pc, #52]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003922:	e029      	b.n	8003978 <HAL_RCC_OscConfig+0x52c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b05      	cmp	r3, #5
 800392a:	d115      	bne.n	8003958 <HAL_RCC_OscConfig+0x50c>
 800392c:	4b08      	ldr	r3, [pc, #32]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 800392e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003932:	4a07      	ldr	r2, [pc, #28]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003934:	f043 0304 	orr.w	r3, r3, #4
 8003938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800393c:	4b04      	ldr	r3, [pc, #16]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003942:	4a03      	ldr	r2, [pc, #12]	@ (8003950 <HAL_RCC_OscConfig+0x504>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800394c:	e014      	b.n	8003978 <HAL_RCC_OscConfig+0x52c>
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000
 8003954:	40007000 	.word	0x40007000
 8003958:	4b9c      	ldr	r3, [pc, #624]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800395e:	4a9b      	ldr	r2, [pc, #620]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003968:	4b98      	ldr	r3, [pc, #608]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396e:	4a97      	ldr	r2, [pc, #604]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003970:	f023 0304 	bic.w	r3, r3, #4
 8003974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d016      	beq.n	80039ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fd ff94 	bl	80018ac <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003986:	e00a      	b.n	800399e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003988:	f7fd ff90 	bl	80018ac <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e12a      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800399e:	4b8b      	ldr	r3, [pc, #556]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0ed      	beq.n	8003988 <HAL_RCC_OscConfig+0x53c>
 80039ac:	e015      	b.n	80039da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fd ff7d 	bl	80018ac <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039b4:	e00a      	b.n	80039cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fd ff79 	bl	80018ac <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e113      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039cc:	4b7f      	ldr	r3, [pc, #508]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1ed      	bne.n	80039b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039da:	7ffb      	ldrb	r3, [r7, #31]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d105      	bne.n	80039ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e0:	4b7a      	ldr	r3, [pc, #488]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	4a79      	ldr	r2, [pc, #484]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 80039e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ea:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80fe 	beq.w	8003bf2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	f040 80d0 	bne.w	8003ba0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a00:	4b72      	ldr	r3, [pc, #456]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f003 0203 	and.w	r2, r3, #3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d130      	bne.n	8003a76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d127      	bne.n	8003a76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d11f      	bne.n	8003a76 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a40:	2a07      	cmp	r2, #7
 8003a42:	bf14      	ite	ne
 8003a44:	2201      	movne	r2, #1
 8003a46:	2200      	moveq	r2, #0
 8003a48:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d113      	bne.n	8003a76 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d109      	bne.n	8003a76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d06e      	beq.n	8003b54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b0c      	cmp	r3, #12
 8003a7a:	d069      	beq.n	8003b50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a7c:	4b53      	ldr	r3, [pc, #332]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d105      	bne.n	8003a94 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a88:	4b50      	ldr	r3, [pc, #320]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0ad      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a98:	4b4c      	ldr	r3, [pc, #304]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a4b      	ldr	r2, [pc, #300]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aa2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003aa4:	f7fd ff02 	bl	80018ac <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aac:	f7fd fefe 	bl	80018ac <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e09a      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003abe:	4b43      	ldr	r3, [pc, #268]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aca:	4b40      	ldr	r3, [pc, #256]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	4b40      	ldr	r3, [pc, #256]	@ (8003bd0 <HAL_RCC_OscConfig+0x784>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ada:	3a01      	subs	r2, #1
 8003adc:	0112      	lsls	r2, r2, #4
 8003ade:	4311      	orrs	r1, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ae4:	0212      	lsls	r2, r2, #8
 8003ae6:	4311      	orrs	r1, r2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003aec:	0852      	lsrs	r2, r2, #1
 8003aee:	3a01      	subs	r2, #1
 8003af0:	0552      	lsls	r2, r2, #21
 8003af2:	4311      	orrs	r1, r2
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003af8:	0852      	lsrs	r2, r2, #1
 8003afa:	3a01      	subs	r2, #1
 8003afc:	0652      	lsls	r2, r2, #25
 8003afe:	4311      	orrs	r1, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b04:	0912      	lsrs	r2, r2, #4
 8003b06:	0452      	lsls	r2, r2, #17
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	4930      	ldr	r1, [pc, #192]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b10:	4b2e      	ldr	r3, [pc, #184]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a2d      	ldr	r2, [pc, #180]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4a2a      	ldr	r2, [pc, #168]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003b22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b28:	f7fd fec0 	bl	80018ac <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b30:	f7fd febc 	bl	80018ac <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e058      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b42:	4b22      	ldr	r3, [pc, #136]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b4e:	e050      	b.n	8003bf2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e04f      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b54:	4b1d      	ldr	r3, [pc, #116]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d148      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b60:	4b1a      	ldr	r3, [pc, #104]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a19      	ldr	r2, [pc, #100]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003b66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b6c:	4b17      	ldr	r3, [pc, #92]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a16      	ldr	r2, [pc, #88]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003b72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b78:	f7fd fe98 	bl	80018ac <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b80:	f7fd fe94 	bl	80018ac <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e030      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b92:	4b0e      	ldr	r3, [pc, #56]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x734>
 8003b9e:	e028      	b.n	8003bf2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b0c      	cmp	r3, #12
 8003ba4:	d023      	beq.n	8003bee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba6:	4b09      	ldr	r3, [pc, #36]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a08      	ldr	r2, [pc, #32]	@ (8003bcc <HAL_RCC_OscConfig+0x780>)
 8003bac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7fd fe7b 	bl	80018ac <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bb8:	e00c      	b.n	8003bd4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bba:	f7fd fe77 	bl	80018ac <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d905      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e013      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd4:	4b09      	ldr	r3, [pc, #36]	@ (8003bfc <HAL_RCC_OscConfig+0x7b0>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1ec      	bne.n	8003bba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003be0:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <HAL_RCC_OscConfig+0x7b0>)
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	4905      	ldr	r1, [pc, #20]	@ (8003bfc <HAL_RCC_OscConfig+0x7b0>)
 8003be6:	4b06      	ldr	r3, [pc, #24]	@ (8003c00 <HAL_RCC_OscConfig+0x7b4>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	60cb      	str	r3, [r1, #12]
 8003bec:	e001      	b.n	8003bf2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3720      	adds	r7, #32
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	feeefffc 	.word	0xfeeefffc

08003c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0e7      	b.n	8003de8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c18:	4b75      	ldr	r3, [pc, #468]	@ (8003df0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d910      	bls.n	8003c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b72      	ldr	r3, [pc, #456]	@ (8003df0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 0207 	bic.w	r2, r3, #7
 8003c2e:	4970      	ldr	r1, [pc, #448]	@ (8003df0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c36:	4b6e      	ldr	r3, [pc, #440]	@ (8003df0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0cf      	b.n	8003de8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d010      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	4b66      	ldr	r3, [pc, #408]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d908      	bls.n	8003c76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c64:	4b63      	ldr	r3, [pc, #396]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4960      	ldr	r1, [pc, #384]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d04c      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8a:	4b5a      	ldr	r3, [pc, #360]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d121      	bne.n	8003cda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e0a6      	b.n	8003de8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d107      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ca2:	4b54      	ldr	r3, [pc, #336]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d115      	bne.n	8003cda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e09a      	b.n	8003de8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cba:	4b4e      	ldr	r3, [pc, #312]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e08e      	b.n	8003de8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cca:	4b4a      	ldr	r3, [pc, #296]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e086      	b.n	8003de8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cda:	4b46      	ldr	r3, [pc, #280]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f023 0203 	bic.w	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	4943      	ldr	r1, [pc, #268]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cec:	f7fd fdde 	bl	80018ac <HAL_GetTick>
 8003cf0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf4:	f7fd fdda 	bl	80018ac <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e06e      	b.n	8003de8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0a:	4b3a      	ldr	r3, [pc, #232]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 020c 	and.w	r2, r3, #12
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d1eb      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d010      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	4b31      	ldr	r3, [pc, #196]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d208      	bcs.n	8003d4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d38:	4b2e      	ldr	r3, [pc, #184]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	492b      	ldr	r1, [pc, #172]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d4a:	4b29      	ldr	r3, [pc, #164]	@ (8003df0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d210      	bcs.n	8003d7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d58:	4b25      	ldr	r3, [pc, #148]	@ (8003df0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f023 0207 	bic.w	r2, r3, #7
 8003d60:	4923      	ldr	r1, [pc, #140]	@ (8003df0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d68:	4b21      	ldr	r3, [pc, #132]	@ (8003df0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d001      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e036      	b.n	8003de8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d86:	4b1b      	ldr	r3, [pc, #108]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	4918      	ldr	r1, [pc, #96]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d009      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003da4:	4b13      	ldr	r3, [pc, #76]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4910      	ldr	r1, [pc, #64]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003db8:	f000 f824 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003df4 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	490b      	ldr	r1, [pc, #44]	@ (8003df8 <HAL_RCC_ClockConfig+0x1f4>)
 8003dca:	5ccb      	ldrb	r3, [r1, r3]
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd4:	4a09      	ldr	r2, [pc, #36]	@ (8003dfc <HAL_RCC_ClockConfig+0x1f8>)
 8003dd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dd8:	4b09      	ldr	r3, [pc, #36]	@ (8003e00 <HAL_RCC_ClockConfig+0x1fc>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fc ff8d 	bl	8000cfc <HAL_InitTick>
 8003de2:	4603      	mov	r3, r0
 8003de4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003de6:	7afb      	ldrb	r3, [r7, #11]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40022000 	.word	0x40022000
 8003df4:	40021000 	.word	0x40021000
 8003df8:	08007eac 	.word	0x08007eac
 8003dfc:	20000000 	.word	0x20000000
 8003e00:	20000004 	.word	0x20000004

08003e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b089      	sub	sp, #36	@ 0x24
 8003e08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e12:	4b3e      	ldr	r3, [pc, #248]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0x34>
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b0c      	cmp	r3, #12
 8003e30:	d121      	bne.n	8003e76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d11e      	bne.n	8003e76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e38:	4b34      	ldr	r3, [pc, #208]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d107      	bne.n	8003e54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e44:	4b31      	ldr	r3, [pc, #196]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	e005      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e54:	4b2d      	ldr	r3, [pc, #180]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	091b      	lsrs	r3, r3, #4
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e60:	4a2b      	ldr	r2, [pc, #172]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10d      	bne.n	8003e8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d102      	bne.n	8003e82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e7c:	4b25      	ldr	r3, [pc, #148]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e7e:	61bb      	str	r3, [r7, #24]
 8003e80:	e004      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d101      	bne.n	8003e8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e88:	4b23      	ldr	r3, [pc, #140]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	d134      	bne.n	8003efc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e92:	4b1e      	ldr	r3, [pc, #120]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d003      	beq.n	8003eaa <HAL_RCC_GetSysClockFreq+0xa6>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d003      	beq.n	8003eb0 <HAL_RCC_GetSysClockFreq+0xac>
 8003ea8:	e005      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eac:	617b      	str	r3, [r7, #20]
      break;
 8003eae:	e005      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003eb0:	4b19      	ldr	r3, [pc, #100]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x114>)
 8003eb2:	617b      	str	r3, [r7, #20]
      break;
 8003eb4:	e002      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	617b      	str	r3, [r7, #20]
      break;
 8003eba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ebc:	4b13      	ldr	r3, [pc, #76]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003eca:	4b10      	ldr	r3, [pc, #64]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	0a1b      	lsrs	r3, r3, #8
 8003ed0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	fb03 f202 	mul.w	r2, r3, r2
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	0e5b      	lsrs	r3, r3, #25
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	3301      	adds	r3, #1
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003efc:	69bb      	ldr	r3, [r7, #24]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3724      	adds	r7, #36	@ 0x24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	08007ec4 	.word	0x08007ec4
 8003f14:	00f42400 	.word	0x00f42400
 8003f18:	007a1200 	.word	0x007a1200

08003f1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f20:	4b03      	ldr	r3, [pc, #12]	@ (8003f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f22:	681b      	ldr	r3, [r3, #0]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	20000000 	.word	0x20000000

08003f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f38:	f7ff fff0 	bl	8003f1c <HAL_RCC_GetHCLKFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b06      	ldr	r3, [pc, #24]	@ (8003f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	4904      	ldr	r1, [pc, #16]	@ (8003f5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	08007ebc 	.word	0x08007ebc

08003f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f64:	f7ff ffda 	bl	8003f1c <HAL_RCC_GetHCLKFreq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	0adb      	lsrs	r3, r3, #11
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	4904      	ldr	r1, [pc, #16]	@ (8003f88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f76:	5ccb      	ldrb	r3, [r1, r3]
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000
 8003f88:	08007ebc 	.word	0x08007ebc

08003f8c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	220f      	movs	r2, #15
 8003f9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003f9c:	4b12      	ldr	r3, [pc, #72]	@ (8003fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 0203 	and.w	r2, r3, #3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003fc0:	4b09      	ldr	r3, [pc, #36]	@ (8003fe8 <HAL_RCC_GetClockConfig+0x5c>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	08db      	lsrs	r3, r3, #3
 8003fc6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003fce:	4b07      	ldr	r3, [pc, #28]	@ (8003fec <HAL_RCC_GetClockConfig+0x60>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0207 	and.w	r2, r3, #7
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	601a      	str	r2, [r3, #0]
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40022000 	.word	0x40022000

08003ff0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80040a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004008:	f7ff f9bc 	bl	8003384 <HAL_PWREx_GetVoltageRange>
 800400c:	6178      	str	r0, [r7, #20]
 800400e:	e014      	b.n	800403a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004010:	4b25      	ldr	r3, [pc, #148]	@ (80040a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004014:	4a24      	ldr	r2, [pc, #144]	@ (80040a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800401a:	6593      	str	r3, [r2, #88]	@ 0x58
 800401c:	4b22      	ldr	r3, [pc, #136]	@ (80040a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800401e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004028:	f7ff f9ac 	bl	8003384 <HAL_PWREx_GetVoltageRange>
 800402c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800402e:	4b1e      	ldr	r3, [pc, #120]	@ (80040a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004032:	4a1d      	ldr	r2, [pc, #116]	@ (80040a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004034:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004038:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004040:	d10b      	bne.n	800405a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b80      	cmp	r3, #128	@ 0x80
 8004046:	d919      	bls.n	800407c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2ba0      	cmp	r3, #160	@ 0xa0
 800404c:	d902      	bls.n	8004054 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800404e:	2302      	movs	r3, #2
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	e013      	b.n	800407c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004054:	2301      	movs	r3, #1
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	e010      	b.n	800407c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b80      	cmp	r3, #128	@ 0x80
 800405e:	d902      	bls.n	8004066 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004060:	2303      	movs	r3, #3
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	e00a      	b.n	800407c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b80      	cmp	r3, #128	@ 0x80
 800406a:	d102      	bne.n	8004072 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800406c:	2302      	movs	r3, #2
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	e004      	b.n	800407c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b70      	cmp	r3, #112	@ 0x70
 8004076:	d101      	bne.n	800407c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004078:	2301      	movs	r3, #1
 800407a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800407c:	4b0b      	ldr	r3, [pc, #44]	@ (80040ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f023 0207 	bic.w	r2, r3, #7
 8004084:	4909      	ldr	r1, [pc, #36]	@ (80040ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800408c:	4b07      	ldr	r3, [pc, #28]	@ (80040ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	429a      	cmp	r2, r3
 8004098:	d001      	beq.n	800409e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40022000 	.word	0x40022000

080040b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040b8:	2300      	movs	r3, #0
 80040ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040bc:	2300      	movs	r3, #0
 80040be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d041      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80040d4:	d02a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040d6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80040da:	d824      	bhi.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040e0:	d008      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040e6:	d81e      	bhi.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040f0:	d010      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040f2:	e018      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040f4:	4b86      	ldr	r3, [pc, #536]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a85      	ldr	r2, [pc, #532]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004100:	e015      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3304      	adds	r3, #4
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fabb 	bl	8004684 <RCCEx_PLLSAI1_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004112:	e00c      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3320      	adds	r3, #32
 8004118:	2100      	movs	r1, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fba6 	bl	800486c <RCCEx_PLLSAI2_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004124:	e003      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	74fb      	strb	r3, [r7, #19]
      break;
 800412a:	e000      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800412c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800412e:	7cfb      	ldrb	r3, [r7, #19]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10b      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004134:	4b76      	ldr	r3, [pc, #472]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004142:	4973      	ldr	r1, [pc, #460]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800414a:	e001      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d041      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004160:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004164:	d02a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004166:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800416a:	d824      	bhi.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800416c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004170:	d008      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004172:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004176:	d81e      	bhi.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800417c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004180:	d010      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004182:	e018      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004184:	4b62      	ldr	r3, [pc, #392]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4a61      	ldr	r2, [pc, #388]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800418e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004190:	e015      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3304      	adds	r3, #4
 8004196:	2100      	movs	r1, #0
 8004198:	4618      	mov	r0, r3
 800419a:	f000 fa73 	bl	8004684 <RCCEx_PLLSAI1_Config>
 800419e:	4603      	mov	r3, r0
 80041a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041a2:	e00c      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3320      	adds	r3, #32
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fb5e 	bl	800486c <RCCEx_PLLSAI2_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041b4:	e003      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	74fb      	strb	r3, [r7, #19]
      break;
 80041ba:	e000      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80041bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041be:	7cfb      	ldrb	r3, [r7, #19]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10b      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041c4:	4b52      	ldr	r3, [pc, #328]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041d2:	494f      	ldr	r1, [pc, #316]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041da:	e001      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	7cfb      	ldrb	r3, [r7, #19]
 80041de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80a0 	beq.w	800432e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ee:	2300      	movs	r3, #0
 80041f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041f2:	4b47      	ldr	r3, [pc, #284]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004202:	2300      	movs	r3, #0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00d      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004208:	4b41      	ldr	r3, [pc, #260]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420c:	4a40      	ldr	r2, [pc, #256]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004212:	6593      	str	r3, [r2, #88]	@ 0x58
 8004214:	4b3e      	ldr	r3, [pc, #248]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004220:	2301      	movs	r3, #1
 8004222:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004224:	4b3b      	ldr	r3, [pc, #236]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a3a      	ldr	r2, [pc, #232]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800422a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800422e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004230:	f7fd fb3c 	bl	80018ac <HAL_GetTick>
 8004234:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004236:	e009      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004238:	f7fd fb38 	bl	80018ac <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d902      	bls.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	74fb      	strb	r3, [r7, #19]
        break;
 800424a:	e005      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800424c:	4b31      	ldr	r3, [pc, #196]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0ef      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004258:	7cfb      	ldrb	r3, [r7, #19]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d15c      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800425e:	4b2c      	ldr	r3, [pc, #176]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004264:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004268:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01f      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	429a      	cmp	r2, r3
 800427a:	d019      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800427c:	4b24      	ldr	r3, [pc, #144]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004282:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004286:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004288:	4b21      	ldr	r3, [pc, #132]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428e:	4a20      	ldr	r2, [pc, #128]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004294:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004298:	4b1d      	ldr	r3, [pc, #116]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429e:	4a1c      	ldr	r2, [pc, #112]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042a8:	4a19      	ldr	r2, [pc, #100]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d016      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ba:	f7fd faf7 	bl	80018ac <HAL_GetTick>
 80042be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c0:	e00b      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c2:	f7fd faf3 	bl	80018ac <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d902      	bls.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	74fb      	strb	r3, [r7, #19]
            break;
 80042d8:	e006      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042da:	4b0d      	ldr	r3, [pc, #52]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0ec      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80042e8:	7cfb      	ldrb	r3, [r7, #19]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10c      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ee:	4b08      	ldr	r3, [pc, #32]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042fe:	4904      	ldr	r1, [pc, #16]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004306:	e009      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	74bb      	strb	r3, [r7, #18]
 800430c:	e006      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800430e:	bf00      	nop
 8004310:	40021000 	.word	0x40021000
 8004314:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004318:	7cfb      	ldrb	r3, [r7, #19]
 800431a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800431c:	7c7b      	ldrb	r3, [r7, #17]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d105      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004322:	4b9e      	ldr	r3, [pc, #632]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004326:	4a9d      	ldr	r2, [pc, #628]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004328:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800432c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800433a:	4b98      	ldr	r3, [pc, #608]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004340:	f023 0203 	bic.w	r2, r3, #3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004348:	4994      	ldr	r1, [pc, #592]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800435c:	4b8f      	ldr	r3, [pc, #572]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004362:	f023 020c 	bic.w	r2, r3, #12
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436a:	498c      	ldr	r1, [pc, #560]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800437e:	4b87      	ldr	r3, [pc, #540]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004384:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438c:	4983      	ldr	r1, [pc, #524]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00a      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043a0:	4b7e      	ldr	r3, [pc, #504]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ae:	497b      	ldr	r1, [pc, #492]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043c2:	4b76      	ldr	r3, [pc, #472]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d0:	4972      	ldr	r1, [pc, #456]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043e4:	4b6d      	ldr	r3, [pc, #436]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f2:	496a      	ldr	r1, [pc, #424]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004406:	4b65      	ldr	r3, [pc, #404]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004414:	4961      	ldr	r1, [pc, #388]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004428:	4b5c      	ldr	r3, [pc, #368]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800442e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004436:	4959      	ldr	r1, [pc, #356]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800444a:	4b54      	ldr	r3, [pc, #336]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004450:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004458:	4950      	ldr	r1, [pc, #320]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800446c:	4b4b      	ldr	r3, [pc, #300]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004472:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800447a:	4948      	ldr	r1, [pc, #288]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800448e:	4b43      	ldr	r3, [pc, #268]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004494:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449c:	493f      	ldr	r1, [pc, #252]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d028      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044b0:	4b3a      	ldr	r3, [pc, #232]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044be:	4937      	ldr	r1, [pc, #220]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044ce:	d106      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044d0:	4b32      	ldr	r3, [pc, #200]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4a31      	ldr	r2, [pc, #196]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044da:	60d3      	str	r3, [r2, #12]
 80044dc:	e011      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044e6:	d10c      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3304      	adds	r3, #4
 80044ec:	2101      	movs	r1, #1
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 f8c8 	bl	8004684 <RCCEx_PLLSAI1_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044f8:	7cfb      	ldrb	r3, [r7, #19]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80044fe:	7cfb      	ldrb	r3, [r7, #19]
 8004500:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d028      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800450e:	4b23      	ldr	r3, [pc, #140]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004514:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451c:	491f      	ldr	r1, [pc, #124]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004528:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800452c:	d106      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800452e:	4b1b      	ldr	r3, [pc, #108]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	4a1a      	ldr	r2, [pc, #104]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004538:	60d3      	str	r3, [r2, #12]
 800453a:	e011      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004540:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004544:	d10c      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3304      	adds	r3, #4
 800454a:	2101      	movs	r1, #1
 800454c:	4618      	mov	r0, r3
 800454e:	f000 f899 	bl	8004684 <RCCEx_PLLSAI1_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004556:	7cfb      	ldrb	r3, [r7, #19]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800455c:	7cfb      	ldrb	r3, [r7, #19]
 800455e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d02b      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800456c:	4b0b      	ldr	r3, [pc, #44]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004572:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800457a:	4908      	ldr	r1, [pc, #32]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004586:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800458a:	d109      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800458c:	4b03      	ldr	r3, [pc, #12]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	4a02      	ldr	r2, [pc, #8]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004596:	60d3      	str	r3, [r2, #12]
 8004598:	e014      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800459a:	bf00      	nop
 800459c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045a8:	d10c      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3304      	adds	r3, #4
 80045ae:	2101      	movs	r1, #1
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 f867 	bl	8004684 <RCCEx_PLLSAI1_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ba:	7cfb      	ldrb	r3, [r7, #19]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80045c0:	7cfb      	ldrb	r3, [r7, #19]
 80045c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d02f      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045de:	4928      	ldr	r1, [pc, #160]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045ee:	d10d      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3304      	adds	r3, #4
 80045f4:	2102      	movs	r1, #2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 f844 	bl	8004684 <RCCEx_PLLSAI1_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004600:	7cfb      	ldrb	r3, [r7, #19]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d014      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004606:	7cfb      	ldrb	r3, [r7, #19]
 8004608:	74bb      	strb	r3, [r7, #18]
 800460a:	e011      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004610:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004614:	d10c      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3320      	adds	r3, #32
 800461a:	2102      	movs	r1, #2
 800461c:	4618      	mov	r0, r3
 800461e:	f000 f925 	bl	800486c <RCCEx_PLLSAI2_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004626:	7cfb      	ldrb	r3, [r7, #19]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800462c:	7cfb      	ldrb	r3, [r7, #19]
 800462e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800463c:	4b10      	ldr	r3, [pc, #64]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004642:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800464a:	490d      	ldr	r1, [pc, #52]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00b      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800465e:	4b08      	ldr	r3, [pc, #32]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004664:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800466e:	4904      	ldr	r1, [pc, #16]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004676:	7cbb      	ldrb	r3, [r7, #18]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021000 	.word	0x40021000

08004684 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004692:	4b75      	ldr	r3, [pc, #468]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f003 0303 	and.w	r3, r3, #3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d018      	beq.n	80046d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800469e:	4b72      	ldr	r3, [pc, #456]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f003 0203 	and.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d10d      	bne.n	80046ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
       ||
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d009      	beq.n	80046ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046b6:	4b6c      	ldr	r3, [pc, #432]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	091b      	lsrs	r3, r3, #4
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
       ||
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d047      	beq.n	800475a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	73fb      	strb	r3, [r7, #15]
 80046ce:	e044      	b.n	800475a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d018      	beq.n	800470a <RCCEx_PLLSAI1_Config+0x86>
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d825      	bhi.n	8004728 <RCCEx_PLLSAI1_Config+0xa4>
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d002      	beq.n	80046e6 <RCCEx_PLLSAI1_Config+0x62>
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d009      	beq.n	80046f8 <RCCEx_PLLSAI1_Config+0x74>
 80046e4:	e020      	b.n	8004728 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046e6:	4b60      	ldr	r3, [pc, #384]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d11d      	bne.n	800472e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046f6:	e01a      	b.n	800472e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046f8:	4b5b      	ldr	r3, [pc, #364]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004700:	2b00      	cmp	r3, #0
 8004702:	d116      	bne.n	8004732 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004708:	e013      	b.n	8004732 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800470a:	4b57      	ldr	r3, [pc, #348]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10f      	bne.n	8004736 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004716:	4b54      	ldr	r3, [pc, #336]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004726:	e006      	b.n	8004736 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	73fb      	strb	r3, [r7, #15]
      break;
 800472c:	e004      	b.n	8004738 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800472e:	bf00      	nop
 8004730:	e002      	b.n	8004738 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004732:	bf00      	nop
 8004734:	e000      	b.n	8004738 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004736:	bf00      	nop
    }

    if(status == HAL_OK)
 8004738:	7bfb      	ldrb	r3, [r7, #15]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10d      	bne.n	800475a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800473e:	4b4a      	ldr	r3, [pc, #296]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6819      	ldr	r1, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	3b01      	subs	r3, #1
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	430b      	orrs	r3, r1
 8004754:	4944      	ldr	r1, [pc, #272]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004756:	4313      	orrs	r3, r2
 8004758:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d17d      	bne.n	800485c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004760:	4b41      	ldr	r3, [pc, #260]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a40      	ldr	r2, [pc, #256]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004766:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800476a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476c:	f7fd f89e 	bl	80018ac <HAL_GetTick>
 8004770:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004772:	e009      	b.n	8004788 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004774:	f7fd f89a 	bl	80018ac <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d902      	bls.n	8004788 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	73fb      	strb	r3, [r7, #15]
        break;
 8004786:	e005      	b.n	8004794 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004788:	4b37      	ldr	r3, [pc, #220]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1ef      	bne.n	8004774 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d160      	bne.n	800485c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d111      	bne.n	80047c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047a0:	4b31      	ldr	r3, [pc, #196]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80047a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6892      	ldr	r2, [r2, #8]
 80047b0:	0211      	lsls	r1, r2, #8
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	68d2      	ldr	r2, [r2, #12]
 80047b6:	0912      	lsrs	r2, r2, #4
 80047b8:	0452      	lsls	r2, r2, #17
 80047ba:	430a      	orrs	r2, r1
 80047bc:	492a      	ldr	r1, [pc, #168]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	610b      	str	r3, [r1, #16]
 80047c2:	e027      	b.n	8004814 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d112      	bne.n	80047f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047ca:	4b27      	ldr	r3, [pc, #156]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80047d2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6892      	ldr	r2, [r2, #8]
 80047da:	0211      	lsls	r1, r2, #8
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6912      	ldr	r2, [r2, #16]
 80047e0:	0852      	lsrs	r2, r2, #1
 80047e2:	3a01      	subs	r2, #1
 80047e4:	0552      	lsls	r2, r2, #21
 80047e6:	430a      	orrs	r2, r1
 80047e8:	491f      	ldr	r1, [pc, #124]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	610b      	str	r3, [r1, #16]
 80047ee:	e011      	b.n	8004814 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80047f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6892      	ldr	r2, [r2, #8]
 8004800:	0211      	lsls	r1, r2, #8
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6952      	ldr	r2, [r2, #20]
 8004806:	0852      	lsrs	r2, r2, #1
 8004808:	3a01      	subs	r2, #1
 800480a:	0652      	lsls	r2, r2, #25
 800480c:	430a      	orrs	r2, r1
 800480e:	4916      	ldr	r1, [pc, #88]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004810:	4313      	orrs	r3, r2
 8004812:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004814:	4b14      	ldr	r3, [pc, #80]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a13      	ldr	r2, [pc, #76]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 800481a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800481e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004820:	f7fd f844 	bl	80018ac <HAL_GetTick>
 8004824:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004826:	e009      	b.n	800483c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004828:	f7fd f840 	bl	80018ac <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d902      	bls.n	800483c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	73fb      	strb	r3, [r7, #15]
          break;
 800483a:	e005      	b.n	8004848 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800483c:	4b0a      	ldr	r3, [pc, #40]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0ef      	beq.n	8004828 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800484e:	4b06      	ldr	r3, [pc, #24]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	4904      	ldr	r1, [pc, #16]	@ (8004868 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004858:	4313      	orrs	r3, r2
 800485a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800485c:	7bfb      	ldrb	r3, [r7, #15]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40021000 	.word	0x40021000

0800486c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800487a:	4b6a      	ldr	r3, [pc, #424]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d018      	beq.n	80048b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004886:	4b67      	ldr	r3, [pc, #412]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0203 	and.w	r2, r3, #3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d10d      	bne.n	80048b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
       ||
 800489a:	2b00      	cmp	r3, #0
 800489c:	d009      	beq.n	80048b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800489e:	4b61      	ldr	r3, [pc, #388]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	091b      	lsrs	r3, r3, #4
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
       ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d047      	beq.n	8004942 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	73fb      	strb	r3, [r7, #15]
 80048b6:	e044      	b.n	8004942 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d018      	beq.n	80048f2 <RCCEx_PLLSAI2_Config+0x86>
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d825      	bhi.n	8004910 <RCCEx_PLLSAI2_Config+0xa4>
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d002      	beq.n	80048ce <RCCEx_PLLSAI2_Config+0x62>
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d009      	beq.n	80048e0 <RCCEx_PLLSAI2_Config+0x74>
 80048cc:	e020      	b.n	8004910 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048ce:	4b55      	ldr	r3, [pc, #340]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d11d      	bne.n	8004916 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048de:	e01a      	b.n	8004916 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048e0:	4b50      	ldr	r3, [pc, #320]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d116      	bne.n	800491a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048f0:	e013      	b.n	800491a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048f2:	4b4c      	ldr	r3, [pc, #304]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10f      	bne.n	800491e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048fe:	4b49      	ldr	r3, [pc, #292]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d109      	bne.n	800491e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800490e:	e006      	b.n	800491e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
      break;
 8004914:	e004      	b.n	8004920 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004916:	bf00      	nop
 8004918:	e002      	b.n	8004920 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800491a:	bf00      	nop
 800491c:	e000      	b.n	8004920 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800491e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10d      	bne.n	8004942 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004926:	4b3f      	ldr	r3, [pc, #252]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6819      	ldr	r1, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	3b01      	subs	r3, #1
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	430b      	orrs	r3, r1
 800493c:	4939      	ldr	r1, [pc, #228]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 800493e:	4313      	orrs	r3, r2
 8004940:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d167      	bne.n	8004a18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004948:	4b36      	ldr	r3, [pc, #216]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a35      	ldr	r2, [pc, #212]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 800494e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004954:	f7fc ffaa 	bl	80018ac <HAL_GetTick>
 8004958:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800495a:	e009      	b.n	8004970 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800495c:	f7fc ffa6 	bl	80018ac <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d902      	bls.n	8004970 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	73fb      	strb	r3, [r7, #15]
        break;
 800496e:	e005      	b.n	800497c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004970:	4b2c      	ldr	r3, [pc, #176]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1ef      	bne.n	800495c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d14a      	bne.n	8004a18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d111      	bne.n	80049ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004988:	4b26      	ldr	r3, [pc, #152]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004990:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6892      	ldr	r2, [r2, #8]
 8004998:	0211      	lsls	r1, r2, #8
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	68d2      	ldr	r2, [r2, #12]
 800499e:	0912      	lsrs	r2, r2, #4
 80049a0:	0452      	lsls	r2, r2, #17
 80049a2:	430a      	orrs	r2, r1
 80049a4:	491f      	ldr	r1, [pc, #124]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	614b      	str	r3, [r1, #20]
 80049aa:	e011      	b.n	80049d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6892      	ldr	r2, [r2, #8]
 80049bc:	0211      	lsls	r1, r2, #8
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6912      	ldr	r2, [r2, #16]
 80049c2:	0852      	lsrs	r2, r2, #1
 80049c4:	3a01      	subs	r2, #1
 80049c6:	0652      	lsls	r2, r2, #25
 80049c8:	430a      	orrs	r2, r1
 80049ca:	4916      	ldr	r1, [pc, #88]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80049d0:	4b14      	ldr	r3, [pc, #80]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a13      	ldr	r2, [pc, #76]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049dc:	f7fc ff66 	bl	80018ac <HAL_GetTick>
 80049e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049e2:	e009      	b.n	80049f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049e4:	f7fc ff62 	bl	80018ac <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d902      	bls.n	80049f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	73fb      	strb	r3, [r7, #15]
          break;
 80049f6:	e005      	b.n	8004a04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0ef      	beq.n	80049e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a0a:	4b06      	ldr	r3, [pc, #24]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	4904      	ldr	r1, [pc, #16]	@ (8004a24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40021000 	.word	0x40021000

08004a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e095      	b.n	8004b66 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d108      	bne.n	8004a54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a4a:	d009      	beq.n	8004a60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	61da      	str	r2, [r3, #28]
 8004a52:	e005      	b.n	8004a60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d106      	bne.n	8004a80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fc f8d6 	bl	8000c2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004aa0:	d902      	bls.n	8004aa8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e002      	b.n	8004aae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004aa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004aac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004ab6:	d007      	beq.n	8004ac8 <HAL_SPI_Init+0xa0>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ac0:	d002      	beq.n	8004ac8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b0a:	ea42 0103 	orr.w	r1, r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b12:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	0c1b      	lsrs	r3, r3, #16
 8004b24:	f003 0204 	and.w	r2, r3, #4
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004b44:	ea42 0103 	orr.w	r1, r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e049      	b.n	8004c14 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d106      	bne.n	8004b9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7fc fc73 	bl	8001480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	4619      	mov	r1, r3
 8004bac:	4610      	mov	r0, r2
 8004bae:	f000 fc0f 	bl	80053d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d001      	beq.n	8004c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e04f      	b.n	8004cd4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a23      	ldr	r2, [pc, #140]	@ (8004ce0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d01d      	beq.n	8004c92 <HAL_TIM_Base_Start_IT+0x76>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c5e:	d018      	beq.n	8004c92 <HAL_TIM_Base_Start_IT+0x76>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d013      	beq.n	8004c92 <HAL_TIM_Base_Start_IT+0x76>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00e      	beq.n	8004c92 <HAL_TIM_Base_Start_IT+0x76>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1c      	ldr	r2, [pc, #112]	@ (8004cec <HAL_TIM_Base_Start_IT+0xd0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d009      	beq.n	8004c92 <HAL_TIM_Base_Start_IT+0x76>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a1b      	ldr	r2, [pc, #108]	@ (8004cf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <HAL_TIM_Base_Start_IT+0x76>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a19      	ldr	r2, [pc, #100]	@ (8004cf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d115      	bne.n	8004cbe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	4b17      	ldr	r3, [pc, #92]	@ (8004cf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b06      	cmp	r3, #6
 8004ca2:	d015      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0xb4>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004caa:	d011      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbc:	e008      	b.n	8004cd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0201 	orr.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	e000      	b.n	8004cd2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	40012c00 	.word	0x40012c00
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40000800 	.word	0x40000800
 8004cec:	40000c00 	.word	0x40000c00
 8004cf0:	40013400 	.word	0x40013400
 8004cf4:	40014000 	.word	0x40014000
 8004cf8:	00010007 	.word	0x00010007

08004cfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e049      	b.n	8004da2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f841 	bl	8004daa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f000 fb48 	bl	80053d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d020      	beq.n	8004e22 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d01b      	beq.n	8004e22 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f06f 0202 	mvn.w	r2, #2
 8004df2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fac2 	bl	8005392 <HAL_TIM_IC_CaptureCallback>
 8004e0e:	e005      	b.n	8004e1c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fab4 	bl	800537e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fac5 	bl	80053a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d020      	beq.n	8004e6e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d01b      	beq.n	8004e6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f06f 0204 	mvn.w	r2, #4
 8004e3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fa9c 	bl	8005392 <HAL_TIM_IC_CaptureCallback>
 8004e5a:	e005      	b.n	8004e68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fa8e 	bl	800537e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fa9f 	bl	80053a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d020      	beq.n	8004eba <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01b      	beq.n	8004eba <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f06f 0208 	mvn.w	r2, #8
 8004e8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2204      	movs	r2, #4
 8004e90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fa76 	bl	8005392 <HAL_TIM_IC_CaptureCallback>
 8004ea6:	e005      	b.n	8004eb4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fa68 	bl	800537e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fa79 	bl	80053a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d020      	beq.n	8004f06 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01b      	beq.n	8004f06 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f06f 0210 	mvn.w	r2, #16
 8004ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2208      	movs	r2, #8
 8004edc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fa50 	bl	8005392 <HAL_TIM_IC_CaptureCallback>
 8004ef2:	e005      	b.n	8004f00 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fa42 	bl	800537e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fa53 	bl	80053a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00c      	beq.n	8004f2a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d007      	beq.n	8004f2a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f06f 0201 	mvn.w	r2, #1
 8004f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7fb fe2b 	bl	8000b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00c      	beq.n	8004f4e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 ff5b 	bl	8005e04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00c      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d007      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 ff53 	bl	8005e18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00c      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fa12 	bl	80053ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00c      	beq.n	8004fba <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f06f 0220 	mvn.w	r2, #32
 8004fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 ff1b 	bl	8005df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fba:	bf00      	nop
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e0ff      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b14      	cmp	r3, #20
 8004fee:	f200 80f0 	bhi.w	80051d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	0800504d 	.word	0x0800504d
 8004ffc:	080051d3 	.word	0x080051d3
 8005000:	080051d3 	.word	0x080051d3
 8005004:	080051d3 	.word	0x080051d3
 8005008:	0800508d 	.word	0x0800508d
 800500c:	080051d3 	.word	0x080051d3
 8005010:	080051d3 	.word	0x080051d3
 8005014:	080051d3 	.word	0x080051d3
 8005018:	080050cf 	.word	0x080050cf
 800501c:	080051d3 	.word	0x080051d3
 8005020:	080051d3 	.word	0x080051d3
 8005024:	080051d3 	.word	0x080051d3
 8005028:	0800510f 	.word	0x0800510f
 800502c:	080051d3 	.word	0x080051d3
 8005030:	080051d3 	.word	0x080051d3
 8005034:	080051d3 	.word	0x080051d3
 8005038:	08005151 	.word	0x08005151
 800503c:	080051d3 	.word	0x080051d3
 8005040:	080051d3 	.word	0x080051d3
 8005044:	080051d3 	.word	0x080051d3
 8005048:	08005191 	.word	0x08005191
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68b9      	ldr	r1, [r7, #8]
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fa56 	bl	8005504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0208 	orr.w	r2, r2, #8
 8005066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699a      	ldr	r2, [r3, #24]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0204 	bic.w	r2, r2, #4
 8005076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6999      	ldr	r1, [r3, #24]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	619a      	str	r2, [r3, #24]
      break;
 800508a:	e0a5      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fac6 	bl	8005624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6999      	ldr	r1, [r3, #24]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	021a      	lsls	r2, r3, #8
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	619a      	str	r2, [r3, #24]
      break;
 80050cc:	e084      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fb2f 	bl	8005738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0208 	orr.w	r2, r2, #8
 80050e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69da      	ldr	r2, [r3, #28]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0204 	bic.w	r2, r2, #4
 80050f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69d9      	ldr	r1, [r3, #28]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	61da      	str	r2, [r3, #28]
      break;
 800510c:	e064      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fb97 	bl	8005848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69d9      	ldr	r1, [r3, #28]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	021a      	lsls	r2, r3, #8
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	61da      	str	r2, [r3, #28]
      break;
 800514e:	e043      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fbe0 	bl	800591c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0208 	orr.w	r2, r2, #8
 800516a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0204 	bic.w	r2, r2, #4
 800517a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	691a      	ldr	r2, [r3, #16]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800518e:	e023      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fc24 	bl	80059e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	021a      	lsls	r2, r3, #8
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80051d0:	e002      	b.n	80051d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	75fb      	strb	r3, [r7, #23]
      break;
 80051d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop

080051ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_TIM_ConfigClockSource+0x1c>
 8005204:	2302      	movs	r3, #2
 8005206:	e0b6      	b.n	8005376 <HAL_TIM_ConfigClockSource+0x18a>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005226:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800522a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005232:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005244:	d03e      	beq.n	80052c4 <HAL_TIM_ConfigClockSource+0xd8>
 8005246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800524a:	f200 8087 	bhi.w	800535c <HAL_TIM_ConfigClockSource+0x170>
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005252:	f000 8086 	beq.w	8005362 <HAL_TIM_ConfigClockSource+0x176>
 8005256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800525a:	d87f      	bhi.n	800535c <HAL_TIM_ConfigClockSource+0x170>
 800525c:	2b70      	cmp	r3, #112	@ 0x70
 800525e:	d01a      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0xaa>
 8005260:	2b70      	cmp	r3, #112	@ 0x70
 8005262:	d87b      	bhi.n	800535c <HAL_TIM_ConfigClockSource+0x170>
 8005264:	2b60      	cmp	r3, #96	@ 0x60
 8005266:	d050      	beq.n	800530a <HAL_TIM_ConfigClockSource+0x11e>
 8005268:	2b60      	cmp	r3, #96	@ 0x60
 800526a:	d877      	bhi.n	800535c <HAL_TIM_ConfigClockSource+0x170>
 800526c:	2b50      	cmp	r3, #80	@ 0x50
 800526e:	d03c      	beq.n	80052ea <HAL_TIM_ConfigClockSource+0xfe>
 8005270:	2b50      	cmp	r3, #80	@ 0x50
 8005272:	d873      	bhi.n	800535c <HAL_TIM_ConfigClockSource+0x170>
 8005274:	2b40      	cmp	r3, #64	@ 0x40
 8005276:	d058      	beq.n	800532a <HAL_TIM_ConfigClockSource+0x13e>
 8005278:	2b40      	cmp	r3, #64	@ 0x40
 800527a:	d86f      	bhi.n	800535c <HAL_TIM_ConfigClockSource+0x170>
 800527c:	2b30      	cmp	r3, #48	@ 0x30
 800527e:	d064      	beq.n	800534a <HAL_TIM_ConfigClockSource+0x15e>
 8005280:	2b30      	cmp	r3, #48	@ 0x30
 8005282:	d86b      	bhi.n	800535c <HAL_TIM_ConfigClockSource+0x170>
 8005284:	2b20      	cmp	r3, #32
 8005286:	d060      	beq.n	800534a <HAL_TIM_ConfigClockSource+0x15e>
 8005288:	2b20      	cmp	r3, #32
 800528a:	d867      	bhi.n	800535c <HAL_TIM_ConfigClockSource+0x170>
 800528c:	2b00      	cmp	r3, #0
 800528e:	d05c      	beq.n	800534a <HAL_TIM_ConfigClockSource+0x15e>
 8005290:	2b10      	cmp	r3, #16
 8005292:	d05a      	beq.n	800534a <HAL_TIM_ConfigClockSource+0x15e>
 8005294:	e062      	b.n	800535c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052a6:	f000 fc7d 	bl	8005ba4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	609a      	str	r2, [r3, #8]
      break;
 80052c2:	e04f      	b.n	8005364 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052d4:	f000 fc66 	bl	8005ba4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052e6:	609a      	str	r2, [r3, #8]
      break;
 80052e8:	e03c      	b.n	8005364 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f6:	461a      	mov	r2, r3
 80052f8:	f000 fbda 	bl	8005ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2150      	movs	r1, #80	@ 0x50
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fc33 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8005308:	e02c      	b.n	8005364 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005316:	461a      	mov	r2, r3
 8005318:	f000 fbf9 	bl	8005b0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2160      	movs	r1, #96	@ 0x60
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fc23 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8005328:	e01c      	b.n	8005364 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005336:	461a      	mov	r2, r3
 8005338:	f000 fbba 	bl	8005ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2140      	movs	r1, #64	@ 0x40
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fc13 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8005348:	e00c      	b.n	8005364 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4619      	mov	r1, r3
 8005354:	4610      	mov	r0, r2
 8005356:	f000 fc0a 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 800535a:	e003      	b.n	8005364 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	73fb      	strb	r3, [r7, #15]
      break;
 8005360:	e000      	b.n	8005364 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005362:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005374:	7bfb      	ldrb	r3, [r7, #15]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
	...

080053d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a40      	ldr	r2, [pc, #256]	@ (80054e4 <TIM_Base_SetConfig+0x114>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d013      	beq.n	8005410 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ee:	d00f      	beq.n	8005410 <TIM_Base_SetConfig+0x40>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a3d      	ldr	r2, [pc, #244]	@ (80054e8 <TIM_Base_SetConfig+0x118>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00b      	beq.n	8005410 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a3c      	ldr	r2, [pc, #240]	@ (80054ec <TIM_Base_SetConfig+0x11c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d007      	beq.n	8005410 <TIM_Base_SetConfig+0x40>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a3b      	ldr	r2, [pc, #236]	@ (80054f0 <TIM_Base_SetConfig+0x120>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d003      	beq.n	8005410 <TIM_Base_SetConfig+0x40>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a3a      	ldr	r2, [pc, #232]	@ (80054f4 <TIM_Base_SetConfig+0x124>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d108      	bne.n	8005422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a2f      	ldr	r2, [pc, #188]	@ (80054e4 <TIM_Base_SetConfig+0x114>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d01f      	beq.n	800546a <TIM_Base_SetConfig+0x9a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005430:	d01b      	beq.n	800546a <TIM_Base_SetConfig+0x9a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a2c      	ldr	r2, [pc, #176]	@ (80054e8 <TIM_Base_SetConfig+0x118>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d017      	beq.n	800546a <TIM_Base_SetConfig+0x9a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a2b      	ldr	r2, [pc, #172]	@ (80054ec <TIM_Base_SetConfig+0x11c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d013      	beq.n	800546a <TIM_Base_SetConfig+0x9a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a2a      	ldr	r2, [pc, #168]	@ (80054f0 <TIM_Base_SetConfig+0x120>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00f      	beq.n	800546a <TIM_Base_SetConfig+0x9a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a29      	ldr	r2, [pc, #164]	@ (80054f4 <TIM_Base_SetConfig+0x124>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00b      	beq.n	800546a <TIM_Base_SetConfig+0x9a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a28      	ldr	r2, [pc, #160]	@ (80054f8 <TIM_Base_SetConfig+0x128>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d007      	beq.n	800546a <TIM_Base_SetConfig+0x9a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a27      	ldr	r2, [pc, #156]	@ (80054fc <TIM_Base_SetConfig+0x12c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d003      	beq.n	800546a <TIM_Base_SetConfig+0x9a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a26      	ldr	r2, [pc, #152]	@ (8005500 <TIM_Base_SetConfig+0x130>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d108      	bne.n	800547c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a10      	ldr	r2, [pc, #64]	@ (80054e4 <TIM_Base_SetConfig+0x114>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00f      	beq.n	80054c8 <TIM_Base_SetConfig+0xf8>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a12      	ldr	r2, [pc, #72]	@ (80054f4 <TIM_Base_SetConfig+0x124>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00b      	beq.n	80054c8 <TIM_Base_SetConfig+0xf8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a11      	ldr	r2, [pc, #68]	@ (80054f8 <TIM_Base_SetConfig+0x128>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d007      	beq.n	80054c8 <TIM_Base_SetConfig+0xf8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a10      	ldr	r2, [pc, #64]	@ (80054fc <TIM_Base_SetConfig+0x12c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d003      	beq.n	80054c8 <TIM_Base_SetConfig+0xf8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a0f      	ldr	r2, [pc, #60]	@ (8005500 <TIM_Base_SetConfig+0x130>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d103      	bne.n	80054d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	615a      	str	r2, [r3, #20]
}
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40012c00 	.word	0x40012c00
 80054e8:	40000400 	.word	0x40000400
 80054ec:	40000800 	.word	0x40000800
 80054f0:	40000c00 	.word	0x40000c00
 80054f4:	40013400 	.word	0x40013400
 80054f8:	40014000 	.word	0x40014000
 80054fc:	40014400 	.word	0x40014400
 8005500:	40014800 	.word	0x40014800

08005504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	f023 0201 	bic.w	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0303 	bic.w	r3, r3, #3
 800553e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f023 0302 	bic.w	r3, r3, #2
 8005550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a2c      	ldr	r2, [pc, #176]	@ (8005610 <TIM_OC1_SetConfig+0x10c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00f      	beq.n	8005584 <TIM_OC1_SetConfig+0x80>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a2b      	ldr	r2, [pc, #172]	@ (8005614 <TIM_OC1_SetConfig+0x110>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d00b      	beq.n	8005584 <TIM_OC1_SetConfig+0x80>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a2a      	ldr	r2, [pc, #168]	@ (8005618 <TIM_OC1_SetConfig+0x114>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d007      	beq.n	8005584 <TIM_OC1_SetConfig+0x80>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a29      	ldr	r2, [pc, #164]	@ (800561c <TIM_OC1_SetConfig+0x118>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d003      	beq.n	8005584 <TIM_OC1_SetConfig+0x80>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a28      	ldr	r2, [pc, #160]	@ (8005620 <TIM_OC1_SetConfig+0x11c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d10c      	bne.n	800559e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f023 0308 	bic.w	r3, r3, #8
 800558a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	4313      	orrs	r3, r2
 8005594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f023 0304 	bic.w	r3, r3, #4
 800559c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005610 <TIM_OC1_SetConfig+0x10c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00f      	beq.n	80055c6 <TIM_OC1_SetConfig+0xc2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005614 <TIM_OC1_SetConfig+0x110>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <TIM_OC1_SetConfig+0xc2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a19      	ldr	r2, [pc, #100]	@ (8005618 <TIM_OC1_SetConfig+0x114>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <TIM_OC1_SetConfig+0xc2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a18      	ldr	r2, [pc, #96]	@ (800561c <TIM_OC1_SetConfig+0x118>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_OC1_SetConfig+0xc2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a17      	ldr	r2, [pc, #92]	@ (8005620 <TIM_OC1_SetConfig+0x11c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d111      	bne.n	80055ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4313      	orrs	r3, r2
 80055de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	621a      	str	r2, [r3, #32]
}
 8005604:	bf00      	nop
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40013400 	.word	0x40013400
 8005618:	40014000 	.word	0x40014000
 800561c:	40014400 	.word	0x40014400
 8005620:	40014800 	.word	0x40014800

08005624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	f023 0210 	bic.w	r2, r3, #16
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005652:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800565e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	021b      	lsls	r3, r3, #8
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f023 0320 	bic.w	r3, r3, #32
 8005672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	011b      	lsls	r3, r3, #4
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a28      	ldr	r2, [pc, #160]	@ (8005724 <TIM_OC2_SetConfig+0x100>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d003      	beq.n	8005690 <TIM_OC2_SetConfig+0x6c>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a27      	ldr	r2, [pc, #156]	@ (8005728 <TIM_OC2_SetConfig+0x104>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d10d      	bne.n	80056ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005724 <TIM_OC2_SetConfig+0x100>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00f      	beq.n	80056d4 <TIM_OC2_SetConfig+0xb0>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005728 <TIM_OC2_SetConfig+0x104>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00b      	beq.n	80056d4 <TIM_OC2_SetConfig+0xb0>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a1b      	ldr	r2, [pc, #108]	@ (800572c <TIM_OC2_SetConfig+0x108>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d007      	beq.n	80056d4 <TIM_OC2_SetConfig+0xb0>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a1a      	ldr	r2, [pc, #104]	@ (8005730 <TIM_OC2_SetConfig+0x10c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d003      	beq.n	80056d4 <TIM_OC2_SetConfig+0xb0>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a19      	ldr	r2, [pc, #100]	@ (8005734 <TIM_OC2_SetConfig+0x110>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d113      	bne.n	80056fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	621a      	str	r2, [r3, #32]
}
 8005716:	bf00      	nop
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40012c00 	.word	0x40012c00
 8005728:	40013400 	.word	0x40013400
 800572c:	40014000 	.word	0x40014000
 8005730:	40014400 	.word	0x40014400
 8005734:	40014800 	.word	0x40014800

08005738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800576a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0303 	bic.w	r3, r3, #3
 8005772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a27      	ldr	r2, [pc, #156]	@ (8005834 <TIM_OC3_SetConfig+0xfc>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d003      	beq.n	80057a2 <TIM_OC3_SetConfig+0x6a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a26      	ldr	r2, [pc, #152]	@ (8005838 <TIM_OC3_SetConfig+0x100>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d10d      	bne.n	80057be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005834 <TIM_OC3_SetConfig+0xfc>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00f      	beq.n	80057e6 <TIM_OC3_SetConfig+0xae>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005838 <TIM_OC3_SetConfig+0x100>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00b      	beq.n	80057e6 <TIM_OC3_SetConfig+0xae>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a1a      	ldr	r2, [pc, #104]	@ (800583c <TIM_OC3_SetConfig+0x104>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d007      	beq.n	80057e6 <TIM_OC3_SetConfig+0xae>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a19      	ldr	r2, [pc, #100]	@ (8005840 <TIM_OC3_SetConfig+0x108>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d003      	beq.n	80057e6 <TIM_OC3_SetConfig+0xae>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a18      	ldr	r2, [pc, #96]	@ (8005844 <TIM_OC3_SetConfig+0x10c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d113      	bne.n	800580e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	4313      	orrs	r3, r2
 8005800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	621a      	str	r2, [r3, #32]
}
 8005828:	bf00      	nop
 800582a:	371c      	adds	r7, #28
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	40012c00 	.word	0x40012c00
 8005838:	40013400 	.word	0x40013400
 800583c:	40014000 	.word	0x40014000
 8005840:	40014400 	.word	0x40014400
 8005844:	40014800 	.word	0x40014800

08005848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005876:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800587a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4313      	orrs	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	031b      	lsls	r3, r3, #12
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a18      	ldr	r2, [pc, #96]	@ (8005908 <TIM_OC4_SetConfig+0xc0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00f      	beq.n	80058cc <TIM_OC4_SetConfig+0x84>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a17      	ldr	r2, [pc, #92]	@ (800590c <TIM_OC4_SetConfig+0xc4>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00b      	beq.n	80058cc <TIM_OC4_SetConfig+0x84>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a16      	ldr	r2, [pc, #88]	@ (8005910 <TIM_OC4_SetConfig+0xc8>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d007      	beq.n	80058cc <TIM_OC4_SetConfig+0x84>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a15      	ldr	r2, [pc, #84]	@ (8005914 <TIM_OC4_SetConfig+0xcc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_OC4_SetConfig+0x84>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a14      	ldr	r2, [pc, #80]	@ (8005918 <TIM_OC4_SetConfig+0xd0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d109      	bne.n	80058e0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	019b      	lsls	r3, r3, #6
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40012c00 	.word	0x40012c00
 800590c:	40013400 	.word	0x40013400
 8005910:	40014000 	.word	0x40014000
 8005914:	40014400 	.word	0x40014400
 8005918:	40014800 	.word	0x40014800

0800591c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800594a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800594e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005960:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	041b      	lsls	r3, r3, #16
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a17      	ldr	r2, [pc, #92]	@ (80059d0 <TIM_OC5_SetConfig+0xb4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d00f      	beq.n	8005996 <TIM_OC5_SetConfig+0x7a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a16      	ldr	r2, [pc, #88]	@ (80059d4 <TIM_OC5_SetConfig+0xb8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00b      	beq.n	8005996 <TIM_OC5_SetConfig+0x7a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a15      	ldr	r2, [pc, #84]	@ (80059d8 <TIM_OC5_SetConfig+0xbc>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d007      	beq.n	8005996 <TIM_OC5_SetConfig+0x7a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a14      	ldr	r2, [pc, #80]	@ (80059dc <TIM_OC5_SetConfig+0xc0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d003      	beq.n	8005996 <TIM_OC5_SetConfig+0x7a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a13      	ldr	r2, [pc, #76]	@ (80059e0 <TIM_OC5_SetConfig+0xc4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d109      	bne.n	80059aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800599c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	621a      	str	r2, [r3, #32]
}
 80059c4:	bf00      	nop
 80059c6:	371c      	adds	r7, #28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	40012c00 	.word	0x40012c00
 80059d4:	40013400 	.word	0x40013400
 80059d8:	40014000 	.word	0x40014000
 80059dc:	40014400 	.word	0x40014400
 80059e0:	40014800 	.word	0x40014800

080059e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	021b      	lsls	r3, r3, #8
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	051b      	lsls	r3, r3, #20
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a18      	ldr	r2, [pc, #96]	@ (8005a9c <TIM_OC6_SetConfig+0xb8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00f      	beq.n	8005a60 <TIM_OC6_SetConfig+0x7c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a17      	ldr	r2, [pc, #92]	@ (8005aa0 <TIM_OC6_SetConfig+0xbc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00b      	beq.n	8005a60 <TIM_OC6_SetConfig+0x7c>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a16      	ldr	r2, [pc, #88]	@ (8005aa4 <TIM_OC6_SetConfig+0xc0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d007      	beq.n	8005a60 <TIM_OC6_SetConfig+0x7c>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a15      	ldr	r2, [pc, #84]	@ (8005aa8 <TIM_OC6_SetConfig+0xc4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_OC6_SetConfig+0x7c>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a14      	ldr	r2, [pc, #80]	@ (8005aac <TIM_OC6_SetConfig+0xc8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d109      	bne.n	8005a74 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	029b      	lsls	r3, r3, #10
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	621a      	str	r2, [r3, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40012c00 	.word	0x40012c00
 8005aa0:	40013400 	.word	0x40013400
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	40014400 	.word	0x40014400
 8005aac:	40014800 	.word	0x40014800

08005ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f023 0201 	bic.w	r2, r3, #1
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f023 030a 	bic.w	r3, r3, #10
 8005aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b087      	sub	sp, #28
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f023 0210 	bic.w	r2, r3, #16
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	031b      	lsls	r3, r3, #12
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	621a      	str	r2, [r3, #32]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f043 0307 	orr.w	r3, r3, #7
 8005b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	609a      	str	r2, [r3, #8]
}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	021a      	lsls	r2, r3, #8
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	609a      	str	r2, [r3, #8]
}
 8005bd8:	bf00      	nop
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e068      	b.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a2e      	ldr	r2, [pc, #184]	@ (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d108      	bne.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a1e      	ldr	r2, [pc, #120]	@ (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d01d      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c6e:	d018      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a1b      	ldr	r2, [pc, #108]	@ (8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d013      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00e      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a18      	ldr	r2, [pc, #96]	@ (8005cec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d009      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a13      	ldr	r2, [pc, #76]	@ (8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d004      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a14      	ldr	r2, [pc, #80]	@ (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d10c      	bne.n	8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40012c00 	.word	0x40012c00
 8005ce0:	40013400 	.word	0x40013400
 8005ce4:	40000400 	.word	0x40000400
 8005ce8:	40000800 	.word	0x40000800
 8005cec:	40000c00 	.word	0x40000c00
 8005cf0:	40014000 	.word	0x40014000

08005cf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d101      	bne.n	8005d10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	e065      	b.n	8005ddc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	041b      	lsls	r3, r3, #16
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a16      	ldr	r2, [pc, #88]	@ (8005de8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d004      	beq.n	8005d9e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a14      	ldr	r2, [pc, #80]	@ (8005dec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d115      	bne.n	8005dca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da8:	051b      	lsls	r3, r3, #20
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	40012c00 	.word	0x40012c00
 8005dec:	40013400 	.word	0x40013400

08005df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e040      	b.n	8005ec0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fb fc6a 	bl	8001728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2224      	movs	r2, #36	@ 0x24
 8005e58:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0201 	bic.w	r2, r2, #1
 8005e68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fe74 	bl	8006b60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fbb9 	bl	80065f0 <UART_SetConfig>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e01b      	b.n	8005ec0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ea6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0201 	orr.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fef3 	bl	8006ca4 <UART_CheckIdleState>
 8005ebe:	4603      	mov	r3, r0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08a      	sub	sp, #40	@ 0x28
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	d177      	bne.n	8005fd0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <HAL_UART_Transmit+0x24>
 8005ee6:	88fb      	ldrh	r3, [r7, #6]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e070      	b.n	8005fd2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2221      	movs	r2, #33	@ 0x21
 8005efc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005efe:	f7fb fcd5 	bl	80018ac <HAL_GetTick>
 8005f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	88fa      	ldrh	r2, [r7, #6]
 8005f08:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	88fa      	ldrh	r2, [r7, #6]
 8005f10:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f1c:	d108      	bne.n	8005f30 <HAL_UART_Transmit+0x68>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d104      	bne.n	8005f30 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	61bb      	str	r3, [r7, #24]
 8005f2e:	e003      	b.n	8005f38 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f38:	e02f      	b.n	8005f9a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2200      	movs	r2, #0
 8005f42:	2180      	movs	r1, #128	@ 0x80
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 ff55 	bl	8006df4 <UART_WaitOnFlagUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d004      	beq.n	8005f5a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2220      	movs	r2, #32
 8005f54:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e03b      	b.n	8005fd2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10b      	bne.n	8005f78 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	881a      	ldrh	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f6c:	b292      	uxth	r2, r2
 8005f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	3302      	adds	r3, #2
 8005f74:	61bb      	str	r3, [r7, #24]
 8005f76:	e007      	b.n	8005f88 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	781a      	ldrb	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	3301      	adds	r3, #1
 8005f86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1c9      	bne.n	8005f3a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2200      	movs	r2, #0
 8005fae:	2140      	movs	r1, #64	@ 0x40
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 ff1f 	bl	8006df4 <UART_WaitOnFlagUntilTimeout>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e005      	b.n	8005fd2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	e000      	b.n	8005fd2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005fd0:	2302      	movs	r3, #2
  }
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3720      	adds	r7, #32
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b0ba      	sub	sp, #232	@ 0xe8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006002:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006006:	f640 030f 	movw	r3, #2063	@ 0x80f
 800600a:	4013      	ands	r3, r2
 800600c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006014:	2b00      	cmp	r3, #0
 8006016:	d115      	bne.n	8006044 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00f      	beq.n	8006044 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006028:	f003 0320 	and.w	r3, r3, #32
 800602c:	2b00      	cmp	r3, #0
 800602e:	d009      	beq.n	8006044 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 82ae 	beq.w	8006596 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	4798      	blx	r3
      }
      return;
 8006042:	e2a8      	b.n	8006596 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006044:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 8117 	beq.w	800627c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800604e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800605a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800605e:	4b85      	ldr	r3, [pc, #532]	@ (8006274 <HAL_UART_IRQHandler+0x298>)
 8006060:	4013      	ands	r3, r2
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 810a 	beq.w	800627c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d011      	beq.n	8006098 <HAL_UART_IRQHandler+0xbc>
 8006074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00b      	beq.n	8006098 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2201      	movs	r2, #1
 8006086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800608e:	f043 0201 	orr.w	r2, r3, #1
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d011      	beq.n	80060c8 <HAL_UART_IRQHandler+0xec>
 80060a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00b      	beq.n	80060c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2202      	movs	r2, #2
 80060b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060be:	f043 0204 	orr.w	r2, r3, #4
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d011      	beq.n	80060f8 <HAL_UART_IRQHandler+0x11c>
 80060d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00b      	beq.n	80060f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2204      	movs	r2, #4
 80060e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060ee:	f043 0202 	orr.w	r2, r3, #2
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b00      	cmp	r3, #0
 8006102:	d017      	beq.n	8006134 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006108:	f003 0320 	and.w	r3, r3, #32
 800610c:	2b00      	cmp	r3, #0
 800610e:	d105      	bne.n	800611c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006114:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00b      	beq.n	8006134 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2208      	movs	r2, #8
 8006122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800612a:	f043 0208 	orr.w	r2, r3, #8
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800613c:	2b00      	cmp	r3, #0
 800613e:	d012      	beq.n	8006166 <HAL_UART_IRQHandler+0x18a>
 8006140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006144:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00c      	beq.n	8006166 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006154:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800615c:	f043 0220 	orr.w	r2, r3, #32
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 8214 	beq.w	800659a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00d      	beq.n	800619a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800617e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d007      	beq.n	800619a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ae:	2b40      	cmp	r3, #64	@ 0x40
 80061b0:	d005      	beq.n	80061be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d04f      	beq.n	800625e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fe7f 	bl	8006ec2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ce:	2b40      	cmp	r3, #64	@ 0x40
 80061d0:	d141      	bne.n	8006256 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3308      	adds	r3, #8
 80061d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80061e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3308      	adds	r3, #8
 80061fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80061fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006202:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800620a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1d9      	bne.n	80061d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006222:	2b00      	cmp	r3, #0
 8006224:	d013      	beq.n	800624e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800622a:	4a13      	ldr	r2, [pc, #76]	@ (8006278 <HAL_UART_IRQHandler+0x29c>)
 800622c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006232:	4618      	mov	r0, r3
 8006234:	f7fc fcc2 	bl	8002bbc <HAL_DMA_Abort_IT>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d017      	beq.n	800626e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006248:	4610      	mov	r0, r2
 800624a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800624c:	e00f      	b.n	800626e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f9b8 	bl	80065c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006254:	e00b      	b.n	800626e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f9b4 	bl	80065c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800625c:	e007      	b.n	800626e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f9b0 	bl	80065c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800626c:	e195      	b.n	800659a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800626e:	bf00      	nop
    return;
 8006270:	e193      	b.n	800659a <HAL_UART_IRQHandler+0x5be>
 8006272:	bf00      	nop
 8006274:	04000120 	.word	0x04000120
 8006278:	08006f8b 	.word	0x08006f8b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006280:	2b01      	cmp	r3, #1
 8006282:	f040 814e 	bne.w	8006522 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800628a:	f003 0310 	and.w	r3, r3, #16
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 8147 	beq.w	8006522 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 8140 	beq.w	8006522 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2210      	movs	r2, #16
 80062a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b4:	2b40      	cmp	r3, #64	@ 0x40
 80062b6:	f040 80b8 	bne.w	800642a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 8167 	beq.w	800659e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80062d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062da:	429a      	cmp	r2, r3
 80062dc:	f080 815f 	bcs.w	800659e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f040 8086 	bne.w	8006408 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006308:	e853 3f00 	ldrex	r3, [r3]
 800630c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006310:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006326:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800632a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006332:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006336:	e841 2300 	strex	r3, r2, [r1]
 800633a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800633e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1da      	bne.n	80062fc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3308      	adds	r3, #8
 800634c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006356:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006358:	f023 0301 	bic.w	r3, r3, #1
 800635c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3308      	adds	r3, #8
 8006366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800636a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800636e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006372:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006376:	e841 2300 	strex	r3, r2, [r1]
 800637a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800637c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1e1      	bne.n	8006346 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3308      	adds	r3, #8
 8006388:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800638c:	e853 3f00 	ldrex	r3, [r3]
 8006390:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3308      	adds	r3, #8
 80063a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80063a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80063a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80063ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80063b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1e3      	bne.n	8006382 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063d8:	f023 0310 	bic.w	r3, r3, #16
 80063dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e4      	bne.n	80063c8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006402:	4618      	mov	r0, r3
 8006404:	f7fc fb9c 	bl	8002b40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800641a:	b29b      	uxth	r3, r3
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	b29b      	uxth	r3, r3
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f8d8 	bl	80065d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006428:	e0b9      	b.n	800659e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006436:	b29b      	uxth	r3, r3
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006444:	b29b      	uxth	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 80ab 	beq.w	80065a2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800644c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 80a6 	beq.w	80065a2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006466:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800646a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006478:	647b      	str	r3, [r7, #68]	@ 0x44
 800647a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800647e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006480:	e841 2300 	strex	r3, r2, [r1]
 8006484:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e4      	bne.n	8006456 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3308      	adds	r3, #8
 8006492:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006496:	e853 3f00 	ldrex	r3, [r3]
 800649a:	623b      	str	r3, [r7, #32]
   return(result);
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	f023 0301 	bic.w	r3, r3, #1
 80064a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3308      	adds	r3, #8
 80064ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80064b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80064b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064b8:	e841 2300 	strex	r3, r2, [r1]
 80064bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e3      	bne.n	800648c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f023 0310 	bic.w	r3, r3, #16
 80064ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80064fa:	61fb      	str	r3, [r7, #28]
 80064fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	69b9      	ldr	r1, [r7, #24]
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	617b      	str	r3, [r7, #20]
   return(result);
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e4      	bne.n	80064d8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2202      	movs	r2, #2
 8006512:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006514:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f85c 	bl	80065d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006520:	e03f      	b.n	80065a2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00e      	beq.n	800654c <HAL_UART_IRQHandler+0x570>
 800652e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d008      	beq.n	800654c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006542:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fd60 	bl	800700a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800654a:	e02d      	b.n	80065a8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800654c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00e      	beq.n	8006576 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800655c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006560:	2b00      	cmp	r3, #0
 8006562:	d008      	beq.n	8006576 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006568:	2b00      	cmp	r3, #0
 800656a:	d01c      	beq.n	80065a6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	4798      	blx	r3
    }
    return;
 8006574:	e017      	b.n	80065a6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800657a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d012      	beq.n	80065a8 <HAL_UART_IRQHandler+0x5cc>
 8006582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00c      	beq.n	80065a8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fd11 	bl	8006fb6 <UART_EndTransmit_IT>
    return;
 8006594:	e008      	b.n	80065a8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006596:	bf00      	nop
 8006598:	e006      	b.n	80065a8 <HAL_UART_IRQHandler+0x5cc>
    return;
 800659a:	bf00      	nop
 800659c:	e004      	b.n	80065a8 <HAL_UART_IRQHandler+0x5cc>
      return;
 800659e:	bf00      	nop
 80065a0:	e002      	b.n	80065a8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80065a2:	bf00      	nop
 80065a4:	e000      	b.n	80065a8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80065a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80065a8:	37e8      	adds	r7, #232	@ 0xe8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop

080065b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	460b      	mov	r3, r1
 80065e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065f4:	b08a      	sub	sp, #40	@ 0x28
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	431a      	orrs	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	431a      	orrs	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	4313      	orrs	r3, r2
 8006616:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4ba4      	ldr	r3, [pc, #656]	@ (80068b0 <UART_SetConfig+0x2c0>)
 8006620:	4013      	ands	r3, r2
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	6812      	ldr	r2, [r2, #0]
 8006626:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006628:	430b      	orrs	r3, r1
 800662a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a99      	ldr	r2, [pc, #612]	@ (80068b4 <UART_SetConfig+0x2c4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d004      	beq.n	800665c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006658:	4313      	orrs	r3, r2
 800665a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800666c:	430a      	orrs	r2, r1
 800666e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a90      	ldr	r2, [pc, #576]	@ (80068b8 <UART_SetConfig+0x2c8>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d126      	bne.n	80066c8 <UART_SetConfig+0xd8>
 800667a:	4b90      	ldr	r3, [pc, #576]	@ (80068bc <UART_SetConfig+0x2cc>)
 800667c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006680:	f003 0303 	and.w	r3, r3, #3
 8006684:	2b03      	cmp	r3, #3
 8006686:	d81b      	bhi.n	80066c0 <UART_SetConfig+0xd0>
 8006688:	a201      	add	r2, pc, #4	@ (adr r2, 8006690 <UART_SetConfig+0xa0>)
 800668a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668e:	bf00      	nop
 8006690:	080066a1 	.word	0x080066a1
 8006694:	080066b1 	.word	0x080066b1
 8006698:	080066a9 	.word	0x080066a9
 800669c:	080066b9 	.word	0x080066b9
 80066a0:	2301      	movs	r3, #1
 80066a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066a6:	e116      	b.n	80068d6 <UART_SetConfig+0x2e6>
 80066a8:	2302      	movs	r3, #2
 80066aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ae:	e112      	b.n	80068d6 <UART_SetConfig+0x2e6>
 80066b0:	2304      	movs	r3, #4
 80066b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066b6:	e10e      	b.n	80068d6 <UART_SetConfig+0x2e6>
 80066b8:	2308      	movs	r3, #8
 80066ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066be:	e10a      	b.n	80068d6 <UART_SetConfig+0x2e6>
 80066c0:	2310      	movs	r3, #16
 80066c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066c6:	e106      	b.n	80068d6 <UART_SetConfig+0x2e6>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a7c      	ldr	r2, [pc, #496]	@ (80068c0 <UART_SetConfig+0x2d0>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d138      	bne.n	8006744 <UART_SetConfig+0x154>
 80066d2:	4b7a      	ldr	r3, [pc, #488]	@ (80068bc <UART_SetConfig+0x2cc>)
 80066d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d8:	f003 030c 	and.w	r3, r3, #12
 80066dc:	2b0c      	cmp	r3, #12
 80066de:	d82d      	bhi.n	800673c <UART_SetConfig+0x14c>
 80066e0:	a201      	add	r2, pc, #4	@ (adr r2, 80066e8 <UART_SetConfig+0xf8>)
 80066e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e6:	bf00      	nop
 80066e8:	0800671d 	.word	0x0800671d
 80066ec:	0800673d 	.word	0x0800673d
 80066f0:	0800673d 	.word	0x0800673d
 80066f4:	0800673d 	.word	0x0800673d
 80066f8:	0800672d 	.word	0x0800672d
 80066fc:	0800673d 	.word	0x0800673d
 8006700:	0800673d 	.word	0x0800673d
 8006704:	0800673d 	.word	0x0800673d
 8006708:	08006725 	.word	0x08006725
 800670c:	0800673d 	.word	0x0800673d
 8006710:	0800673d 	.word	0x0800673d
 8006714:	0800673d 	.word	0x0800673d
 8006718:	08006735 	.word	0x08006735
 800671c:	2300      	movs	r3, #0
 800671e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006722:	e0d8      	b.n	80068d6 <UART_SetConfig+0x2e6>
 8006724:	2302      	movs	r3, #2
 8006726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800672a:	e0d4      	b.n	80068d6 <UART_SetConfig+0x2e6>
 800672c:	2304      	movs	r3, #4
 800672e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006732:	e0d0      	b.n	80068d6 <UART_SetConfig+0x2e6>
 8006734:	2308      	movs	r3, #8
 8006736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800673a:	e0cc      	b.n	80068d6 <UART_SetConfig+0x2e6>
 800673c:	2310      	movs	r3, #16
 800673e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006742:	e0c8      	b.n	80068d6 <UART_SetConfig+0x2e6>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a5e      	ldr	r2, [pc, #376]	@ (80068c4 <UART_SetConfig+0x2d4>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d125      	bne.n	800679a <UART_SetConfig+0x1aa>
 800674e:	4b5b      	ldr	r3, [pc, #364]	@ (80068bc <UART_SetConfig+0x2cc>)
 8006750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006754:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006758:	2b30      	cmp	r3, #48	@ 0x30
 800675a:	d016      	beq.n	800678a <UART_SetConfig+0x19a>
 800675c:	2b30      	cmp	r3, #48	@ 0x30
 800675e:	d818      	bhi.n	8006792 <UART_SetConfig+0x1a2>
 8006760:	2b20      	cmp	r3, #32
 8006762:	d00a      	beq.n	800677a <UART_SetConfig+0x18a>
 8006764:	2b20      	cmp	r3, #32
 8006766:	d814      	bhi.n	8006792 <UART_SetConfig+0x1a2>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <UART_SetConfig+0x182>
 800676c:	2b10      	cmp	r3, #16
 800676e:	d008      	beq.n	8006782 <UART_SetConfig+0x192>
 8006770:	e00f      	b.n	8006792 <UART_SetConfig+0x1a2>
 8006772:	2300      	movs	r3, #0
 8006774:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006778:	e0ad      	b.n	80068d6 <UART_SetConfig+0x2e6>
 800677a:	2302      	movs	r3, #2
 800677c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006780:	e0a9      	b.n	80068d6 <UART_SetConfig+0x2e6>
 8006782:	2304      	movs	r3, #4
 8006784:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006788:	e0a5      	b.n	80068d6 <UART_SetConfig+0x2e6>
 800678a:	2308      	movs	r3, #8
 800678c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006790:	e0a1      	b.n	80068d6 <UART_SetConfig+0x2e6>
 8006792:	2310      	movs	r3, #16
 8006794:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006798:	e09d      	b.n	80068d6 <UART_SetConfig+0x2e6>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a4a      	ldr	r2, [pc, #296]	@ (80068c8 <UART_SetConfig+0x2d8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d125      	bne.n	80067f0 <UART_SetConfig+0x200>
 80067a4:	4b45      	ldr	r3, [pc, #276]	@ (80068bc <UART_SetConfig+0x2cc>)
 80067a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80067ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80067b0:	d016      	beq.n	80067e0 <UART_SetConfig+0x1f0>
 80067b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80067b4:	d818      	bhi.n	80067e8 <UART_SetConfig+0x1f8>
 80067b6:	2b80      	cmp	r3, #128	@ 0x80
 80067b8:	d00a      	beq.n	80067d0 <UART_SetConfig+0x1e0>
 80067ba:	2b80      	cmp	r3, #128	@ 0x80
 80067bc:	d814      	bhi.n	80067e8 <UART_SetConfig+0x1f8>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <UART_SetConfig+0x1d8>
 80067c2:	2b40      	cmp	r3, #64	@ 0x40
 80067c4:	d008      	beq.n	80067d8 <UART_SetConfig+0x1e8>
 80067c6:	e00f      	b.n	80067e8 <UART_SetConfig+0x1f8>
 80067c8:	2300      	movs	r3, #0
 80067ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ce:	e082      	b.n	80068d6 <UART_SetConfig+0x2e6>
 80067d0:	2302      	movs	r3, #2
 80067d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067d6:	e07e      	b.n	80068d6 <UART_SetConfig+0x2e6>
 80067d8:	2304      	movs	r3, #4
 80067da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067de:	e07a      	b.n	80068d6 <UART_SetConfig+0x2e6>
 80067e0:	2308      	movs	r3, #8
 80067e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067e6:	e076      	b.n	80068d6 <UART_SetConfig+0x2e6>
 80067e8:	2310      	movs	r3, #16
 80067ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ee:	e072      	b.n	80068d6 <UART_SetConfig+0x2e6>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a35      	ldr	r2, [pc, #212]	@ (80068cc <UART_SetConfig+0x2dc>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d12a      	bne.n	8006850 <UART_SetConfig+0x260>
 80067fa:	4b30      	ldr	r3, [pc, #192]	@ (80068bc <UART_SetConfig+0x2cc>)
 80067fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006800:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006804:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006808:	d01a      	beq.n	8006840 <UART_SetConfig+0x250>
 800680a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800680e:	d81b      	bhi.n	8006848 <UART_SetConfig+0x258>
 8006810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006814:	d00c      	beq.n	8006830 <UART_SetConfig+0x240>
 8006816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800681a:	d815      	bhi.n	8006848 <UART_SetConfig+0x258>
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <UART_SetConfig+0x238>
 8006820:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006824:	d008      	beq.n	8006838 <UART_SetConfig+0x248>
 8006826:	e00f      	b.n	8006848 <UART_SetConfig+0x258>
 8006828:	2300      	movs	r3, #0
 800682a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800682e:	e052      	b.n	80068d6 <UART_SetConfig+0x2e6>
 8006830:	2302      	movs	r3, #2
 8006832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006836:	e04e      	b.n	80068d6 <UART_SetConfig+0x2e6>
 8006838:	2304      	movs	r3, #4
 800683a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800683e:	e04a      	b.n	80068d6 <UART_SetConfig+0x2e6>
 8006840:	2308      	movs	r3, #8
 8006842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006846:	e046      	b.n	80068d6 <UART_SetConfig+0x2e6>
 8006848:	2310      	movs	r3, #16
 800684a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800684e:	e042      	b.n	80068d6 <UART_SetConfig+0x2e6>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a17      	ldr	r2, [pc, #92]	@ (80068b4 <UART_SetConfig+0x2c4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d13a      	bne.n	80068d0 <UART_SetConfig+0x2e0>
 800685a:	4b18      	ldr	r3, [pc, #96]	@ (80068bc <UART_SetConfig+0x2cc>)
 800685c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006860:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006864:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006868:	d01a      	beq.n	80068a0 <UART_SetConfig+0x2b0>
 800686a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800686e:	d81b      	bhi.n	80068a8 <UART_SetConfig+0x2b8>
 8006870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006874:	d00c      	beq.n	8006890 <UART_SetConfig+0x2a0>
 8006876:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800687a:	d815      	bhi.n	80068a8 <UART_SetConfig+0x2b8>
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <UART_SetConfig+0x298>
 8006880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006884:	d008      	beq.n	8006898 <UART_SetConfig+0x2a8>
 8006886:	e00f      	b.n	80068a8 <UART_SetConfig+0x2b8>
 8006888:	2300      	movs	r3, #0
 800688a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800688e:	e022      	b.n	80068d6 <UART_SetConfig+0x2e6>
 8006890:	2302      	movs	r3, #2
 8006892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006896:	e01e      	b.n	80068d6 <UART_SetConfig+0x2e6>
 8006898:	2304      	movs	r3, #4
 800689a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800689e:	e01a      	b.n	80068d6 <UART_SetConfig+0x2e6>
 80068a0:	2308      	movs	r3, #8
 80068a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068a6:	e016      	b.n	80068d6 <UART_SetConfig+0x2e6>
 80068a8:	2310      	movs	r3, #16
 80068aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ae:	e012      	b.n	80068d6 <UART_SetConfig+0x2e6>
 80068b0:	efff69f3 	.word	0xefff69f3
 80068b4:	40008000 	.word	0x40008000
 80068b8:	40013800 	.word	0x40013800
 80068bc:	40021000 	.word	0x40021000
 80068c0:	40004400 	.word	0x40004400
 80068c4:	40004800 	.word	0x40004800
 80068c8:	40004c00 	.word	0x40004c00
 80068cc:	40005000 	.word	0x40005000
 80068d0:	2310      	movs	r3, #16
 80068d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a9f      	ldr	r2, [pc, #636]	@ (8006b58 <UART_SetConfig+0x568>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d17a      	bne.n	80069d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d824      	bhi.n	8006932 <UART_SetConfig+0x342>
 80068e8:	a201      	add	r2, pc, #4	@ (adr r2, 80068f0 <UART_SetConfig+0x300>)
 80068ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ee:	bf00      	nop
 80068f0:	08006915 	.word	0x08006915
 80068f4:	08006933 	.word	0x08006933
 80068f8:	0800691d 	.word	0x0800691d
 80068fc:	08006933 	.word	0x08006933
 8006900:	08006923 	.word	0x08006923
 8006904:	08006933 	.word	0x08006933
 8006908:	08006933 	.word	0x08006933
 800690c:	08006933 	.word	0x08006933
 8006910:	0800692b 	.word	0x0800692b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006914:	f7fd fb0e 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 8006918:	61f8      	str	r0, [r7, #28]
        break;
 800691a:	e010      	b.n	800693e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800691c:	4b8f      	ldr	r3, [pc, #572]	@ (8006b5c <UART_SetConfig+0x56c>)
 800691e:	61fb      	str	r3, [r7, #28]
        break;
 8006920:	e00d      	b.n	800693e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006922:	f7fd fa6f 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8006926:	61f8      	str	r0, [r7, #28]
        break;
 8006928:	e009      	b.n	800693e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800692a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800692e:	61fb      	str	r3, [r7, #28]
        break;
 8006930:	e005      	b.n	800693e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800693c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 80fb 	beq.w	8006b3c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	4613      	mov	r3, r2
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	4413      	add	r3, r2
 8006950:	69fa      	ldr	r2, [r7, #28]
 8006952:	429a      	cmp	r2, r3
 8006954:	d305      	bcc.n	8006962 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800695c:	69fa      	ldr	r2, [r7, #28]
 800695e:	429a      	cmp	r2, r3
 8006960:	d903      	bls.n	800696a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006968:	e0e8      	b.n	8006b3c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	2200      	movs	r2, #0
 800696e:	461c      	mov	r4, r3
 8006970:	4615      	mov	r5, r2
 8006972:	f04f 0200 	mov.w	r2, #0
 8006976:	f04f 0300 	mov.w	r3, #0
 800697a:	022b      	lsls	r3, r5, #8
 800697c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006980:	0222      	lsls	r2, r4, #8
 8006982:	68f9      	ldr	r1, [r7, #12]
 8006984:	6849      	ldr	r1, [r1, #4]
 8006986:	0849      	lsrs	r1, r1, #1
 8006988:	2000      	movs	r0, #0
 800698a:	4688      	mov	r8, r1
 800698c:	4681      	mov	r9, r0
 800698e:	eb12 0a08 	adds.w	sl, r2, r8
 8006992:	eb43 0b09 	adc.w	fp, r3, r9
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	603b      	str	r3, [r7, #0]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069a4:	4650      	mov	r0, sl
 80069a6:	4659      	mov	r1, fp
 80069a8:	f7f9 fc62 	bl	8000270 <__aeabi_uldivmod>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4613      	mov	r3, r2
 80069b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069ba:	d308      	bcc.n	80069ce <UART_SetConfig+0x3de>
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069c2:	d204      	bcs.n	80069ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	60da      	str	r2, [r3, #12]
 80069cc:	e0b6      	b.n	8006b3c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80069d4:	e0b2      	b.n	8006b3c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069de:	d15e      	bne.n	8006a9e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80069e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80069e4:	2b08      	cmp	r3, #8
 80069e6:	d828      	bhi.n	8006a3a <UART_SetConfig+0x44a>
 80069e8:	a201      	add	r2, pc, #4	@ (adr r2, 80069f0 <UART_SetConfig+0x400>)
 80069ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ee:	bf00      	nop
 80069f0:	08006a15 	.word	0x08006a15
 80069f4:	08006a1d 	.word	0x08006a1d
 80069f8:	08006a25 	.word	0x08006a25
 80069fc:	08006a3b 	.word	0x08006a3b
 8006a00:	08006a2b 	.word	0x08006a2b
 8006a04:	08006a3b 	.word	0x08006a3b
 8006a08:	08006a3b 	.word	0x08006a3b
 8006a0c:	08006a3b 	.word	0x08006a3b
 8006a10:	08006a33 	.word	0x08006a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a14:	f7fd fa8e 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 8006a18:	61f8      	str	r0, [r7, #28]
        break;
 8006a1a:	e014      	b.n	8006a46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a1c:	f7fd faa0 	bl	8003f60 <HAL_RCC_GetPCLK2Freq>
 8006a20:	61f8      	str	r0, [r7, #28]
        break;
 8006a22:	e010      	b.n	8006a46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a24:	4b4d      	ldr	r3, [pc, #308]	@ (8006b5c <UART_SetConfig+0x56c>)
 8006a26:	61fb      	str	r3, [r7, #28]
        break;
 8006a28:	e00d      	b.n	8006a46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a2a:	f7fd f9eb 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8006a2e:	61f8      	str	r0, [r7, #28]
        break;
 8006a30:	e009      	b.n	8006a46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a36:	61fb      	str	r3, [r7, #28]
        break;
 8006a38:	e005      	b.n	8006a46 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006a44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d077      	beq.n	8006b3c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	005a      	lsls	r2, r3, #1
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	085b      	lsrs	r3, r3, #1
 8006a56:	441a      	add	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2b0f      	cmp	r3, #15
 8006a66:	d916      	bls.n	8006a96 <UART_SetConfig+0x4a6>
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a6e:	d212      	bcs.n	8006a96 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	f023 030f 	bic.w	r3, r3, #15
 8006a78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	085b      	lsrs	r3, r3, #1
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f003 0307 	and.w	r3, r3, #7
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	8afb      	ldrh	r3, [r7, #22]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	8afa      	ldrh	r2, [r7, #22]
 8006a92:	60da      	str	r2, [r3, #12]
 8006a94:	e052      	b.n	8006b3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a9c:	e04e      	b.n	8006b3c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d827      	bhi.n	8006af6 <UART_SetConfig+0x506>
 8006aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8006aac <UART_SetConfig+0x4bc>)
 8006aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aac:	08006ad1 	.word	0x08006ad1
 8006ab0:	08006ad9 	.word	0x08006ad9
 8006ab4:	08006ae1 	.word	0x08006ae1
 8006ab8:	08006af7 	.word	0x08006af7
 8006abc:	08006ae7 	.word	0x08006ae7
 8006ac0:	08006af7 	.word	0x08006af7
 8006ac4:	08006af7 	.word	0x08006af7
 8006ac8:	08006af7 	.word	0x08006af7
 8006acc:	08006aef 	.word	0x08006aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ad0:	f7fd fa30 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 8006ad4:	61f8      	str	r0, [r7, #28]
        break;
 8006ad6:	e014      	b.n	8006b02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ad8:	f7fd fa42 	bl	8003f60 <HAL_RCC_GetPCLK2Freq>
 8006adc:	61f8      	str	r0, [r7, #28]
        break;
 8006ade:	e010      	b.n	8006b02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8006b5c <UART_SetConfig+0x56c>)
 8006ae2:	61fb      	str	r3, [r7, #28]
        break;
 8006ae4:	e00d      	b.n	8006b02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ae6:	f7fd f98d 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8006aea:	61f8      	str	r0, [r7, #28]
        break;
 8006aec:	e009      	b.n	8006b02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006af2:	61fb      	str	r3, [r7, #28]
        break;
 8006af4:	e005      	b.n	8006b02 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006b00:	bf00      	nop
    }

    if (pclk != 0U)
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d019      	beq.n	8006b3c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	085a      	lsrs	r2, r3, #1
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	441a      	add	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2b0f      	cmp	r3, #15
 8006b20:	d909      	bls.n	8006b36 <UART_SetConfig+0x546>
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b28:	d205      	bcs.n	8006b36 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	60da      	str	r2, [r3, #12]
 8006b34:	e002      	b.n	8006b3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006b48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3728      	adds	r7, #40	@ 0x28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b56:	bf00      	nop
 8006b58:	40008000 	.word	0x40008000
 8006b5c:	00f42400 	.word	0x00f42400

08006b60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6c:	f003 0308 	and.w	r3, r3, #8
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00a      	beq.n	8006b8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00a      	beq.n	8006bce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd2:	f003 0304 	and.w	r3, r3, #4
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00a      	beq.n	8006bf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf4:	f003 0310 	and.w	r3, r3, #16
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00a      	beq.n	8006c12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c16:	f003 0320 	and.w	r3, r3, #32
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01a      	beq.n	8006c76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c5e:	d10a      	bne.n	8006c76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	605a      	str	r2, [r3, #4]
  }
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b098      	sub	sp, #96	@ 0x60
 8006ca8:	af02      	add	r7, sp, #8
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cb4:	f7fa fdfa 	bl	80018ac <HAL_GetTick>
 8006cb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d12e      	bne.n	8006d26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f88c 	bl	8006df4 <UART_WaitOnFlagUntilTimeout>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d021      	beq.n	8006d26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cea:	e853 3f00 	ldrex	r3, [r3]
 8006cee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e6      	bne.n	8006ce2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2220      	movs	r2, #32
 8006d18:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e062      	b.n	8006dec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b04      	cmp	r3, #4
 8006d32:	d149      	bne.n	8006dc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f856 	bl	8006df4 <UART_WaitOnFlagUntilTimeout>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d03c      	beq.n	8006dc8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	e853 3f00 	ldrex	r3, [r3]
 8006d5a:	623b      	str	r3, [r7, #32]
   return(result);
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d74:	e841 2300 	strex	r3, r2, [r1]
 8006d78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1e6      	bne.n	8006d4e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3308      	adds	r3, #8
 8006d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	e853 3f00 	ldrex	r3, [r3]
 8006d8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0301 	bic.w	r3, r3, #1
 8006d96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006da0:	61fa      	str	r2, [r7, #28]
 8006da2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da4:	69b9      	ldr	r1, [r7, #24]
 8006da6:	69fa      	ldr	r2, [r7, #28]
 8006da8:	e841 2300 	strex	r3, r2, [r1]
 8006dac:	617b      	str	r3, [r7, #20]
   return(result);
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e5      	bne.n	8006d80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e011      	b.n	8006dec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3758      	adds	r7, #88	@ 0x58
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	603b      	str	r3, [r7, #0]
 8006e00:	4613      	mov	r3, r2
 8006e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e04:	e049      	b.n	8006e9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0c:	d045      	beq.n	8006e9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e0e:	f7fa fd4d 	bl	80018ac <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d302      	bcc.n	8006e24 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e048      	b.n	8006eba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0304 	and.w	r3, r3, #4
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d031      	beq.n	8006e9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d110      	bne.n	8006e66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2208      	movs	r2, #8
 8006e4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 f838 	bl	8006ec2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2208      	movs	r2, #8
 8006e56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e029      	b.n	8006eba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e74:	d111      	bne.n	8006e9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 f81e 	bl	8006ec2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e00f      	b.n	8006eba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69da      	ldr	r2, [r3, #28]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	bf0c      	ite	eq
 8006eaa:	2301      	moveq	r3, #1
 8006eac:	2300      	movne	r3, #0
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	79fb      	ldrb	r3, [r7, #7]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d0a6      	beq.n	8006e06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b095      	sub	sp, #84	@ 0x54
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed2:	e853 3f00 	ldrex	r3, [r3]
 8006ed6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ee8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006eea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006eee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ef0:	e841 2300 	strex	r3, r2, [r1]
 8006ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e6      	bne.n	8006eca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3308      	adds	r3, #8
 8006f02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	f023 0301 	bic.w	r3, r3, #1
 8006f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3308      	adds	r3, #8
 8006f1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e5      	bne.n	8006efc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d118      	bne.n	8006f6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	e853 3f00 	ldrex	r3, [r3]
 8006f44:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f023 0310 	bic.w	r3, r3, #16
 8006f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f56:	61bb      	str	r3, [r7, #24]
 8006f58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5a:	6979      	ldr	r1, [r7, #20]
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	613b      	str	r3, [r7, #16]
   return(result);
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1e6      	bne.n	8006f38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006f7e:	bf00      	nop
 8006f80:	3754      	adds	r7, #84	@ 0x54
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f7ff fb0b 	bl	80065c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fae:	bf00      	nop
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b088      	sub	sp, #32
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	e853 3f00 	ldrex	r3, [r3]
 8006fca:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fd2:	61fb      	str	r3, [r7, #28]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	61bb      	str	r3, [r7, #24]
 8006fde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe0:	6979      	ldr	r1, [r7, #20]
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	e841 2300 	strex	r3, r2, [r1]
 8006fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1e6      	bne.n	8006fbe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff fad7 	bl	80065b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007002:	bf00      	nop
 8007004:	3720      	adds	r7, #32
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007012:	bf00      	nop
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
	...

08007020 <std>:
 8007020:	2300      	movs	r3, #0
 8007022:	b510      	push	{r4, lr}
 8007024:	4604      	mov	r4, r0
 8007026:	e9c0 3300 	strd	r3, r3, [r0]
 800702a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800702e:	6083      	str	r3, [r0, #8]
 8007030:	8181      	strh	r1, [r0, #12]
 8007032:	6643      	str	r3, [r0, #100]	@ 0x64
 8007034:	81c2      	strh	r2, [r0, #14]
 8007036:	6183      	str	r3, [r0, #24]
 8007038:	4619      	mov	r1, r3
 800703a:	2208      	movs	r2, #8
 800703c:	305c      	adds	r0, #92	@ 0x5c
 800703e:	f000 f906 	bl	800724e <memset>
 8007042:	4b0d      	ldr	r3, [pc, #52]	@ (8007078 <std+0x58>)
 8007044:	6263      	str	r3, [r4, #36]	@ 0x24
 8007046:	4b0d      	ldr	r3, [pc, #52]	@ (800707c <std+0x5c>)
 8007048:	62a3      	str	r3, [r4, #40]	@ 0x28
 800704a:	4b0d      	ldr	r3, [pc, #52]	@ (8007080 <std+0x60>)
 800704c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800704e:	4b0d      	ldr	r3, [pc, #52]	@ (8007084 <std+0x64>)
 8007050:	6323      	str	r3, [r4, #48]	@ 0x30
 8007052:	4b0d      	ldr	r3, [pc, #52]	@ (8007088 <std+0x68>)
 8007054:	6224      	str	r4, [r4, #32]
 8007056:	429c      	cmp	r4, r3
 8007058:	d006      	beq.n	8007068 <std+0x48>
 800705a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800705e:	4294      	cmp	r4, r2
 8007060:	d002      	beq.n	8007068 <std+0x48>
 8007062:	33d0      	adds	r3, #208	@ 0xd0
 8007064:	429c      	cmp	r4, r3
 8007066:	d105      	bne.n	8007074 <std+0x54>
 8007068:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800706c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007070:	f000 b966 	b.w	8007340 <__retarget_lock_init_recursive>
 8007074:	bd10      	pop	{r4, pc}
 8007076:	bf00      	nop
 8007078:	080071c9 	.word	0x080071c9
 800707c:	080071eb 	.word	0x080071eb
 8007080:	08007223 	.word	0x08007223
 8007084:	08007247 	.word	0x08007247
 8007088:	20000488 	.word	0x20000488

0800708c <stdio_exit_handler>:
 800708c:	4a02      	ldr	r2, [pc, #8]	@ (8007098 <stdio_exit_handler+0xc>)
 800708e:	4903      	ldr	r1, [pc, #12]	@ (800709c <stdio_exit_handler+0x10>)
 8007090:	4803      	ldr	r0, [pc, #12]	@ (80070a0 <stdio_exit_handler+0x14>)
 8007092:	f000 b869 	b.w	8007168 <_fwalk_sglue>
 8007096:	bf00      	nop
 8007098:	2000000c 	.word	0x2000000c
 800709c:	08007be1 	.word	0x08007be1
 80070a0:	2000001c 	.word	0x2000001c

080070a4 <cleanup_stdio>:
 80070a4:	6841      	ldr	r1, [r0, #4]
 80070a6:	4b0c      	ldr	r3, [pc, #48]	@ (80070d8 <cleanup_stdio+0x34>)
 80070a8:	4299      	cmp	r1, r3
 80070aa:	b510      	push	{r4, lr}
 80070ac:	4604      	mov	r4, r0
 80070ae:	d001      	beq.n	80070b4 <cleanup_stdio+0x10>
 80070b0:	f000 fd96 	bl	8007be0 <_fflush_r>
 80070b4:	68a1      	ldr	r1, [r4, #8]
 80070b6:	4b09      	ldr	r3, [pc, #36]	@ (80070dc <cleanup_stdio+0x38>)
 80070b8:	4299      	cmp	r1, r3
 80070ba:	d002      	beq.n	80070c2 <cleanup_stdio+0x1e>
 80070bc:	4620      	mov	r0, r4
 80070be:	f000 fd8f 	bl	8007be0 <_fflush_r>
 80070c2:	68e1      	ldr	r1, [r4, #12]
 80070c4:	4b06      	ldr	r3, [pc, #24]	@ (80070e0 <cleanup_stdio+0x3c>)
 80070c6:	4299      	cmp	r1, r3
 80070c8:	d004      	beq.n	80070d4 <cleanup_stdio+0x30>
 80070ca:	4620      	mov	r0, r4
 80070cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070d0:	f000 bd86 	b.w	8007be0 <_fflush_r>
 80070d4:	bd10      	pop	{r4, pc}
 80070d6:	bf00      	nop
 80070d8:	20000488 	.word	0x20000488
 80070dc:	200004f0 	.word	0x200004f0
 80070e0:	20000558 	.word	0x20000558

080070e4 <global_stdio_init.part.0>:
 80070e4:	b510      	push	{r4, lr}
 80070e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007114 <global_stdio_init.part.0+0x30>)
 80070e8:	4c0b      	ldr	r4, [pc, #44]	@ (8007118 <global_stdio_init.part.0+0x34>)
 80070ea:	4a0c      	ldr	r2, [pc, #48]	@ (800711c <global_stdio_init.part.0+0x38>)
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	4620      	mov	r0, r4
 80070f0:	2200      	movs	r2, #0
 80070f2:	2104      	movs	r1, #4
 80070f4:	f7ff ff94 	bl	8007020 <std>
 80070f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80070fc:	2201      	movs	r2, #1
 80070fe:	2109      	movs	r1, #9
 8007100:	f7ff ff8e 	bl	8007020 <std>
 8007104:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007108:	2202      	movs	r2, #2
 800710a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800710e:	2112      	movs	r1, #18
 8007110:	f7ff bf86 	b.w	8007020 <std>
 8007114:	200005c0 	.word	0x200005c0
 8007118:	20000488 	.word	0x20000488
 800711c:	0800708d 	.word	0x0800708d

08007120 <__sfp_lock_acquire>:
 8007120:	4801      	ldr	r0, [pc, #4]	@ (8007128 <__sfp_lock_acquire+0x8>)
 8007122:	f000 b90e 	b.w	8007342 <__retarget_lock_acquire_recursive>
 8007126:	bf00      	nop
 8007128:	200005c9 	.word	0x200005c9

0800712c <__sfp_lock_release>:
 800712c:	4801      	ldr	r0, [pc, #4]	@ (8007134 <__sfp_lock_release+0x8>)
 800712e:	f000 b909 	b.w	8007344 <__retarget_lock_release_recursive>
 8007132:	bf00      	nop
 8007134:	200005c9 	.word	0x200005c9

08007138 <__sinit>:
 8007138:	b510      	push	{r4, lr}
 800713a:	4604      	mov	r4, r0
 800713c:	f7ff fff0 	bl	8007120 <__sfp_lock_acquire>
 8007140:	6a23      	ldr	r3, [r4, #32]
 8007142:	b11b      	cbz	r3, 800714c <__sinit+0x14>
 8007144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007148:	f7ff bff0 	b.w	800712c <__sfp_lock_release>
 800714c:	4b04      	ldr	r3, [pc, #16]	@ (8007160 <__sinit+0x28>)
 800714e:	6223      	str	r3, [r4, #32]
 8007150:	4b04      	ldr	r3, [pc, #16]	@ (8007164 <__sinit+0x2c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1f5      	bne.n	8007144 <__sinit+0xc>
 8007158:	f7ff ffc4 	bl	80070e4 <global_stdio_init.part.0>
 800715c:	e7f2      	b.n	8007144 <__sinit+0xc>
 800715e:	bf00      	nop
 8007160:	080070a5 	.word	0x080070a5
 8007164:	200005c0 	.word	0x200005c0

08007168 <_fwalk_sglue>:
 8007168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800716c:	4607      	mov	r7, r0
 800716e:	4688      	mov	r8, r1
 8007170:	4614      	mov	r4, r2
 8007172:	2600      	movs	r6, #0
 8007174:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007178:	f1b9 0901 	subs.w	r9, r9, #1
 800717c:	d505      	bpl.n	800718a <_fwalk_sglue+0x22>
 800717e:	6824      	ldr	r4, [r4, #0]
 8007180:	2c00      	cmp	r4, #0
 8007182:	d1f7      	bne.n	8007174 <_fwalk_sglue+0xc>
 8007184:	4630      	mov	r0, r6
 8007186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800718a:	89ab      	ldrh	r3, [r5, #12]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d907      	bls.n	80071a0 <_fwalk_sglue+0x38>
 8007190:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007194:	3301      	adds	r3, #1
 8007196:	d003      	beq.n	80071a0 <_fwalk_sglue+0x38>
 8007198:	4629      	mov	r1, r5
 800719a:	4638      	mov	r0, r7
 800719c:	47c0      	blx	r8
 800719e:	4306      	orrs	r6, r0
 80071a0:	3568      	adds	r5, #104	@ 0x68
 80071a2:	e7e9      	b.n	8007178 <_fwalk_sglue+0x10>

080071a4 <iprintf>:
 80071a4:	b40f      	push	{r0, r1, r2, r3}
 80071a6:	b507      	push	{r0, r1, r2, lr}
 80071a8:	4906      	ldr	r1, [pc, #24]	@ (80071c4 <iprintf+0x20>)
 80071aa:	ab04      	add	r3, sp, #16
 80071ac:	6808      	ldr	r0, [r1, #0]
 80071ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b2:	6881      	ldr	r1, [r0, #8]
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	f000 f9e9 	bl	800758c <_vfiprintf_r>
 80071ba:	b003      	add	sp, #12
 80071bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80071c0:	b004      	add	sp, #16
 80071c2:	4770      	bx	lr
 80071c4:	20000018 	.word	0x20000018

080071c8 <__sread>:
 80071c8:	b510      	push	{r4, lr}
 80071ca:	460c      	mov	r4, r1
 80071cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d0:	f000 f868 	bl	80072a4 <_read_r>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	bfab      	itete	ge
 80071d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80071da:	89a3      	ldrhlt	r3, [r4, #12]
 80071dc:	181b      	addge	r3, r3, r0
 80071de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80071e2:	bfac      	ite	ge
 80071e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80071e6:	81a3      	strhlt	r3, [r4, #12]
 80071e8:	bd10      	pop	{r4, pc}

080071ea <__swrite>:
 80071ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ee:	461f      	mov	r7, r3
 80071f0:	898b      	ldrh	r3, [r1, #12]
 80071f2:	05db      	lsls	r3, r3, #23
 80071f4:	4605      	mov	r5, r0
 80071f6:	460c      	mov	r4, r1
 80071f8:	4616      	mov	r6, r2
 80071fa:	d505      	bpl.n	8007208 <__swrite+0x1e>
 80071fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007200:	2302      	movs	r3, #2
 8007202:	2200      	movs	r2, #0
 8007204:	f000 f83c 	bl	8007280 <_lseek_r>
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800720e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007212:	81a3      	strh	r3, [r4, #12]
 8007214:	4632      	mov	r2, r6
 8007216:	463b      	mov	r3, r7
 8007218:	4628      	mov	r0, r5
 800721a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800721e:	f000 b853 	b.w	80072c8 <_write_r>

08007222 <__sseek>:
 8007222:	b510      	push	{r4, lr}
 8007224:	460c      	mov	r4, r1
 8007226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800722a:	f000 f829 	bl	8007280 <_lseek_r>
 800722e:	1c43      	adds	r3, r0, #1
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	bf15      	itete	ne
 8007234:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007236:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800723a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800723e:	81a3      	strheq	r3, [r4, #12]
 8007240:	bf18      	it	ne
 8007242:	81a3      	strhne	r3, [r4, #12]
 8007244:	bd10      	pop	{r4, pc}

08007246 <__sclose>:
 8007246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800724a:	f000 b809 	b.w	8007260 <_close_r>

0800724e <memset>:
 800724e:	4402      	add	r2, r0
 8007250:	4603      	mov	r3, r0
 8007252:	4293      	cmp	r3, r2
 8007254:	d100      	bne.n	8007258 <memset+0xa>
 8007256:	4770      	bx	lr
 8007258:	f803 1b01 	strb.w	r1, [r3], #1
 800725c:	e7f9      	b.n	8007252 <memset+0x4>
	...

08007260 <_close_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4d06      	ldr	r5, [pc, #24]	@ (800727c <_close_r+0x1c>)
 8007264:	2300      	movs	r3, #0
 8007266:	4604      	mov	r4, r0
 8007268:	4608      	mov	r0, r1
 800726a:	602b      	str	r3, [r5, #0]
 800726c:	f7f9 fe4d 	bl	8000f0a <_close>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_close_r+0x1a>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b103      	cbz	r3, 800727a <_close_r+0x1a>
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	200005c4 	.word	0x200005c4

08007280 <_lseek_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4d07      	ldr	r5, [pc, #28]	@ (80072a0 <_lseek_r+0x20>)
 8007284:	4604      	mov	r4, r0
 8007286:	4608      	mov	r0, r1
 8007288:	4611      	mov	r1, r2
 800728a:	2200      	movs	r2, #0
 800728c:	602a      	str	r2, [r5, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	f7f9 fe62 	bl	8000f58 <_lseek>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d102      	bne.n	800729e <_lseek_r+0x1e>
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	b103      	cbz	r3, 800729e <_lseek_r+0x1e>
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	bd38      	pop	{r3, r4, r5, pc}
 80072a0:	200005c4 	.word	0x200005c4

080072a4 <_read_r>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	4d07      	ldr	r5, [pc, #28]	@ (80072c4 <_read_r+0x20>)
 80072a8:	4604      	mov	r4, r0
 80072aa:	4608      	mov	r0, r1
 80072ac:	4611      	mov	r1, r2
 80072ae:	2200      	movs	r2, #0
 80072b0:	602a      	str	r2, [r5, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	f7f9 fe0c 	bl	8000ed0 <_read>
 80072b8:	1c43      	adds	r3, r0, #1
 80072ba:	d102      	bne.n	80072c2 <_read_r+0x1e>
 80072bc:	682b      	ldr	r3, [r5, #0]
 80072be:	b103      	cbz	r3, 80072c2 <_read_r+0x1e>
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	bd38      	pop	{r3, r4, r5, pc}
 80072c4:	200005c4 	.word	0x200005c4

080072c8 <_write_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	4d07      	ldr	r5, [pc, #28]	@ (80072e8 <_write_r+0x20>)
 80072cc:	4604      	mov	r4, r0
 80072ce:	4608      	mov	r0, r1
 80072d0:	4611      	mov	r1, r2
 80072d2:	2200      	movs	r2, #0
 80072d4:	602a      	str	r2, [r5, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	f7f9 fc3c 	bl	8000b54 <_write>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	d102      	bne.n	80072e6 <_write_r+0x1e>
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	b103      	cbz	r3, 80072e6 <_write_r+0x1e>
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
 80072e8:	200005c4 	.word	0x200005c4

080072ec <__errno>:
 80072ec:	4b01      	ldr	r3, [pc, #4]	@ (80072f4 <__errno+0x8>)
 80072ee:	6818      	ldr	r0, [r3, #0]
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	20000018 	.word	0x20000018

080072f8 <__libc_init_array>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	4d0d      	ldr	r5, [pc, #52]	@ (8007330 <__libc_init_array+0x38>)
 80072fc:	4c0d      	ldr	r4, [pc, #52]	@ (8007334 <__libc_init_array+0x3c>)
 80072fe:	1b64      	subs	r4, r4, r5
 8007300:	10a4      	asrs	r4, r4, #2
 8007302:	2600      	movs	r6, #0
 8007304:	42a6      	cmp	r6, r4
 8007306:	d109      	bne.n	800731c <__libc_init_array+0x24>
 8007308:	4d0b      	ldr	r5, [pc, #44]	@ (8007338 <__libc_init_array+0x40>)
 800730a:	4c0c      	ldr	r4, [pc, #48]	@ (800733c <__libc_init_array+0x44>)
 800730c:	f000 fdb8 	bl	8007e80 <_init>
 8007310:	1b64      	subs	r4, r4, r5
 8007312:	10a4      	asrs	r4, r4, #2
 8007314:	2600      	movs	r6, #0
 8007316:	42a6      	cmp	r6, r4
 8007318:	d105      	bne.n	8007326 <__libc_init_array+0x2e>
 800731a:	bd70      	pop	{r4, r5, r6, pc}
 800731c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007320:	4798      	blx	r3
 8007322:	3601      	adds	r6, #1
 8007324:	e7ee      	b.n	8007304 <__libc_init_array+0xc>
 8007326:	f855 3b04 	ldr.w	r3, [r5], #4
 800732a:	4798      	blx	r3
 800732c:	3601      	adds	r6, #1
 800732e:	e7f2      	b.n	8007316 <__libc_init_array+0x1e>
 8007330:	08007f30 	.word	0x08007f30
 8007334:	08007f30 	.word	0x08007f30
 8007338:	08007f30 	.word	0x08007f30
 800733c:	08007f34 	.word	0x08007f34

08007340 <__retarget_lock_init_recursive>:
 8007340:	4770      	bx	lr

08007342 <__retarget_lock_acquire_recursive>:
 8007342:	4770      	bx	lr

08007344 <__retarget_lock_release_recursive>:
 8007344:	4770      	bx	lr
	...

08007348 <_free_r>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	4605      	mov	r5, r0
 800734c:	2900      	cmp	r1, #0
 800734e:	d041      	beq.n	80073d4 <_free_r+0x8c>
 8007350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007354:	1f0c      	subs	r4, r1, #4
 8007356:	2b00      	cmp	r3, #0
 8007358:	bfb8      	it	lt
 800735a:	18e4      	addlt	r4, r4, r3
 800735c:	f000 f8e0 	bl	8007520 <__malloc_lock>
 8007360:	4a1d      	ldr	r2, [pc, #116]	@ (80073d8 <_free_r+0x90>)
 8007362:	6813      	ldr	r3, [r2, #0]
 8007364:	b933      	cbnz	r3, 8007374 <_free_r+0x2c>
 8007366:	6063      	str	r3, [r4, #4]
 8007368:	6014      	str	r4, [r2, #0]
 800736a:	4628      	mov	r0, r5
 800736c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007370:	f000 b8dc 	b.w	800752c <__malloc_unlock>
 8007374:	42a3      	cmp	r3, r4
 8007376:	d908      	bls.n	800738a <_free_r+0x42>
 8007378:	6820      	ldr	r0, [r4, #0]
 800737a:	1821      	adds	r1, r4, r0
 800737c:	428b      	cmp	r3, r1
 800737e:	bf01      	itttt	eq
 8007380:	6819      	ldreq	r1, [r3, #0]
 8007382:	685b      	ldreq	r3, [r3, #4]
 8007384:	1809      	addeq	r1, r1, r0
 8007386:	6021      	streq	r1, [r4, #0]
 8007388:	e7ed      	b.n	8007366 <_free_r+0x1e>
 800738a:	461a      	mov	r2, r3
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	b10b      	cbz	r3, 8007394 <_free_r+0x4c>
 8007390:	42a3      	cmp	r3, r4
 8007392:	d9fa      	bls.n	800738a <_free_r+0x42>
 8007394:	6811      	ldr	r1, [r2, #0]
 8007396:	1850      	adds	r0, r2, r1
 8007398:	42a0      	cmp	r0, r4
 800739a:	d10b      	bne.n	80073b4 <_free_r+0x6c>
 800739c:	6820      	ldr	r0, [r4, #0]
 800739e:	4401      	add	r1, r0
 80073a0:	1850      	adds	r0, r2, r1
 80073a2:	4283      	cmp	r3, r0
 80073a4:	6011      	str	r1, [r2, #0]
 80073a6:	d1e0      	bne.n	800736a <_free_r+0x22>
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	6053      	str	r3, [r2, #4]
 80073ae:	4408      	add	r0, r1
 80073b0:	6010      	str	r0, [r2, #0]
 80073b2:	e7da      	b.n	800736a <_free_r+0x22>
 80073b4:	d902      	bls.n	80073bc <_free_r+0x74>
 80073b6:	230c      	movs	r3, #12
 80073b8:	602b      	str	r3, [r5, #0]
 80073ba:	e7d6      	b.n	800736a <_free_r+0x22>
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	1821      	adds	r1, r4, r0
 80073c0:	428b      	cmp	r3, r1
 80073c2:	bf04      	itt	eq
 80073c4:	6819      	ldreq	r1, [r3, #0]
 80073c6:	685b      	ldreq	r3, [r3, #4]
 80073c8:	6063      	str	r3, [r4, #4]
 80073ca:	bf04      	itt	eq
 80073cc:	1809      	addeq	r1, r1, r0
 80073ce:	6021      	streq	r1, [r4, #0]
 80073d0:	6054      	str	r4, [r2, #4]
 80073d2:	e7ca      	b.n	800736a <_free_r+0x22>
 80073d4:	bd38      	pop	{r3, r4, r5, pc}
 80073d6:	bf00      	nop
 80073d8:	200005d0 	.word	0x200005d0

080073dc <sbrk_aligned>:
 80073dc:	b570      	push	{r4, r5, r6, lr}
 80073de:	4e0f      	ldr	r6, [pc, #60]	@ (800741c <sbrk_aligned+0x40>)
 80073e0:	460c      	mov	r4, r1
 80073e2:	6831      	ldr	r1, [r6, #0]
 80073e4:	4605      	mov	r5, r0
 80073e6:	b911      	cbnz	r1, 80073ee <sbrk_aligned+0x12>
 80073e8:	f000 fcb6 	bl	8007d58 <_sbrk_r>
 80073ec:	6030      	str	r0, [r6, #0]
 80073ee:	4621      	mov	r1, r4
 80073f0:	4628      	mov	r0, r5
 80073f2:	f000 fcb1 	bl	8007d58 <_sbrk_r>
 80073f6:	1c43      	adds	r3, r0, #1
 80073f8:	d103      	bne.n	8007402 <sbrk_aligned+0x26>
 80073fa:	f04f 34ff 	mov.w	r4, #4294967295
 80073fe:	4620      	mov	r0, r4
 8007400:	bd70      	pop	{r4, r5, r6, pc}
 8007402:	1cc4      	adds	r4, r0, #3
 8007404:	f024 0403 	bic.w	r4, r4, #3
 8007408:	42a0      	cmp	r0, r4
 800740a:	d0f8      	beq.n	80073fe <sbrk_aligned+0x22>
 800740c:	1a21      	subs	r1, r4, r0
 800740e:	4628      	mov	r0, r5
 8007410:	f000 fca2 	bl	8007d58 <_sbrk_r>
 8007414:	3001      	adds	r0, #1
 8007416:	d1f2      	bne.n	80073fe <sbrk_aligned+0x22>
 8007418:	e7ef      	b.n	80073fa <sbrk_aligned+0x1e>
 800741a:	bf00      	nop
 800741c:	200005cc 	.word	0x200005cc

08007420 <_malloc_r>:
 8007420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007424:	1ccd      	adds	r5, r1, #3
 8007426:	f025 0503 	bic.w	r5, r5, #3
 800742a:	3508      	adds	r5, #8
 800742c:	2d0c      	cmp	r5, #12
 800742e:	bf38      	it	cc
 8007430:	250c      	movcc	r5, #12
 8007432:	2d00      	cmp	r5, #0
 8007434:	4606      	mov	r6, r0
 8007436:	db01      	blt.n	800743c <_malloc_r+0x1c>
 8007438:	42a9      	cmp	r1, r5
 800743a:	d904      	bls.n	8007446 <_malloc_r+0x26>
 800743c:	230c      	movs	r3, #12
 800743e:	6033      	str	r3, [r6, #0]
 8007440:	2000      	movs	r0, #0
 8007442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800751c <_malloc_r+0xfc>
 800744a:	f000 f869 	bl	8007520 <__malloc_lock>
 800744e:	f8d8 3000 	ldr.w	r3, [r8]
 8007452:	461c      	mov	r4, r3
 8007454:	bb44      	cbnz	r4, 80074a8 <_malloc_r+0x88>
 8007456:	4629      	mov	r1, r5
 8007458:	4630      	mov	r0, r6
 800745a:	f7ff ffbf 	bl	80073dc <sbrk_aligned>
 800745e:	1c43      	adds	r3, r0, #1
 8007460:	4604      	mov	r4, r0
 8007462:	d158      	bne.n	8007516 <_malloc_r+0xf6>
 8007464:	f8d8 4000 	ldr.w	r4, [r8]
 8007468:	4627      	mov	r7, r4
 800746a:	2f00      	cmp	r7, #0
 800746c:	d143      	bne.n	80074f6 <_malloc_r+0xd6>
 800746e:	2c00      	cmp	r4, #0
 8007470:	d04b      	beq.n	800750a <_malloc_r+0xea>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	4639      	mov	r1, r7
 8007476:	4630      	mov	r0, r6
 8007478:	eb04 0903 	add.w	r9, r4, r3
 800747c:	f000 fc6c 	bl	8007d58 <_sbrk_r>
 8007480:	4581      	cmp	r9, r0
 8007482:	d142      	bne.n	800750a <_malloc_r+0xea>
 8007484:	6821      	ldr	r1, [r4, #0]
 8007486:	1a6d      	subs	r5, r5, r1
 8007488:	4629      	mov	r1, r5
 800748a:	4630      	mov	r0, r6
 800748c:	f7ff ffa6 	bl	80073dc <sbrk_aligned>
 8007490:	3001      	adds	r0, #1
 8007492:	d03a      	beq.n	800750a <_malloc_r+0xea>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	442b      	add	r3, r5
 8007498:	6023      	str	r3, [r4, #0]
 800749a:	f8d8 3000 	ldr.w	r3, [r8]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	bb62      	cbnz	r2, 80074fc <_malloc_r+0xdc>
 80074a2:	f8c8 7000 	str.w	r7, [r8]
 80074a6:	e00f      	b.n	80074c8 <_malloc_r+0xa8>
 80074a8:	6822      	ldr	r2, [r4, #0]
 80074aa:	1b52      	subs	r2, r2, r5
 80074ac:	d420      	bmi.n	80074f0 <_malloc_r+0xd0>
 80074ae:	2a0b      	cmp	r2, #11
 80074b0:	d917      	bls.n	80074e2 <_malloc_r+0xc2>
 80074b2:	1961      	adds	r1, r4, r5
 80074b4:	42a3      	cmp	r3, r4
 80074b6:	6025      	str	r5, [r4, #0]
 80074b8:	bf18      	it	ne
 80074ba:	6059      	strne	r1, [r3, #4]
 80074bc:	6863      	ldr	r3, [r4, #4]
 80074be:	bf08      	it	eq
 80074c0:	f8c8 1000 	streq.w	r1, [r8]
 80074c4:	5162      	str	r2, [r4, r5]
 80074c6:	604b      	str	r3, [r1, #4]
 80074c8:	4630      	mov	r0, r6
 80074ca:	f000 f82f 	bl	800752c <__malloc_unlock>
 80074ce:	f104 000b 	add.w	r0, r4, #11
 80074d2:	1d23      	adds	r3, r4, #4
 80074d4:	f020 0007 	bic.w	r0, r0, #7
 80074d8:	1ac2      	subs	r2, r0, r3
 80074da:	bf1c      	itt	ne
 80074dc:	1a1b      	subne	r3, r3, r0
 80074de:	50a3      	strne	r3, [r4, r2]
 80074e0:	e7af      	b.n	8007442 <_malloc_r+0x22>
 80074e2:	6862      	ldr	r2, [r4, #4]
 80074e4:	42a3      	cmp	r3, r4
 80074e6:	bf0c      	ite	eq
 80074e8:	f8c8 2000 	streq.w	r2, [r8]
 80074ec:	605a      	strne	r2, [r3, #4]
 80074ee:	e7eb      	b.n	80074c8 <_malloc_r+0xa8>
 80074f0:	4623      	mov	r3, r4
 80074f2:	6864      	ldr	r4, [r4, #4]
 80074f4:	e7ae      	b.n	8007454 <_malloc_r+0x34>
 80074f6:	463c      	mov	r4, r7
 80074f8:	687f      	ldr	r7, [r7, #4]
 80074fa:	e7b6      	b.n	800746a <_malloc_r+0x4a>
 80074fc:	461a      	mov	r2, r3
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	42a3      	cmp	r3, r4
 8007502:	d1fb      	bne.n	80074fc <_malloc_r+0xdc>
 8007504:	2300      	movs	r3, #0
 8007506:	6053      	str	r3, [r2, #4]
 8007508:	e7de      	b.n	80074c8 <_malloc_r+0xa8>
 800750a:	230c      	movs	r3, #12
 800750c:	6033      	str	r3, [r6, #0]
 800750e:	4630      	mov	r0, r6
 8007510:	f000 f80c 	bl	800752c <__malloc_unlock>
 8007514:	e794      	b.n	8007440 <_malloc_r+0x20>
 8007516:	6005      	str	r5, [r0, #0]
 8007518:	e7d6      	b.n	80074c8 <_malloc_r+0xa8>
 800751a:	bf00      	nop
 800751c:	200005d0 	.word	0x200005d0

08007520 <__malloc_lock>:
 8007520:	4801      	ldr	r0, [pc, #4]	@ (8007528 <__malloc_lock+0x8>)
 8007522:	f7ff bf0e 	b.w	8007342 <__retarget_lock_acquire_recursive>
 8007526:	bf00      	nop
 8007528:	200005c8 	.word	0x200005c8

0800752c <__malloc_unlock>:
 800752c:	4801      	ldr	r0, [pc, #4]	@ (8007534 <__malloc_unlock+0x8>)
 800752e:	f7ff bf09 	b.w	8007344 <__retarget_lock_release_recursive>
 8007532:	bf00      	nop
 8007534:	200005c8 	.word	0x200005c8

08007538 <__sfputc_r>:
 8007538:	6893      	ldr	r3, [r2, #8]
 800753a:	3b01      	subs	r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	b410      	push	{r4}
 8007540:	6093      	str	r3, [r2, #8]
 8007542:	da08      	bge.n	8007556 <__sfputc_r+0x1e>
 8007544:	6994      	ldr	r4, [r2, #24]
 8007546:	42a3      	cmp	r3, r4
 8007548:	db01      	blt.n	800754e <__sfputc_r+0x16>
 800754a:	290a      	cmp	r1, #10
 800754c:	d103      	bne.n	8007556 <__sfputc_r+0x1e>
 800754e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007552:	f000 bb6d 	b.w	8007c30 <__swbuf_r>
 8007556:	6813      	ldr	r3, [r2, #0]
 8007558:	1c58      	adds	r0, r3, #1
 800755a:	6010      	str	r0, [r2, #0]
 800755c:	7019      	strb	r1, [r3, #0]
 800755e:	4608      	mov	r0, r1
 8007560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007564:	4770      	bx	lr

08007566 <__sfputs_r>:
 8007566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007568:	4606      	mov	r6, r0
 800756a:	460f      	mov	r7, r1
 800756c:	4614      	mov	r4, r2
 800756e:	18d5      	adds	r5, r2, r3
 8007570:	42ac      	cmp	r4, r5
 8007572:	d101      	bne.n	8007578 <__sfputs_r+0x12>
 8007574:	2000      	movs	r0, #0
 8007576:	e007      	b.n	8007588 <__sfputs_r+0x22>
 8007578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800757c:	463a      	mov	r2, r7
 800757e:	4630      	mov	r0, r6
 8007580:	f7ff ffda 	bl	8007538 <__sfputc_r>
 8007584:	1c43      	adds	r3, r0, #1
 8007586:	d1f3      	bne.n	8007570 <__sfputs_r+0xa>
 8007588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800758c <_vfiprintf_r>:
 800758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007590:	460d      	mov	r5, r1
 8007592:	b09d      	sub	sp, #116	@ 0x74
 8007594:	4614      	mov	r4, r2
 8007596:	4698      	mov	r8, r3
 8007598:	4606      	mov	r6, r0
 800759a:	b118      	cbz	r0, 80075a4 <_vfiprintf_r+0x18>
 800759c:	6a03      	ldr	r3, [r0, #32]
 800759e:	b90b      	cbnz	r3, 80075a4 <_vfiprintf_r+0x18>
 80075a0:	f7ff fdca 	bl	8007138 <__sinit>
 80075a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075a6:	07d9      	lsls	r1, r3, #31
 80075a8:	d405      	bmi.n	80075b6 <_vfiprintf_r+0x2a>
 80075aa:	89ab      	ldrh	r3, [r5, #12]
 80075ac:	059a      	lsls	r2, r3, #22
 80075ae:	d402      	bmi.n	80075b6 <_vfiprintf_r+0x2a>
 80075b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075b2:	f7ff fec6 	bl	8007342 <__retarget_lock_acquire_recursive>
 80075b6:	89ab      	ldrh	r3, [r5, #12]
 80075b8:	071b      	lsls	r3, r3, #28
 80075ba:	d501      	bpl.n	80075c0 <_vfiprintf_r+0x34>
 80075bc:	692b      	ldr	r3, [r5, #16]
 80075be:	b99b      	cbnz	r3, 80075e8 <_vfiprintf_r+0x5c>
 80075c0:	4629      	mov	r1, r5
 80075c2:	4630      	mov	r0, r6
 80075c4:	f000 fb72 	bl	8007cac <__swsetup_r>
 80075c8:	b170      	cbz	r0, 80075e8 <_vfiprintf_r+0x5c>
 80075ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075cc:	07dc      	lsls	r4, r3, #31
 80075ce:	d504      	bpl.n	80075da <_vfiprintf_r+0x4e>
 80075d0:	f04f 30ff 	mov.w	r0, #4294967295
 80075d4:	b01d      	add	sp, #116	@ 0x74
 80075d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075da:	89ab      	ldrh	r3, [r5, #12]
 80075dc:	0598      	lsls	r0, r3, #22
 80075de:	d4f7      	bmi.n	80075d0 <_vfiprintf_r+0x44>
 80075e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075e2:	f7ff feaf 	bl	8007344 <__retarget_lock_release_recursive>
 80075e6:	e7f3      	b.n	80075d0 <_vfiprintf_r+0x44>
 80075e8:	2300      	movs	r3, #0
 80075ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ec:	2320      	movs	r3, #32
 80075ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80075f6:	2330      	movs	r3, #48	@ 0x30
 80075f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80077a8 <_vfiprintf_r+0x21c>
 80075fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007600:	f04f 0901 	mov.w	r9, #1
 8007604:	4623      	mov	r3, r4
 8007606:	469a      	mov	sl, r3
 8007608:	f813 2b01 	ldrb.w	r2, [r3], #1
 800760c:	b10a      	cbz	r2, 8007612 <_vfiprintf_r+0x86>
 800760e:	2a25      	cmp	r2, #37	@ 0x25
 8007610:	d1f9      	bne.n	8007606 <_vfiprintf_r+0x7a>
 8007612:	ebba 0b04 	subs.w	fp, sl, r4
 8007616:	d00b      	beq.n	8007630 <_vfiprintf_r+0xa4>
 8007618:	465b      	mov	r3, fp
 800761a:	4622      	mov	r2, r4
 800761c:	4629      	mov	r1, r5
 800761e:	4630      	mov	r0, r6
 8007620:	f7ff ffa1 	bl	8007566 <__sfputs_r>
 8007624:	3001      	adds	r0, #1
 8007626:	f000 80a7 	beq.w	8007778 <_vfiprintf_r+0x1ec>
 800762a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800762c:	445a      	add	r2, fp
 800762e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007630:	f89a 3000 	ldrb.w	r3, [sl]
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 809f 	beq.w	8007778 <_vfiprintf_r+0x1ec>
 800763a:	2300      	movs	r3, #0
 800763c:	f04f 32ff 	mov.w	r2, #4294967295
 8007640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007644:	f10a 0a01 	add.w	sl, sl, #1
 8007648:	9304      	str	r3, [sp, #16]
 800764a:	9307      	str	r3, [sp, #28]
 800764c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007650:	931a      	str	r3, [sp, #104]	@ 0x68
 8007652:	4654      	mov	r4, sl
 8007654:	2205      	movs	r2, #5
 8007656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800765a:	4853      	ldr	r0, [pc, #332]	@ (80077a8 <_vfiprintf_r+0x21c>)
 800765c:	f7f8 fdb8 	bl	80001d0 <memchr>
 8007660:	9a04      	ldr	r2, [sp, #16]
 8007662:	b9d8      	cbnz	r0, 800769c <_vfiprintf_r+0x110>
 8007664:	06d1      	lsls	r1, r2, #27
 8007666:	bf44      	itt	mi
 8007668:	2320      	movmi	r3, #32
 800766a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800766e:	0713      	lsls	r3, r2, #28
 8007670:	bf44      	itt	mi
 8007672:	232b      	movmi	r3, #43	@ 0x2b
 8007674:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007678:	f89a 3000 	ldrb.w	r3, [sl]
 800767c:	2b2a      	cmp	r3, #42	@ 0x2a
 800767e:	d015      	beq.n	80076ac <_vfiprintf_r+0x120>
 8007680:	9a07      	ldr	r2, [sp, #28]
 8007682:	4654      	mov	r4, sl
 8007684:	2000      	movs	r0, #0
 8007686:	f04f 0c0a 	mov.w	ip, #10
 800768a:	4621      	mov	r1, r4
 800768c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007690:	3b30      	subs	r3, #48	@ 0x30
 8007692:	2b09      	cmp	r3, #9
 8007694:	d94b      	bls.n	800772e <_vfiprintf_r+0x1a2>
 8007696:	b1b0      	cbz	r0, 80076c6 <_vfiprintf_r+0x13a>
 8007698:	9207      	str	r2, [sp, #28]
 800769a:	e014      	b.n	80076c6 <_vfiprintf_r+0x13a>
 800769c:	eba0 0308 	sub.w	r3, r0, r8
 80076a0:	fa09 f303 	lsl.w	r3, r9, r3
 80076a4:	4313      	orrs	r3, r2
 80076a6:	9304      	str	r3, [sp, #16]
 80076a8:	46a2      	mov	sl, r4
 80076aa:	e7d2      	b.n	8007652 <_vfiprintf_r+0xc6>
 80076ac:	9b03      	ldr	r3, [sp, #12]
 80076ae:	1d19      	adds	r1, r3, #4
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	9103      	str	r1, [sp, #12]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	bfbb      	ittet	lt
 80076b8:	425b      	neglt	r3, r3
 80076ba:	f042 0202 	orrlt.w	r2, r2, #2
 80076be:	9307      	strge	r3, [sp, #28]
 80076c0:	9307      	strlt	r3, [sp, #28]
 80076c2:	bfb8      	it	lt
 80076c4:	9204      	strlt	r2, [sp, #16]
 80076c6:	7823      	ldrb	r3, [r4, #0]
 80076c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80076ca:	d10a      	bne.n	80076e2 <_vfiprintf_r+0x156>
 80076cc:	7863      	ldrb	r3, [r4, #1]
 80076ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80076d0:	d132      	bne.n	8007738 <_vfiprintf_r+0x1ac>
 80076d2:	9b03      	ldr	r3, [sp, #12]
 80076d4:	1d1a      	adds	r2, r3, #4
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	9203      	str	r2, [sp, #12]
 80076da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076de:	3402      	adds	r4, #2
 80076e0:	9305      	str	r3, [sp, #20]
 80076e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80077b8 <_vfiprintf_r+0x22c>
 80076e6:	7821      	ldrb	r1, [r4, #0]
 80076e8:	2203      	movs	r2, #3
 80076ea:	4650      	mov	r0, sl
 80076ec:	f7f8 fd70 	bl	80001d0 <memchr>
 80076f0:	b138      	cbz	r0, 8007702 <_vfiprintf_r+0x176>
 80076f2:	9b04      	ldr	r3, [sp, #16]
 80076f4:	eba0 000a 	sub.w	r0, r0, sl
 80076f8:	2240      	movs	r2, #64	@ 0x40
 80076fa:	4082      	lsls	r2, r0
 80076fc:	4313      	orrs	r3, r2
 80076fe:	3401      	adds	r4, #1
 8007700:	9304      	str	r3, [sp, #16]
 8007702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007706:	4829      	ldr	r0, [pc, #164]	@ (80077ac <_vfiprintf_r+0x220>)
 8007708:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800770c:	2206      	movs	r2, #6
 800770e:	f7f8 fd5f 	bl	80001d0 <memchr>
 8007712:	2800      	cmp	r0, #0
 8007714:	d03f      	beq.n	8007796 <_vfiprintf_r+0x20a>
 8007716:	4b26      	ldr	r3, [pc, #152]	@ (80077b0 <_vfiprintf_r+0x224>)
 8007718:	bb1b      	cbnz	r3, 8007762 <_vfiprintf_r+0x1d6>
 800771a:	9b03      	ldr	r3, [sp, #12]
 800771c:	3307      	adds	r3, #7
 800771e:	f023 0307 	bic.w	r3, r3, #7
 8007722:	3308      	adds	r3, #8
 8007724:	9303      	str	r3, [sp, #12]
 8007726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007728:	443b      	add	r3, r7
 800772a:	9309      	str	r3, [sp, #36]	@ 0x24
 800772c:	e76a      	b.n	8007604 <_vfiprintf_r+0x78>
 800772e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007732:	460c      	mov	r4, r1
 8007734:	2001      	movs	r0, #1
 8007736:	e7a8      	b.n	800768a <_vfiprintf_r+0xfe>
 8007738:	2300      	movs	r3, #0
 800773a:	3401      	adds	r4, #1
 800773c:	9305      	str	r3, [sp, #20]
 800773e:	4619      	mov	r1, r3
 8007740:	f04f 0c0a 	mov.w	ip, #10
 8007744:	4620      	mov	r0, r4
 8007746:	f810 2b01 	ldrb.w	r2, [r0], #1
 800774a:	3a30      	subs	r2, #48	@ 0x30
 800774c:	2a09      	cmp	r2, #9
 800774e:	d903      	bls.n	8007758 <_vfiprintf_r+0x1cc>
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0c6      	beq.n	80076e2 <_vfiprintf_r+0x156>
 8007754:	9105      	str	r1, [sp, #20]
 8007756:	e7c4      	b.n	80076e2 <_vfiprintf_r+0x156>
 8007758:	fb0c 2101 	mla	r1, ip, r1, r2
 800775c:	4604      	mov	r4, r0
 800775e:	2301      	movs	r3, #1
 8007760:	e7f0      	b.n	8007744 <_vfiprintf_r+0x1b8>
 8007762:	ab03      	add	r3, sp, #12
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	462a      	mov	r2, r5
 8007768:	4b12      	ldr	r3, [pc, #72]	@ (80077b4 <_vfiprintf_r+0x228>)
 800776a:	a904      	add	r1, sp, #16
 800776c:	4630      	mov	r0, r6
 800776e:	f3af 8000 	nop.w
 8007772:	4607      	mov	r7, r0
 8007774:	1c78      	adds	r0, r7, #1
 8007776:	d1d6      	bne.n	8007726 <_vfiprintf_r+0x19a>
 8007778:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800777a:	07d9      	lsls	r1, r3, #31
 800777c:	d405      	bmi.n	800778a <_vfiprintf_r+0x1fe>
 800777e:	89ab      	ldrh	r3, [r5, #12]
 8007780:	059a      	lsls	r2, r3, #22
 8007782:	d402      	bmi.n	800778a <_vfiprintf_r+0x1fe>
 8007784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007786:	f7ff fddd 	bl	8007344 <__retarget_lock_release_recursive>
 800778a:	89ab      	ldrh	r3, [r5, #12]
 800778c:	065b      	lsls	r3, r3, #25
 800778e:	f53f af1f 	bmi.w	80075d0 <_vfiprintf_r+0x44>
 8007792:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007794:	e71e      	b.n	80075d4 <_vfiprintf_r+0x48>
 8007796:	ab03      	add	r3, sp, #12
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	462a      	mov	r2, r5
 800779c:	4b05      	ldr	r3, [pc, #20]	@ (80077b4 <_vfiprintf_r+0x228>)
 800779e:	a904      	add	r1, sp, #16
 80077a0:	4630      	mov	r0, r6
 80077a2:	f000 f879 	bl	8007898 <_printf_i>
 80077a6:	e7e4      	b.n	8007772 <_vfiprintf_r+0x1e6>
 80077a8:	08007ef4 	.word	0x08007ef4
 80077ac:	08007efe 	.word	0x08007efe
 80077b0:	00000000 	.word	0x00000000
 80077b4:	08007567 	.word	0x08007567
 80077b8:	08007efa 	.word	0x08007efa

080077bc <_printf_common>:
 80077bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077c0:	4616      	mov	r6, r2
 80077c2:	4698      	mov	r8, r3
 80077c4:	688a      	ldr	r2, [r1, #8]
 80077c6:	690b      	ldr	r3, [r1, #16]
 80077c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077cc:	4293      	cmp	r3, r2
 80077ce:	bfb8      	it	lt
 80077d0:	4613      	movlt	r3, r2
 80077d2:	6033      	str	r3, [r6, #0]
 80077d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80077d8:	4607      	mov	r7, r0
 80077da:	460c      	mov	r4, r1
 80077dc:	b10a      	cbz	r2, 80077e2 <_printf_common+0x26>
 80077de:	3301      	adds	r3, #1
 80077e0:	6033      	str	r3, [r6, #0]
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	0699      	lsls	r1, r3, #26
 80077e6:	bf42      	ittt	mi
 80077e8:	6833      	ldrmi	r3, [r6, #0]
 80077ea:	3302      	addmi	r3, #2
 80077ec:	6033      	strmi	r3, [r6, #0]
 80077ee:	6825      	ldr	r5, [r4, #0]
 80077f0:	f015 0506 	ands.w	r5, r5, #6
 80077f4:	d106      	bne.n	8007804 <_printf_common+0x48>
 80077f6:	f104 0a19 	add.w	sl, r4, #25
 80077fa:	68e3      	ldr	r3, [r4, #12]
 80077fc:	6832      	ldr	r2, [r6, #0]
 80077fe:	1a9b      	subs	r3, r3, r2
 8007800:	42ab      	cmp	r3, r5
 8007802:	dc26      	bgt.n	8007852 <_printf_common+0x96>
 8007804:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007808:	6822      	ldr	r2, [r4, #0]
 800780a:	3b00      	subs	r3, #0
 800780c:	bf18      	it	ne
 800780e:	2301      	movne	r3, #1
 8007810:	0692      	lsls	r2, r2, #26
 8007812:	d42b      	bmi.n	800786c <_printf_common+0xb0>
 8007814:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007818:	4641      	mov	r1, r8
 800781a:	4638      	mov	r0, r7
 800781c:	47c8      	blx	r9
 800781e:	3001      	adds	r0, #1
 8007820:	d01e      	beq.n	8007860 <_printf_common+0xa4>
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	6922      	ldr	r2, [r4, #16]
 8007826:	f003 0306 	and.w	r3, r3, #6
 800782a:	2b04      	cmp	r3, #4
 800782c:	bf02      	ittt	eq
 800782e:	68e5      	ldreq	r5, [r4, #12]
 8007830:	6833      	ldreq	r3, [r6, #0]
 8007832:	1aed      	subeq	r5, r5, r3
 8007834:	68a3      	ldr	r3, [r4, #8]
 8007836:	bf0c      	ite	eq
 8007838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800783c:	2500      	movne	r5, #0
 800783e:	4293      	cmp	r3, r2
 8007840:	bfc4      	itt	gt
 8007842:	1a9b      	subgt	r3, r3, r2
 8007844:	18ed      	addgt	r5, r5, r3
 8007846:	2600      	movs	r6, #0
 8007848:	341a      	adds	r4, #26
 800784a:	42b5      	cmp	r5, r6
 800784c:	d11a      	bne.n	8007884 <_printf_common+0xc8>
 800784e:	2000      	movs	r0, #0
 8007850:	e008      	b.n	8007864 <_printf_common+0xa8>
 8007852:	2301      	movs	r3, #1
 8007854:	4652      	mov	r2, sl
 8007856:	4641      	mov	r1, r8
 8007858:	4638      	mov	r0, r7
 800785a:	47c8      	blx	r9
 800785c:	3001      	adds	r0, #1
 800785e:	d103      	bne.n	8007868 <_printf_common+0xac>
 8007860:	f04f 30ff 	mov.w	r0, #4294967295
 8007864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007868:	3501      	adds	r5, #1
 800786a:	e7c6      	b.n	80077fa <_printf_common+0x3e>
 800786c:	18e1      	adds	r1, r4, r3
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	2030      	movs	r0, #48	@ 0x30
 8007872:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007876:	4422      	add	r2, r4
 8007878:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800787c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007880:	3302      	adds	r3, #2
 8007882:	e7c7      	b.n	8007814 <_printf_common+0x58>
 8007884:	2301      	movs	r3, #1
 8007886:	4622      	mov	r2, r4
 8007888:	4641      	mov	r1, r8
 800788a:	4638      	mov	r0, r7
 800788c:	47c8      	blx	r9
 800788e:	3001      	adds	r0, #1
 8007890:	d0e6      	beq.n	8007860 <_printf_common+0xa4>
 8007892:	3601      	adds	r6, #1
 8007894:	e7d9      	b.n	800784a <_printf_common+0x8e>
	...

08007898 <_printf_i>:
 8007898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800789c:	7e0f      	ldrb	r7, [r1, #24]
 800789e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80078a0:	2f78      	cmp	r7, #120	@ 0x78
 80078a2:	4691      	mov	r9, r2
 80078a4:	4680      	mov	r8, r0
 80078a6:	460c      	mov	r4, r1
 80078a8:	469a      	mov	sl, r3
 80078aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80078ae:	d807      	bhi.n	80078c0 <_printf_i+0x28>
 80078b0:	2f62      	cmp	r7, #98	@ 0x62
 80078b2:	d80a      	bhi.n	80078ca <_printf_i+0x32>
 80078b4:	2f00      	cmp	r7, #0
 80078b6:	f000 80d2 	beq.w	8007a5e <_printf_i+0x1c6>
 80078ba:	2f58      	cmp	r7, #88	@ 0x58
 80078bc:	f000 80b9 	beq.w	8007a32 <_printf_i+0x19a>
 80078c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80078c8:	e03a      	b.n	8007940 <_printf_i+0xa8>
 80078ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80078ce:	2b15      	cmp	r3, #21
 80078d0:	d8f6      	bhi.n	80078c0 <_printf_i+0x28>
 80078d2:	a101      	add	r1, pc, #4	@ (adr r1, 80078d8 <_printf_i+0x40>)
 80078d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078d8:	08007931 	.word	0x08007931
 80078dc:	08007945 	.word	0x08007945
 80078e0:	080078c1 	.word	0x080078c1
 80078e4:	080078c1 	.word	0x080078c1
 80078e8:	080078c1 	.word	0x080078c1
 80078ec:	080078c1 	.word	0x080078c1
 80078f0:	08007945 	.word	0x08007945
 80078f4:	080078c1 	.word	0x080078c1
 80078f8:	080078c1 	.word	0x080078c1
 80078fc:	080078c1 	.word	0x080078c1
 8007900:	080078c1 	.word	0x080078c1
 8007904:	08007a45 	.word	0x08007a45
 8007908:	0800796f 	.word	0x0800796f
 800790c:	080079ff 	.word	0x080079ff
 8007910:	080078c1 	.word	0x080078c1
 8007914:	080078c1 	.word	0x080078c1
 8007918:	08007a67 	.word	0x08007a67
 800791c:	080078c1 	.word	0x080078c1
 8007920:	0800796f 	.word	0x0800796f
 8007924:	080078c1 	.word	0x080078c1
 8007928:	080078c1 	.word	0x080078c1
 800792c:	08007a07 	.word	0x08007a07
 8007930:	6833      	ldr	r3, [r6, #0]
 8007932:	1d1a      	adds	r2, r3, #4
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6032      	str	r2, [r6, #0]
 8007938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800793c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007940:	2301      	movs	r3, #1
 8007942:	e09d      	b.n	8007a80 <_printf_i+0x1e8>
 8007944:	6833      	ldr	r3, [r6, #0]
 8007946:	6820      	ldr	r0, [r4, #0]
 8007948:	1d19      	adds	r1, r3, #4
 800794a:	6031      	str	r1, [r6, #0]
 800794c:	0606      	lsls	r6, r0, #24
 800794e:	d501      	bpl.n	8007954 <_printf_i+0xbc>
 8007950:	681d      	ldr	r5, [r3, #0]
 8007952:	e003      	b.n	800795c <_printf_i+0xc4>
 8007954:	0645      	lsls	r5, r0, #25
 8007956:	d5fb      	bpl.n	8007950 <_printf_i+0xb8>
 8007958:	f9b3 5000 	ldrsh.w	r5, [r3]
 800795c:	2d00      	cmp	r5, #0
 800795e:	da03      	bge.n	8007968 <_printf_i+0xd0>
 8007960:	232d      	movs	r3, #45	@ 0x2d
 8007962:	426d      	negs	r5, r5
 8007964:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007968:	4859      	ldr	r0, [pc, #356]	@ (8007ad0 <_printf_i+0x238>)
 800796a:	230a      	movs	r3, #10
 800796c:	e011      	b.n	8007992 <_printf_i+0xfa>
 800796e:	6821      	ldr	r1, [r4, #0]
 8007970:	6833      	ldr	r3, [r6, #0]
 8007972:	0608      	lsls	r0, r1, #24
 8007974:	f853 5b04 	ldr.w	r5, [r3], #4
 8007978:	d402      	bmi.n	8007980 <_printf_i+0xe8>
 800797a:	0649      	lsls	r1, r1, #25
 800797c:	bf48      	it	mi
 800797e:	b2ad      	uxthmi	r5, r5
 8007980:	2f6f      	cmp	r7, #111	@ 0x6f
 8007982:	4853      	ldr	r0, [pc, #332]	@ (8007ad0 <_printf_i+0x238>)
 8007984:	6033      	str	r3, [r6, #0]
 8007986:	bf14      	ite	ne
 8007988:	230a      	movne	r3, #10
 800798a:	2308      	moveq	r3, #8
 800798c:	2100      	movs	r1, #0
 800798e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007992:	6866      	ldr	r6, [r4, #4]
 8007994:	60a6      	str	r6, [r4, #8]
 8007996:	2e00      	cmp	r6, #0
 8007998:	bfa2      	ittt	ge
 800799a:	6821      	ldrge	r1, [r4, #0]
 800799c:	f021 0104 	bicge.w	r1, r1, #4
 80079a0:	6021      	strge	r1, [r4, #0]
 80079a2:	b90d      	cbnz	r5, 80079a8 <_printf_i+0x110>
 80079a4:	2e00      	cmp	r6, #0
 80079a6:	d04b      	beq.n	8007a40 <_printf_i+0x1a8>
 80079a8:	4616      	mov	r6, r2
 80079aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80079ae:	fb03 5711 	mls	r7, r3, r1, r5
 80079b2:	5dc7      	ldrb	r7, [r0, r7]
 80079b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079b8:	462f      	mov	r7, r5
 80079ba:	42bb      	cmp	r3, r7
 80079bc:	460d      	mov	r5, r1
 80079be:	d9f4      	bls.n	80079aa <_printf_i+0x112>
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	d10b      	bne.n	80079dc <_printf_i+0x144>
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	07df      	lsls	r7, r3, #31
 80079c8:	d508      	bpl.n	80079dc <_printf_i+0x144>
 80079ca:	6923      	ldr	r3, [r4, #16]
 80079cc:	6861      	ldr	r1, [r4, #4]
 80079ce:	4299      	cmp	r1, r3
 80079d0:	bfde      	ittt	le
 80079d2:	2330      	movle	r3, #48	@ 0x30
 80079d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079dc:	1b92      	subs	r2, r2, r6
 80079de:	6122      	str	r2, [r4, #16]
 80079e0:	f8cd a000 	str.w	sl, [sp]
 80079e4:	464b      	mov	r3, r9
 80079e6:	aa03      	add	r2, sp, #12
 80079e8:	4621      	mov	r1, r4
 80079ea:	4640      	mov	r0, r8
 80079ec:	f7ff fee6 	bl	80077bc <_printf_common>
 80079f0:	3001      	adds	r0, #1
 80079f2:	d14a      	bne.n	8007a8a <_printf_i+0x1f2>
 80079f4:	f04f 30ff 	mov.w	r0, #4294967295
 80079f8:	b004      	add	sp, #16
 80079fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	f043 0320 	orr.w	r3, r3, #32
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	4833      	ldr	r0, [pc, #204]	@ (8007ad4 <_printf_i+0x23c>)
 8007a08:	2778      	movs	r7, #120	@ 0x78
 8007a0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	6831      	ldr	r1, [r6, #0]
 8007a12:	061f      	lsls	r7, r3, #24
 8007a14:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a18:	d402      	bmi.n	8007a20 <_printf_i+0x188>
 8007a1a:	065f      	lsls	r7, r3, #25
 8007a1c:	bf48      	it	mi
 8007a1e:	b2ad      	uxthmi	r5, r5
 8007a20:	6031      	str	r1, [r6, #0]
 8007a22:	07d9      	lsls	r1, r3, #31
 8007a24:	bf44      	itt	mi
 8007a26:	f043 0320 	orrmi.w	r3, r3, #32
 8007a2a:	6023      	strmi	r3, [r4, #0]
 8007a2c:	b11d      	cbz	r5, 8007a36 <_printf_i+0x19e>
 8007a2e:	2310      	movs	r3, #16
 8007a30:	e7ac      	b.n	800798c <_printf_i+0xf4>
 8007a32:	4827      	ldr	r0, [pc, #156]	@ (8007ad0 <_printf_i+0x238>)
 8007a34:	e7e9      	b.n	8007a0a <_printf_i+0x172>
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	f023 0320 	bic.w	r3, r3, #32
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	e7f6      	b.n	8007a2e <_printf_i+0x196>
 8007a40:	4616      	mov	r6, r2
 8007a42:	e7bd      	b.n	80079c0 <_printf_i+0x128>
 8007a44:	6833      	ldr	r3, [r6, #0]
 8007a46:	6825      	ldr	r5, [r4, #0]
 8007a48:	6961      	ldr	r1, [r4, #20]
 8007a4a:	1d18      	adds	r0, r3, #4
 8007a4c:	6030      	str	r0, [r6, #0]
 8007a4e:	062e      	lsls	r6, r5, #24
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	d501      	bpl.n	8007a58 <_printf_i+0x1c0>
 8007a54:	6019      	str	r1, [r3, #0]
 8007a56:	e002      	b.n	8007a5e <_printf_i+0x1c6>
 8007a58:	0668      	lsls	r0, r5, #25
 8007a5a:	d5fb      	bpl.n	8007a54 <_printf_i+0x1bc>
 8007a5c:	8019      	strh	r1, [r3, #0]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	6123      	str	r3, [r4, #16]
 8007a62:	4616      	mov	r6, r2
 8007a64:	e7bc      	b.n	80079e0 <_printf_i+0x148>
 8007a66:	6833      	ldr	r3, [r6, #0]
 8007a68:	1d1a      	adds	r2, r3, #4
 8007a6a:	6032      	str	r2, [r6, #0]
 8007a6c:	681e      	ldr	r6, [r3, #0]
 8007a6e:	6862      	ldr	r2, [r4, #4]
 8007a70:	2100      	movs	r1, #0
 8007a72:	4630      	mov	r0, r6
 8007a74:	f7f8 fbac 	bl	80001d0 <memchr>
 8007a78:	b108      	cbz	r0, 8007a7e <_printf_i+0x1e6>
 8007a7a:	1b80      	subs	r0, r0, r6
 8007a7c:	6060      	str	r0, [r4, #4]
 8007a7e:	6863      	ldr	r3, [r4, #4]
 8007a80:	6123      	str	r3, [r4, #16]
 8007a82:	2300      	movs	r3, #0
 8007a84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a88:	e7aa      	b.n	80079e0 <_printf_i+0x148>
 8007a8a:	6923      	ldr	r3, [r4, #16]
 8007a8c:	4632      	mov	r2, r6
 8007a8e:	4649      	mov	r1, r9
 8007a90:	4640      	mov	r0, r8
 8007a92:	47d0      	blx	sl
 8007a94:	3001      	adds	r0, #1
 8007a96:	d0ad      	beq.n	80079f4 <_printf_i+0x15c>
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	079b      	lsls	r3, r3, #30
 8007a9c:	d413      	bmi.n	8007ac6 <_printf_i+0x22e>
 8007a9e:	68e0      	ldr	r0, [r4, #12]
 8007aa0:	9b03      	ldr	r3, [sp, #12]
 8007aa2:	4298      	cmp	r0, r3
 8007aa4:	bfb8      	it	lt
 8007aa6:	4618      	movlt	r0, r3
 8007aa8:	e7a6      	b.n	80079f8 <_printf_i+0x160>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	4632      	mov	r2, r6
 8007aae:	4649      	mov	r1, r9
 8007ab0:	4640      	mov	r0, r8
 8007ab2:	47d0      	blx	sl
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d09d      	beq.n	80079f4 <_printf_i+0x15c>
 8007ab8:	3501      	adds	r5, #1
 8007aba:	68e3      	ldr	r3, [r4, #12]
 8007abc:	9903      	ldr	r1, [sp, #12]
 8007abe:	1a5b      	subs	r3, r3, r1
 8007ac0:	42ab      	cmp	r3, r5
 8007ac2:	dcf2      	bgt.n	8007aaa <_printf_i+0x212>
 8007ac4:	e7eb      	b.n	8007a9e <_printf_i+0x206>
 8007ac6:	2500      	movs	r5, #0
 8007ac8:	f104 0619 	add.w	r6, r4, #25
 8007acc:	e7f5      	b.n	8007aba <_printf_i+0x222>
 8007ace:	bf00      	nop
 8007ad0:	08007f05 	.word	0x08007f05
 8007ad4:	08007f16 	.word	0x08007f16

08007ad8 <__sflush_r>:
 8007ad8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae0:	0716      	lsls	r6, r2, #28
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	d454      	bmi.n	8007b92 <__sflush_r+0xba>
 8007ae8:	684b      	ldr	r3, [r1, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	dc02      	bgt.n	8007af4 <__sflush_r+0x1c>
 8007aee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	dd48      	ble.n	8007b86 <__sflush_r+0xae>
 8007af4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007af6:	2e00      	cmp	r6, #0
 8007af8:	d045      	beq.n	8007b86 <__sflush_r+0xae>
 8007afa:	2300      	movs	r3, #0
 8007afc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b00:	682f      	ldr	r7, [r5, #0]
 8007b02:	6a21      	ldr	r1, [r4, #32]
 8007b04:	602b      	str	r3, [r5, #0]
 8007b06:	d030      	beq.n	8007b6a <__sflush_r+0x92>
 8007b08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	0759      	lsls	r1, r3, #29
 8007b0e:	d505      	bpl.n	8007b1c <__sflush_r+0x44>
 8007b10:	6863      	ldr	r3, [r4, #4]
 8007b12:	1ad2      	subs	r2, r2, r3
 8007b14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b16:	b10b      	cbz	r3, 8007b1c <__sflush_r+0x44>
 8007b18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b1a:	1ad2      	subs	r2, r2, r3
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b20:	6a21      	ldr	r1, [r4, #32]
 8007b22:	4628      	mov	r0, r5
 8007b24:	47b0      	blx	r6
 8007b26:	1c43      	adds	r3, r0, #1
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	d106      	bne.n	8007b3a <__sflush_r+0x62>
 8007b2c:	6829      	ldr	r1, [r5, #0]
 8007b2e:	291d      	cmp	r1, #29
 8007b30:	d82b      	bhi.n	8007b8a <__sflush_r+0xb2>
 8007b32:	4a2a      	ldr	r2, [pc, #168]	@ (8007bdc <__sflush_r+0x104>)
 8007b34:	410a      	asrs	r2, r1
 8007b36:	07d6      	lsls	r6, r2, #31
 8007b38:	d427      	bmi.n	8007b8a <__sflush_r+0xb2>
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	6062      	str	r2, [r4, #4]
 8007b3e:	04d9      	lsls	r1, r3, #19
 8007b40:	6922      	ldr	r2, [r4, #16]
 8007b42:	6022      	str	r2, [r4, #0]
 8007b44:	d504      	bpl.n	8007b50 <__sflush_r+0x78>
 8007b46:	1c42      	adds	r2, r0, #1
 8007b48:	d101      	bne.n	8007b4e <__sflush_r+0x76>
 8007b4a:	682b      	ldr	r3, [r5, #0]
 8007b4c:	b903      	cbnz	r3, 8007b50 <__sflush_r+0x78>
 8007b4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b52:	602f      	str	r7, [r5, #0]
 8007b54:	b1b9      	cbz	r1, 8007b86 <__sflush_r+0xae>
 8007b56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b5a:	4299      	cmp	r1, r3
 8007b5c:	d002      	beq.n	8007b64 <__sflush_r+0x8c>
 8007b5e:	4628      	mov	r0, r5
 8007b60:	f7ff fbf2 	bl	8007348 <_free_r>
 8007b64:	2300      	movs	r3, #0
 8007b66:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b68:	e00d      	b.n	8007b86 <__sflush_r+0xae>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	47b0      	blx	r6
 8007b70:	4602      	mov	r2, r0
 8007b72:	1c50      	adds	r0, r2, #1
 8007b74:	d1c9      	bne.n	8007b0a <__sflush_r+0x32>
 8007b76:	682b      	ldr	r3, [r5, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d0c6      	beq.n	8007b0a <__sflush_r+0x32>
 8007b7c:	2b1d      	cmp	r3, #29
 8007b7e:	d001      	beq.n	8007b84 <__sflush_r+0xac>
 8007b80:	2b16      	cmp	r3, #22
 8007b82:	d11e      	bne.n	8007bc2 <__sflush_r+0xea>
 8007b84:	602f      	str	r7, [r5, #0]
 8007b86:	2000      	movs	r0, #0
 8007b88:	e022      	b.n	8007bd0 <__sflush_r+0xf8>
 8007b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b8e:	b21b      	sxth	r3, r3
 8007b90:	e01b      	b.n	8007bca <__sflush_r+0xf2>
 8007b92:	690f      	ldr	r7, [r1, #16]
 8007b94:	2f00      	cmp	r7, #0
 8007b96:	d0f6      	beq.n	8007b86 <__sflush_r+0xae>
 8007b98:	0793      	lsls	r3, r2, #30
 8007b9a:	680e      	ldr	r6, [r1, #0]
 8007b9c:	bf08      	it	eq
 8007b9e:	694b      	ldreq	r3, [r1, #20]
 8007ba0:	600f      	str	r7, [r1, #0]
 8007ba2:	bf18      	it	ne
 8007ba4:	2300      	movne	r3, #0
 8007ba6:	eba6 0807 	sub.w	r8, r6, r7
 8007baa:	608b      	str	r3, [r1, #8]
 8007bac:	f1b8 0f00 	cmp.w	r8, #0
 8007bb0:	dde9      	ble.n	8007b86 <__sflush_r+0xae>
 8007bb2:	6a21      	ldr	r1, [r4, #32]
 8007bb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007bb6:	4643      	mov	r3, r8
 8007bb8:	463a      	mov	r2, r7
 8007bba:	4628      	mov	r0, r5
 8007bbc:	47b0      	blx	r6
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	dc08      	bgt.n	8007bd4 <__sflush_r+0xfc>
 8007bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bca:	81a3      	strh	r3, [r4, #12]
 8007bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd4:	4407      	add	r7, r0
 8007bd6:	eba8 0800 	sub.w	r8, r8, r0
 8007bda:	e7e7      	b.n	8007bac <__sflush_r+0xd4>
 8007bdc:	dfbffffe 	.word	0xdfbffffe

08007be0 <_fflush_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	690b      	ldr	r3, [r1, #16]
 8007be4:	4605      	mov	r5, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	b913      	cbnz	r3, 8007bf0 <_fflush_r+0x10>
 8007bea:	2500      	movs	r5, #0
 8007bec:	4628      	mov	r0, r5
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	b118      	cbz	r0, 8007bfa <_fflush_r+0x1a>
 8007bf2:	6a03      	ldr	r3, [r0, #32]
 8007bf4:	b90b      	cbnz	r3, 8007bfa <_fflush_r+0x1a>
 8007bf6:	f7ff fa9f 	bl	8007138 <__sinit>
 8007bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d0f3      	beq.n	8007bea <_fflush_r+0xa>
 8007c02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c04:	07d0      	lsls	r0, r2, #31
 8007c06:	d404      	bmi.n	8007c12 <_fflush_r+0x32>
 8007c08:	0599      	lsls	r1, r3, #22
 8007c0a:	d402      	bmi.n	8007c12 <_fflush_r+0x32>
 8007c0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c0e:	f7ff fb98 	bl	8007342 <__retarget_lock_acquire_recursive>
 8007c12:	4628      	mov	r0, r5
 8007c14:	4621      	mov	r1, r4
 8007c16:	f7ff ff5f 	bl	8007ad8 <__sflush_r>
 8007c1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c1c:	07da      	lsls	r2, r3, #31
 8007c1e:	4605      	mov	r5, r0
 8007c20:	d4e4      	bmi.n	8007bec <_fflush_r+0xc>
 8007c22:	89a3      	ldrh	r3, [r4, #12]
 8007c24:	059b      	lsls	r3, r3, #22
 8007c26:	d4e1      	bmi.n	8007bec <_fflush_r+0xc>
 8007c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c2a:	f7ff fb8b 	bl	8007344 <__retarget_lock_release_recursive>
 8007c2e:	e7dd      	b.n	8007bec <_fflush_r+0xc>

08007c30 <__swbuf_r>:
 8007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c32:	460e      	mov	r6, r1
 8007c34:	4614      	mov	r4, r2
 8007c36:	4605      	mov	r5, r0
 8007c38:	b118      	cbz	r0, 8007c42 <__swbuf_r+0x12>
 8007c3a:	6a03      	ldr	r3, [r0, #32]
 8007c3c:	b90b      	cbnz	r3, 8007c42 <__swbuf_r+0x12>
 8007c3e:	f7ff fa7b 	bl	8007138 <__sinit>
 8007c42:	69a3      	ldr	r3, [r4, #24]
 8007c44:	60a3      	str	r3, [r4, #8]
 8007c46:	89a3      	ldrh	r3, [r4, #12]
 8007c48:	071a      	lsls	r2, r3, #28
 8007c4a:	d501      	bpl.n	8007c50 <__swbuf_r+0x20>
 8007c4c:	6923      	ldr	r3, [r4, #16]
 8007c4e:	b943      	cbnz	r3, 8007c62 <__swbuf_r+0x32>
 8007c50:	4621      	mov	r1, r4
 8007c52:	4628      	mov	r0, r5
 8007c54:	f000 f82a 	bl	8007cac <__swsetup_r>
 8007c58:	b118      	cbz	r0, 8007c62 <__swbuf_r+0x32>
 8007c5a:	f04f 37ff 	mov.w	r7, #4294967295
 8007c5e:	4638      	mov	r0, r7
 8007c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	6922      	ldr	r2, [r4, #16]
 8007c66:	1a98      	subs	r0, r3, r2
 8007c68:	6963      	ldr	r3, [r4, #20]
 8007c6a:	b2f6      	uxtb	r6, r6
 8007c6c:	4283      	cmp	r3, r0
 8007c6e:	4637      	mov	r7, r6
 8007c70:	dc05      	bgt.n	8007c7e <__swbuf_r+0x4e>
 8007c72:	4621      	mov	r1, r4
 8007c74:	4628      	mov	r0, r5
 8007c76:	f7ff ffb3 	bl	8007be0 <_fflush_r>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	d1ed      	bne.n	8007c5a <__swbuf_r+0x2a>
 8007c7e:	68a3      	ldr	r3, [r4, #8]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	60a3      	str	r3, [r4, #8]
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	1c5a      	adds	r2, r3, #1
 8007c88:	6022      	str	r2, [r4, #0]
 8007c8a:	701e      	strb	r6, [r3, #0]
 8007c8c:	6962      	ldr	r2, [r4, #20]
 8007c8e:	1c43      	adds	r3, r0, #1
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d004      	beq.n	8007c9e <__swbuf_r+0x6e>
 8007c94:	89a3      	ldrh	r3, [r4, #12]
 8007c96:	07db      	lsls	r3, r3, #31
 8007c98:	d5e1      	bpl.n	8007c5e <__swbuf_r+0x2e>
 8007c9a:	2e0a      	cmp	r6, #10
 8007c9c:	d1df      	bne.n	8007c5e <__swbuf_r+0x2e>
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f7ff ff9d 	bl	8007be0 <_fflush_r>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d0d9      	beq.n	8007c5e <__swbuf_r+0x2e>
 8007caa:	e7d6      	b.n	8007c5a <__swbuf_r+0x2a>

08007cac <__swsetup_r>:
 8007cac:	b538      	push	{r3, r4, r5, lr}
 8007cae:	4b29      	ldr	r3, [pc, #164]	@ (8007d54 <__swsetup_r+0xa8>)
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	6818      	ldr	r0, [r3, #0]
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	b118      	cbz	r0, 8007cc0 <__swsetup_r+0x14>
 8007cb8:	6a03      	ldr	r3, [r0, #32]
 8007cba:	b90b      	cbnz	r3, 8007cc0 <__swsetup_r+0x14>
 8007cbc:	f7ff fa3c 	bl	8007138 <__sinit>
 8007cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cc4:	0719      	lsls	r1, r3, #28
 8007cc6:	d422      	bmi.n	8007d0e <__swsetup_r+0x62>
 8007cc8:	06da      	lsls	r2, r3, #27
 8007cca:	d407      	bmi.n	8007cdc <__swsetup_r+0x30>
 8007ccc:	2209      	movs	r2, #9
 8007cce:	602a      	str	r2, [r5, #0]
 8007cd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cd4:	81a3      	strh	r3, [r4, #12]
 8007cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cda:	e033      	b.n	8007d44 <__swsetup_r+0x98>
 8007cdc:	0758      	lsls	r0, r3, #29
 8007cde:	d512      	bpl.n	8007d06 <__swsetup_r+0x5a>
 8007ce0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ce2:	b141      	cbz	r1, 8007cf6 <__swsetup_r+0x4a>
 8007ce4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ce8:	4299      	cmp	r1, r3
 8007cea:	d002      	beq.n	8007cf2 <__swsetup_r+0x46>
 8007cec:	4628      	mov	r0, r5
 8007cee:	f7ff fb2b 	bl	8007348 <_free_r>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cf6:	89a3      	ldrh	r3, [r4, #12]
 8007cf8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007cfc:	81a3      	strh	r3, [r4, #12]
 8007cfe:	2300      	movs	r3, #0
 8007d00:	6063      	str	r3, [r4, #4]
 8007d02:	6923      	ldr	r3, [r4, #16]
 8007d04:	6023      	str	r3, [r4, #0]
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	f043 0308 	orr.w	r3, r3, #8
 8007d0c:	81a3      	strh	r3, [r4, #12]
 8007d0e:	6923      	ldr	r3, [r4, #16]
 8007d10:	b94b      	cbnz	r3, 8007d26 <__swsetup_r+0x7a>
 8007d12:	89a3      	ldrh	r3, [r4, #12]
 8007d14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d1c:	d003      	beq.n	8007d26 <__swsetup_r+0x7a>
 8007d1e:	4621      	mov	r1, r4
 8007d20:	4628      	mov	r0, r5
 8007d22:	f000 f84f 	bl	8007dc4 <__smakebuf_r>
 8007d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d2a:	f013 0201 	ands.w	r2, r3, #1
 8007d2e:	d00a      	beq.n	8007d46 <__swsetup_r+0x9a>
 8007d30:	2200      	movs	r2, #0
 8007d32:	60a2      	str	r2, [r4, #8]
 8007d34:	6962      	ldr	r2, [r4, #20]
 8007d36:	4252      	negs	r2, r2
 8007d38:	61a2      	str	r2, [r4, #24]
 8007d3a:	6922      	ldr	r2, [r4, #16]
 8007d3c:	b942      	cbnz	r2, 8007d50 <__swsetup_r+0xa4>
 8007d3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d42:	d1c5      	bne.n	8007cd0 <__swsetup_r+0x24>
 8007d44:	bd38      	pop	{r3, r4, r5, pc}
 8007d46:	0799      	lsls	r1, r3, #30
 8007d48:	bf58      	it	pl
 8007d4a:	6962      	ldrpl	r2, [r4, #20]
 8007d4c:	60a2      	str	r2, [r4, #8]
 8007d4e:	e7f4      	b.n	8007d3a <__swsetup_r+0x8e>
 8007d50:	2000      	movs	r0, #0
 8007d52:	e7f7      	b.n	8007d44 <__swsetup_r+0x98>
 8007d54:	20000018 	.word	0x20000018

08007d58 <_sbrk_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4d06      	ldr	r5, [pc, #24]	@ (8007d74 <_sbrk_r+0x1c>)
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4608      	mov	r0, r1
 8007d62:	602b      	str	r3, [r5, #0]
 8007d64:	f7f9 f906 	bl	8000f74 <_sbrk>
 8007d68:	1c43      	adds	r3, r0, #1
 8007d6a:	d102      	bne.n	8007d72 <_sbrk_r+0x1a>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	b103      	cbz	r3, 8007d72 <_sbrk_r+0x1a>
 8007d70:	6023      	str	r3, [r4, #0]
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	200005c4 	.word	0x200005c4

08007d78 <__swhatbuf_r>:
 8007d78:	b570      	push	{r4, r5, r6, lr}
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d80:	2900      	cmp	r1, #0
 8007d82:	b096      	sub	sp, #88	@ 0x58
 8007d84:	4615      	mov	r5, r2
 8007d86:	461e      	mov	r6, r3
 8007d88:	da0d      	bge.n	8007da6 <__swhatbuf_r+0x2e>
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d90:	f04f 0100 	mov.w	r1, #0
 8007d94:	bf14      	ite	ne
 8007d96:	2340      	movne	r3, #64	@ 0x40
 8007d98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	6031      	str	r1, [r6, #0]
 8007da0:	602b      	str	r3, [r5, #0]
 8007da2:	b016      	add	sp, #88	@ 0x58
 8007da4:	bd70      	pop	{r4, r5, r6, pc}
 8007da6:	466a      	mov	r2, sp
 8007da8:	f000 f848 	bl	8007e3c <_fstat_r>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	dbec      	blt.n	8007d8a <__swhatbuf_r+0x12>
 8007db0:	9901      	ldr	r1, [sp, #4]
 8007db2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007db6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007dba:	4259      	negs	r1, r3
 8007dbc:	4159      	adcs	r1, r3
 8007dbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007dc2:	e7eb      	b.n	8007d9c <__swhatbuf_r+0x24>

08007dc4 <__smakebuf_r>:
 8007dc4:	898b      	ldrh	r3, [r1, #12]
 8007dc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dc8:	079d      	lsls	r5, r3, #30
 8007dca:	4606      	mov	r6, r0
 8007dcc:	460c      	mov	r4, r1
 8007dce:	d507      	bpl.n	8007de0 <__smakebuf_r+0x1c>
 8007dd0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	6123      	str	r3, [r4, #16]
 8007dd8:	2301      	movs	r3, #1
 8007dda:	6163      	str	r3, [r4, #20]
 8007ddc:	b003      	add	sp, #12
 8007dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007de0:	ab01      	add	r3, sp, #4
 8007de2:	466a      	mov	r2, sp
 8007de4:	f7ff ffc8 	bl	8007d78 <__swhatbuf_r>
 8007de8:	9f00      	ldr	r7, [sp, #0]
 8007dea:	4605      	mov	r5, r0
 8007dec:	4639      	mov	r1, r7
 8007dee:	4630      	mov	r0, r6
 8007df0:	f7ff fb16 	bl	8007420 <_malloc_r>
 8007df4:	b948      	cbnz	r0, 8007e0a <__smakebuf_r+0x46>
 8007df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dfa:	059a      	lsls	r2, r3, #22
 8007dfc:	d4ee      	bmi.n	8007ddc <__smakebuf_r+0x18>
 8007dfe:	f023 0303 	bic.w	r3, r3, #3
 8007e02:	f043 0302 	orr.w	r3, r3, #2
 8007e06:	81a3      	strh	r3, [r4, #12]
 8007e08:	e7e2      	b.n	8007dd0 <__smakebuf_r+0xc>
 8007e0a:	89a3      	ldrh	r3, [r4, #12]
 8007e0c:	6020      	str	r0, [r4, #0]
 8007e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e12:	81a3      	strh	r3, [r4, #12]
 8007e14:	9b01      	ldr	r3, [sp, #4]
 8007e16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007e1a:	b15b      	cbz	r3, 8007e34 <__smakebuf_r+0x70>
 8007e1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e20:	4630      	mov	r0, r6
 8007e22:	f000 f81d 	bl	8007e60 <_isatty_r>
 8007e26:	b128      	cbz	r0, 8007e34 <__smakebuf_r+0x70>
 8007e28:	89a3      	ldrh	r3, [r4, #12]
 8007e2a:	f023 0303 	bic.w	r3, r3, #3
 8007e2e:	f043 0301 	orr.w	r3, r3, #1
 8007e32:	81a3      	strh	r3, [r4, #12]
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	431d      	orrs	r5, r3
 8007e38:	81a5      	strh	r5, [r4, #12]
 8007e3a:	e7cf      	b.n	8007ddc <__smakebuf_r+0x18>

08007e3c <_fstat_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	4d07      	ldr	r5, [pc, #28]	@ (8007e5c <_fstat_r+0x20>)
 8007e40:	2300      	movs	r3, #0
 8007e42:	4604      	mov	r4, r0
 8007e44:	4608      	mov	r0, r1
 8007e46:	4611      	mov	r1, r2
 8007e48:	602b      	str	r3, [r5, #0]
 8007e4a:	f7f9 f86a 	bl	8000f22 <_fstat>
 8007e4e:	1c43      	adds	r3, r0, #1
 8007e50:	d102      	bne.n	8007e58 <_fstat_r+0x1c>
 8007e52:	682b      	ldr	r3, [r5, #0]
 8007e54:	b103      	cbz	r3, 8007e58 <_fstat_r+0x1c>
 8007e56:	6023      	str	r3, [r4, #0]
 8007e58:	bd38      	pop	{r3, r4, r5, pc}
 8007e5a:	bf00      	nop
 8007e5c:	200005c4 	.word	0x200005c4

08007e60 <_isatty_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	4d06      	ldr	r5, [pc, #24]	@ (8007e7c <_isatty_r+0x1c>)
 8007e64:	2300      	movs	r3, #0
 8007e66:	4604      	mov	r4, r0
 8007e68:	4608      	mov	r0, r1
 8007e6a:	602b      	str	r3, [r5, #0]
 8007e6c:	f7f9 f869 	bl	8000f42 <_isatty>
 8007e70:	1c43      	adds	r3, r0, #1
 8007e72:	d102      	bne.n	8007e7a <_isatty_r+0x1a>
 8007e74:	682b      	ldr	r3, [r5, #0]
 8007e76:	b103      	cbz	r3, 8007e7a <_isatty_r+0x1a>
 8007e78:	6023      	str	r3, [r4, #0]
 8007e7a:	bd38      	pop	{r3, r4, r5, pc}
 8007e7c:	200005c4 	.word	0x200005c4

08007e80 <_init>:
 8007e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e82:	bf00      	nop
 8007e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e86:	bc08      	pop	{r3}
 8007e88:	469e      	mov	lr, r3
 8007e8a:	4770      	bx	lr

08007e8c <_fini>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	bf00      	nop
 8007e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e92:	bc08      	pop	{r3}
 8007e94:	469e      	mov	lr, r3
 8007e96:	4770      	bx	lr
