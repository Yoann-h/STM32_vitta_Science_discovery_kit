
vita_science_kit_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009378  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08009508  08009508  0000a508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095ac  080095ac  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  080095ac  080095ac  0000a5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095b4  080095b4  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095b4  080095b4  0000a5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095b8  080095b8  0000a5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080095bc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  20000068  08009624  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08009624  0000b5d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f556  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043ee  00000000  00000000  0002a5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  0002e9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c5  00000000  00000000  00030490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c238  00000000  00000000  00031955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000234be  00000000  00000000  0005db8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d89d  00000000  00000000  0008104b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018e8e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077d4  00000000  00000000  0018e92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00196100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094f0 	.word	0x080094f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080094f0 	.word	0x080094f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
 8000580:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000582:	4b3e      	ldr	r3, [pc, #248]	@ (800067c <MX_ADC1_Init+0x11c>)
 8000584:	4a3e      	ldr	r2, [pc, #248]	@ (8000680 <MX_ADC1_Init+0x120>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000588:	4b3c      	ldr	r3, [pc, #240]	@ (800067c <MX_ADC1_Init+0x11c>)
 800058a:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b3a      	ldr	r3, [pc, #232]	@ (800067c <MX_ADC1_Init+0x11c>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000596:	4b39      	ldr	r3, [pc, #228]	@ (800067c <MX_ADC1_Init+0x11c>)
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800059c:	4b37      	ldr	r3, [pc, #220]	@ (800067c <MX_ADC1_Init+0x11c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a2:	4b36      	ldr	r3, [pc, #216]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005a4:	2204      	movs	r2, #4
 80005a6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a8:	4b34      	ldr	r3, [pc, #208]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ae:	4b33      	ldr	r3, [pc, #204]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80005b4:	4b31      	ldr	r3, [pc, #196]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005b6:	2203      	movs	r2, #3
 80005b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ba:	4b30      	ldr	r3, [pc, #192]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c2:	4b2e      	ldr	r3, [pc, #184]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c8:	4b2c      	ldr	r3, [pc, #176]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ce:	4b2b      	ldr	r3, [pc, #172]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d6:	4b29      	ldr	r3, [pc, #164]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005dc:	4b27      	ldr	r3, [pc, #156]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e4:	4825      	ldr	r0, [pc, #148]	@ (800067c <MX_ADC1_Init+0x11c>)
 80005e6:	f001 fb8f 	bl	8001d08 <HAL_ADC_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80005f0:	f000 fb4a 	bl	8000c88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	4619      	mov	r1, r3
 80005fe:	481f      	ldr	r0, [pc, #124]	@ (800067c <MX_ADC1_Init+0x11c>)
 8000600:	f002 f8ea 	bl	80027d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800060a:	f000 fb3d 	bl	8000c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800060e:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <MX_ADC1_Init+0x124>)
 8000610:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000612:	2306      	movs	r3, #6
 8000614:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000616:	2303      	movs	r3, #3
 8000618:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800061a:	237f      	movs	r3, #127	@ 0x7f
 800061c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800061e:	2304      	movs	r3, #4
 8000620:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4619      	mov	r1, r3
 800062a:	4814      	ldr	r0, [pc, #80]	@ (800067c <MX_ADC1_Init+0x11c>)
 800062c:	f001 fcbc 	bl	8001fa8 <HAL_ADC_ConfigChannel>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000636:	f000 fb27 	bl	8000c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800063a:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <MX_ADC1_Init+0x128>)
 800063c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800063e:	230c      	movs	r3, #12
 8000640:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4619      	mov	r1, r3
 8000646:	480d      	ldr	r0, [pc, #52]	@ (800067c <MX_ADC1_Init+0x11c>)
 8000648:	f001 fcae 	bl	8001fa8 <HAL_ADC_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000652:	f000 fb19 	bl	8000c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <MX_ADC1_Init+0x12c>)
 8000658:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800065a:	2312      	movs	r3, #18
 800065c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4619      	mov	r1, r3
 8000662:	4806      	ldr	r0, [pc, #24]	@ (800067c <MX_ADC1_Init+0x11c>)
 8000664:	f001 fca0 	bl	8001fa8 <HAL_ADC_ConfigChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 800066e:	f000 fb0b 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	3728      	adds	r7, #40	@ 0x28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000084 	.word	0x20000084
 8000680:	50040000 	.word	0x50040000
 8000684:	14f00020 	.word	0x14f00020
 8000688:	19200040 	.word	0x19200040
 800068c:	25b00200 	.word	0x25b00200

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b0ac      	sub	sp, #176	@ 0xb0
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2288      	movs	r2, #136	@ 0x88
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f008 f904 	bl	80088be <memset>
  if(adcHandle->Instance==ADC1)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a3d      	ldr	r2, [pc, #244]	@ (80007b0 <HAL_ADC_MspInit+0x120>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d172      	bne.n	80007a6 <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006c4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006c6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80006ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006ce:	2302      	movs	r3, #2
 80006d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006d6:	2308      	movs	r3, #8
 80006d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006da:	2307      	movs	r3, #7
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80006ea:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4618      	mov	r0, r3
 80006f2:	f004 f92d 	bl	8004950 <HAL_RCCEx_PeriphCLKConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006fc:	f000 fac4 	bl	8000c88 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000700:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <HAL_ADC_MspInit+0x124>)
 8000702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000704:	4a2b      	ldr	r2, [pc, #172]	@ (80007b4 <HAL_ADC_MspInit+0x124>)
 8000706:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800070a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070c:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <HAL_ADC_MspInit+0x124>)
 800070e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <HAL_ADC_MspInit+0x124>)
 800071a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071c:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <HAL_ADC_MspInit+0x124>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000724:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <HAL_ADC_MspInit+0x124>)
 8000726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = temperature_Pin|light_Pin|GPIO_PIN_4;
 8000730:	2313      	movs	r3, #19
 8000732:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000736:	230b      	movs	r3, #11
 8000738:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000746:	4619      	mov	r1, r3
 8000748:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800074c:	f002 fc4c 	bl	8002fe8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 8000750:	4b19      	ldr	r3, [pc, #100]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 8000752:	4a1a      	ldr	r2, [pc, #104]	@ (80007bc <HAL_ADC_MspInit+0x12c>)
 8000754:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000756:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 8000758:	2200      	movs	r2, #0
 800075a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800075c:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000762:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800076e:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 8000770:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000774:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000776:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 8000778:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800077c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 8000780:	2220      	movs	r2, #32
 8000782:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800078a:	480b      	ldr	r0, [pc, #44]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 800078c:	f002 f9b6 	bl	8002afc <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000796:	f000 fa77 	bl	8000c88 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a06      	ldr	r2, [pc, #24]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 800079e:	64da      	str	r2, [r3, #76]	@ 0x4c
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <HAL_ADC_MspInit+0x128>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007a6:	bf00      	nop
 80007a8:	37b0      	adds	r7, #176	@ 0xb0
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	50040000 	.word	0x50040000
 80007b4:	40021000 	.word	0x40021000
 80007b8:	200000e8 	.word	0x200000e8
 80007bc:	40020430 	.word	0x40020430

080007c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c6:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <MX_DMA_Init+0x60>)
 80007c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ca:	4a15      	ldr	r2, [pc, #84]	@ (8000820 <MX_DMA_Init+0x60>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <MX_DMA_Init+0x60>)
 80007d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <MX_DMA_Init+0x60>)
 80007e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000820 <MX_DMA_Init+0x60>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80007ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <MX_DMA_Init+0x60>)
 80007ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	200b      	movs	r0, #11
 80007fc:	f002 f954 	bl	8002aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000800:	200b      	movs	r0, #11
 8000802:	f002 f96d 	bl	8002ae0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	203a      	movs	r0, #58	@ 0x3a
 800080c:	f002 f94c 	bl	8002aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000810:	203a      	movs	r0, #58	@ 0x3a
 8000812:	f002 f965 	bl	8002ae0 <HAL_NVIC_EnableIRQ>

}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000

08000824 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	@ 0x28
 8000828:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	4b3c      	ldr	r3, [pc, #240]	@ (800092c <MX_GPIO_Init+0x108>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a3b      	ldr	r2, [pc, #236]	@ (800092c <MX_GPIO_Init+0x108>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b39      	ldr	r3, [pc, #228]	@ (800092c <MX_GPIO_Init+0x108>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	4b36      	ldr	r3, [pc, #216]	@ (800092c <MX_GPIO_Init+0x108>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a35      	ldr	r2, [pc, #212]	@ (800092c <MX_GPIO_Init+0x108>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b33      	ldr	r3, [pc, #204]	@ (800092c <MX_GPIO_Init+0x108>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b30      	ldr	r3, [pc, #192]	@ (800092c <MX_GPIO_Init+0x108>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4a2f      	ldr	r2, [pc, #188]	@ (800092c <MX_GPIO_Init+0x108>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4b2d      	ldr	r3, [pc, #180]	@ (800092c <MX_GPIO_Init+0x108>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <MX_GPIO_Init+0x108>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4a29      	ldr	r2, [pc, #164]	@ (800092c <MX_GPIO_Init+0x108>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4b27      	ldr	r3, [pc, #156]	@ (800092c <MX_GPIO_Init+0x108>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	4b24      	ldr	r3, [pc, #144]	@ (800092c <MX_GPIO_Init+0x108>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	4a23      	ldr	r2, [pc, #140]	@ (800092c <MX_GPIO_Init+0x108>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a6:	4b21      	ldr	r3, [pc, #132]	@ (800092c <MX_GPIO_Init+0x108>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ultrason_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008bc:	f002 fd3e 	bl	800333c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2104      	movs	r1, #4
 80008c4:	481a      	ldr	r0, [pc, #104]	@ (8000930 <MX_GPIO_Init+0x10c>)
 80008c6:	f002 fd39 	bl	800333c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4814      	ldr	r0, [pc, #80]	@ (8000934 <MX_GPIO_Init+0x110>)
 80008e2:	f002 fb81 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|ultrason_Pin;
 80008e6:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000902:	f002 fb71 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000906:	2304      	movs	r3, #4
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_GPIO_Init+0x10c>)
 800091e:	f002 fb63 	bl	8002fe8 <HAL_GPIO_Init>

}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	@ 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000
 8000930:	48000c00 	.word	0x48000c00
 8000934:	48000800 	.word	0x48000800

08000938 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800093c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ac <MX_I2C1_Init+0x74>)
 800093e:	4a1c      	ldr	r2, [pc, #112]	@ (80009b0 <MX_I2C1_Init+0x78>)
 8000940:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000942:	4b1a      	ldr	r3, [pc, #104]	@ (80009ac <MX_I2C1_Init+0x74>)
 8000944:	4a1b      	ldr	r2, [pc, #108]	@ (80009b4 <MX_I2C1_Init+0x7c>)
 8000946:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000948:	4b18      	ldr	r3, [pc, #96]	@ (80009ac <MX_I2C1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094e:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <MX_I2C1_Init+0x74>)
 8000950:	2201      	movs	r2, #1
 8000952:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000954:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <MX_I2C1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800095a:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_I2C1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <MX_I2C1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_I2C1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_I2C1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000972:	480e      	ldr	r0, [pc, #56]	@ (80009ac <MX_I2C1_Init+0x74>)
 8000974:	f002 fcfa 	bl	800336c <HAL_I2C_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800097e:	f000 f983 	bl	8000c88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000982:	2100      	movs	r1, #0
 8000984:	4809      	ldr	r0, [pc, #36]	@ (80009ac <MX_I2C1_Init+0x74>)
 8000986:	f003 f8b5 	bl	8003af4 <HAL_I2CEx_ConfigAnalogFilter>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000990:	f000 f97a 	bl	8000c88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000994:	2100      	movs	r1, #0
 8000996:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_I2C1_Init+0x74>)
 8000998:	f003 f8f7 	bl	8003b8a <HAL_I2CEx_ConfigDigitalFilter>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009a2:	f000 f971 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000130 	.word	0x20000130
 80009b0:	40005400 	.word	0x40005400
 80009b4:	10d19ce4 	.word	0x10d19ce4

080009b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b0ac      	sub	sp, #176	@ 0xb0
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2288      	movs	r2, #136	@ 0x88
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f007 ff70 	bl	80088be <memset>
  if(i2cHandle->Instance==I2C1)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a21      	ldr	r2, [pc, #132]	@ (8000a68 <HAL_I2C_MspInit+0xb0>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d13b      	bne.n	8000a60 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009e8:	2340      	movs	r3, #64	@ 0x40
 80009ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 ffab 	bl	8004950 <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a00:	f000 f942 	bl	8000c88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a08:	4a18      	ldr	r2, [pc, #96]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a0a:	f043 0302 	orr.w	r3, r3, #2
 8000a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a10:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a24:	2312      	movs	r3, #18
 8000a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a36:	2304      	movs	r3, #4
 8000a38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a40:	4619      	mov	r1, r3
 8000a42:	480b      	ldr	r0, [pc, #44]	@ (8000a70 <HAL_I2C_MspInit+0xb8>)
 8000a44:	f002 fad0 	bl	8002fe8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4c:	4a07      	ldr	r2, [pc, #28]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a52:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a60:	bf00      	nop
 8000a62:	37b0      	adds	r7, #176	@ 0xb0
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	48000400 	.word	0x48000400

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b0a4      	sub	sp, #144	@ 0x90
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7a:	f000 ff55 	bl	8001928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7e:	f000 f889 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a82:	f7ff fecf 	bl	8000824 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a86:	f7ff fe9b 	bl	80007c0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a8a:	f7ff ff55 	bl	8000938 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000a8e:	f7ff fd67 	bl	8000560 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a92:	f000 fbd5 	bl	8001240 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000a96:	f000 fb27 	bl	80010e8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000a9a:	f000 fe87 	bl	80017ac <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000a9e:	f000 fc45 	bl	800132c <MX_TIM3_Init>
  MX_TIM8_Init();
 8000aa2:	f000 fd0b 	bl	80014bc <MX_TIM8_Init>
  MX_TIM5_Init();
 8000aa6:	f000 fcb9 	bl	800141c <MX_TIM5_Init>
  MX_SPI3_Init();
 8000aaa:	f000 f8f3 	bl	8000c94 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  WS2813_HandlerTypeDef ledhandler;
  uint32_t ledBuffer[WS2813_DMA_BUFFER_SIZE];
  WS2813_eInit(&ledhandler, &htim2, ledBuffer);
 8000aae:	f107 0214 	add.w	r2, r7, #20
 8000ab2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000ab6:	4935      	ldr	r1, [pc, #212]	@ (8000b8c <main+0x118>)
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f007 fcb9 	bl	8008430 <WS2813_eInit>
  WS2813_eSetColor(&ledhandler,WS2813Orange,0);
 8000abe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2106      	movs	r1, #6
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f007 fcd4 	bl	8008474 <WS2813_eSetColor>

  ts_lcd16x2 lcd;
  lcd.hi2c = &hi2c1;
 8000acc:	4b30      	ldr	r3, [pc, #192]	@ (8000b90 <main+0x11c>)
 8000ace:	607b      	str	r3, [r7, #4]
  lcd.u8adress = LCD16x2_ADDRESS;
 8000ad0:	237c      	movs	r3, #124	@ 0x7c
 8000ad2:	72fb      	strb	r3, [r7, #11]
  lcd.u8col = 16;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	723b      	strb	r3, [r7, #8]
  lcd.u8lines = 2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	727b      	strb	r3, [r7, #9]
  lcd.u8dotsize=1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	72bb      	strb	r3, [r7, #10]
  elcd16x2_init(&lcd);
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f007 fb03 	bl	80080ee <elcd16x2_init>
  for(uint8_t i=0;i<100;i+=7)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8000aee:	e00f      	b.n	8000b10 <main+0x9c>
  {
	  elcd16x2_DispLoading(&lcd, i);
 8000af0:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f007 fbf1 	bl	80082e0 <elcd16x2_DispLoading>
	  HAL_Delay(1000);
 8000afe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b02:	f000 ff51 	bl	80019a8 <HAL_Delay>
  for(uint8_t i=0;i<100;i+=7)
 8000b06:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000b0a:	3307      	adds	r3, #7
 8000b0c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8000b10:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000b14:	2b63      	cmp	r3, #99	@ 0x63
 8000b16:	d9eb      	bls.n	8000af0 <main+0x7c>

//  int min_pwm=600; //us
//  int max_pwm=2600; //us
//  int pwm_value=min_pwm;
//  int step = 0;
  uint32_t Time_1Hz = HAL_GetTick();
 8000b18:	f000 ff3a 	bl	8001990 <HAL_GetTick>
 8000b1c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
  WS2813_eSetColor(&ledhandler,WS2813Off,0);
 8000b20:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000b24:	2200      	movs	r2, #0
 8000b26:	2107      	movs	r1, #7
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f007 fca3 	bl	8008474 <WS2813_eSetColor>
  uint8_t ledstate = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(HAL_GetTick()-Time_1Hz>=1000)
 8000b34:	f000 ff2c 	bl	8001990 <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b44:	d3f6      	bcc.n	8000b34 <main+0xc0>
	{
		Time_1Hz = HAL_GetTick();
 8000b46:	f000 ff23 	bl	8001990 <HAL_GetTick>
 8000b4a:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
		if(ledstate==0)
 8000b4e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10a      	bne.n	8000b6c <main+0xf8>
		{
			WS2813_eSetColor(&ledhandler,WS2813Green,0);
 8000b56:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f007 fc88 	bl	8008474 <WS2813_eSetColor>
			ledstate = 1;
 8000b64:	2301      	movs	r3, #1
 8000b66:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000b6a:	e7e3      	b.n	8000b34 <main+0xc0>
		}
		else if(ledstate==1)
 8000b6c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d1df      	bne.n	8000b34 <main+0xc0>
		{
			WS2813_eSetColor(&ledhandler,WS2813Off,0);
 8000b74:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2107      	movs	r1, #7
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f007 fc79 	bl	8008474 <WS2813_eSetColor>
			ledstate = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	if(HAL_GetTick()-Time_1Hz>=1000)
 8000b88:	e7d4      	b.n	8000b34 <main+0xc0>
 8000b8a:	bf00      	nop
 8000b8c:	20000284 	.word	0x20000284
 8000b90:	20000130 	.word	0x20000130

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b096      	sub	sp, #88	@ 0x58
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	2244      	movs	r2, #68	@ 0x44
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f007 fe8b 	bl	80088be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bb6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bba:	f003 f841 	bl	8003c40 <HAL_PWREx_ControlVoltageScaling>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bc4:	f000 f860 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bd0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd2:	2310      	movs	r3, #16
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000be2:	230a      	movs	r3, #10
 8000be4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000be6:	2307      	movs	r3, #7
 8000be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 f878 	bl	8003cec <HAL_RCC_OscConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c02:	f000 f841 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c06:	230f      	movs	r3, #15
 8000c08:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 fc40 	bl	80044a4 <HAL_RCC_ClockConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c2a:	f000 f82d 	bl	8000c88 <Error_Handler>
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3758      	adds	r7, #88	@ 0x58
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <_write+0x28>)
 8000c50:	f006 f9a2 	bl	8006f98 <HAL_UART_Transmit>
  return len;
 8000c54:	687b      	ldr	r3, [r7, #4]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200003fc 	.word	0x200003fc

08000c64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d101      	bne.n	8000c7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c76:	f000 fe77 	bl	8001968 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40000800 	.word	0x40000800

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <Error_Handler+0x8>

08000c94 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	@ (8000d08 <MX_SPI3_Init+0x74>)
 8000c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000d0c <MX_SPI3_Init+0x78>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <MX_SPI3_Init+0x74>)
 8000ca0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ca4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca6:	4b18      	ldr	r3, [pc, #96]	@ (8000d08 <MX_SPI3_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cac:	4b16      	ldr	r3, [pc, #88]	@ (8000d08 <MX_SPI3_Init+0x74>)
 8000cae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000cb2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <MX_SPI3_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cba:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <MX_SPI3_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <MX_SPI3_Init+0x74>)
 8000cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cc6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <MX_SPI3_Init+0x74>)
 8000cca:	2238      	movs	r2, #56	@ 0x38
 8000ccc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <MX_SPI3_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <MX_SPI3_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <MX_SPI3_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <MX_SPI3_Init+0x74>)
 8000ce2:	2207      	movs	r2, #7
 8000ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <MX_SPI3_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <MX_SPI3_Init+0x74>)
 8000cee:	2208      	movs	r2, #8
 8000cf0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <MX_SPI3_Init+0x74>)
 8000cf4:	f004 fae8 	bl	80052c8 <HAL_SPI_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000cfe:	f7ff ffc3 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000184 	.word	0x20000184
 8000d0c:	40003c00 	.word	0x40003c00

08000d10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	@ 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a17      	ldr	r2, [pc, #92]	@ (8000d8c <HAL_SPI_MspInit+0x7c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d128      	bne.n	8000d84 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d32:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <HAL_SPI_MspInit+0x80>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d36:	4a16      	ldr	r2, [pc, #88]	@ (8000d90 <HAL_SPI_MspInit+0x80>)
 8000d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d3e:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <HAL_SPI_MspInit+0x80>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <HAL_SPI_MspInit+0x80>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	4a10      	ldr	r2, [pc, #64]	@ (8000d90 <HAL_SPI_MspInit+0x80>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <HAL_SPI_MspInit+0x80>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d62:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d74:	2306      	movs	r3, #6
 8000d76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <HAL_SPI_MspInit+0x84>)
 8000d80:	f002 f932 	bl	8002fe8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	@ 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40003c00 	.word	0x40003c00
 8000d90:	40021000 	.word	0x40021000
 8000d94:	48000800 	.word	0x48000800

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <HAL_MspInit+0x44>)
 8000da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000da2:	4a0e      	ldr	r2, [pc, #56]	@ (8000ddc <HAL_MspInit+0x44>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <HAL_MspInit+0x44>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <HAL_MspInit+0x44>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dba:	4a08      	ldr	r2, [pc, #32]	@ (8000ddc <HAL_MspInit+0x44>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_MspInit+0x44>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08e      	sub	sp, #56	@ 0x38
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000dee:	4b34      	ldr	r3, [pc, #208]	@ (8000ec0 <HAL_InitTick+0xe0>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df2:	4a33      	ldr	r2, [pc, #204]	@ (8000ec0 <HAL_InitTick+0xe0>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfa:	4b31      	ldr	r3, [pc, #196]	@ (8000ec0 <HAL_InitTick+0xe0>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e06:	f107 0210 	add.w	r2, r7, #16
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 fd0b 	bl	800482c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d103      	bne.n	8000e28 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e20:	f003 fcd8 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8000e24:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e26:	e004      	b.n	8000e32 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e28:	f003 fcd4 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e34:	4a23      	ldr	r2, [pc, #140]	@ (8000ec4 <HAL_InitTick+0xe4>)
 8000e36:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3a:	0c9b      	lsrs	r3, r3, #18
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000e40:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <HAL_InitTick+0xe8>)
 8000e42:	4a22      	ldr	r2, [pc, #136]	@ (8000ecc <HAL_InitTick+0xec>)
 8000e44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000e46:	4b20      	ldr	r3, [pc, #128]	@ (8000ec8 <HAL_InitTick+0xe8>)
 8000e48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e4c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ec8 <HAL_InitTick+0xe8>)
 8000e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e52:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <HAL_InitTick+0xe8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <HAL_InitTick+0xe8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e60:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <HAL_InitTick+0xe8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000e66:	4818      	ldr	r0, [pc, #96]	@ (8000ec8 <HAL_InitTick+0xe8>)
 8000e68:	f004 fad1 	bl	800540e <HAL_TIM_Base_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e72:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d11b      	bne.n	8000eb2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000e7a:	4813      	ldr	r0, [pc, #76]	@ (8000ec8 <HAL_InitTick+0xe8>)
 8000e7c:	f004 fb1e 	bl	80054bc <HAL_TIM_Base_Start_IT>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d111      	bne.n	8000eb2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e8e:	201e      	movs	r0, #30
 8000e90:	f001 fe26 	bl	8002ae0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b0f      	cmp	r3, #15
 8000e98:	d808      	bhi.n	8000eac <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	201e      	movs	r0, #30
 8000ea0:	f001 fe02 	bl	8002aa8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <HAL_InitTick+0xf0>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	e002      	b.n	8000eb2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000eb2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3738      	adds	r7, #56	@ 0x38
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	431bde83 	.word	0x431bde83
 8000ec8:	200001e8 	.word	0x200001e8
 8000ecc:	40000800 	.word	0x40000800
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <NMI_Handler+0x4>

08000edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	volatile uint32_t csfr= SCB->CFSR ; // load into variable
 8000ee2:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <HardFault_Handler+0x1c>)
 8000ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee6:	607b      	str	r3, [r7, #4]
	 printf ( "SCB-> CSFR 0x%08x \n", SCB->CFSR); // print
 8000ee8:	4b03      	ldr	r3, [pc, #12]	@ (8000ef8 <HardFault_Handler+0x1c>)
 8000eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eec:	4619      	mov	r1, r3
 8000eee:	4803      	ldr	r0, [pc, #12]	@ (8000efc <HardFault_Handler+0x20>)
 8000ef0:	f007 fc90 	bl	8008814 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <HardFault_Handler+0x18>
 8000ef8:	e000ed00 	.word	0xe000ed00
 8000efc:	08009508 	.word	0x08009508

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <MemManage_Handler+0x4>

08000f08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8000f54:	4802      	ldr	r0, [pc, #8]	@ (8000f60 <DMA1_Channel1_IRQHandler+0x10>)
 8000f56:	f001 ff68 	bl	8002e2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200003b4 	.word	0x200003b4

08000f64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <TIM4_IRQHandler+0x10>)
 8000f6a:	f004 fe91 	bl	8005c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200001e8 	.word	0x200001e8

08000f78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <USART2_IRQHandler+0x10>)
 8000f7e:	f006 f895 	bl	80070ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200003fc 	.word	0x200003fc

08000f8c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <TIM5_IRQHandler+0x10>)
 8000f92:	f004 fe7d 	bl	8005c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000031c 	.word	0x2000031c

08000fa0 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <DMA2_Channel3_IRQHandler+0x10>)
 8000fa6:	f001 ff40 	bl	8002e2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200000e8 	.word	0x200000e8

08000fb4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	e00a      	b.n	8000fdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fc6:	f3af 8000 	nop.w
 8000fca:	4601      	mov	r1, r0
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	60ba      	str	r2, [r7, #8]
 8000fd2:	b2ca      	uxtb	r2, r1
 8000fd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbf0      	blt.n	8000fc6 <_read+0x12>
  }

  return len;
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001016:	605a      	str	r2, [r3, #4]
  return 0;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_isatty>:

int _isatty(int file)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001060:	4a14      	ldr	r2, [pc, #80]	@ (80010b4 <_sbrk+0x5c>)
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <_sbrk+0x60>)
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800106c:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <_sbrk+0x64>)
 8001076:	4a12      	ldr	r2, [pc, #72]	@ (80010c0 <_sbrk+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	429a      	cmp	r2, r3
 8001086:	d207      	bcs.n	8001098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001088:	f007 fc68 	bl	800895c <__errno>
 800108c:	4603      	mov	r3, r0
 800108e:	220c      	movs	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	e009      	b.n	80010ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109e:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a05      	ldr	r2, [pc, #20]	@ (80010bc <_sbrk+0x64>)
 80010a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20018000 	.word	0x20018000
 80010b8:	00000400 	.word	0x00000400
 80010bc:	20000234 	.word	0x20000234
 80010c0:	200005d8 	.word	0x200005d8

080010c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <SystemInit+0x20>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ce:	4a05      	ldr	r2, [pc, #20]	@ (80010e4 <SystemInit+0x20>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim2_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b09a      	sub	sp, #104	@ 0x68
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001108:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
 8001118:	615a      	str	r2, [r3, #20]
 800111a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	222c      	movs	r2, #44	@ 0x2c
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f007 fbcb 	bl	80088be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001128:	4b43      	ldr	r3, [pc, #268]	@ (8001238 <MX_TIM1_Init+0x150>)
 800112a:	4a44      	ldr	r2, [pc, #272]	@ (800123c <MX_TIM1_Init+0x154>)
 800112c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 800112e:	4b42      	ldr	r3, [pc, #264]	@ (8001238 <MX_TIM1_Init+0x150>)
 8001130:	224f      	movs	r2, #79	@ 0x4f
 8001132:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b40      	ldr	r3, [pc, #256]	@ (8001238 <MX_TIM1_Init+0x150>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 800113a:	4b3f      	ldr	r3, [pc, #252]	@ (8001238 <MX_TIM1_Init+0x150>)
 800113c:	22c7      	movs	r2, #199	@ 0xc7
 800113e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001140:	4b3d      	ldr	r3, [pc, #244]	@ (8001238 <MX_TIM1_Init+0x150>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001146:	4b3c      	ldr	r3, [pc, #240]	@ (8001238 <MX_TIM1_Init+0x150>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114c:	4b3a      	ldr	r3, [pc, #232]	@ (8001238 <MX_TIM1_Init+0x150>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001152:	4839      	ldr	r0, [pc, #228]	@ (8001238 <MX_TIM1_Init+0x150>)
 8001154:	f004 f95b 	bl	800540e <HAL_TIM_Base_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800115e:	f7ff fd93 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001162:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001166:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001168:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800116c:	4619      	mov	r1, r3
 800116e:	4832      	ldr	r0, [pc, #200]	@ (8001238 <MX_TIM1_Init+0x150>)
 8001170:	f004 ffa4 	bl	80060bc <HAL_TIM_ConfigClockSource>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800117a:	f7ff fd85 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800117e:	482e      	ldr	r0, [pc, #184]	@ (8001238 <MX_TIM1_Init+0x150>)
 8001180:	f004 fa0c 	bl	800559c <HAL_TIM_PWM_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800118a:	f7ff fd7d 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800119a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800119e:	4619      	mov	r1, r3
 80011a0:	4825      	ldr	r0, [pc, #148]	@ (8001238 <MX_TIM1_Init+0x150>)
 80011a2:	f005 fd87 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80011ac:	f7ff fd6c 	bl	8000c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b0:	2360      	movs	r3, #96	@ 0x60
 80011b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 100;
 80011b4:	2364      	movs	r3, #100	@ 0x64
 80011b6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b8:	2300      	movs	r3, #0
 80011ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011bc:	2300      	movs	r3, #0
 80011be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011c4:	2300      	movs	r3, #0
 80011c6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011d0:	2200      	movs	r2, #0
 80011d2:	4619      	mov	r1, r3
 80011d4:	4818      	ldr	r0, [pc, #96]	@ (8001238 <MX_TIM1_Init+0x150>)
 80011d6:	f004 fe5d 	bl	8005e94 <HAL_TIM_PWM_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80011e0:	f7ff fd52 	bl	8000c88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001206:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	4619      	mov	r1, r3
 8001218:	4807      	ldr	r0, [pc, #28]	@ (8001238 <MX_TIM1_Init+0x150>)
 800121a:	f005 fdd3 	bl	8006dc4 <HAL_TIMEx_ConfigBreakDeadTime>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001224:	f7ff fd30 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001228:	4803      	ldr	r0, [pc, #12]	@ (8001238 <MX_TIM1_Init+0x150>)
 800122a:	f000 fa3f 	bl	80016ac <HAL_TIM_MspPostInit>

}
 800122e:	bf00      	nop
 8001230:	3768      	adds	r7, #104	@ 0x68
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000238 	.word	0x20000238
 800123c:	40012c00 	.word	0x40012c00

08001240 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	@ 0x38
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001246:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001260:	463b      	mov	r3, r7
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
 800126e:	615a      	str	r2, [r3, #20]
 8001270:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001272:	4b2d      	ldr	r3, [pc, #180]	@ (8001328 <MX_TIM2_Init+0xe8>)
 8001274:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001278:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800127a:	4b2b      	ldr	r3, [pc, #172]	@ (8001328 <MX_TIM2_Init+0xe8>)
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b29      	ldr	r3, [pc, #164]	@ (8001328 <MX_TIM2_Init+0xe8>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001286:	4b28      	ldr	r3, [pc, #160]	@ (8001328 <MX_TIM2_Init+0xe8>)
 8001288:	2264      	movs	r2, #100	@ 0x64
 800128a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b26      	ldr	r3, [pc, #152]	@ (8001328 <MX_TIM2_Init+0xe8>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001292:	4b25      	ldr	r3, [pc, #148]	@ (8001328 <MX_TIM2_Init+0xe8>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001298:	4823      	ldr	r0, [pc, #140]	@ (8001328 <MX_TIM2_Init+0xe8>)
 800129a:	f004 f8b8 	bl	800540e <HAL_TIM_Base_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80012a4:	f7ff fcf0 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012b2:	4619      	mov	r1, r3
 80012b4:	481c      	ldr	r0, [pc, #112]	@ (8001328 <MX_TIM2_Init+0xe8>)
 80012b6:	f004 ff01 	bl	80060bc <HAL_TIM_ConfigClockSource>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80012c0:	f7ff fce2 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012c4:	4818      	ldr	r0, [pc, #96]	@ (8001328 <MX_TIM2_Init+0xe8>)
 80012c6:	f004 f969 	bl	800559c <HAL_TIM_PWM_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80012d0:	f7ff fcda 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4619      	mov	r1, r3
 80012e2:	4811      	ldr	r0, [pc, #68]	@ (8001328 <MX_TIM2_Init+0xe8>)
 80012e4:	f005 fce6 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80012ee:	f7ff fccb 	bl	8000c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f2:	2360      	movs	r3, #96	@ 0x60
 80012f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	2208      	movs	r2, #8
 8001306:	4619      	mov	r1, r3
 8001308:	4807      	ldr	r0, [pc, #28]	@ (8001328 <MX_TIM2_Init+0xe8>)
 800130a:	f004 fdc3 	bl	8005e94 <HAL_TIM_PWM_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001314:	f7ff fcb8 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001318:	4803      	ldr	r0, [pc, #12]	@ (8001328 <MX_TIM2_Init+0xe8>)
 800131a:	f000 f9c7 	bl	80016ac <HAL_TIM_MspPostInit>

}
 800131e:	bf00      	nop
 8001320:	3738      	adds	r7, #56	@ 0x38
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000284 	.word	0x20000284

0800132c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	@ 0x38
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800135e:	4b2d      	ldr	r3, [pc, #180]	@ (8001414 <MX_TIM3_Init+0xe8>)
 8001360:	4a2d      	ldr	r2, [pc, #180]	@ (8001418 <MX_TIM3_Init+0xec>)
 8001362:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8001364:	4b2b      	ldr	r3, [pc, #172]	@ (8001414 <MX_TIM3_Init+0xe8>)
 8001366:	224f      	movs	r2, #79	@ 0x4f
 8001368:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136a:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <MX_TIM3_Init+0xe8>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001370:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <MX_TIM3_Init+0xe8>)
 8001372:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001376:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001378:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <MX_TIM3_Init+0xe8>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137e:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <MX_TIM3_Init+0xe8>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001384:	4823      	ldr	r0, [pc, #140]	@ (8001414 <MX_TIM3_Init+0xe8>)
 8001386:	f004 f842 	bl	800540e <HAL_TIM_Base_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001390:	f7ff fc7a 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001394:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001398:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800139a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800139e:	4619      	mov	r1, r3
 80013a0:	481c      	ldr	r0, [pc, #112]	@ (8001414 <MX_TIM3_Init+0xe8>)
 80013a2:	f004 fe8b 	bl	80060bc <HAL_TIM_ConfigClockSource>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80013ac:	f7ff fc6c 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013b0:	4818      	ldr	r0, [pc, #96]	@ (8001414 <MX_TIM3_Init+0xe8>)
 80013b2:	f004 f8f3 	bl	800559c <HAL_TIM_PWM_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80013bc:	f7ff fc64 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4811      	ldr	r0, [pc, #68]	@ (8001414 <MX_TIM3_Init+0xe8>)
 80013d0:	f005 fc70 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013da:	f7ff fc55 	bl	8000c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013de:	2360      	movs	r3, #96	@ 0x60
 80013e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	2204      	movs	r2, #4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4807      	ldr	r0, [pc, #28]	@ (8001414 <MX_TIM3_Init+0xe8>)
 80013f6:	f004 fd4d 	bl	8005e94 <HAL_TIM_PWM_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001400:	f7ff fc42 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001404:	4803      	ldr	r0, [pc, #12]	@ (8001414 <MX_TIM3_Init+0xe8>)
 8001406:	f000 f951 	bl	80016ac <HAL_TIM_MspPostInit>

}
 800140a:	bf00      	nop
 800140c:	3738      	adds	r7, #56	@ 0x38
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200002d0 	.word	0x200002d0
 8001418:	40000400 	.word	0x40000400

0800141c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800143a:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <MX_TIM5_Init+0x98>)
 800143c:	4a1e      	ldr	r2, [pc, #120]	@ (80014b8 <MX_TIM5_Init+0x9c>)
 800143e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8000-1;
 8001440:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <MX_TIM5_Init+0x98>)
 8001442:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001446:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001448:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <MX_TIM5_Init+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3000;
 800144e:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <MX_TIM5_Init+0x98>)
 8001450:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001454:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001456:	4b17      	ldr	r3, [pc, #92]	@ (80014b4 <MX_TIM5_Init+0x98>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145c:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <MX_TIM5_Init+0x98>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001462:	4814      	ldr	r0, [pc, #80]	@ (80014b4 <MX_TIM5_Init+0x98>)
 8001464:	f003 ffd3 	bl	800540e <HAL_TIM_Base_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800146e:	f7ff fc0b 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001472:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001476:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	@ (80014b4 <MX_TIM5_Init+0x98>)
 8001480:	f004 fe1c 	bl	80060bc <HAL_TIM_ConfigClockSource>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800148a:	f7ff fbfd 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	@ (80014b4 <MX_TIM5_Init+0x98>)
 800149c:	f005 fc0a 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80014a6:	f7ff fbef 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000031c 	.word	0x2000031c
 80014b8:	40000c00 	.word	0x40000c00

080014bc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014da:	4b20      	ldr	r3, [pc, #128]	@ (800155c <MX_TIM8_Init+0xa0>)
 80014dc:	4a20      	ldr	r2, [pc, #128]	@ (8001560 <MX_TIM8_Init+0xa4>)
 80014de:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 80-1;
 80014e0:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <MX_TIM8_Init+0xa0>)
 80014e2:	224f      	movs	r2, #79	@ 0x4f
 80014e4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e6:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <MX_TIM8_Init+0xa0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <MX_TIM8_Init+0xa0>)
 80014ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014f2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f4:	4b19      	ldr	r3, [pc, #100]	@ (800155c <MX_TIM8_Init+0xa0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014fa:	4b18      	ldr	r3, [pc, #96]	@ (800155c <MX_TIM8_Init+0xa0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001500:	4b16      	ldr	r3, [pc, #88]	@ (800155c <MX_TIM8_Init+0xa0>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001506:	4815      	ldr	r0, [pc, #84]	@ (800155c <MX_TIM8_Init+0xa0>)
 8001508:	f003 ff81 	bl	800540e <HAL_TIM_Base_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001512:	f7ff fbb9 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001516:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800151a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	4619      	mov	r1, r3
 8001522:	480e      	ldr	r0, [pc, #56]	@ (800155c <MX_TIM8_Init+0xa0>)
 8001524:	f004 fdca 	bl	80060bc <HAL_TIM_ConfigClockSource>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800152e:	f7ff fbab 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	4619      	mov	r1, r3
 8001542:	4806      	ldr	r0, [pc, #24]	@ (800155c <MX_TIM8_Init+0xa0>)
 8001544:	f005 fbb6 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800154e:	f7ff fb9b 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	3720      	adds	r7, #32
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000368 	.word	0x20000368
 8001560:	40013400 	.word	0x40013400

08001564 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a47      	ldr	r2, [pc, #284]	@ (8001690 <HAL_TIM_Base_MspInit+0x12c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d10c      	bne.n	8001590 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001576:	4b47      	ldr	r3, [pc, #284]	@ (8001694 <HAL_TIM_Base_MspInit+0x130>)
 8001578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800157a:	4a46      	ldr	r2, [pc, #280]	@ (8001694 <HAL_TIM_Base_MspInit+0x130>)
 800157c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001580:	6613      	str	r3, [r2, #96]	@ 0x60
 8001582:	4b44      	ldr	r3, [pc, #272]	@ (8001694 <HAL_TIM_Base_MspInit+0x130>)
 8001584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800158a:	61fb      	str	r3, [r7, #28]
 800158c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800158e:	e07a      	b.n	8001686 <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001598:	d138      	bne.n	800160c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800159a:	4b3e      	ldr	r3, [pc, #248]	@ (8001694 <HAL_TIM_Base_MspInit+0x130>)
 800159c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159e:	4a3d      	ldr	r2, [pc, #244]	@ (8001694 <HAL_TIM_Base_MspInit+0x130>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001694 <HAL_TIM_Base_MspInit+0x130>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 80015b2:	4b39      	ldr	r3, [pc, #228]	@ (8001698 <HAL_TIM_Base_MspInit+0x134>)
 80015b4:	4a39      	ldr	r2, [pc, #228]	@ (800169c <HAL_TIM_Base_MspInit+0x138>)
 80015b6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 80015b8:	4b37      	ldr	r3, [pc, #220]	@ (8001698 <HAL_TIM_Base_MspInit+0x134>)
 80015ba:	2204      	movs	r2, #4
 80015bc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015be:	4b36      	ldr	r3, [pc, #216]	@ (8001698 <HAL_TIM_Base_MspInit+0x134>)
 80015c0:	2210      	movs	r2, #16
 80015c2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c4:	4b34      	ldr	r3, [pc, #208]	@ (8001698 <HAL_TIM_Base_MspInit+0x134>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80015ca:	4b33      	ldr	r3, [pc, #204]	@ (8001698 <HAL_TIM_Base_MspInit+0x134>)
 80015cc:	2280      	movs	r2, #128	@ 0x80
 80015ce:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015d0:	4b31      	ldr	r3, [pc, #196]	@ (8001698 <HAL_TIM_Base_MspInit+0x134>)
 80015d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015d6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001698 <HAL_TIM_Base_MspInit+0x134>)
 80015da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015de:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80015e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001698 <HAL_TIM_Base_MspInit+0x134>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001698 <HAL_TIM_Base_MspInit+0x134>)
 80015e8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80015ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80015ee:	482a      	ldr	r0, [pc, #168]	@ (8001698 <HAL_TIM_Base_MspInit+0x134>)
 80015f0:	f001 fa84 	bl	8002afc <HAL_DMA_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_TIM_Base_MspInit+0x9a>
      Error_Handler();
 80015fa:	f7ff fb45 	bl	8000c88 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a25      	ldr	r2, [pc, #148]	@ (8001698 <HAL_TIM_Base_MspInit+0x134>)
 8001602:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001604:	4a24      	ldr	r2, [pc, #144]	@ (8001698 <HAL_TIM_Base_MspInit+0x134>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800160a:	e03c      	b.n	8001686 <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM3)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a23      	ldr	r2, [pc, #140]	@ (80016a0 <HAL_TIM_Base_MspInit+0x13c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d10c      	bne.n	8001630 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001616:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <HAL_TIM_Base_MspInit+0x130>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161a:	4a1e      	ldr	r2, [pc, #120]	@ (8001694 <HAL_TIM_Base_MspInit+0x130>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	6593      	str	r3, [r2, #88]	@ 0x58
 8001622:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <HAL_TIM_Base_MspInit+0x130>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697b      	ldr	r3, [r7, #20]
}
 800162e:	e02a      	b.n	8001686 <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM5)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a1b      	ldr	r2, [pc, #108]	@ (80016a4 <HAL_TIM_Base_MspInit+0x140>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d114      	bne.n	8001664 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800163a:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <HAL_TIM_Base_MspInit+0x130>)
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	4a15      	ldr	r2, [pc, #84]	@ (8001694 <HAL_TIM_Base_MspInit+0x130>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6593      	str	r3, [r2, #88]	@ 0x58
 8001646:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <HAL_TIM_Base_MspInit+0x130>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2032      	movs	r0, #50	@ 0x32
 8001658:	f001 fa26 	bl	8002aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800165c:	2032      	movs	r0, #50	@ 0x32
 800165e:	f001 fa3f 	bl	8002ae0 <HAL_NVIC_EnableIRQ>
}
 8001662:	e010      	b.n	8001686 <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM8)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0f      	ldr	r2, [pc, #60]	@ (80016a8 <HAL_TIM_Base_MspInit+0x144>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d10b      	bne.n	8001686 <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800166e:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <HAL_TIM_Base_MspInit+0x130>)
 8001670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001672:	4a08      	ldr	r2, [pc, #32]	@ (8001694 <HAL_TIM_Base_MspInit+0x130>)
 8001674:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001678:	6613      	str	r3, [r2, #96]	@ 0x60
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_TIM_Base_MspInit+0x130>)
 800167c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
}
 8001686:	bf00      	nop
 8001688:	3720      	adds	r7, #32
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40012c00 	.word	0x40012c00
 8001694:	40021000 	.word	0x40021000
 8001698:	200003b4 	.word	0x200003b4
 800169c:	40020008 	.word	0x40020008
 80016a0:	40000400 	.word	0x40000400
 80016a4:	40000c00 	.word	0x40000c00
 80016a8:	40013400 	.word	0x40013400

080016ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	@ 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a34      	ldr	r2, [pc, #208]	@ (800179c <HAL_TIM_MspPostInit+0xf0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d11e      	bne.n	800170c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	4b34      	ldr	r3, [pc, #208]	@ (80017a0 <HAL_TIM_MspPostInit+0xf4>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	4a33      	ldr	r2, [pc, #204]	@ (80017a0 <HAL_TIM_MspPostInit+0xf4>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016da:	4b31      	ldr	r3, [pc, #196]	@ (80017a0 <HAL_TIM_MspPostInit+0xf4>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001706:	f001 fc6f 	bl	8002fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800170a:	e043      	b.n	8001794 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001714:	d11d      	bne.n	8001752 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	4b22      	ldr	r3, [pc, #136]	@ (80017a0 <HAL_TIM_MspPostInit+0xf4>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	4a21      	ldr	r2, [pc, #132]	@ (80017a0 <HAL_TIM_MspPostInit+0xf4>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001722:	4b1f      	ldr	r3, [pc, #124]	@ (80017a0 <HAL_TIM_MspPostInit+0xf4>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800172e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001740:	2301      	movs	r3, #1
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4816      	ldr	r0, [pc, #88]	@ (80017a4 <HAL_TIM_MspPostInit+0xf8>)
 800174c:	f001 fc4c 	bl	8002fe8 <HAL_GPIO_Init>
}
 8001750:	e020      	b.n	8001794 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM3)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a14      	ldr	r2, [pc, #80]	@ (80017a8 <HAL_TIM_MspPostInit+0xfc>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d11b      	bne.n	8001794 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175c:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <HAL_TIM_MspPostInit+0xf4>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001760:	4a0f      	ldr	r2, [pc, #60]	@ (80017a0 <HAL_TIM_MspPostInit+0xf4>)
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001768:	4b0d      	ldr	r3, [pc, #52]	@ (80017a0 <HAL_TIM_MspPostInit+0xf4>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001774:	2320      	movs	r3, #32
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001784:	2302      	movs	r3, #2
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <HAL_TIM_MspPostInit+0xf8>)
 8001790:	f001 fc2a 	bl	8002fe8 <HAL_GPIO_Init>
}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	@ 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40012c00 	.word	0x40012c00
 80017a0:	40021000 	.word	0x40021000
 80017a4:	48000400 	.word	0x48000400
 80017a8:	40000400 	.word	0x40000400

080017ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017b0:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <MX_USART2_UART_Init+0x58>)
 80017b2:	4a15      	ldr	r2, [pc, #84]	@ (8001808 <MX_USART2_UART_Init+0x5c>)
 80017b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017b6:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <MX_USART2_UART_Init+0x58>)
 80017b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <MX_USART2_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <MX_USART2_UART_Init+0x58>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <MX_USART2_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <MX_USART2_UART_Init+0x58>)
 80017d2:	220c      	movs	r2, #12
 80017d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <MX_USART2_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017dc:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <MX_USART2_UART_Init+0x58>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <MX_USART2_UART_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <MX_USART2_UART_Init+0x58>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	@ (8001804 <MX_USART2_UART_Init+0x58>)
 80017f0:	f005 fb84 	bl	8006efc <HAL_UART_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017fa:	f7ff fa45 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200003fc 	.word	0x200003fc
 8001808:	40004400 	.word	0x40004400

0800180c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b0ac      	sub	sp, #176	@ 0xb0
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2288      	movs	r2, #136	@ 0x88
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f007 f846 	bl	80088be <memset>
  if(uartHandle->Instance==USART2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a25      	ldr	r2, [pc, #148]	@ (80018cc <HAL_UART_MspInit+0xc0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d143      	bne.n	80018c4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800183c:	2302      	movs	r3, #2
 800183e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001840:	2300      	movs	r3, #0
 8001842:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4618      	mov	r0, r3
 800184a:	f003 f881 	bl	8004950 <HAL_RCCEx_PeriphCLKConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001854:	f7ff fa18 	bl	8000c88 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001858:	4b1d      	ldr	r3, [pc, #116]	@ (80018d0 <HAL_UART_MspInit+0xc4>)
 800185a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185c:	4a1c      	ldr	r2, [pc, #112]	@ (80018d0 <HAL_UART_MspInit+0xc4>)
 800185e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001862:	6593      	str	r3, [r2, #88]	@ 0x58
 8001864:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <HAL_UART_MspInit+0xc4>)
 8001866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001870:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <HAL_UART_MspInit+0xc4>)
 8001872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001874:	4a16      	ldr	r2, [pc, #88]	@ (80018d0 <HAL_UART_MspInit+0xc4>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187c:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <HAL_UART_MspInit+0xc4>)
 800187e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001888:	230c      	movs	r3, #12
 800188a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a0:	2307      	movs	r3, #7
 80018a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018aa:	4619      	mov	r1, r3
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b0:	f001 fb9a 	bl	8002fe8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2100      	movs	r1, #0
 80018b8:	2026      	movs	r0, #38	@ 0x26
 80018ba:	f001 f8f5 	bl	8002aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018be:	2026      	movs	r0, #38	@ 0x26
 80018c0:	f001 f90e 	bl	8002ae0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018c4:	bf00      	nop
 80018c6:	37b0      	adds	r7, #176	@ 0xb0
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40004400 	.word	0x40004400
 80018d0:	40021000 	.word	0x40021000

080018d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800190c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018d8:	f7ff fbf4 	bl	80010c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018dc:	480c      	ldr	r0, [pc, #48]	@ (8001910 <LoopForever+0x6>)
  ldr r1, =_edata
 80018de:	490d      	ldr	r1, [pc, #52]	@ (8001914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001918 <LoopForever+0xe>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a0a      	ldr	r2, [pc, #40]	@ (800191c <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001920 <LoopForever+0x16>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001902:	f007 f831 	bl	8008968 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001906:	f7ff f8b5 	bl	8000a74 <main>

0800190a <LoopForever>:

LoopForever:
    b LoopForever
 800190a:	e7fe      	b.n	800190a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800190c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001914:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001918:	080095bc 	.word	0x080095bc
  ldr r2, =_sbss
 800191c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001920:	200005d8 	.word	0x200005d8

08001924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC1_2_IRQHandler>
	...

08001928 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001932:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <HAL_Init+0x3c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a0b      	ldr	r2, [pc, #44]	@ (8001964 <HAL_Init+0x3c>)
 8001938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800193c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800193e:	2003      	movs	r0, #3
 8001940:	f001 f8a7 	bl	8002a92 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001944:	200f      	movs	r0, #15
 8001946:	f7ff fa4b 	bl	8000de0 <HAL_InitTick>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	71fb      	strb	r3, [r7, #7]
 8001954:	e001      	b.n	800195a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001956:	f7ff fa1f 	bl	8000d98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800195a:	79fb      	ldrb	r3, [r7, #7]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40022000 	.word	0x40022000

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	@ (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008
 800198c:	20000484 	.word	0x20000484

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000484 	.word	0x20000484

080019a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff ffee 	bl	8001990 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d005      	beq.n	80019ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_Delay+0x44>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ce:	bf00      	nop
 80019d0:	f7ff ffde 	bl	8001990 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d8f7      	bhi.n	80019d0 <HAL_Delay+0x28>
  {
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008

080019f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	609a      	str	r2, [r3, #8]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3360      	adds	r3, #96	@ 0x60
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <LL_ADC_SetOffset+0x44>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	4313      	orrs	r3, r2
 8001a88:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a90:	bf00      	nop
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	03fff000 	.word	0x03fff000

08001aa0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3360      	adds	r3, #96	@ 0x60
 8001aae:	461a      	mov	r2, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3360      	adds	r3, #96	@ 0x60
 8001adc:	461a      	mov	r2, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001af6:	bf00      	nop
 8001af8:	371c      	adds	r7, #28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b087      	sub	sp, #28
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3330      	adds	r3, #48	@ 0x30
 8001b12:	461a      	mov	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	4413      	add	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	211f      	movs	r1, #31
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	401a      	ands	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	0e9b      	lsrs	r3, r3, #26
 8001b3a:	f003 011f 	and.w	r1, r3, #31
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b4e:	bf00      	nop
 8001b50:	371c      	adds	r7, #28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b087      	sub	sp, #28
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3314      	adds	r3, #20
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	0e5b      	lsrs	r3, r3, #25
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	4413      	add	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	0d1b      	lsrs	r3, r3, #20
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	2107      	movs	r1, #7
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	401a      	ands	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	0d1b      	lsrs	r3, r3, #20
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ba4:	bf00      	nop
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	401a      	ands	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0318 	and.w	r3, r3, #24
 8001bd2:	4908      	ldr	r1, [pc, #32]	@ (8001bf4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bd4:	40d9      	lsrs	r1, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	400b      	ands	r3, r1
 8001bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bde:	431a      	orrs	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	0007ffff 	.word	0x0007ffff

08001bf8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6093      	str	r3, [r2, #8]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c30:	d101      	bne.n	8001c36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c58:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c80:	d101      	bne.n	8001c86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <LL_ADC_IsEnabled+0x18>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <LL_ADC_IsEnabled+0x1a>
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d101      	bne.n	8001cd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d101      	bne.n	8001cf8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b089      	sub	sp, #36	@ 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e130      	b.n	8001f84 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7fe fcad 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff67 	bl	8001c1c <LL_ADC_IsDeepPowerDownEnabled>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d004      	beq.n	8001d5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff4d 	bl	8001bf8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff82 	bl	8001c6c <LL_ADC_IsInternalRegulatorEnabled>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d115      	bne.n	8001d9a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff66 	bl	8001c44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d78:	4b84      	ldr	r3, [pc, #528]	@ (8001f8c <HAL_ADC_Init+0x284>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	4a84      	ldr	r2, [pc, #528]	@ (8001f90 <HAL_ADC_Init+0x288>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	099b      	lsrs	r3, r3, #6
 8001d86:	3301      	adds	r3, #1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d8c:	e002      	b.n	8001d94 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f9      	bne.n	8001d8e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff64 	bl	8001c6c <LL_ADC_IsInternalRegulatorEnabled>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10d      	bne.n	8001dc6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dae:	f043 0210 	orr.w	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dba:	f043 0201 	orr.w	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff75 	bl	8001cba <LL_ADC_REG_IsConversionOngoing>
 8001dd0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 80c9 	bne.w	8001f72 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 80c5 	bne.w	8001f72 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001df0:	f043 0202 	orr.w	r2, r3, #2
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff49 	bl	8001c94 <LL_ADC_IsEnabled>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d115      	bne.n	8001e34 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e08:	4862      	ldr	r0, [pc, #392]	@ (8001f94 <HAL_ADC_Init+0x28c>)
 8001e0a:	f7ff ff43 	bl	8001c94 <LL_ADC_IsEnabled>
 8001e0e:	4604      	mov	r4, r0
 8001e10:	4861      	ldr	r0, [pc, #388]	@ (8001f98 <HAL_ADC_Init+0x290>)
 8001e12:	f7ff ff3f 	bl	8001c94 <LL_ADC_IsEnabled>
 8001e16:	4603      	mov	r3, r0
 8001e18:	431c      	orrs	r4, r3
 8001e1a:	4860      	ldr	r0, [pc, #384]	@ (8001f9c <HAL_ADC_Init+0x294>)
 8001e1c:	f7ff ff3a 	bl	8001c94 <LL_ADC_IsEnabled>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4323      	orrs	r3, r4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d105      	bne.n	8001e34 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	485c      	ldr	r0, [pc, #368]	@ (8001fa0 <HAL_ADC_Init+0x298>)
 8001e30:	f7ff fdde 	bl	80019f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7e5b      	ldrb	r3, [r3, #25]
 8001e38:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e3e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e44:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e4a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e52:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d106      	bne.n	8001e70 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e66:	3b01      	subs	r3, #1
 8001e68:	045b      	lsls	r3, r3, #17
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d009      	beq.n	8001e8c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e84:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	4b44      	ldr	r3, [pc, #272]	@ (8001fa4 <HAL_ADC_Init+0x29c>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	69b9      	ldr	r1, [r7, #24]
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff1b 	bl	8001ce0 <LL_ADC_INJ_IsConversionOngoing>
 8001eaa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d13d      	bne.n	8001f2e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d13a      	bne.n	8001f2e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ebc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ec4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ed4:	f023 0302 	bic.w	r3, r3, #2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	69b9      	ldr	r1, [r7, #24]
 8001ede:	430b      	orrs	r3, r1
 8001ee0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d118      	bne.n	8001f1e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001ef6:	f023 0304 	bic.w	r3, r3, #4
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f02:	4311      	orrs	r1, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f08:	4311      	orrs	r1, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	611a      	str	r2, [r3, #16]
 8001f1c:	e007      	b.n	8001f2e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0201 	bic.w	r2, r2, #1
 8001f2c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d10c      	bne.n	8001f50 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3c:	f023 010f 	bic.w	r1, r3, #15
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	1e5a      	subs	r2, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f4e:	e007      	b.n	8001f60 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 020f 	bic.w	r2, r2, #15
 8001f5e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f64:	f023 0303 	bic.w	r3, r3, #3
 8001f68:	f043 0201 	orr.w	r2, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f70:	e007      	b.n	8001f82 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f76:	f043 0210 	orr.w	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f82:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3724      	adds	r7, #36	@ 0x24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd90      	pop	{r4, r7, pc}
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	053e2d63 	.word	0x053e2d63
 8001f94:	50040000 	.word	0x50040000
 8001f98:	50040100 	.word	0x50040100
 8001f9c:	50040200 	.word	0x50040200
 8001fa0:	50040300 	.word	0x50040300
 8001fa4:	fff0c007 	.word	0xfff0c007

08001fa8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b0b6      	sub	sp, #216	@ 0xd8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x22>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e3c9      	b.n	800275e <HAL_ADC_ConfigChannel+0x7b6>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fe6f 	bl	8001cba <LL_ADC_REG_IsConversionOngoing>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f040 83aa 	bne.w	8002738 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d824      	bhi.n	800203e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	3b02      	subs	r3, #2
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d81b      	bhi.n	8002036 <HAL_ADC_ConfigChannel+0x8e>
 8001ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8002004 <HAL_ADC_ConfigChannel+0x5c>)
 8002000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002004:	08002015 	.word	0x08002015
 8002008:	0800201d 	.word	0x0800201d
 800200c:	08002025 	.word	0x08002025
 8002010:	0800202d 	.word	0x0800202d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002014:	230c      	movs	r3, #12
 8002016:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800201a:	e010      	b.n	800203e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800201c:	2312      	movs	r3, #18
 800201e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002022:	e00c      	b.n	800203e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002024:	2318      	movs	r3, #24
 8002026:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800202a:	e008      	b.n	800203e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800202c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002030:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002034:	e003      	b.n	800203e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002036:	2306      	movs	r3, #6
 8002038:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800203c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800204c:	f7ff fd59 	bl	8001b02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fe30 	bl	8001cba <LL_ADC_REG_IsConversionOngoing>
 800205a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fe3c 	bl	8001ce0 <LL_ADC_INJ_IsConversionOngoing>
 8002068:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800206c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002070:	2b00      	cmp	r3, #0
 8002072:	f040 81a4 	bne.w	80023be <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002076:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 819f 	bne.w	80023be <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6819      	ldr	r1, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	461a      	mov	r2, r3
 800208e:	f7ff fd64 	bl	8001b5a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	08db      	lsrs	r3, r3, #3
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d00a      	beq.n	80020ca <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6919      	ldr	r1, [r3, #16]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020c4:	f7ff fcc8 	bl	8001a58 <LL_ADC_SetOffset>
 80020c8:	e179      	b.n	80023be <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fce5 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10a      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x14e>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fcda 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 80020ec:	4603      	mov	r3, r0
 80020ee:	0e9b      	lsrs	r3, r3, #26
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	e01e      	b.n	8002134 <HAL_ADC_ConfigChannel+0x18c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2100      	movs	r1, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fccf 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800210c:	fa93 f3a3 	rbit	r3, r3
 8002110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002114:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002118:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800211c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002124:	2320      	movs	r3, #32
 8002126:	e004      	b.n	8002132 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002128:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213c:	2b00      	cmp	r3, #0
 800213e:	d105      	bne.n	800214c <HAL_ADC_ConfigChannel+0x1a4>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	0e9b      	lsrs	r3, r3, #26
 8002146:	f003 031f 	and.w	r3, r3, #31
 800214a:	e018      	b.n	800217e <HAL_ADC_ConfigChannel+0x1d6>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002160:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002164:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002168:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002170:	2320      	movs	r3, #32
 8002172:	e004      	b.n	800217e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002174:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002178:	fab3 f383 	clz	r3, r3
 800217c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800217e:	429a      	cmp	r2, r3
 8002180:	d106      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2200      	movs	r2, #0
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fc9e 	bl	8001acc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2101      	movs	r1, #1
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fc82 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 800219c:	4603      	mov	r3, r0
 800219e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10a      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x214>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2101      	movs	r1, #1
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fc77 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	0e9b      	lsrs	r3, r3, #26
 80021b6:	f003 021f 	and.w	r2, r3, #31
 80021ba:	e01e      	b.n	80021fa <HAL_ADC_ConfigChannel+0x252>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2101      	movs	r1, #1
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fc6c 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80021da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80021de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80021e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80021ea:	2320      	movs	r3, #32
 80021ec:	e004      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80021ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002202:	2b00      	cmp	r3, #0
 8002204:	d105      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x26a>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	0e9b      	lsrs	r3, r3, #26
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	e018      	b.n	8002244 <HAL_ADC_ConfigChannel+0x29c>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002226:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800222a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800222e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002236:	2320      	movs	r3, #32
 8002238:	e004      	b.n	8002244 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800223a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002244:	429a      	cmp	r2, r3
 8002246:	d106      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2200      	movs	r2, #0
 800224e:	2101      	movs	r1, #1
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fc3b 	bl	8001acc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2102      	movs	r1, #2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fc1f 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 8002262:	4603      	mov	r3, r0
 8002264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x2da>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2102      	movs	r1, #2
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fc14 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 8002278:	4603      	mov	r3, r0
 800227a:	0e9b      	lsrs	r3, r3, #26
 800227c:	f003 021f 	and.w	r2, r3, #31
 8002280:	e01e      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x318>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2102      	movs	r1, #2
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fc09 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002298:	fa93 f3a3 	rbit	r3, r3
 800229c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80022a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80022a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80022b0:	2320      	movs	r3, #32
 80022b2:	e004      	b.n	80022be <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80022b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d105      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x330>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0e9b      	lsrs	r3, r3, #26
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	e014      	b.n	8002302 <HAL_ADC_ConfigChannel+0x35a>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80022e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80022ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80022f4:	2320      	movs	r3, #32
 80022f6:	e004      	b.n	8002302 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80022f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022fc:	fab3 f383 	clz	r3, r3
 8002300:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002302:	429a      	cmp	r2, r3
 8002304:	d106      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2200      	movs	r2, #0
 800230c:	2102      	movs	r1, #2
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fbdc 	bl	8001acc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2103      	movs	r1, #3
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fbc0 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 8002320:	4603      	mov	r3, r0
 8002322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10a      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x398>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2103      	movs	r1, #3
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fbb5 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 8002336:	4603      	mov	r3, r0
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	f003 021f 	and.w	r2, r3, #31
 800233e:	e017      	b.n	8002370 <HAL_ADC_ConfigChannel+0x3c8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2103      	movs	r1, #3
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fbaa 	bl	8001aa0 <LL_ADC_GetOffsetChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800235a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800235c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002362:	2320      	movs	r3, #32
 8002364:	e003      	b.n	800236e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002366:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x3e0>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	0e9b      	lsrs	r3, r3, #26
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	e011      	b.n	80023ac <HAL_ADC_ConfigChannel+0x404>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002396:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002398:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800239a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80023a0:	2320      	movs	r3, #32
 80023a2:	e003      	b.n	80023ac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80023a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d106      	bne.n	80023be <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2200      	movs	r2, #0
 80023b6:	2103      	movs	r1, #3
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fb87 	bl	8001acc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fc66 	bl	8001c94 <LL_ADC_IsEnabled>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f040 8140 	bne.w	8002650 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6819      	ldr	r1, [r3, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	461a      	mov	r2, r3
 80023de:	f7ff fbe7 	bl	8001bb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	4a8f      	ldr	r2, [pc, #572]	@ (8002624 <HAL_ADC_ConfigChannel+0x67c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	f040 8131 	bne.w	8002650 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10b      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x46e>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0e9b      	lsrs	r3, r3, #26
 8002404:	3301      	adds	r3, #1
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2b09      	cmp	r3, #9
 800240c:	bf94      	ite	ls
 800240e:	2301      	movls	r3, #1
 8002410:	2300      	movhi	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	e019      	b.n	800244a <HAL_ADC_ConfigChannel+0x4a2>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800241e:	fa93 f3a3 	rbit	r3, r3
 8002422:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002426:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002428:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800242e:	2320      	movs	r3, #32
 8002430:	e003      	b.n	800243a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002432:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	3301      	adds	r3, #1
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2b09      	cmp	r3, #9
 8002442:	bf94      	ite	ls
 8002444:	2301      	movls	r3, #1
 8002446:	2300      	movhi	r3, #0
 8002448:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800244a:	2b00      	cmp	r3, #0
 800244c:	d079      	beq.n	8002542 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002456:	2b00      	cmp	r3, #0
 8002458:	d107      	bne.n	800246a <HAL_ADC_ConfigChannel+0x4c2>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	0e9b      	lsrs	r3, r3, #26
 8002460:	3301      	adds	r3, #1
 8002462:	069b      	lsls	r3, r3, #26
 8002464:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002468:	e015      	b.n	8002496 <HAL_ADC_ConfigChannel+0x4ee>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002472:	fa93 f3a3 	rbit	r3, r3
 8002476:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800247a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800247c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002482:	2320      	movs	r3, #32
 8002484:	e003      	b.n	800248e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	3301      	adds	r3, #1
 8002490:	069b      	lsls	r3, r3, #26
 8002492:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x50e>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	0e9b      	lsrs	r3, r3, #26
 80024a8:	3301      	adds	r3, #1
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	e017      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x53e>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80024c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024c6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80024c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80024ce:	2320      	movs	r3, #32
 80024d0:	e003      	b.n	80024da <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80024d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024d4:	fab3 f383 	clz	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	2101      	movs	r1, #1
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	ea42 0103 	orr.w	r1, r2, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10a      	bne.n	800250c <HAL_ADC_ConfigChannel+0x564>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	0e9b      	lsrs	r3, r3, #26
 80024fc:	3301      	adds	r3, #1
 80024fe:	f003 021f 	and.w	r2, r3, #31
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	051b      	lsls	r3, r3, #20
 800250a:	e018      	b.n	800253e <HAL_ADC_ConfigChannel+0x596>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800251a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800251e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002524:	2320      	movs	r3, #32
 8002526:	e003      	b.n	8002530 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	3301      	adds	r3, #1
 8002532:	f003 021f 	and.w	r2, r3, #31
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4413      	add	r3, r2
 800253c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800253e:	430b      	orrs	r3, r1
 8002540:	e081      	b.n	8002646 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254a:	2b00      	cmp	r3, #0
 800254c:	d107      	bne.n	800255e <HAL_ADC_ConfigChannel+0x5b6>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	0e9b      	lsrs	r3, r3, #26
 8002554:	3301      	adds	r3, #1
 8002556:	069b      	lsls	r3, r3, #26
 8002558:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800255c:	e015      	b.n	800258a <HAL_ADC_ConfigChannel+0x5e2>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002576:	2320      	movs	r3, #32
 8002578:	e003      	b.n	8002582 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800257a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	3301      	adds	r3, #1
 8002584:	069b      	lsls	r3, r3, #26
 8002586:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x602>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	0e9b      	lsrs	r3, r3, #26
 800259c:	3301      	adds	r3, #1
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	2101      	movs	r1, #1
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	e017      	b.n	80025da <HAL_ADC_ConfigChannel+0x632>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	61bb      	str	r3, [r7, #24]
  return result;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80025c2:	2320      	movs	r3, #32
 80025c4:	e003      	b.n	80025ce <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	ea42 0103 	orr.w	r1, r2, r3
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10d      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x65e>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	0e9b      	lsrs	r3, r3, #26
 80025f0:	3301      	adds	r3, #1
 80025f2:	f003 021f 	and.w	r2, r3, #31
 80025f6:	4613      	mov	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4413      	add	r3, r2
 80025fc:	3b1e      	subs	r3, #30
 80025fe:	051b      	lsls	r3, r3, #20
 8002600:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002604:	e01e      	b.n	8002644 <HAL_ADC_ConfigChannel+0x69c>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	60fb      	str	r3, [r7, #12]
  return result;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d104      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800261e:	2320      	movs	r3, #32
 8002620:	e006      	b.n	8002630 <HAL_ADC_ConfigChannel+0x688>
 8002622:	bf00      	nop
 8002624:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	3301      	adds	r3, #1
 8002632:	f003 021f 	and.w	r2, r3, #31
 8002636:	4613      	mov	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	3b1e      	subs	r3, #30
 800263e:	051b      	lsls	r3, r3, #20
 8002640:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002644:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800264a:	4619      	mov	r1, r3
 800264c:	f7ff fa85 	bl	8001b5a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b44      	ldr	r3, [pc, #272]	@ (8002768 <HAL_ADC_ConfigChannel+0x7c0>)
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d07a      	beq.n	8002752 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800265c:	4843      	ldr	r0, [pc, #268]	@ (800276c <HAL_ADC_ConfigChannel+0x7c4>)
 800265e:	f7ff f9ed 	bl	8001a3c <LL_ADC_GetCommonPathInternalCh>
 8002662:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a41      	ldr	r2, [pc, #260]	@ (8002770 <HAL_ADC_ConfigChannel+0x7c8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d12c      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002670:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002674:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d126      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a3c      	ldr	r2, [pc, #240]	@ (8002774 <HAL_ADC_ConfigChannel+0x7cc>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d004      	beq.n	8002690 <HAL_ADC_ConfigChannel+0x6e8>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a3b      	ldr	r2, [pc, #236]	@ (8002778 <HAL_ADC_ConfigChannel+0x7d0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d15d      	bne.n	800274c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002694:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002698:	4619      	mov	r1, r3
 800269a:	4834      	ldr	r0, [pc, #208]	@ (800276c <HAL_ADC_ConfigChannel+0x7c4>)
 800269c:	f7ff f9bb 	bl	8001a16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026a0:	4b36      	ldr	r3, [pc, #216]	@ (800277c <HAL_ADC_ConfigChannel+0x7d4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	4a36      	ldr	r2, [pc, #216]	@ (8002780 <HAL_ADC_ConfigChannel+0x7d8>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026ba:	e002      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	3b01      	subs	r3, #1
 80026c0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f9      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026c8:	e040      	b.n	800274c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002784 <HAL_ADC_ConfigChannel+0x7dc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d118      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d112      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a23      	ldr	r2, [pc, #140]	@ (8002774 <HAL_ADC_ConfigChannel+0x7cc>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d004      	beq.n	80026f4 <HAL_ADC_ConfigChannel+0x74c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a22      	ldr	r2, [pc, #136]	@ (8002778 <HAL_ADC_ConfigChannel+0x7d0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d12d      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026fc:	4619      	mov	r1, r3
 80026fe:	481b      	ldr	r0, [pc, #108]	@ (800276c <HAL_ADC_ConfigChannel+0x7c4>)
 8002700:	f7ff f989 	bl	8001a16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002704:	e024      	b.n	8002750 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1f      	ldr	r2, [pc, #124]	@ (8002788 <HAL_ADC_ConfigChannel+0x7e0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d120      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002710:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002714:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d11a      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a14      	ldr	r2, [pc, #80]	@ (8002774 <HAL_ADC_ConfigChannel+0x7cc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d115      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002726:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800272a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800272e:	4619      	mov	r1, r3
 8002730:	480e      	ldr	r0, [pc, #56]	@ (800276c <HAL_ADC_ConfigChannel+0x7c4>)
 8002732:	f7ff f970 	bl	8001a16 <LL_ADC_SetCommonPathInternalCh>
 8002736:	e00c      	b.n	8002752 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273c:	f043 0220 	orr.w	r2, r3, #32
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800274a:	e002      	b.n	8002752 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800274c:	bf00      	nop
 800274e:	e000      	b.n	8002752 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002750:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800275a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800275e:	4618      	mov	r0, r3
 8002760:	37d8      	adds	r7, #216	@ 0xd8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	80080000 	.word	0x80080000
 800276c:	50040300 	.word	0x50040300
 8002770:	c7520000 	.word	0xc7520000
 8002774:	50040000 	.word	0x50040000
 8002778:	50040200 	.word	0x50040200
 800277c:	20000000 	.word	0x20000000
 8002780:	053e2d63 	.word	0x053e2d63
 8002784:	cb840000 	.word	0xcb840000
 8002788:	80000001 	.word	0x80000001

0800278c <LL_ADC_IsEnabled>:
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <LL_ADC_IsEnabled+0x18>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <LL_ADC_IsEnabled+0x1a>
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d101      	bne.n	80027ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b09f      	sub	sp, #124	@ 0x7c
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e093      	b.n	800291e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80027fe:	2300      	movs	r3, #0
 8002800:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002802:	2300      	movs	r3, #0
 8002804:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a47      	ldr	r2, [pc, #284]	@ (8002928 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d102      	bne.n	8002816 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002810:	4b46      	ldr	r3, [pc, #280]	@ (800292c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	e001      	b.n	800281a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10b      	bne.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002824:	f043 0220 	orr.w	r2, r3, #32
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e072      	b.n	800291e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ffb9 	bl	80027b2 <LL_ADC_REG_IsConversionOngoing>
 8002840:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ffb3 	bl	80027b2 <LL_ADC_REG_IsConversionOngoing>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d154      	bne.n	80028fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002852:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002854:	2b00      	cmp	r3, #0
 8002856:	d151      	bne.n	80028fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002858:	4b35      	ldr	r3, [pc, #212]	@ (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800285a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d02c      	beq.n	80028be <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002876:	035b      	lsls	r3, r3, #13
 8002878:	430b      	orrs	r3, r1
 800287a:	431a      	orrs	r2, r3
 800287c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800287e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002880:	4829      	ldr	r0, [pc, #164]	@ (8002928 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002882:	f7ff ff83 	bl	800278c <LL_ADC_IsEnabled>
 8002886:	4604      	mov	r4, r0
 8002888:	4828      	ldr	r0, [pc, #160]	@ (800292c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800288a:	f7ff ff7f 	bl	800278c <LL_ADC_IsEnabled>
 800288e:	4603      	mov	r3, r0
 8002890:	431c      	orrs	r4, r3
 8002892:	4828      	ldr	r0, [pc, #160]	@ (8002934 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002894:	f7ff ff7a 	bl	800278c <LL_ADC_IsEnabled>
 8002898:	4603      	mov	r3, r0
 800289a:	4323      	orrs	r3, r4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d137      	bne.n	8002910 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80028a8:	f023 030f 	bic.w	r3, r3, #15
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	6811      	ldr	r1, [r2, #0]
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	6892      	ldr	r2, [r2, #8]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	431a      	orrs	r2, r3
 80028b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ba:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028bc:	e028      	b.n	8002910 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80028be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028c8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028ca:	4817      	ldr	r0, [pc, #92]	@ (8002928 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028cc:	f7ff ff5e 	bl	800278c <LL_ADC_IsEnabled>
 80028d0:	4604      	mov	r4, r0
 80028d2:	4816      	ldr	r0, [pc, #88]	@ (800292c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028d4:	f7ff ff5a 	bl	800278c <LL_ADC_IsEnabled>
 80028d8:	4603      	mov	r3, r0
 80028da:	431c      	orrs	r4, r3
 80028dc:	4815      	ldr	r0, [pc, #84]	@ (8002934 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80028de:	f7ff ff55 	bl	800278c <LL_ADC_IsEnabled>
 80028e2:	4603      	mov	r3, r0
 80028e4:	4323      	orrs	r3, r4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d112      	bne.n	8002910 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80028f2:	f023 030f 	bic.w	r3, r3, #15
 80028f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80028f8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028fa:	e009      	b.n	8002910 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	f043 0220 	orr.w	r2, r3, #32
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800290e:	e000      	b.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002910:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800291a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800291e:	4618      	mov	r0, r3
 8002920:	377c      	adds	r7, #124	@ 0x7c
 8002922:	46bd      	mov	sp, r7
 8002924:	bd90      	pop	{r4, r7, pc}
 8002926:	bf00      	nop
 8002928:	50040000 	.word	0x50040000
 800292c:	50040100 	.word	0x50040100
 8002930:	50040300 	.word	0x50040300
 8002934:	50040200 	.word	0x50040200

08002938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002948:	4b0c      	ldr	r3, [pc, #48]	@ (800297c <__NVIC_SetPriorityGrouping+0x44>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002954:	4013      	ands	r3, r2
 8002956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002960:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296a:	4a04      	ldr	r2, [pc, #16]	@ (800297c <__NVIC_SetPriorityGrouping+0x44>)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	60d3      	str	r3, [r2, #12]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002984:	4b04      	ldr	r3, [pc, #16]	@ (8002998 <__NVIC_GetPriorityGrouping+0x18>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	0a1b      	lsrs	r3, r3, #8
 800298a:	f003 0307 	and.w	r3, r3, #7
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	db0b      	blt.n	80029c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	f003 021f 	and.w	r2, r3, #31
 80029b4:	4907      	ldr	r1, [pc, #28]	@ (80029d4 <__NVIC_EnableIRQ+0x38>)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	2001      	movs	r0, #1
 80029be:	fa00 f202 	lsl.w	r2, r0, r2
 80029c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000e100 	.word	0xe000e100

080029d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	6039      	str	r1, [r7, #0]
 80029e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	db0a      	blt.n	8002a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	490c      	ldr	r1, [pc, #48]	@ (8002a24 <__NVIC_SetPriority+0x4c>)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	0112      	lsls	r2, r2, #4
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	440b      	add	r3, r1
 80029fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a00:	e00a      	b.n	8002a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	4908      	ldr	r1, [pc, #32]	@ (8002a28 <__NVIC_SetPriority+0x50>)
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	3b04      	subs	r3, #4
 8002a10:	0112      	lsls	r2, r2, #4
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	440b      	add	r3, r1
 8002a16:	761a      	strb	r2, [r3, #24]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000e100 	.word	0xe000e100
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	@ 0x24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f1c3 0307 	rsb	r3, r3, #7
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	bf28      	it	cs
 8002a4a:	2304      	movcs	r3, #4
 8002a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3304      	adds	r3, #4
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d902      	bls.n	8002a5c <NVIC_EncodePriority+0x30>
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3b03      	subs	r3, #3
 8002a5a:	e000      	b.n	8002a5e <NVIC_EncodePriority+0x32>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	f04f 32ff 	mov.w	r2, #4294967295
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	401a      	ands	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	43d9      	mvns	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	4313      	orrs	r3, r2
         );
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3724      	adds	r7, #36	@ 0x24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff ff4c 	bl	8002938 <__NVIC_SetPriorityGrouping>
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002aba:	f7ff ff61 	bl	8002980 <__NVIC_GetPriorityGrouping>
 8002abe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	68b9      	ldr	r1, [r7, #8]
 8002ac4:	6978      	ldr	r0, [r7, #20]
 8002ac6:	f7ff ffb1 	bl	8002a2c <NVIC_EncodePriority>
 8002aca:	4602      	mov	r2, r0
 8002acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff ff80 	bl	80029d8 <__NVIC_SetPriority>
}
 8002ad8:	bf00      	nop
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ff54 	bl	800299c <__NVIC_EnableIRQ>
}
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e098      	b.n	8002c40 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	4b4d      	ldr	r3, [pc, #308]	@ (8002c4c <HAL_DMA_Init+0x150>)
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d80f      	bhi.n	8002b3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4b4b      	ldr	r3, [pc, #300]	@ (8002c50 <HAL_DMA_Init+0x154>)
 8002b22:	4413      	add	r3, r2
 8002b24:	4a4b      	ldr	r2, [pc, #300]	@ (8002c54 <HAL_DMA_Init+0x158>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	009a      	lsls	r2, r3, #2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a48      	ldr	r2, [pc, #288]	@ (8002c58 <HAL_DMA_Init+0x15c>)
 8002b36:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b38:	e00e      	b.n	8002b58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4b46      	ldr	r3, [pc, #280]	@ (8002c5c <HAL_DMA_Init+0x160>)
 8002b42:	4413      	add	r3, r2
 8002b44:	4a43      	ldr	r2, [pc, #268]	@ (8002c54 <HAL_DMA_Init+0x158>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	009a      	lsls	r2, r3, #2
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a42      	ldr	r2, [pc, #264]	@ (8002c60 <HAL_DMA_Init+0x164>)
 8002b56:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bb2:	d039      	beq.n	8002c28 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	4a27      	ldr	r2, [pc, #156]	@ (8002c58 <HAL_DMA_Init+0x15c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d11a      	bne.n	8002bf4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002bbe:	4b29      	ldr	r3, [pc, #164]	@ (8002c64 <HAL_DMA_Init+0x168>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	f003 031c 	and.w	r3, r3, #28
 8002bca:	210f      	movs	r1, #15
 8002bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	4924      	ldr	r1, [pc, #144]	@ (8002c64 <HAL_DMA_Init+0x168>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002bd8:	4b22      	ldr	r3, [pc, #136]	@ (8002c64 <HAL_DMA_Init+0x168>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be4:	f003 031c 	and.w	r3, r3, #28
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	491d      	ldr	r1, [pc, #116]	@ (8002c64 <HAL_DMA_Init+0x168>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
 8002bf2:	e019      	b.n	8002c28 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c68 <HAL_DMA_Init+0x16c>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfc:	f003 031c 	and.w	r3, r3, #28
 8002c00:	210f      	movs	r1, #15
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	4917      	ldr	r1, [pc, #92]	@ (8002c68 <HAL_DMA_Init+0x16c>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002c0e:	4b16      	ldr	r3, [pc, #88]	@ (8002c68 <HAL_DMA_Init+0x16c>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6859      	ldr	r1, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1a:	f003 031c 	and.w	r3, r3, #28
 8002c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c22:	4911      	ldr	r1, [pc, #68]	@ (8002c68 <HAL_DMA_Init+0x16c>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40020407 	.word	0x40020407
 8002c50:	bffdfff8 	.word	0xbffdfff8
 8002c54:	cccccccd 	.word	0xcccccccd
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	bffdfbf8 	.word	0xbffdfbf8
 8002c60:	40020400 	.word	0x40020400
 8002c64:	400200a8 	.word	0x400200a8
 8002c68:	400204a8 	.word	0x400204a8

08002c6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_DMA_Start_IT+0x20>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e04b      	b.n	8002d24 <HAL_DMA_Start_IT+0xb8>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d13a      	bne.n	8002d16 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0201 	bic.w	r2, r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	68b9      	ldr	r1, [r7, #8]
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f95f 	bl	8002f88 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 020e 	orr.w	r2, r2, #14
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e00f      	b.n	8002d04 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0204 	bic.w	r2, r2, #4
 8002cf2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 020a 	orr.w	r2, r2, #10
 8002d02:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e005      	b.n	8002d22 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d008      	beq.n	8002d56 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2204      	movs	r2, #4
 8002d48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e022      	b.n	8002d9c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 020e 	bic.w	r2, r2, #14
 8002d64:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0201 	bic.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7a:	f003 021c 	and.w	r2, r3, #28
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f202 	lsl.w	r2, r1, r2
 8002d88:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d005      	beq.n	8002dcc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
 8002dca:	e029      	b.n	8002e20 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 020e 	bic.w	r2, r2, #14
 8002dda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0201 	bic.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df0:	f003 021c 	and.w	r2, r3, #28
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	2101      	movs	r1, #1
 8002dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4798      	blx	r3
    }
  }
  return status;
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	f003 031c 	and.w	r3, r3, #28
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d026      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x7a>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d021      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d107      	bne.n	8002e7e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0204 	bic.w	r2, r2, #4
 8002e7c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e82:	f003 021c 	and.w	r2, r3, #28
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	2104      	movs	r1, #4
 8002e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e90:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d071      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002ea2:	e06c      	b.n	8002f7e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea8:	f003 031c 	and.w	r3, r3, #28
 8002eac:	2202      	movs	r2, #2
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d02e      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xec>
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d029      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0320 	and.w	r3, r3, #32
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10b      	bne.n	8002ee8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 020a 	bic.w	r2, r2, #10
 8002ede:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eec:	f003 021c 	and.w	r2, r3, #28
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	2102      	movs	r1, #2
 8002ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8002efa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d038      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f14:	e033      	b.n	8002f7e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1a:	f003 031c 	and.w	r3, r3, #28
 8002f1e:	2208      	movs	r2, #8
 8002f20:	409a      	lsls	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d02a      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x156>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d025      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 020e 	bic.w	r2, r2, #14
 8002f42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f48:	f003 021c 	and.w	r2, r3, #28
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	2101      	movs	r1, #1
 8002f52:	fa01 f202 	lsl.w	r2, r1, r2
 8002f56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f7e:	bf00      	nop
 8002f80:	bf00      	nop
}
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	f003 021c 	and.w	r2, r3, #28
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b10      	cmp	r3, #16
 8002fb8:	d108      	bne.n	8002fcc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fca:	e007      	b.n	8002fdc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	60da      	str	r2, [r3, #12]
}
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff6:	e17f      	b.n	80032f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	fa01 f303 	lsl.w	r3, r1, r3
 8003004:	4013      	ands	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 8171 	beq.w	80032f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b01      	cmp	r3, #1
 800301a:	d005      	beq.n	8003028 <HAL_GPIO_Init+0x40>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d130      	bne.n	800308a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	2203      	movs	r2, #3
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4013      	ands	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800305e:	2201      	movs	r2, #1
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	f003 0201 	and.w	r2, r3, #1
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b03      	cmp	r3, #3
 8003094:	d118      	bne.n	80030c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800309c:	2201      	movs	r2, #1
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	08db      	lsrs	r3, r3, #3
 80030b2:	f003 0201 	and.w	r2, r3, #1
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d017      	beq.n	8003104 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	2203      	movs	r2, #3
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4013      	ands	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d123      	bne.n	8003158 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	08da      	lsrs	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3208      	adds	r2, #8
 8003118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800311c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	220f      	movs	r2, #15
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	08da      	lsrs	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3208      	adds	r2, #8
 8003152:	6939      	ldr	r1, [r7, #16]
 8003154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	2203      	movs	r2, #3
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4013      	ands	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0203 	and.w	r2, r3, #3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80ac 	beq.w	80032f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319a:	4b5f      	ldr	r3, [pc, #380]	@ (8003318 <HAL_GPIO_Init+0x330>)
 800319c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319e:	4a5e      	ldr	r2, [pc, #376]	@ (8003318 <HAL_GPIO_Init+0x330>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80031a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003318 <HAL_GPIO_Init+0x330>)
 80031a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031b2:	4a5a      	ldr	r2, [pc, #360]	@ (800331c <HAL_GPIO_Init+0x334>)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	3302      	adds	r3, #2
 80031ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	220f      	movs	r2, #15
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031dc:	d025      	beq.n	800322a <HAL_GPIO_Init+0x242>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a4f      	ldr	r2, [pc, #316]	@ (8003320 <HAL_GPIO_Init+0x338>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d01f      	beq.n	8003226 <HAL_GPIO_Init+0x23e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a4e      	ldr	r2, [pc, #312]	@ (8003324 <HAL_GPIO_Init+0x33c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d019      	beq.n	8003222 <HAL_GPIO_Init+0x23a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003328 <HAL_GPIO_Init+0x340>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d013      	beq.n	800321e <HAL_GPIO_Init+0x236>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a4c      	ldr	r2, [pc, #304]	@ (800332c <HAL_GPIO_Init+0x344>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00d      	beq.n	800321a <HAL_GPIO_Init+0x232>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4b      	ldr	r2, [pc, #300]	@ (8003330 <HAL_GPIO_Init+0x348>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d007      	beq.n	8003216 <HAL_GPIO_Init+0x22e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a4a      	ldr	r2, [pc, #296]	@ (8003334 <HAL_GPIO_Init+0x34c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d101      	bne.n	8003212 <HAL_GPIO_Init+0x22a>
 800320e:	2306      	movs	r3, #6
 8003210:	e00c      	b.n	800322c <HAL_GPIO_Init+0x244>
 8003212:	2307      	movs	r3, #7
 8003214:	e00a      	b.n	800322c <HAL_GPIO_Init+0x244>
 8003216:	2305      	movs	r3, #5
 8003218:	e008      	b.n	800322c <HAL_GPIO_Init+0x244>
 800321a:	2304      	movs	r3, #4
 800321c:	e006      	b.n	800322c <HAL_GPIO_Init+0x244>
 800321e:	2303      	movs	r3, #3
 8003220:	e004      	b.n	800322c <HAL_GPIO_Init+0x244>
 8003222:	2302      	movs	r3, #2
 8003224:	e002      	b.n	800322c <HAL_GPIO_Init+0x244>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <HAL_GPIO_Init+0x244>
 800322a:	2300      	movs	r3, #0
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	f002 0203 	and.w	r2, r2, #3
 8003232:	0092      	lsls	r2, r2, #2
 8003234:	4093      	lsls	r3, r2
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800323c:	4937      	ldr	r1, [pc, #220]	@ (800331c <HAL_GPIO_Init+0x334>)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	089b      	lsrs	r3, r3, #2
 8003242:	3302      	adds	r3, #2
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800324a:	4b3b      	ldr	r3, [pc, #236]	@ (8003338 <HAL_GPIO_Init+0x350>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	43db      	mvns	r3, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800326e:	4a32      	ldr	r2, [pc, #200]	@ (8003338 <HAL_GPIO_Init+0x350>)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003274:	4b30      	ldr	r3, [pc, #192]	@ (8003338 <HAL_GPIO_Init+0x350>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	43db      	mvns	r3, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003298:	4a27      	ldr	r2, [pc, #156]	@ (8003338 <HAL_GPIO_Init+0x350>)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800329e:	4b26      	ldr	r3, [pc, #152]	@ (8003338 <HAL_GPIO_Init+0x350>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003338 <HAL_GPIO_Init+0x350>)
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003338 <HAL_GPIO_Init+0x350>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4013      	ands	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032ec:	4a12      	ldr	r2, [pc, #72]	@ (8003338 <HAL_GPIO_Init+0x350>)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	3301      	adds	r3, #1
 80032f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	f47f ae78 	bne.w	8002ff8 <HAL_GPIO_Init+0x10>
  }
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	40010000 	.word	0x40010000
 8003320:	48000400 	.word	0x48000400
 8003324:	48000800 	.word	0x48000800
 8003328:	48000c00 	.word	0x48000c00
 800332c:	48001000 	.word	0x48001000
 8003330:	48001400 	.word	0x48001400
 8003334:	48001800 	.word	0x48001800
 8003338:	40010400 	.word	0x40010400

0800333c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	807b      	strh	r3, [r7, #2]
 8003348:	4613      	mov	r3, r2
 800334a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800334c:	787b      	ldrb	r3, [r7, #1]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003352:	887a      	ldrh	r2, [r7, #2]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003358:	e002      	b.n	8003360 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800335a:	887a      	ldrh	r2, [r7, #2]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e08d      	b.n	800349a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fd fb10 	bl	80009b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2224      	movs	r2, #36	@ 0x24
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d107      	bne.n	80033e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	e006      	b.n	80033f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80033f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d108      	bne.n	800340e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	e007      	b.n	800341e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800341c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800342c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003430:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003440:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69d9      	ldr	r1, [r3, #28]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1a      	ldr	r2, [r3, #32]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	461a      	mov	r2, r3
 80034b0:	460b      	mov	r3, r1
 80034b2:	817b      	strh	r3, [r7, #10]
 80034b4:	4613      	mov	r3, r2
 80034b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	f040 80fd 	bne.w	80036c0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_I2C_Master_Transmit+0x30>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e0f6      	b.n	80036c2 <HAL_I2C_Master_Transmit+0x21e>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034dc:	f7fe fa58 	bl	8001990 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	2319      	movs	r3, #25
 80034e8:	2201      	movs	r2, #1
 80034ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f914 	bl	800371c <I2C_WaitOnFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0e1      	b.n	80036c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2221      	movs	r2, #33	@ 0x21
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2210      	movs	r2, #16
 800350a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	893a      	ldrh	r2, [r7, #8]
 800351e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	2bff      	cmp	r3, #255	@ 0xff
 800352e:	d906      	bls.n	800353e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	22ff      	movs	r2, #255	@ 0xff
 8003534:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003536:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	e007      	b.n	800354e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003548:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800354c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003552:	2b00      	cmp	r3, #0
 8003554:	d024      	beq.n	80035a0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	781a      	ldrb	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358a:	b2db      	uxtb	r3, r3
 800358c:	3301      	adds	r3, #1
 800358e:	b2da      	uxtb	r2, r3
 8003590:	8979      	ldrh	r1, [r7, #10]
 8003592:	4b4e      	ldr	r3, [pc, #312]	@ (80036cc <HAL_I2C_Master_Transmit+0x228>)
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fa79 	bl	8003a90 <I2C_TransferConfig>
 800359e:	e066      	b.n	800366e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	8979      	ldrh	r1, [r7, #10]
 80035a8:	4b48      	ldr	r3, [pc, #288]	@ (80036cc <HAL_I2C_Master_Transmit+0x228>)
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 fa6e 	bl	8003a90 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80035b4:	e05b      	b.n	800366e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	6a39      	ldr	r1, [r7, #32]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f8fd 	bl	80037ba <I2C_WaitOnTXISFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e07b      	b.n	80036c2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ce:	781a      	ldrb	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d034      	beq.n	800366e <HAL_I2C_Master_Transmit+0x1ca>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	d130      	bne.n	800366e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	2200      	movs	r2, #0
 8003614:	2180      	movs	r1, #128	@ 0x80
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f880 	bl	800371c <I2C_WaitOnFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e04d      	b.n	80036c2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	2bff      	cmp	r3, #255	@ 0xff
 800362e:	d90e      	bls.n	800364e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	22ff      	movs	r2, #255	@ 0xff
 8003634:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363a:	b2da      	uxtb	r2, r3
 800363c:	8979      	ldrh	r1, [r7, #10]
 800363e:	2300      	movs	r3, #0
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fa22 	bl	8003a90 <I2C_TransferConfig>
 800364c:	e00f      	b.n	800366e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365c:	b2da      	uxtb	r2, r3
 800365e:	8979      	ldrh	r1, [r7, #10]
 8003660:	2300      	movs	r3, #0
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 fa11 	bl	8003a90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d19e      	bne.n	80035b6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	6a39      	ldr	r1, [r7, #32]
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f8e3 	bl	8003848 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e01a      	b.n	80036c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2220      	movs	r2, #32
 8003692:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b0c      	ldr	r3, [pc, #48]	@ (80036d0 <HAL_I2C_Master_Transmit+0x22c>)
 80036a0:	400b      	ands	r3, r1
 80036a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	e000      	b.n	80036c2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80036c0:	2302      	movs	r3, #2
  }
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	80002000 	.word	0x80002000
 80036d0:	fe00e800 	.word	0xfe00e800

080036d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d103      	bne.n	80036f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2200      	movs	r2, #0
 80036f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d007      	beq.n	8003710 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	619a      	str	r2, [r3, #24]
  }
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	4613      	mov	r3, r2
 800372a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800372c:	e031      	b.n	8003792 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d02d      	beq.n	8003792 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003736:	f7fe f92b 	bl	8001990 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d302      	bcc.n	800374c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d122      	bne.n	8003792 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4013      	ands	r3, r2
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	429a      	cmp	r2, r3
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	429a      	cmp	r2, r3
 8003768:	d113      	bne.n	8003792 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376e:	f043 0220 	orr.w	r2, r3, #32
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e00f      	b.n	80037b2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4013      	ands	r3, r2
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d0be      	beq.n	800372e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037c6:	e033      	b.n	8003830 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f87f 	bl	80038d0 <I2C_IsErrorOccurred>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e031      	b.n	8003840 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e2:	d025      	beq.n	8003830 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e4:	f7fe f8d4 	bl	8001990 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d302      	bcc.n	80037fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d11a      	bne.n	8003830 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b02      	cmp	r3, #2
 8003806:	d013      	beq.n	8003830 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380c:	f043 0220 	orr.w	r2, r3, #32
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e007      	b.n	8003840 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b02      	cmp	r3, #2
 800383c:	d1c4      	bne.n	80037c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003854:	e02f      	b.n	80038b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f838 	bl	80038d0 <I2C_IsErrorOccurred>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e02d      	b.n	80038c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386a:	f7fe f891 	bl	8001990 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	429a      	cmp	r2, r3
 8003878:	d302      	bcc.n	8003880 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d11a      	bne.n	80038b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b20      	cmp	r3, #32
 800388c:	d013      	beq.n	80038b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003892:	f043 0220 	orr.w	r2, r3, #32
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e007      	b.n	80038c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d1c8      	bne.n	8003856 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	@ 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d068      	beq.n	80039ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2210      	movs	r2, #16
 8003902:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003904:	e049      	b.n	800399a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d045      	beq.n	800399a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800390e:	f7fe f83f 	bl	8001990 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	429a      	cmp	r2, r3
 800391c:	d302      	bcc.n	8003924 <I2C_IsErrorOccurred+0x54>
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d13a      	bne.n	800399a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800392e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003936:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003942:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003946:	d121      	bne.n	800398c <I2C_IsErrorOccurred+0xbc>
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800394e:	d01d      	beq.n	800398c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	2b20      	cmp	r3, #32
 8003954:	d01a      	beq.n	800398c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003964:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003966:	f7fe f813 	bl	8001990 <HAL_GetTick>
 800396a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800396c:	e00e      	b.n	800398c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800396e:	f7fe f80f 	bl	8001990 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b19      	cmp	r3, #25
 800397a:	d907      	bls.n	800398c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	f043 0320 	orr.w	r3, r3, #32
 8003982:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800398a:	e006      	b.n	800399a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b20      	cmp	r3, #32
 8003998:	d1e9      	bne.n	800396e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d003      	beq.n	80039b0 <I2C_IsErrorOccurred+0xe0>
 80039a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0aa      	beq.n	8003906 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d103      	bne.n	80039c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2220      	movs	r2, #32
 80039be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	f043 0304 	orr.w	r3, r3, #4
 80039c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00b      	beq.n	80039f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	f043 0308 	orr.w	r3, r3, #8
 8003a08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00b      	beq.n	8003a3c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	f043 0302 	orr.w	r3, r3, #2
 8003a2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01c      	beq.n	8003a7e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f7ff fe45 	bl	80036d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6859      	ldr	r1, [r3, #4]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4b0d      	ldr	r3, [pc, #52]	@ (8003a8c <I2C_IsErrorOccurred+0x1bc>)
 8003a56:	400b      	ands	r3, r1
 8003a58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3728      	adds	r7, #40	@ 0x28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	fe00e800 	.word	0xfe00e800

08003a90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	607b      	str	r3, [r7, #4]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	817b      	strh	r3, [r7, #10]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aa2:	897b      	ldrh	r3, [r7, #10]
 8003aa4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003aa8:	7a7b      	ldrb	r3, [r7, #9]
 8003aaa:	041b      	lsls	r3, r3, #16
 8003aac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ab0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003abe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	0d5b      	lsrs	r3, r3, #21
 8003aca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003ace:	4b08      	ldr	r3, [pc, #32]	@ (8003af0 <I2C_TransferConfig+0x60>)
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	ea02 0103 	and.w	r1, r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	03ff63ff 	.word	0x03ff63ff

08003af4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	d138      	bne.n	8003b7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e032      	b.n	8003b7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2224      	movs	r2, #36	@ 0x24
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0201 	bic.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6819      	ldr	r1, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e000      	b.n	8003b7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b7c:	2302      	movs	r3, #2
  }
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b085      	sub	sp, #20
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d139      	bne.n	8003c14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e033      	b.n	8003c16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2224      	movs	r2, #36	@ 0x24
 8003bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0201 	bic.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003bdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	e000      	b.n	8003c16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
  }
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c28:	4b04      	ldr	r3, [pc, #16]	@ (8003c3c <HAL_PWREx_GetVoltageRange+0x18>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40007000 	.word	0x40007000

08003c40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c4e:	d130      	bne.n	8003cb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c50:	4b23      	ldr	r3, [pc, #140]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c5c:	d038      	beq.n	8003cd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c66:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2232      	movs	r2, #50	@ 0x32
 8003c74:	fb02 f303 	mul.w	r3, r2, r3
 8003c78:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	0c9b      	lsrs	r3, r3, #18
 8003c80:	3301      	adds	r3, #1
 8003c82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c84:	e002      	b.n	8003c8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c8c:	4b14      	ldr	r3, [pc, #80]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c98:	d102      	bne.n	8003ca0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1f2      	bne.n	8003c86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cac:	d110      	bne.n	8003cd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e00f      	b.n	8003cd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cbe:	d007      	beq.n	8003cd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cc0:	4b07      	ldr	r3, [pc, #28]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cc8:	4a05      	ldr	r2, [pc, #20]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40007000 	.word	0x40007000
 8003ce4:	20000000 	.word	0x20000000
 8003ce8:	431bde83 	.word	0x431bde83

08003cec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e3ca      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cfe:	4b97      	ldr	r3, [pc, #604]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d08:	4b94      	ldr	r3, [pc, #592]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80e4 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d007      	beq.n	8003d36 <HAL_RCC_OscConfig+0x4a>
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b0c      	cmp	r3, #12
 8003d2a:	f040 808b 	bne.w	8003e44 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	f040 8087 	bne.w	8003e44 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d36:	4b89      	ldr	r3, [pc, #548]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d005      	beq.n	8003d4e <HAL_RCC_OscConfig+0x62>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e3a2      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1a      	ldr	r2, [r3, #32]
 8003d52:	4b82      	ldr	r3, [pc, #520]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d004      	beq.n	8003d68 <HAL_RCC_OscConfig+0x7c>
 8003d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d66:	e005      	b.n	8003d74 <HAL_RCC_OscConfig+0x88>
 8003d68:	4b7c      	ldr	r3, [pc, #496]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d6e:	091b      	lsrs	r3, r3, #4
 8003d70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d223      	bcs.n	8003dc0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fd87 	bl	8004890 <RCC_SetFlashLatencyFromMSIRange>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e383      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d8c:	4b73      	ldr	r3, [pc, #460]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a72      	ldr	r2, [pc, #456]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d92:	f043 0308 	orr.w	r3, r3, #8
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b70      	ldr	r3, [pc, #448]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	496d      	ldr	r1, [pc, #436]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003daa:	4b6c      	ldr	r3, [pc, #432]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	4968      	ldr	r1, [pc, #416]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	604b      	str	r3, [r1, #4]
 8003dbe:	e025      	b.n	8003e0c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dc0:	4b66      	ldr	r3, [pc, #408]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a65      	ldr	r2, [pc, #404]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003dc6:	f043 0308 	orr.w	r3, r3, #8
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	4b63      	ldr	r3, [pc, #396]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	4960      	ldr	r1, [pc, #384]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dde:	4b5f      	ldr	r3, [pc, #380]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	495b      	ldr	r1, [pc, #364]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fd47 	bl	8004890 <RCC_SetFlashLatencyFromMSIRange>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e343      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e0c:	f000 fc4a 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4b52      	ldr	r3, [pc, #328]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	091b      	lsrs	r3, r3, #4
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	4950      	ldr	r1, [pc, #320]	@ (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003e1e:	5ccb      	ldrb	r3, [r1, r3]
 8003e20:	f003 031f 	and.w	r3, r3, #31
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
 8003e28:	4a4e      	ldr	r2, [pc, #312]	@ (8003f64 <HAL_RCC_OscConfig+0x278>)
 8003e2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e2c:	4b4e      	ldr	r3, [pc, #312]	@ (8003f68 <HAL_RCC_OscConfig+0x27c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fc ffd5 	bl	8000de0 <HAL_InitTick>
 8003e36:	4603      	mov	r3, r0
 8003e38:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d052      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	e327      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d032      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e4c:	4b43      	ldr	r3, [pc, #268]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a42      	ldr	r2, [pc, #264]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e58:	f7fd fd9a 	bl	8001990 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e60:	f7fd fd96 	bl	8001990 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e310      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e72:	4b3a      	ldr	r3, [pc, #232]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e7e:	4b37      	ldr	r3, [pc, #220]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a36      	ldr	r2, [pc, #216]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e84:	f043 0308 	orr.w	r3, r3, #8
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b34      	ldr	r3, [pc, #208]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	4931      	ldr	r1, [pc, #196]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	492c      	ldr	r1, [pc, #176]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	604b      	str	r3, [r1, #4]
 8003eb0:	e01a      	b.n	8003ee8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a29      	ldr	r2, [pc, #164]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ebe:	f7fd fd67 	bl	8001990 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ec6:	f7fd fd63 	bl	8001990 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e2dd      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ed8:	4b20      	ldr	r3, [pc, #128]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f0      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x1da>
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ee6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d074      	beq.n	8003fde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d005      	beq.n	8003f06 <HAL_RCC_OscConfig+0x21a>
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b0c      	cmp	r3, #12
 8003efe:	d10e      	bne.n	8003f1e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d10b      	bne.n	8003f1e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f06:	4b15      	ldr	r3, [pc, #84]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d064      	beq.n	8003fdc <HAL_RCC_OscConfig+0x2f0>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d160      	bne.n	8003fdc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e2ba      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f26:	d106      	bne.n	8003f36 <HAL_RCC_OscConfig+0x24a>
 8003f28:	4b0c      	ldr	r3, [pc, #48]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	e026      	b.n	8003f84 <HAL_RCC_OscConfig+0x298>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f3e:	d115      	bne.n	8003f6c <HAL_RCC_OscConfig+0x280>
 8003f40:	4b06      	ldr	r3, [pc, #24]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a05      	ldr	r2, [pc, #20]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003f46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	4b03      	ldr	r3, [pc, #12]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a02      	ldr	r2, [pc, #8]	@ (8003f5c <HAL_RCC_OscConfig+0x270>)
 8003f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	e014      	b.n	8003f84 <HAL_RCC_OscConfig+0x298>
 8003f5a:	bf00      	nop
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	08009530 	.word	0x08009530
 8003f64:	20000000 	.word	0x20000000
 8003f68:	20000004 	.word	0x20000004
 8003f6c:	4ba0      	ldr	r3, [pc, #640]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a9f      	ldr	r2, [pc, #636]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8003f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	4b9d      	ldr	r3, [pc, #628]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a9c      	ldr	r2, [pc, #624]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8003f7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d013      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fd fd00 	bl	8001990 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f94:	f7fd fcfc 	bl	8001990 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b64      	cmp	r3, #100	@ 0x64
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e276      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fa6:	4b92      	ldr	r3, [pc, #584]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x2a8>
 8003fb2:	e014      	b.n	8003fde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fd fcec 	bl	8001990 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fd fce8 	bl	8001990 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	@ 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e262      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fce:	4b88      	ldr	r3, [pc, #544]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x2d0>
 8003fda:	e000      	b.n	8003fde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d060      	beq.n	80040ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d005      	beq.n	8003ffc <HAL_RCC_OscConfig+0x310>
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	2b0c      	cmp	r3, #12
 8003ff4:	d119      	bne.n	800402a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d116      	bne.n	800402a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ffc:	4b7c      	ldr	r3, [pc, #496]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_RCC_OscConfig+0x328>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e23f      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004014:	4b76      	ldr	r3, [pc, #472]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	061b      	lsls	r3, r3, #24
 8004022:	4973      	ldr	r1, [pc, #460]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004024:	4313      	orrs	r3, r2
 8004026:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004028:	e040      	b.n	80040ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d023      	beq.n	800407a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004032:	4b6f      	ldr	r3, [pc, #444]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a6e      	ldr	r2, [pc, #440]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800403c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fd fca7 	bl	8001990 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004046:	f7fd fca3 	bl	8001990 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e21d      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004058:	4b65      	ldr	r3, [pc, #404]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004064:	4b62      	ldr	r3, [pc, #392]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	061b      	lsls	r3, r3, #24
 8004072:	495f      	ldr	r1, [pc, #380]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004074:	4313      	orrs	r3, r2
 8004076:	604b      	str	r3, [r1, #4]
 8004078:	e018      	b.n	80040ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800407a:	4b5d      	ldr	r3, [pc, #372]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a5c      	ldr	r2, [pc, #368]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004086:	f7fd fc83 	bl	8001990 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800408e:	f7fd fc7f 	bl	8001990 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e1f9      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040a0:	4b53      	ldr	r3, [pc, #332]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1f0      	bne.n	800408e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d03c      	beq.n	8004132 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01c      	beq.n	80040fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c0:	4b4b      	ldr	r3, [pc, #300]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 80040c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040c6:	4a4a      	ldr	r2, [pc, #296]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d0:	f7fd fc5e 	bl	8001990 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d8:	f7fd fc5a 	bl	8001990 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e1d4      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040ea:	4b41      	ldr	r3, [pc, #260]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 80040ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ef      	beq.n	80040d8 <HAL_RCC_OscConfig+0x3ec>
 80040f8:	e01b      	b.n	8004132 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040fa:	4b3d      	ldr	r3, [pc, #244]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 80040fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004100:	4a3b      	ldr	r2, [pc, #236]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410a:	f7fd fc41 	bl	8001990 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004112:	f7fd fc3d 	bl	8001990 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e1b7      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004124:	4b32      	ldr	r3, [pc, #200]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1ef      	bne.n	8004112 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 80a6 	beq.w	800428c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004140:	2300      	movs	r3, #0
 8004142:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004144:	4b2a      	ldr	r3, [pc, #168]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10d      	bne.n	800416c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004150:	4b27      	ldr	r3, [pc, #156]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004154:	4a26      	ldr	r2, [pc, #152]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 8004156:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800415a:	6593      	str	r3, [r2, #88]	@ 0x58
 800415c:	4b24      	ldr	r3, [pc, #144]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 800415e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004168:	2301      	movs	r3, #1
 800416a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800416c:	4b21      	ldr	r3, [pc, #132]	@ (80041f4 <HAL_RCC_OscConfig+0x508>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d118      	bne.n	80041aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004178:	4b1e      	ldr	r3, [pc, #120]	@ (80041f4 <HAL_RCC_OscConfig+0x508>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1d      	ldr	r2, [pc, #116]	@ (80041f4 <HAL_RCC_OscConfig+0x508>)
 800417e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004182:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004184:	f7fd fc04 	bl	8001990 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418c:	f7fd fc00 	bl	8001990 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e17a      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800419e:	4b15      	ldr	r3, [pc, #84]	@ (80041f4 <HAL_RCC_OscConfig+0x508>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d108      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4d8>
 80041b2:	4b0f      	ldr	r3, [pc, #60]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 80041b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b8:	4a0d      	ldr	r2, [pc, #52]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041c2:	e029      	b.n	8004218 <HAL_RCC_OscConfig+0x52c>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2b05      	cmp	r3, #5
 80041ca:	d115      	bne.n	80041f8 <HAL_RCC_OscConfig+0x50c>
 80041cc:	4b08      	ldr	r3, [pc, #32]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d2:	4a07      	ldr	r2, [pc, #28]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 80041d4:	f043 0304 	orr.w	r3, r3, #4
 80041d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041dc:	4b04      	ldr	r3, [pc, #16]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e2:	4a03      	ldr	r2, [pc, #12]	@ (80041f0 <HAL_RCC_OscConfig+0x504>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041ec:	e014      	b.n	8004218 <HAL_RCC_OscConfig+0x52c>
 80041ee:	bf00      	nop
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40007000 	.word	0x40007000
 80041f8:	4b9c      	ldr	r3, [pc, #624]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041fe:	4a9b      	ldr	r2, [pc, #620]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 8004200:	f023 0301 	bic.w	r3, r3, #1
 8004204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004208:	4b98      	ldr	r3, [pc, #608]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420e:	4a97      	ldr	r2, [pc, #604]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 8004210:	f023 0304 	bic.w	r3, r3, #4
 8004214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d016      	beq.n	800424e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fd fbb6 	bl	8001990 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004226:	e00a      	b.n	800423e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004228:	f7fd fbb2 	bl	8001990 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e12a      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800423e:	4b8b      	ldr	r3, [pc, #556]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ed      	beq.n	8004228 <HAL_RCC_OscConfig+0x53c>
 800424c:	e015      	b.n	800427a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424e:	f7fd fb9f 	bl	8001990 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004254:	e00a      	b.n	800426c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fd fb9b 	bl	8001990 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e113      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800426c:	4b7f      	ldr	r3, [pc, #508]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1ed      	bne.n	8004256 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800427a:	7ffb      	ldrb	r3, [r7, #31]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d105      	bne.n	800428c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004280:	4b7a      	ldr	r3, [pc, #488]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 8004282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004284:	4a79      	ldr	r2, [pc, #484]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 8004286:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800428a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80fe 	beq.w	8004492 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429a:	2b02      	cmp	r3, #2
 800429c:	f040 80d0 	bne.w	8004440 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042a0:	4b72      	ldr	r3, [pc, #456]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f003 0203 	and.w	r2, r3, #3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d130      	bne.n	8004316 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042be:	3b01      	subs	r3, #1
 80042c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d127      	bne.n	8004316 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d11f      	bne.n	8004316 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80042e0:	2a07      	cmp	r2, #7
 80042e2:	bf14      	ite	ne
 80042e4:	2201      	movne	r2, #1
 80042e6:	2200      	moveq	r2, #0
 80042e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d113      	bne.n	8004316 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f8:	085b      	lsrs	r3, r3, #1
 80042fa:	3b01      	subs	r3, #1
 80042fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042fe:	429a      	cmp	r2, r3
 8004300:	d109      	bne.n	8004316 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430c:	085b      	lsrs	r3, r3, #1
 800430e:	3b01      	subs	r3, #1
 8004310:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004312:	429a      	cmp	r2, r3
 8004314:	d06e      	beq.n	80043f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	2b0c      	cmp	r3, #12
 800431a:	d069      	beq.n	80043f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800431c:	4b53      	ldr	r3, [pc, #332]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d105      	bne.n	8004334 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004328:	4b50      	ldr	r3, [pc, #320]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0ad      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004338:	4b4c      	ldr	r3, [pc, #304]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a4b      	ldr	r2, [pc, #300]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 800433e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004342:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004344:	f7fd fb24 	bl	8001990 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434c:	f7fd fb20 	bl	8001990 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e09a      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800435e:	4b43      	ldr	r3, [pc, #268]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800436a:	4b40      	ldr	r3, [pc, #256]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	4b40      	ldr	r3, [pc, #256]	@ (8004470 <HAL_RCC_OscConfig+0x784>)
 8004370:	4013      	ands	r3, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800437a:	3a01      	subs	r2, #1
 800437c:	0112      	lsls	r2, r2, #4
 800437e:	4311      	orrs	r1, r2
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004384:	0212      	lsls	r2, r2, #8
 8004386:	4311      	orrs	r1, r2
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800438c:	0852      	lsrs	r2, r2, #1
 800438e:	3a01      	subs	r2, #1
 8004390:	0552      	lsls	r2, r2, #21
 8004392:	4311      	orrs	r1, r2
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004398:	0852      	lsrs	r2, r2, #1
 800439a:	3a01      	subs	r2, #1
 800439c:	0652      	lsls	r2, r2, #25
 800439e:	4311      	orrs	r1, r2
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043a4:	0912      	lsrs	r2, r2, #4
 80043a6:	0452      	lsls	r2, r2, #17
 80043a8:	430a      	orrs	r2, r1
 80043aa:	4930      	ldr	r1, [pc, #192]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043b0:	4b2e      	ldr	r3, [pc, #184]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a2d      	ldr	r2, [pc, #180]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 80043b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043bc:	4b2b      	ldr	r3, [pc, #172]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4a2a      	ldr	r2, [pc, #168]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 80043c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043c8:	f7fd fae2 	bl	8001990 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d0:	f7fd fade 	bl	8001990 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e058      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e2:	4b22      	ldr	r3, [pc, #136]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043ee:	e050      	b.n	8004492 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e04f      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f4:	4b1d      	ldr	r3, [pc, #116]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d148      	bne.n	8004492 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004400:	4b1a      	ldr	r3, [pc, #104]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a19      	ldr	r2, [pc, #100]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 8004406:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800440a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800440c:	4b17      	ldr	r3, [pc, #92]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4a16      	ldr	r2, [pc, #88]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 8004412:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004416:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004418:	f7fd faba 	bl	8001990 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004420:	f7fd fab6 	bl	8001990 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e030      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004432:	4b0e      	ldr	r3, [pc, #56]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCC_OscConfig+0x734>
 800443e:	e028      	b.n	8004492 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	2b0c      	cmp	r3, #12
 8004444:	d023      	beq.n	800448e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004446:	4b09      	ldr	r3, [pc, #36]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a08      	ldr	r2, [pc, #32]	@ (800446c <HAL_RCC_OscConfig+0x780>)
 800444c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004452:	f7fd fa9d 	bl	8001990 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004458:	e00c      	b.n	8004474 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445a:	f7fd fa99 	bl	8001990 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d905      	bls.n	8004474 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e013      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
 800446c:	40021000 	.word	0x40021000
 8004470:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004474:	4b09      	ldr	r3, [pc, #36]	@ (800449c <HAL_RCC_OscConfig+0x7b0>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1ec      	bne.n	800445a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004480:	4b06      	ldr	r3, [pc, #24]	@ (800449c <HAL_RCC_OscConfig+0x7b0>)
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	4905      	ldr	r1, [pc, #20]	@ (800449c <HAL_RCC_OscConfig+0x7b0>)
 8004486:	4b06      	ldr	r3, [pc, #24]	@ (80044a0 <HAL_RCC_OscConfig+0x7b4>)
 8004488:	4013      	ands	r3, r2
 800448a:	60cb      	str	r3, [r1, #12]
 800448c:	e001      	b.n	8004492 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3720      	adds	r7, #32
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000
 80044a0:	feeefffc 	.word	0xfeeefffc

080044a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0e7      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044b8:	4b75      	ldr	r3, [pc, #468]	@ (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d910      	bls.n	80044e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c6:	4b72      	ldr	r3, [pc, #456]	@ (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 0207 	bic.w	r2, r3, #7
 80044ce:	4970      	ldr	r1, [pc, #448]	@ (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b6e      	ldr	r3, [pc, #440]	@ (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0cf      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d010      	beq.n	8004516 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	4b66      	ldr	r3, [pc, #408]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004500:	429a      	cmp	r2, r3
 8004502:	d908      	bls.n	8004516 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004504:	4b63      	ldr	r3, [pc, #396]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4960      	ldr	r1, [pc, #384]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d04c      	beq.n	80045bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b03      	cmp	r3, #3
 8004528:	d107      	bne.n	800453a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800452a:	4b5a      	ldr	r3, [pc, #360]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d121      	bne.n	800457a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e0a6      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d107      	bne.n	8004552 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004542:	4b54      	ldr	r3, [pc, #336]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d115      	bne.n	800457a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e09a      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d107      	bne.n	800456a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800455a:	4b4e      	ldr	r3, [pc, #312]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e08e      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800456a:	4b4a      	ldr	r3, [pc, #296]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e086      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800457a:	4b46      	ldr	r3, [pc, #280]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 0203 	bic.w	r2, r3, #3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4943      	ldr	r1, [pc, #268]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004588:	4313      	orrs	r3, r2
 800458a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458c:	f7fd fa00 	bl	8001990 <HAL_GetTick>
 8004590:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004592:	e00a      	b.n	80045aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004594:	f7fd f9fc 	bl	8001990 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e06e      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 020c 	and.w	r2, r3, #12
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d1eb      	bne.n	8004594 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d010      	beq.n	80045ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	4b31      	ldr	r3, [pc, #196]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d208      	bcs.n	80045ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	492b      	ldr	r1, [pc, #172]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045ea:	4b29      	ldr	r3, [pc, #164]	@ (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d210      	bcs.n	800461a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f8:	4b25      	ldr	r3, [pc, #148]	@ (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f023 0207 	bic.w	r2, r3, #7
 8004600:	4923      	ldr	r1, [pc, #140]	@ (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	4313      	orrs	r3, r2
 8004606:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004608:	4b21      	ldr	r3, [pc, #132]	@ (8004690 <HAL_RCC_ClockConfig+0x1ec>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d001      	beq.n	800461a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e036      	b.n	8004688 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d008      	beq.n	8004638 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004626:	4b1b      	ldr	r3, [pc, #108]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	4918      	ldr	r1, [pc, #96]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004634:	4313      	orrs	r3, r2
 8004636:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b00      	cmp	r3, #0
 8004642:	d009      	beq.n	8004658 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004644:	4b13      	ldr	r3, [pc, #76]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4910      	ldr	r1, [pc, #64]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004654:	4313      	orrs	r3, r2
 8004656:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004658:	f000 f824 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 800465c:	4602      	mov	r2, r0
 800465e:	4b0d      	ldr	r3, [pc, #52]	@ (8004694 <HAL_RCC_ClockConfig+0x1f0>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	091b      	lsrs	r3, r3, #4
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	490b      	ldr	r1, [pc, #44]	@ (8004698 <HAL_RCC_ClockConfig+0x1f4>)
 800466a:	5ccb      	ldrb	r3, [r1, r3]
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
 8004674:	4a09      	ldr	r2, [pc, #36]	@ (800469c <HAL_RCC_ClockConfig+0x1f8>)
 8004676:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004678:	4b09      	ldr	r3, [pc, #36]	@ (80046a0 <HAL_RCC_ClockConfig+0x1fc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7fc fbaf 	bl	8000de0 <HAL_InitTick>
 8004682:	4603      	mov	r3, r0
 8004684:	72fb      	strb	r3, [r7, #11]

  return status;
 8004686:	7afb      	ldrb	r3, [r7, #11]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40022000 	.word	0x40022000
 8004694:	40021000 	.word	0x40021000
 8004698:	08009530 	.word	0x08009530
 800469c:	20000000 	.word	0x20000000
 80046a0:	20000004 	.word	0x20000004

080046a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b089      	sub	sp, #36	@ 0x24
 80046a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	2300      	movs	r3, #0
 80046b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046b2:	4b3e      	ldr	r3, [pc, #248]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 030c 	and.w	r3, r3, #12
 80046ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046bc:	4b3b      	ldr	r3, [pc, #236]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_RCC_GetSysClockFreq+0x34>
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2b0c      	cmp	r3, #12
 80046d0:	d121      	bne.n	8004716 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d11e      	bne.n	8004716 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046d8:	4b34      	ldr	r3, [pc, #208]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d107      	bne.n	80046f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046e4:	4b31      	ldr	r3, [pc, #196]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 80046e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ea:	0a1b      	lsrs	r3, r3, #8
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	e005      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046f4:	4b2d      	ldr	r3, [pc, #180]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004700:	4a2b      	ldr	r2, [pc, #172]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004708:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10d      	bne.n	800472c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004714:	e00a      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b04      	cmp	r3, #4
 800471a:	d102      	bne.n	8004722 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800471c:	4b25      	ldr	r3, [pc, #148]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800471e:	61bb      	str	r3, [r7, #24]
 8004720:	e004      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d101      	bne.n	800472c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004728:	4b23      	ldr	r3, [pc, #140]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800472a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b0c      	cmp	r3, #12
 8004730:	d134      	bne.n	800479c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004732:	4b1e      	ldr	r3, [pc, #120]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d003      	beq.n	800474a <HAL_RCC_GetSysClockFreq+0xa6>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2b03      	cmp	r3, #3
 8004746:	d003      	beq.n	8004750 <HAL_RCC_GetSysClockFreq+0xac>
 8004748:	e005      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800474a:	4b1a      	ldr	r3, [pc, #104]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800474c:	617b      	str	r3, [r7, #20]
      break;
 800474e:	e005      	b.n	800475c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004750:	4b19      	ldr	r3, [pc, #100]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004752:	617b      	str	r3, [r7, #20]
      break;
 8004754:	e002      	b.n	800475c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	617b      	str	r3, [r7, #20]
      break;
 800475a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800475c:	4b13      	ldr	r3, [pc, #76]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	3301      	adds	r3, #1
 8004768:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800476a:	4b10      	ldr	r3, [pc, #64]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	0a1b      	lsrs	r3, r3, #8
 8004770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	fb03 f202 	mul.w	r2, r3, r2
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004782:	4b0a      	ldr	r3, [pc, #40]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	0e5b      	lsrs	r3, r3, #25
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	3301      	adds	r3, #1
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	fbb2 f3f3 	udiv	r3, r2, r3
 800479a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800479c:	69bb      	ldr	r3, [r7, #24]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3724      	adds	r7, #36	@ 0x24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40021000 	.word	0x40021000
 80047b0:	08009548 	.word	0x08009548
 80047b4:	00f42400 	.word	0x00f42400
 80047b8:	007a1200 	.word	0x007a1200

080047bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047c0:	4b03      	ldr	r3, [pc, #12]	@ (80047d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047c2:	681b      	ldr	r3, [r3, #0]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000000 	.word	0x20000000

080047d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047d8:	f7ff fff0 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 80047dc:	4602      	mov	r2, r0
 80047de:	4b06      	ldr	r3, [pc, #24]	@ (80047f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	0a1b      	lsrs	r3, r3, #8
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	4904      	ldr	r1, [pc, #16]	@ (80047fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ea:	5ccb      	ldrb	r3, [r1, r3]
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40021000 	.word	0x40021000
 80047fc:	08009540 	.word	0x08009540

08004800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004804:	f7ff ffda 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 8004808:	4602      	mov	r2, r0
 800480a:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <HAL_RCC_GetPCLK2Freq+0x24>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	0adb      	lsrs	r3, r3, #11
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	4904      	ldr	r1, [pc, #16]	@ (8004828 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004816:	5ccb      	ldrb	r3, [r1, r3]
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004820:	4618      	mov	r0, r3
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000
 8004828:	08009540 	.word	0x08009540

0800482c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	220f      	movs	r2, #15
 800483a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800483c:	4b12      	ldr	r3, [pc, #72]	@ (8004888 <HAL_RCC_GetClockConfig+0x5c>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 0203 	and.w	r2, r3, #3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004848:	4b0f      	ldr	r3, [pc, #60]	@ (8004888 <HAL_RCC_GetClockConfig+0x5c>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004854:	4b0c      	ldr	r3, [pc, #48]	@ (8004888 <HAL_RCC_GetClockConfig+0x5c>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004860:	4b09      	ldr	r3, [pc, #36]	@ (8004888 <HAL_RCC_GetClockConfig+0x5c>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	08db      	lsrs	r3, r3, #3
 8004866:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800486e:	4b07      	ldr	r3, [pc, #28]	@ (800488c <HAL_RCC_GetClockConfig+0x60>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0207 	and.w	r2, r3, #7
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000
 800488c:	40022000 	.word	0x40022000

08004890 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004898:	2300      	movs	r3, #0
 800489a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800489c:	4b2a      	ldr	r3, [pc, #168]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800489e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048a8:	f7ff f9bc 	bl	8003c24 <HAL_PWREx_GetVoltageRange>
 80048ac:	6178      	str	r0, [r7, #20]
 80048ae:	e014      	b.n	80048da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048b0:	4b25      	ldr	r3, [pc, #148]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b4:	4a24      	ldr	r2, [pc, #144]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80048bc:	4b22      	ldr	r3, [pc, #136]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048c8:	f7ff f9ac 	bl	8003c24 <HAL_PWREx_GetVoltageRange>
 80048cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048e0:	d10b      	bne.n	80048fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b80      	cmp	r3, #128	@ 0x80
 80048e6:	d919      	bls.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80048ec:	d902      	bls.n	80048f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048ee:	2302      	movs	r3, #2
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	e013      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048f4:	2301      	movs	r3, #1
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	e010      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b80      	cmp	r3, #128	@ 0x80
 80048fe:	d902      	bls.n	8004906 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004900:	2303      	movs	r3, #3
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	e00a      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b80      	cmp	r3, #128	@ 0x80
 800490a:	d102      	bne.n	8004912 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800490c:	2302      	movs	r3, #2
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	e004      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b70      	cmp	r3, #112	@ 0x70
 8004916:	d101      	bne.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004918:	2301      	movs	r3, #1
 800491a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800491c:	4b0b      	ldr	r3, [pc, #44]	@ (800494c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 0207 	bic.w	r2, r3, #7
 8004924:	4909      	ldr	r1, [pc, #36]	@ (800494c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800492c:	4b07      	ldr	r3, [pc, #28]	@ (800494c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	429a      	cmp	r2, r3
 8004938:	d001      	beq.n	800493e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40021000 	.word	0x40021000
 800494c:	40022000 	.word	0x40022000

08004950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004958:	2300      	movs	r3, #0
 800495a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800495c:	2300      	movs	r3, #0
 800495e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004968:	2b00      	cmp	r3, #0
 800496a:	d041      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004970:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004974:	d02a      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004976:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800497a:	d824      	bhi.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800497c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004980:	d008      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004982:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004986:	d81e      	bhi.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800498c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004990:	d010      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004992:	e018      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004994:	4b86      	ldr	r3, [pc, #536]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	4a85      	ldr	r2, [pc, #532]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800499a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800499e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049a0:	e015      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3304      	adds	r3, #4
 80049a6:	2100      	movs	r1, #0
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fabb 	bl	8004f24 <RCCEx_PLLSAI1_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049b2:	e00c      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3320      	adds	r3, #32
 80049b8:	2100      	movs	r1, #0
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fba6 	bl	800510c <RCCEx_PLLSAI2_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049c4:	e003      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	74fb      	strb	r3, [r7, #19]
      break;
 80049ca:	e000      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ce:	7cfb      	ldrb	r3, [r7, #19]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10b      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049d4:	4b76      	ldr	r3, [pc, #472]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049e2:	4973      	ldr	r1, [pc, #460]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80049ea:	e001      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ec:	7cfb      	ldrb	r3, [r7, #19]
 80049ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d041      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a04:	d02a      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a0a:	d824      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a10:	d008      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a16:	d81e      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a20:	d010      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a22:	e018      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a24:	4b62      	ldr	r3, [pc, #392]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4a61      	ldr	r2, [pc, #388]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a30:	e015      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3304      	adds	r3, #4
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fa73 	bl	8004f24 <RCCEx_PLLSAI1_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a42:	e00c      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3320      	adds	r3, #32
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fb5e 	bl	800510c <RCCEx_PLLSAI2_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a54:	e003      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	74fb      	strb	r3, [r7, #19]
      break;
 8004a5a:	e000      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a5e:	7cfb      	ldrb	r3, [r7, #19]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a64:	4b52      	ldr	r3, [pc, #328]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a72:	494f      	ldr	r1, [pc, #316]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a7a:	e001      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7c:	7cfb      	ldrb	r3, [r7, #19]
 8004a7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 80a0 	beq.w	8004bce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a92:	4b47      	ldr	r3, [pc, #284]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00d      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa8:	4b41      	ldr	r3, [pc, #260]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aac:	4a40      	ldr	r2, [pc, #256]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ab2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ab4:	4b3e      	ldr	r3, [pc, #248]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a3a      	ldr	r2, [pc, #232]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ace:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ad0:	f7fc ff5e 	bl	8001990 <HAL_GetTick>
 8004ad4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ad6:	e009      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad8:	f7fc ff5a 	bl	8001990 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d902      	bls.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	74fb      	strb	r3, [r7, #19]
        break;
 8004aea:	e005      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004aec:	4b31      	ldr	r3, [pc, #196]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0ef      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004af8:	7cfb      	ldrb	r3, [r7, #19]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d15c      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004afe:	4b2c      	ldr	r3, [pc, #176]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01f      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d019      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b1c:	4b24      	ldr	r3, [pc, #144]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b28:	4b21      	ldr	r3, [pc, #132]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2e:	4a20      	ldr	r2, [pc, #128]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b38:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b48:	4a19      	ldr	r2, [pc, #100]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d016      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5a:	f7fc ff19 	bl	8001990 <HAL_GetTick>
 8004b5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b60:	e00b      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b62:	f7fc ff15 	bl	8001990 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d902      	bls.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	74fb      	strb	r3, [r7, #19]
            break;
 8004b78:	e006      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ec      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b88:	7cfb      	ldrb	r3, [r7, #19]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b8e:	4b08      	ldr	r3, [pc, #32]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b9e:	4904      	ldr	r1, [pc, #16]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ba6:	e009      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
 8004baa:	74bb      	strb	r3, [r7, #18]
 8004bac:	e006      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004bae:	bf00      	nop
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	7cfb      	ldrb	r3, [r7, #19]
 8004bba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bbc:	7c7b      	ldrb	r3, [r7, #17]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d105      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc2:	4b9e      	ldr	r3, [pc, #632]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc6:	4a9d      	ldr	r2, [pc, #628]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bcc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bda:	4b98      	ldr	r3, [pc, #608]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be0:	f023 0203 	bic.w	r2, r3, #3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be8:	4994      	ldr	r1, [pc, #592]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bfc:	4b8f      	ldr	r3, [pc, #572]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c02:	f023 020c 	bic.w	r2, r3, #12
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0a:	498c      	ldr	r1, [pc, #560]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c1e:	4b87      	ldr	r3, [pc, #540]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2c:	4983      	ldr	r1, [pc, #524]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c40:	4b7e      	ldr	r3, [pc, #504]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4e:	497b      	ldr	r1, [pc, #492]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0310 	and.w	r3, r3, #16
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c62:	4b76      	ldr	r3, [pc, #472]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c70:	4972      	ldr	r1, [pc, #456]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c84:	4b6d      	ldr	r3, [pc, #436]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c92:	496a      	ldr	r1, [pc, #424]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ca6:	4b65      	ldr	r3, [pc, #404]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb4:	4961      	ldr	r1, [pc, #388]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cc8:	4b5c      	ldr	r3, [pc, #368]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd6:	4959      	ldr	r1, [pc, #356]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cea:	4b54      	ldr	r3, [pc, #336]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf8:	4950      	ldr	r1, [pc, #320]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d0c:	4b4b      	ldr	r3, [pc, #300]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d12:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d1a:	4948      	ldr	r1, [pc, #288]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d2e:	4b43      	ldr	r3, [pc, #268]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3c:	493f      	ldr	r1, [pc, #252]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d028      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d50:	4b3a      	ldr	r3, [pc, #232]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d5e:	4937      	ldr	r1, [pc, #220]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d6e:	d106      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d70:	4b32      	ldr	r3, [pc, #200]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4a31      	ldr	r2, [pc, #196]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d7a:	60d3      	str	r3, [r2, #12]
 8004d7c:	e011      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d86:	d10c      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 f8c8 	bl	8004f24 <RCCEx_PLLSAI1_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d98:	7cfb      	ldrb	r3, [r7, #19]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004d9e:	7cfb      	ldrb	r3, [r7, #19]
 8004da0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d028      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dae:	4b23      	ldr	r3, [pc, #140]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dbc:	491f      	ldr	r1, [pc, #124]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dcc:	d106      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dce:	4b1b      	ldr	r3, [pc, #108]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dd8:	60d3      	str	r3, [r2, #12]
 8004dda:	e011      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004de4:	d10c      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3304      	adds	r3, #4
 8004dea:	2101      	movs	r1, #1
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 f899 	bl	8004f24 <RCCEx_PLLSAI1_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004df6:	7cfb      	ldrb	r3, [r7, #19]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004dfc:	7cfb      	ldrb	r3, [r7, #19]
 8004dfe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d02b      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1a:	4908      	ldr	r1, [pc, #32]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e2a:	d109      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e2c:	4b03      	ldr	r3, [pc, #12]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	4a02      	ldr	r2, [pc, #8]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e36:	60d3      	str	r3, [r2, #12]
 8004e38:	e014      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e3a:	bf00      	nop
 8004e3c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e48:	d10c      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 f867 	bl	8004f24 <RCCEx_PLLSAI1_Config>
 8004e56:	4603      	mov	r3, r0
 8004e58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e5a:	7cfb      	ldrb	r3, [r7, #19]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e60:	7cfb      	ldrb	r3, [r7, #19]
 8004e62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d02f      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e70:	4b2b      	ldr	r3, [pc, #172]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e76:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e7e:	4928      	ldr	r1, [pc, #160]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e8e:	d10d      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3304      	adds	r3, #4
 8004e94:	2102      	movs	r1, #2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f844 	bl	8004f24 <RCCEx_PLLSAI1_Config>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ea0:	7cfb      	ldrb	r3, [r7, #19]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d014      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ea6:	7cfb      	ldrb	r3, [r7, #19]
 8004ea8:	74bb      	strb	r3, [r7, #18]
 8004eaa:	e011      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3320      	adds	r3, #32
 8004eba:	2102      	movs	r1, #2
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 f925 	bl	800510c <RCCEx_PLLSAI2_Config>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ec6:	7cfb      	ldrb	r3, [r7, #19]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ecc:	7cfb      	ldrb	r3, [r7, #19]
 8004ece:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004edc:	4b10      	ldr	r3, [pc, #64]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004eea:	490d      	ldr	r1, [pc, #52]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004efe:	4b08      	ldr	r3, [pc, #32]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f0e:	4904      	ldr	r1, [pc, #16]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f16:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40021000 	.word	0x40021000

08004f24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f32:	4b75      	ldr	r3, [pc, #468]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d018      	beq.n	8004f70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f3e:	4b72      	ldr	r3, [pc, #456]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f003 0203 	and.w	r2, r3, #3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d10d      	bne.n	8004f6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
       ||
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d009      	beq.n	8004f6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f56:	4b6c      	ldr	r3, [pc, #432]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	091b      	lsrs	r3, r3, #4
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
       ||
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d047      	beq.n	8004ffa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
 8004f6e:	e044      	b.n	8004ffa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d018      	beq.n	8004faa <RCCEx_PLLSAI1_Config+0x86>
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d825      	bhi.n	8004fc8 <RCCEx_PLLSAI1_Config+0xa4>
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d002      	beq.n	8004f86 <RCCEx_PLLSAI1_Config+0x62>
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d009      	beq.n	8004f98 <RCCEx_PLLSAI1_Config+0x74>
 8004f84:	e020      	b.n	8004fc8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f86:	4b60      	ldr	r3, [pc, #384]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d11d      	bne.n	8004fce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f96:	e01a      	b.n	8004fce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f98:	4b5b      	ldr	r3, [pc, #364]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d116      	bne.n	8004fd2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fa8:	e013      	b.n	8004fd2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004faa:	4b57      	ldr	r3, [pc, #348]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10f      	bne.n	8004fd6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fb6:	4b54      	ldr	r3, [pc, #336]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d109      	bne.n	8004fd6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fc6:	e006      	b.n	8004fd6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	73fb      	strb	r3, [r7, #15]
      break;
 8004fcc:	e004      	b.n	8004fd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fce:	bf00      	nop
 8004fd0:	e002      	b.n	8004fd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fd2:	bf00      	nop
 8004fd4:	e000      	b.n	8004fd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10d      	bne.n	8004ffa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fde:	4b4a      	ldr	r3, [pc, #296]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6819      	ldr	r1, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	4944      	ldr	r1, [pc, #272]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d17d      	bne.n	80050fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005000:	4b41      	ldr	r3, [pc, #260]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a40      	ldr	r2, [pc, #256]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005006:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800500a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800500c:	f7fc fcc0 	bl	8001990 <HAL_GetTick>
 8005010:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005012:	e009      	b.n	8005028 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005014:	f7fc fcbc 	bl	8001990 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d902      	bls.n	8005028 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	73fb      	strb	r3, [r7, #15]
        break;
 8005026:	e005      	b.n	8005034 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005028:	4b37      	ldr	r3, [pc, #220]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1ef      	bne.n	8005014 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005034:	7bfb      	ldrb	r3, [r7, #15]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d160      	bne.n	80050fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d111      	bne.n	8005064 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005040:	4b31      	ldr	r3, [pc, #196]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005048:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6892      	ldr	r2, [r2, #8]
 8005050:	0211      	lsls	r1, r2, #8
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	68d2      	ldr	r2, [r2, #12]
 8005056:	0912      	lsrs	r2, r2, #4
 8005058:	0452      	lsls	r2, r2, #17
 800505a:	430a      	orrs	r2, r1
 800505c:	492a      	ldr	r1, [pc, #168]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800505e:	4313      	orrs	r3, r2
 8005060:	610b      	str	r3, [r1, #16]
 8005062:	e027      	b.n	80050b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d112      	bne.n	8005090 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800506a:	4b27      	ldr	r3, [pc, #156]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005072:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6892      	ldr	r2, [r2, #8]
 800507a:	0211      	lsls	r1, r2, #8
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6912      	ldr	r2, [r2, #16]
 8005080:	0852      	lsrs	r2, r2, #1
 8005082:	3a01      	subs	r2, #1
 8005084:	0552      	lsls	r2, r2, #21
 8005086:	430a      	orrs	r2, r1
 8005088:	491f      	ldr	r1, [pc, #124]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800508a:	4313      	orrs	r3, r2
 800508c:	610b      	str	r3, [r1, #16]
 800508e:	e011      	b.n	80050b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005090:	4b1d      	ldr	r3, [pc, #116]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005098:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6892      	ldr	r2, [r2, #8]
 80050a0:	0211      	lsls	r1, r2, #8
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6952      	ldr	r2, [r2, #20]
 80050a6:	0852      	lsrs	r2, r2, #1
 80050a8:	3a01      	subs	r2, #1
 80050aa:	0652      	lsls	r2, r2, #25
 80050ac:	430a      	orrs	r2, r1
 80050ae:	4916      	ldr	r1, [pc, #88]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050b4:	4b14      	ldr	r3, [pc, #80]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a13      	ldr	r2, [pc, #76]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c0:	f7fc fc66 	bl	8001990 <HAL_GetTick>
 80050c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050c6:	e009      	b.n	80050dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050c8:	f7fc fc62 	bl	8001990 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d902      	bls.n	80050dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	73fb      	strb	r3, [r7, #15]
          break;
 80050da:	e005      	b.n	80050e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0ef      	beq.n	80050c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050ee:	4b06      	ldr	r3, [pc, #24]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	4904      	ldr	r1, [pc, #16]	@ (8005108 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40021000 	.word	0x40021000

0800510c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800511a:	4b6a      	ldr	r3, [pc, #424]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d018      	beq.n	8005158 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005126:	4b67      	ldr	r3, [pc, #412]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f003 0203 	and.w	r2, r3, #3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d10d      	bne.n	8005152 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
       ||
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800513e:	4b61      	ldr	r3, [pc, #388]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	091b      	lsrs	r3, r3, #4
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
       ||
 800514e:	429a      	cmp	r2, r3
 8005150:	d047      	beq.n	80051e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	73fb      	strb	r3, [r7, #15]
 8005156:	e044      	b.n	80051e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b03      	cmp	r3, #3
 800515e:	d018      	beq.n	8005192 <RCCEx_PLLSAI2_Config+0x86>
 8005160:	2b03      	cmp	r3, #3
 8005162:	d825      	bhi.n	80051b0 <RCCEx_PLLSAI2_Config+0xa4>
 8005164:	2b01      	cmp	r3, #1
 8005166:	d002      	beq.n	800516e <RCCEx_PLLSAI2_Config+0x62>
 8005168:	2b02      	cmp	r3, #2
 800516a:	d009      	beq.n	8005180 <RCCEx_PLLSAI2_Config+0x74>
 800516c:	e020      	b.n	80051b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800516e:	4b55      	ldr	r3, [pc, #340]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d11d      	bne.n	80051b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800517e:	e01a      	b.n	80051b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005180:	4b50      	ldr	r3, [pc, #320]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005188:	2b00      	cmp	r3, #0
 800518a:	d116      	bne.n	80051ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005190:	e013      	b.n	80051ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005192:	4b4c      	ldr	r3, [pc, #304]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10f      	bne.n	80051be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800519e:	4b49      	ldr	r3, [pc, #292]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d109      	bne.n	80051be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051ae:	e006      	b.n	80051be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
      break;
 80051b4:	e004      	b.n	80051c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051b6:	bf00      	nop
 80051b8:	e002      	b.n	80051c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051ba:	bf00      	nop
 80051bc:	e000      	b.n	80051c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051be:	bf00      	nop
    }

    if(status == HAL_OK)
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10d      	bne.n	80051e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051c6:	4b3f      	ldr	r3, [pc, #252]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6819      	ldr	r1, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	430b      	orrs	r3, r1
 80051dc:	4939      	ldr	r1, [pc, #228]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d167      	bne.n	80052b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051e8:	4b36      	ldr	r3, [pc, #216]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a35      	ldr	r2, [pc, #212]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f4:	f7fc fbcc 	bl	8001990 <HAL_GetTick>
 80051f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051fa:	e009      	b.n	8005210 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051fc:	f7fc fbc8 	bl	8001990 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d902      	bls.n	8005210 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	73fb      	strb	r3, [r7, #15]
        break;
 800520e:	e005      	b.n	800521c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005210:	4b2c      	ldr	r3, [pc, #176]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1ef      	bne.n	80051fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d14a      	bne.n	80052b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d111      	bne.n	800524c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005228:	4b26      	ldr	r3, [pc, #152]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005230:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6892      	ldr	r2, [r2, #8]
 8005238:	0211      	lsls	r1, r2, #8
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	68d2      	ldr	r2, [r2, #12]
 800523e:	0912      	lsrs	r2, r2, #4
 8005240:	0452      	lsls	r2, r2, #17
 8005242:	430a      	orrs	r2, r1
 8005244:	491f      	ldr	r1, [pc, #124]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005246:	4313      	orrs	r3, r2
 8005248:	614b      	str	r3, [r1, #20]
 800524a:	e011      	b.n	8005270 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800524c:	4b1d      	ldr	r3, [pc, #116]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005254:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6892      	ldr	r2, [r2, #8]
 800525c:	0211      	lsls	r1, r2, #8
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6912      	ldr	r2, [r2, #16]
 8005262:	0852      	lsrs	r2, r2, #1
 8005264:	3a01      	subs	r2, #1
 8005266:	0652      	lsls	r2, r2, #25
 8005268:	430a      	orrs	r2, r1
 800526a:	4916      	ldr	r1, [pc, #88]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800526c:	4313      	orrs	r3, r2
 800526e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005270:	4b14      	ldr	r3, [pc, #80]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a13      	ldr	r2, [pc, #76]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800527a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527c:	f7fc fb88 	bl	8001990 <HAL_GetTick>
 8005280:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005282:	e009      	b.n	8005298 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005284:	f7fc fb84 	bl	8001990 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d902      	bls.n	8005298 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	73fb      	strb	r3, [r7, #15]
          break;
 8005296:	e005      	b.n	80052a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005298:	4b0a      	ldr	r3, [pc, #40]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0ef      	beq.n	8005284 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052aa:	4b06      	ldr	r3, [pc, #24]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ac:	695a      	ldr	r2, [r3, #20]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	4904      	ldr	r1, [pc, #16]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40021000 	.word	0x40021000

080052c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e095      	b.n	8005406 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d108      	bne.n	80052f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052ea:	d009      	beq.n	8005300 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	61da      	str	r2, [r3, #28]
 80052f2:	e005      	b.n	8005300 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fb fcf8 	bl	8000d10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005336:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005340:	d902      	bls.n	8005348 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	e002      	b.n	800534e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005348:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800534c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005356:	d007      	beq.n	8005368 <HAL_SPI_Init+0xa0>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005360:	d002      	beq.n	8005368 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053aa:	ea42 0103 	orr.w	r1, r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	0c1b      	lsrs	r3, r3, #16
 80053c4:	f003 0204 	and.w	r2, r3, #4
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80053e4:	ea42 0103 	orr.w	r1, r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e049      	b.n	80054b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d106      	bne.n	800543a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7fc f895 	bl	8001564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2202      	movs	r2, #2
 800543e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3304      	adds	r3, #4
 800544a:	4619      	mov	r1, r3
 800544c:	4610      	mov	r0, r2
 800544e:	f001 f801 	bl	8006454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d001      	beq.n	80054d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e04f      	b.n	8005574 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a23      	ldr	r2, [pc, #140]	@ (8005580 <HAL_TIM_Base_Start_IT+0xc4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d01d      	beq.n	8005532 <HAL_TIM_Base_Start_IT+0x76>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054fe:	d018      	beq.n	8005532 <HAL_TIM_Base_Start_IT+0x76>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1f      	ldr	r2, [pc, #124]	@ (8005584 <HAL_TIM_Base_Start_IT+0xc8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d013      	beq.n	8005532 <HAL_TIM_Base_Start_IT+0x76>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1e      	ldr	r2, [pc, #120]	@ (8005588 <HAL_TIM_Base_Start_IT+0xcc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00e      	beq.n	8005532 <HAL_TIM_Base_Start_IT+0x76>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1c      	ldr	r2, [pc, #112]	@ (800558c <HAL_TIM_Base_Start_IT+0xd0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d009      	beq.n	8005532 <HAL_TIM_Base_Start_IT+0x76>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1b      	ldr	r2, [pc, #108]	@ (8005590 <HAL_TIM_Base_Start_IT+0xd4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d004      	beq.n	8005532 <HAL_TIM_Base_Start_IT+0x76>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a19      	ldr	r2, [pc, #100]	@ (8005594 <HAL_TIM_Base_Start_IT+0xd8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d115      	bne.n	800555e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	4b17      	ldr	r3, [pc, #92]	@ (8005598 <HAL_TIM_Base_Start_IT+0xdc>)
 800553a:	4013      	ands	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b06      	cmp	r3, #6
 8005542:	d015      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0xb4>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800554a:	d011      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0201 	orr.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555c:	e008      	b.n	8005570 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0201 	orr.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	e000      	b.n	8005572 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005570:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	40012c00 	.word	0x40012c00
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40000c00 	.word	0x40000c00
 8005590:	40013400 	.word	0x40013400
 8005594:	40014000 	.word	0x40014000
 8005598:	00010007 	.word	0x00010007

0800559c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e049      	b.n	8005642 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f841 	bl	800564a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3304      	adds	r3, #4
 80055d8:	4619      	mov	r1, r3
 80055da:	4610      	mov	r0, r2
 80055dc:	f000 ff3a 	bl	8006454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d109      	bne.n	800568c <HAL_TIM_PWM_Start_DMA+0x2c>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	bf0c      	ite	eq
 8005684:	2301      	moveq	r3, #1
 8005686:	2300      	movne	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	e03c      	b.n	8005706 <HAL_TIM_PWM_Start_DMA+0xa6>
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b04      	cmp	r3, #4
 8005690:	d109      	bne.n	80056a6 <HAL_TIM_PWM_Start_DMA+0x46>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	bf0c      	ite	eq
 800569e:	2301      	moveq	r3, #1
 80056a0:	2300      	movne	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	e02f      	b.n	8005706 <HAL_TIM_PWM_Start_DMA+0xa6>
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d109      	bne.n	80056c0 <HAL_TIM_PWM_Start_DMA+0x60>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	bf0c      	ite	eq
 80056b8:	2301      	moveq	r3, #1
 80056ba:	2300      	movne	r3, #0
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	e022      	b.n	8005706 <HAL_TIM_PWM_Start_DMA+0xa6>
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b0c      	cmp	r3, #12
 80056c4:	d109      	bne.n	80056da <HAL_TIM_PWM_Start_DMA+0x7a>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	bf0c      	ite	eq
 80056d2:	2301      	moveq	r3, #1
 80056d4:	2300      	movne	r3, #0
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	e015      	b.n	8005706 <HAL_TIM_PWM_Start_DMA+0xa6>
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2b10      	cmp	r3, #16
 80056de:	d109      	bne.n	80056f4 <HAL_TIM_PWM_Start_DMA+0x94>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	bf0c      	ite	eq
 80056ec:	2301      	moveq	r3, #1
 80056ee:	2300      	movne	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	e008      	b.n	8005706 <HAL_TIM_PWM_Start_DMA+0xa6>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	bf0c      	ite	eq
 8005700:	2301      	moveq	r3, #1
 8005702:	2300      	movne	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800570a:	2302      	movs	r3, #2
 800570c:	e1ab      	b.n	8005a66 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b01      	cmp	r3, #1
 800571e:	bf0c      	ite	eq
 8005720:	2301      	moveq	r3, #1
 8005722:	2300      	movne	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	e03c      	b.n	80057a2 <HAL_TIM_PWM_Start_DMA+0x142>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b04      	cmp	r3, #4
 800572c:	d109      	bne.n	8005742 <HAL_TIM_PWM_Start_DMA+0xe2>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b01      	cmp	r3, #1
 8005738:	bf0c      	ite	eq
 800573a:	2301      	moveq	r3, #1
 800573c:	2300      	movne	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	e02f      	b.n	80057a2 <HAL_TIM_PWM_Start_DMA+0x142>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b08      	cmp	r3, #8
 8005746:	d109      	bne.n	800575c <HAL_TIM_PWM_Start_DMA+0xfc>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	e022      	b.n	80057a2 <HAL_TIM_PWM_Start_DMA+0x142>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b0c      	cmp	r3, #12
 8005760:	d109      	bne.n	8005776 <HAL_TIM_PWM_Start_DMA+0x116>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b01      	cmp	r3, #1
 800576c:	bf0c      	ite	eq
 800576e:	2301      	moveq	r3, #1
 8005770:	2300      	movne	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	e015      	b.n	80057a2 <HAL_TIM_PWM_Start_DMA+0x142>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2b10      	cmp	r3, #16
 800577a:	d109      	bne.n	8005790 <HAL_TIM_PWM_Start_DMA+0x130>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	bf0c      	ite	eq
 8005788:	2301      	moveq	r3, #1
 800578a:	2300      	movne	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	e008      	b.n	80057a2 <HAL_TIM_PWM_Start_DMA+0x142>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b01      	cmp	r3, #1
 800579a:	bf0c      	ite	eq
 800579c:	2301      	moveq	r3, #1
 800579e:	2300      	movne	r3, #0
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d034      	beq.n	8005810 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_TIM_PWM_Start_DMA+0x152>
 80057ac:	887b      	ldrh	r3, [r7, #2]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e157      	b.n	8005a66 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_PWM_Start_DMA+0x166>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057c4:	e026      	b.n	8005814 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d104      	bne.n	80057d6 <HAL_TIM_PWM_Start_DMA+0x176>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057d4:	e01e      	b.n	8005814 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d104      	bne.n	80057e6 <HAL_TIM_PWM_Start_DMA+0x186>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057e4:	e016      	b.n	8005814 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b0c      	cmp	r3, #12
 80057ea:	d104      	bne.n	80057f6 <HAL_TIM_PWM_Start_DMA+0x196>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057f4:	e00e      	b.n	8005814 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2b10      	cmp	r3, #16
 80057fa:	d104      	bne.n	8005806 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005804:	e006      	b.n	8005814 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2202      	movs	r2, #2
 800580a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800580e:	e001      	b.n	8005814 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e128      	b.n	8005a66 <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b0c      	cmp	r3, #12
 8005818:	f200 80ae 	bhi.w	8005978 <HAL_TIM_PWM_Start_DMA+0x318>
 800581c:	a201      	add	r2, pc, #4	@ (adr r2, 8005824 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800581e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005822:	bf00      	nop
 8005824:	08005859 	.word	0x08005859
 8005828:	08005979 	.word	0x08005979
 800582c:	08005979 	.word	0x08005979
 8005830:	08005979 	.word	0x08005979
 8005834:	080058a1 	.word	0x080058a1
 8005838:	08005979 	.word	0x08005979
 800583c:	08005979 	.word	0x08005979
 8005840:	08005979 	.word	0x08005979
 8005844:	080058e9 	.word	0x080058e9
 8005848:	08005979 	.word	0x08005979
 800584c:	08005979 	.word	0x08005979
 8005850:	08005979 	.word	0x08005979
 8005854:	08005931 	.word	0x08005931
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	4a84      	ldr	r2, [pc, #528]	@ (8005a70 <HAL_TIM_PWM_Start_DMA+0x410>)
 800585e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005864:	4a83      	ldr	r2, [pc, #524]	@ (8005a74 <HAL_TIM_PWM_Start_DMA+0x414>)
 8005866:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	4a82      	ldr	r2, [pc, #520]	@ (8005a78 <HAL_TIM_PWM_Start_DMA+0x418>)
 800586e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3334      	adds	r3, #52	@ 0x34
 800587c:	461a      	mov	r2, r3
 800587e:	887b      	ldrh	r3, [r7, #2]
 8005880:	f7fd f9f4 	bl	8002c6c <HAL_DMA_Start_IT>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e0eb      	b.n	8005a66 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800589c:	60da      	str	r2, [r3, #12]
      break;
 800589e:	e06e      	b.n	800597e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a4:	4a72      	ldr	r2, [pc, #456]	@ (8005a70 <HAL_TIM_PWM_Start_DMA+0x410>)
 80058a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ac:	4a71      	ldr	r2, [pc, #452]	@ (8005a74 <HAL_TIM_PWM_Start_DMA+0x414>)
 80058ae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b4:	4a70      	ldr	r2, [pc, #448]	@ (8005a78 <HAL_TIM_PWM_Start_DMA+0x418>)
 80058b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3338      	adds	r3, #56	@ 0x38
 80058c4:	461a      	mov	r2, r3
 80058c6:	887b      	ldrh	r3, [r7, #2]
 80058c8:	f7fd f9d0 	bl	8002c6c <HAL_DMA_Start_IT>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e0c7      	b.n	8005a66 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80058e4:	60da      	str	r2, [r3, #12]
      break;
 80058e6:	e04a      	b.n	800597e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ec:	4a60      	ldr	r2, [pc, #384]	@ (8005a70 <HAL_TIM_PWM_Start_DMA+0x410>)
 80058ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f4:	4a5f      	ldr	r2, [pc, #380]	@ (8005a74 <HAL_TIM_PWM_Start_DMA+0x414>)
 80058f6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fc:	4a5e      	ldr	r2, [pc, #376]	@ (8005a78 <HAL_TIM_PWM_Start_DMA+0x418>)
 80058fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	333c      	adds	r3, #60	@ 0x3c
 800590c:	461a      	mov	r2, r3
 800590e:	887b      	ldrh	r3, [r7, #2]
 8005910:	f7fd f9ac 	bl	8002c6c <HAL_DMA_Start_IT>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e0a3      	b.n	8005a66 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800592c:	60da      	str	r2, [r3, #12]
      break;
 800592e:	e026      	b.n	800597e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005934:	4a4e      	ldr	r2, [pc, #312]	@ (8005a70 <HAL_TIM_PWM_Start_DMA+0x410>)
 8005936:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800593c:	4a4d      	ldr	r2, [pc, #308]	@ (8005a74 <HAL_TIM_PWM_Start_DMA+0x414>)
 800593e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005944:	4a4c      	ldr	r2, [pc, #304]	@ (8005a78 <HAL_TIM_PWM_Start_DMA+0x418>)
 8005946:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3340      	adds	r3, #64	@ 0x40
 8005954:	461a      	mov	r2, r3
 8005956:	887b      	ldrh	r3, [r7, #2]
 8005958:	f7fd f988 	bl	8002c6c <HAL_DMA_Start_IT>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e07f      	b.n	8005a66 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005974:	60da      	str	r2, [r3, #12]
      break;
 8005976:	e002      	b.n	800597e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	75fb      	strb	r3, [r7, #23]
      break;
 800597c:	bf00      	nop
  }

  if (status == HAL_OK)
 800597e:	7dfb      	ldrb	r3, [r7, #23]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d16f      	bne.n	8005a64 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2201      	movs	r2, #1
 800598a:	68b9      	ldr	r1, [r7, #8]
 800598c:	4618      	mov	r0, r3
 800598e:	f001 f96b 	bl	8006c68 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a39      	ldr	r2, [pc, #228]	@ (8005a7c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d013      	beq.n	80059c4 <HAL_TIM_PWM_Start_DMA+0x364>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a37      	ldr	r2, [pc, #220]	@ (8005a80 <HAL_TIM_PWM_Start_DMA+0x420>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00e      	beq.n	80059c4 <HAL_TIM_PWM_Start_DMA+0x364>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a36      	ldr	r2, [pc, #216]	@ (8005a84 <HAL_TIM_PWM_Start_DMA+0x424>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d009      	beq.n	80059c4 <HAL_TIM_PWM_Start_DMA+0x364>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a34      	ldr	r2, [pc, #208]	@ (8005a88 <HAL_TIM_PWM_Start_DMA+0x428>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d004      	beq.n	80059c4 <HAL_TIM_PWM_Start_DMA+0x364>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a33      	ldr	r2, [pc, #204]	@ (8005a8c <HAL_TIM_PWM_Start_DMA+0x42c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d101      	bne.n	80059c8 <HAL_TIM_PWM_Start_DMA+0x368>
 80059c4:	2301      	movs	r3, #1
 80059c6:	e000      	b.n	80059ca <HAL_TIM_PWM_Start_DMA+0x36a>
 80059c8:	2300      	movs	r3, #0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d007      	beq.n	80059de <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a26      	ldr	r2, [pc, #152]	@ (8005a7c <HAL_TIM_PWM_Start_DMA+0x41c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d01d      	beq.n	8005a24 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f0:	d018      	beq.n	8005a24 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a26      	ldr	r2, [pc, #152]	@ (8005a90 <HAL_TIM_PWM_Start_DMA+0x430>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d013      	beq.n	8005a24 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a24      	ldr	r2, [pc, #144]	@ (8005a94 <HAL_TIM_PWM_Start_DMA+0x434>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00e      	beq.n	8005a24 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a23      	ldr	r2, [pc, #140]	@ (8005a98 <HAL_TIM_PWM_Start_DMA+0x438>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d009      	beq.n	8005a24 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a1a      	ldr	r2, [pc, #104]	@ (8005a80 <HAL_TIM_PWM_Start_DMA+0x420>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d004      	beq.n	8005a24 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a19      	ldr	r2, [pc, #100]	@ (8005a84 <HAL_TIM_PWM_Start_DMA+0x424>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d115      	bne.n	8005a50 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8005a9c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	2b06      	cmp	r3, #6
 8005a34:	d015      	beq.n	8005a62 <HAL_TIM_PWM_Start_DMA+0x402>
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a3c:	d011      	beq.n	8005a62 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f042 0201 	orr.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4e:	e008      	b.n	8005a62 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	e000      	b.n	8005a64 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a62:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3718      	adds	r7, #24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	08006345 	.word	0x08006345
 8005a74:	080063ed 	.word	0x080063ed
 8005a78:	080062b3 	.word	0x080062b3
 8005a7c:	40012c00 	.word	0x40012c00
 8005a80:	40013400 	.word	0x40013400
 8005a84:	40014000 	.word	0x40014000
 8005a88:	40014400 	.word	0x40014400
 8005a8c:	40014800 	.word	0x40014800
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40000c00 	.word	0x40000c00
 8005a9c:	00010007 	.word	0x00010007

08005aa0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b0c      	cmp	r3, #12
 8005ab2:	d855      	bhi.n	8005b60 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8005abc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aba:	bf00      	nop
 8005abc:	08005af1 	.word	0x08005af1
 8005ac0:	08005b61 	.word	0x08005b61
 8005ac4:	08005b61 	.word	0x08005b61
 8005ac8:	08005b61 	.word	0x08005b61
 8005acc:	08005b0d 	.word	0x08005b0d
 8005ad0:	08005b61 	.word	0x08005b61
 8005ad4:	08005b61 	.word	0x08005b61
 8005ad8:	08005b61 	.word	0x08005b61
 8005adc:	08005b29 	.word	0x08005b29
 8005ae0:	08005b61 	.word	0x08005b61
 8005ae4:	08005b61 	.word	0x08005b61
 8005ae8:	08005b61 	.word	0x08005b61
 8005aec:	08005b45 	.word	0x08005b45
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005afe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fd f94f 	bl	8002da8 <HAL_DMA_Abort_IT>
      break;
 8005b0a:	e02c      	b.n	8005b66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fd f941 	bl	8002da8 <HAL_DMA_Abort_IT>
      break;
 8005b26:	e01e      	b.n	8005b66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fd f933 	bl	8002da8 <HAL_DMA_Abort_IT>
      break;
 8005b42:	e010      	b.n	8005b66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fd f925 	bl	8002da8 <HAL_DMA_Abort_IT>
      break;
 8005b5e:	e002      	b.n	8005b66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	73fb      	strb	r3, [r7, #15]
      break;
 8005b64:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f040 8081 	bne.w	8005c70 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2200      	movs	r2, #0
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 f876 	bl	8006c68 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a3e      	ldr	r2, [pc, #248]	@ (8005c7c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d013      	beq.n	8005bae <HAL_TIM_PWM_Stop_DMA+0x10e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a3d      	ldr	r2, [pc, #244]	@ (8005c80 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00e      	beq.n	8005bae <HAL_TIM_PWM_Stop_DMA+0x10e>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a3b      	ldr	r2, [pc, #236]	@ (8005c84 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d009      	beq.n	8005bae <HAL_TIM_PWM_Stop_DMA+0x10e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a3a      	ldr	r2, [pc, #232]	@ (8005c88 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d004      	beq.n	8005bae <HAL_TIM_PWM_Stop_DMA+0x10e>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a38      	ldr	r2, [pc, #224]	@ (8005c8c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d101      	bne.n	8005bb2 <HAL_TIM_PWM_Stop_DMA+0x112>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e000      	b.n	8005bb4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d017      	beq.n	8005be8 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6a1a      	ldr	r2, [r3, #32]
 8005bbe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10f      	bne.n	8005be8 <HAL_TIM_PWM_Stop_DMA+0x148>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6a1a      	ldr	r2, [r3, #32]
 8005bce:	f240 4344 	movw	r3, #1092	@ 0x444
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d107      	bne.n	8005be8 <HAL_TIM_PWM_Stop_DMA+0x148>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005be6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6a1a      	ldr	r2, [r3, #32]
 8005bee:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10f      	bne.n	8005c18 <HAL_TIM_PWM_Stop_DMA+0x178>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6a1a      	ldr	r2, [r3, #32]
 8005bfe:	f240 4344 	movw	r3, #1092	@ 0x444
 8005c02:	4013      	ands	r3, r2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d107      	bne.n	8005c18 <HAL_TIM_PWM_Stop_DMA+0x178>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0201 	bic.w	r2, r2, #1
 8005c16:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d104      	bne.n	8005c28 <HAL_TIM_PWM_Stop_DMA+0x188>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c26:	e023      	b.n	8005c70 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d104      	bne.n	8005c38 <HAL_TIM_PWM_Stop_DMA+0x198>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c36:	e01b      	b.n	8005c70 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d104      	bne.n	8005c48 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c46:	e013      	b.n	8005c70 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2b0c      	cmp	r3, #12
 8005c4c:	d104      	bne.n	8005c58 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c56:	e00b      	b.n	8005c70 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b10      	cmp	r3, #16
 8005c5c:	d104      	bne.n	8005c68 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c66:	e003      	b.n	8005c70 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40012c00 	.word	0x40012c00
 8005c80:	40013400 	.word	0x40013400
 8005c84:	40014000 	.word	0x40014000
 8005c88:	40014400 	.word	0x40014400
 8005c8c:	40014800 	.word	0x40014800

08005c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d020      	beq.n	8005cf4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01b      	beq.n	8005cf4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0202 	mvn.w	r2, #2
 8005cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fac1 	bl	8006262 <HAL_TIM_IC_CaptureCallback>
 8005ce0:	e005      	b.n	8005cee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fab3 	bl	800624e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f002 fcbf 	bl	800866c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d020      	beq.n	8005d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d01b      	beq.n	8005d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f06f 0204 	mvn.w	r2, #4
 8005d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fa9b 	bl	8006262 <HAL_TIM_IC_CaptureCallback>
 8005d2c:	e005      	b.n	8005d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fa8d 	bl	800624e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f002 fc99 	bl	800866c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f003 0308 	and.w	r3, r3, #8
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d020      	beq.n	8005d8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f003 0308 	and.w	r3, r3, #8
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d01b      	beq.n	8005d8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f06f 0208 	mvn.w	r2, #8
 8005d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2204      	movs	r2, #4
 8005d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fa75 	bl	8006262 <HAL_TIM_IC_CaptureCallback>
 8005d78:	e005      	b.n	8005d86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fa67 	bl	800624e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f002 fc73 	bl	800866c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f003 0310 	and.w	r3, r3, #16
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d020      	beq.n	8005dd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f003 0310 	and.w	r3, r3, #16
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01b      	beq.n	8005dd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f06f 0210 	mvn.w	r2, #16
 8005da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2208      	movs	r2, #8
 8005dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fa4f 	bl	8006262 <HAL_TIM_IC_CaptureCallback>
 8005dc4:	e005      	b.n	8005dd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fa41 	bl	800624e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f002 fc4d 	bl	800866c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00c      	beq.n	8005dfc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0201 	mvn.w	r2, #1
 8005df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fa ff34 	bl	8000c64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00c      	beq.n	8005e20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d007      	beq.n	8005e20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f001 f85a 	bl	8006ed4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00c      	beq.n	8005e44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d007      	beq.n	8005e44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f001 f852 	bl	8006ee8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00c      	beq.n	8005e68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fa11 	bl	800628a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00c      	beq.n	8005e8c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d007      	beq.n	8005e8c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f06f 0220 	mvn.w	r2, #32
 8005e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f001 f81a 	bl	8006ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e8c:	bf00      	nop
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e0ff      	b.n	80060b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b14      	cmp	r3, #20
 8005ebe:	f200 80f0 	bhi.w	80060a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec8:	08005f1d 	.word	0x08005f1d
 8005ecc:	080060a3 	.word	0x080060a3
 8005ed0:	080060a3 	.word	0x080060a3
 8005ed4:	080060a3 	.word	0x080060a3
 8005ed8:	08005f5d 	.word	0x08005f5d
 8005edc:	080060a3 	.word	0x080060a3
 8005ee0:	080060a3 	.word	0x080060a3
 8005ee4:	080060a3 	.word	0x080060a3
 8005ee8:	08005f9f 	.word	0x08005f9f
 8005eec:	080060a3 	.word	0x080060a3
 8005ef0:	080060a3 	.word	0x080060a3
 8005ef4:	080060a3 	.word	0x080060a3
 8005ef8:	08005fdf 	.word	0x08005fdf
 8005efc:	080060a3 	.word	0x080060a3
 8005f00:	080060a3 	.word	0x080060a3
 8005f04:	080060a3 	.word	0x080060a3
 8005f08:	08006021 	.word	0x08006021
 8005f0c:	080060a3 	.word	0x080060a3
 8005f10:	080060a3 	.word	0x080060a3
 8005f14:	080060a3 	.word	0x080060a3
 8005f18:	08006061 	.word	0x08006061
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fb30 	bl	8006588 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0208 	orr.w	r2, r2, #8
 8005f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0204 	bic.w	r2, r2, #4
 8005f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6999      	ldr	r1, [r3, #24]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	691a      	ldr	r2, [r3, #16]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	619a      	str	r2, [r3, #24]
      break;
 8005f5a:	e0a5      	b.n	80060a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 fba0 	bl	80066a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699a      	ldr	r2, [r3, #24]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699a      	ldr	r2, [r3, #24]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6999      	ldr	r1, [r3, #24]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	021a      	lsls	r2, r3, #8
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	619a      	str	r2, [r3, #24]
      break;
 8005f9c:	e084      	b.n	80060a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68b9      	ldr	r1, [r7, #8]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fc09 	bl	80067bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f042 0208 	orr.w	r2, r2, #8
 8005fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0204 	bic.w	r2, r2, #4
 8005fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69d9      	ldr	r1, [r3, #28]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	61da      	str	r2, [r3, #28]
      break;
 8005fdc:	e064      	b.n	80060a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68b9      	ldr	r1, [r7, #8]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 fc71 	bl	80068cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69da      	ldr	r2, [r3, #28]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69d9      	ldr	r1, [r3, #28]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	021a      	lsls	r2, r3, #8
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	61da      	str	r2, [r3, #28]
      break;
 800601e:	e043      	b.n	80060a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fcba 	bl	80069a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0208 	orr.w	r2, r2, #8
 800603a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0204 	bic.w	r2, r2, #4
 800604a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800605e:	e023      	b.n	80060a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	4618      	mov	r0, r3
 8006068:	f000 fcfe 	bl	8006a68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800607a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800608a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	021a      	lsls	r2, r3, #8
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80060a0:	e002      	b.n	80060a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	75fb      	strb	r3, [r7, #23]
      break;
 80060a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop

080060bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060c6:	2300      	movs	r3, #0
 80060c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_TIM_ConfigClockSource+0x1c>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e0b6      	b.n	8006246 <HAL_TIM_ConfigClockSource+0x18a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006114:	d03e      	beq.n	8006194 <HAL_TIM_ConfigClockSource+0xd8>
 8006116:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800611a:	f200 8087 	bhi.w	800622c <HAL_TIM_ConfigClockSource+0x170>
 800611e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006122:	f000 8086 	beq.w	8006232 <HAL_TIM_ConfigClockSource+0x176>
 8006126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800612a:	d87f      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x170>
 800612c:	2b70      	cmp	r3, #112	@ 0x70
 800612e:	d01a      	beq.n	8006166 <HAL_TIM_ConfigClockSource+0xaa>
 8006130:	2b70      	cmp	r3, #112	@ 0x70
 8006132:	d87b      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x170>
 8006134:	2b60      	cmp	r3, #96	@ 0x60
 8006136:	d050      	beq.n	80061da <HAL_TIM_ConfigClockSource+0x11e>
 8006138:	2b60      	cmp	r3, #96	@ 0x60
 800613a:	d877      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x170>
 800613c:	2b50      	cmp	r3, #80	@ 0x50
 800613e:	d03c      	beq.n	80061ba <HAL_TIM_ConfigClockSource+0xfe>
 8006140:	2b50      	cmp	r3, #80	@ 0x50
 8006142:	d873      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x170>
 8006144:	2b40      	cmp	r3, #64	@ 0x40
 8006146:	d058      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x13e>
 8006148:	2b40      	cmp	r3, #64	@ 0x40
 800614a:	d86f      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x170>
 800614c:	2b30      	cmp	r3, #48	@ 0x30
 800614e:	d064      	beq.n	800621a <HAL_TIM_ConfigClockSource+0x15e>
 8006150:	2b30      	cmp	r3, #48	@ 0x30
 8006152:	d86b      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x170>
 8006154:	2b20      	cmp	r3, #32
 8006156:	d060      	beq.n	800621a <HAL_TIM_ConfigClockSource+0x15e>
 8006158:	2b20      	cmp	r3, #32
 800615a:	d867      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x170>
 800615c:	2b00      	cmp	r3, #0
 800615e:	d05c      	beq.n	800621a <HAL_TIM_ConfigClockSource+0x15e>
 8006160:	2b10      	cmp	r3, #16
 8006162:	d05a      	beq.n	800621a <HAL_TIM_ConfigClockSource+0x15e>
 8006164:	e062      	b.n	800622c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006176:	f000 fd57 	bl	8006c28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	609a      	str	r2, [r3, #8]
      break;
 8006192:	e04f      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061a4:	f000 fd40 	bl	8006c28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061b6:	609a      	str	r2, [r3, #8]
      break;
 80061b8:	e03c      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c6:	461a      	mov	r2, r3
 80061c8:	f000 fcb4 	bl	8006b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2150      	movs	r1, #80	@ 0x50
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fd0d 	bl	8006bf2 <TIM_ITRx_SetConfig>
      break;
 80061d8:	e02c      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061e6:	461a      	mov	r2, r3
 80061e8:	f000 fcd3 	bl	8006b92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2160      	movs	r1, #96	@ 0x60
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fcfd 	bl	8006bf2 <TIM_ITRx_SetConfig>
      break;
 80061f8:	e01c      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006206:	461a      	mov	r2, r3
 8006208:	f000 fc94 	bl	8006b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2140      	movs	r1, #64	@ 0x40
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fced 	bl	8006bf2 <TIM_ITRx_SetConfig>
      break;
 8006218:	e00c      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4619      	mov	r1, r3
 8006224:	4610      	mov	r0, r2
 8006226:	f000 fce4 	bl	8006bf2 <TIM_ITRx_SetConfig>
      break;
 800622a:	e003      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
      break;
 8006230:	e000      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006244:	7bfb      	ldrb	r3, [r7, #15]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062be:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d107      	bne.n	80062da <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062d8:	e02a      	b.n	8006330 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d107      	bne.n	80062f4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2202      	movs	r2, #2
 80062e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062f2:	e01d      	b.n	8006330 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d107      	bne.n	800630e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2204      	movs	r2, #4
 8006302:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800630c:	e010      	b.n	8006330 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	429a      	cmp	r2, r3
 8006316:	d107      	bne.n	8006328 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2208      	movs	r2, #8
 800631c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006326:	e003      	b.n	8006330 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f7ff ffb4 	bl	800629e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	771a      	strb	r2, [r3, #28]
}
 800633c:	bf00      	nop
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006350:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	429a      	cmp	r2, r3
 800635a:	d10b      	bne.n	8006374 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d136      	bne.n	80063d8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006372:	e031      	b.n	80063d8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	429a      	cmp	r2, r3
 800637c:	d10b      	bne.n	8006396 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2202      	movs	r2, #2
 8006382:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d125      	bne.n	80063d8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006394:	e020      	b.n	80063d8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	429a      	cmp	r2, r3
 800639e:	d10b      	bne.n	80063b8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2204      	movs	r2, #4
 80063a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d114      	bne.n	80063d8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063b6:	e00f      	b.n	80063d8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d10a      	bne.n	80063d8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2208      	movs	r2, #8
 80063c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d103      	bne.n	80063d8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f002 f947 	bl	800866c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	771a      	strb	r2, [r3, #28]
}
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	d103      	bne.n	800640c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2201      	movs	r2, #1
 8006408:	771a      	strb	r2, [r3, #28]
 800640a:	e019      	b.n	8006440 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	429a      	cmp	r2, r3
 8006414:	d103      	bne.n	800641e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2202      	movs	r2, #2
 800641a:	771a      	strb	r2, [r3, #28]
 800641c:	e010      	b.n	8006440 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	429a      	cmp	r2, r3
 8006426:	d103      	bne.n	8006430 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2204      	movs	r2, #4
 800642c:	771a      	strb	r2, [r3, #28]
 800642e:	e007      	b.n	8006440 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	429a      	cmp	r2, r3
 8006438:	d102      	bne.n	8006440 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2208      	movs	r2, #8
 800643e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f7ff ff18 	bl	8006276 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	771a      	strb	r2, [r3, #28]
}
 800644c:	bf00      	nop
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a40      	ldr	r2, [pc, #256]	@ (8006568 <TIM_Base_SetConfig+0x114>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d013      	beq.n	8006494 <TIM_Base_SetConfig+0x40>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006472:	d00f      	beq.n	8006494 <TIM_Base_SetConfig+0x40>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a3d      	ldr	r2, [pc, #244]	@ (800656c <TIM_Base_SetConfig+0x118>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00b      	beq.n	8006494 <TIM_Base_SetConfig+0x40>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a3c      	ldr	r2, [pc, #240]	@ (8006570 <TIM_Base_SetConfig+0x11c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d007      	beq.n	8006494 <TIM_Base_SetConfig+0x40>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a3b      	ldr	r2, [pc, #236]	@ (8006574 <TIM_Base_SetConfig+0x120>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_Base_SetConfig+0x40>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a3a      	ldr	r2, [pc, #232]	@ (8006578 <TIM_Base_SetConfig+0x124>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d108      	bne.n	80064a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800649a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a2f      	ldr	r2, [pc, #188]	@ (8006568 <TIM_Base_SetConfig+0x114>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d01f      	beq.n	80064ee <TIM_Base_SetConfig+0x9a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064b4:	d01b      	beq.n	80064ee <TIM_Base_SetConfig+0x9a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a2c      	ldr	r2, [pc, #176]	@ (800656c <TIM_Base_SetConfig+0x118>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d017      	beq.n	80064ee <TIM_Base_SetConfig+0x9a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a2b      	ldr	r2, [pc, #172]	@ (8006570 <TIM_Base_SetConfig+0x11c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d013      	beq.n	80064ee <TIM_Base_SetConfig+0x9a>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006574 <TIM_Base_SetConfig+0x120>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d00f      	beq.n	80064ee <TIM_Base_SetConfig+0x9a>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a29      	ldr	r2, [pc, #164]	@ (8006578 <TIM_Base_SetConfig+0x124>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d00b      	beq.n	80064ee <TIM_Base_SetConfig+0x9a>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a28      	ldr	r2, [pc, #160]	@ (800657c <TIM_Base_SetConfig+0x128>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d007      	beq.n	80064ee <TIM_Base_SetConfig+0x9a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a27      	ldr	r2, [pc, #156]	@ (8006580 <TIM_Base_SetConfig+0x12c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d003      	beq.n	80064ee <TIM_Base_SetConfig+0x9a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a26      	ldr	r2, [pc, #152]	@ (8006584 <TIM_Base_SetConfig+0x130>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d108      	bne.n	8006500 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a10      	ldr	r2, [pc, #64]	@ (8006568 <TIM_Base_SetConfig+0x114>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00f      	beq.n	800654c <TIM_Base_SetConfig+0xf8>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a12      	ldr	r2, [pc, #72]	@ (8006578 <TIM_Base_SetConfig+0x124>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00b      	beq.n	800654c <TIM_Base_SetConfig+0xf8>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a11      	ldr	r2, [pc, #68]	@ (800657c <TIM_Base_SetConfig+0x128>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d007      	beq.n	800654c <TIM_Base_SetConfig+0xf8>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a10      	ldr	r2, [pc, #64]	@ (8006580 <TIM_Base_SetConfig+0x12c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d003      	beq.n	800654c <TIM_Base_SetConfig+0xf8>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a0f      	ldr	r2, [pc, #60]	@ (8006584 <TIM_Base_SetConfig+0x130>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d103      	bne.n	8006554 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	691a      	ldr	r2, [r3, #16]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	615a      	str	r2, [r3, #20]
}
 800655a:	bf00      	nop
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	40012c00 	.word	0x40012c00
 800656c:	40000400 	.word	0x40000400
 8006570:	40000800 	.word	0x40000800
 8006574:	40000c00 	.word	0x40000c00
 8006578:	40013400 	.word	0x40013400
 800657c:	40014000 	.word	0x40014000
 8006580:	40014400 	.word	0x40014400
 8006584:	40014800 	.word	0x40014800

08006588 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	f023 0201 	bic.w	r2, r3, #1
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0303 	bic.w	r3, r3, #3
 80065c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f023 0302 	bic.w	r3, r3, #2
 80065d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a2c      	ldr	r2, [pc, #176]	@ (8006694 <TIM_OC1_SetConfig+0x10c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00f      	beq.n	8006608 <TIM_OC1_SetConfig+0x80>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a2b      	ldr	r2, [pc, #172]	@ (8006698 <TIM_OC1_SetConfig+0x110>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00b      	beq.n	8006608 <TIM_OC1_SetConfig+0x80>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a2a      	ldr	r2, [pc, #168]	@ (800669c <TIM_OC1_SetConfig+0x114>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d007      	beq.n	8006608 <TIM_OC1_SetConfig+0x80>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a29      	ldr	r2, [pc, #164]	@ (80066a0 <TIM_OC1_SetConfig+0x118>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d003      	beq.n	8006608 <TIM_OC1_SetConfig+0x80>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a28      	ldr	r2, [pc, #160]	@ (80066a4 <TIM_OC1_SetConfig+0x11c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d10c      	bne.n	8006622 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f023 0308 	bic.w	r3, r3, #8
 800660e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f023 0304 	bic.w	r3, r3, #4
 8006620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a1b      	ldr	r2, [pc, #108]	@ (8006694 <TIM_OC1_SetConfig+0x10c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00f      	beq.n	800664a <TIM_OC1_SetConfig+0xc2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a1a      	ldr	r2, [pc, #104]	@ (8006698 <TIM_OC1_SetConfig+0x110>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d00b      	beq.n	800664a <TIM_OC1_SetConfig+0xc2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a19      	ldr	r2, [pc, #100]	@ (800669c <TIM_OC1_SetConfig+0x114>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d007      	beq.n	800664a <TIM_OC1_SetConfig+0xc2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a18      	ldr	r2, [pc, #96]	@ (80066a0 <TIM_OC1_SetConfig+0x118>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d003      	beq.n	800664a <TIM_OC1_SetConfig+0xc2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a17      	ldr	r2, [pc, #92]	@ (80066a4 <TIM_OC1_SetConfig+0x11c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d111      	bne.n	800666e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4313      	orrs	r3, r2
 8006662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	4313      	orrs	r3, r2
 800666c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	621a      	str	r2, [r3, #32]
}
 8006688:	bf00      	nop
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	40012c00 	.word	0x40012c00
 8006698:	40013400 	.word	0x40013400
 800669c:	40014000 	.word	0x40014000
 80066a0:	40014400 	.word	0x40014400
 80066a4:	40014800 	.word	0x40014800

080066a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	f023 0210 	bic.w	r2, r3, #16
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	021b      	lsls	r3, r3, #8
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f023 0320 	bic.w	r3, r3, #32
 80066f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a28      	ldr	r2, [pc, #160]	@ (80067a8 <TIM_OC2_SetConfig+0x100>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d003      	beq.n	8006714 <TIM_OC2_SetConfig+0x6c>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a27      	ldr	r2, [pc, #156]	@ (80067ac <TIM_OC2_SetConfig+0x104>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d10d      	bne.n	8006730 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800671a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	011b      	lsls	r3, r3, #4
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800672e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a1d      	ldr	r2, [pc, #116]	@ (80067a8 <TIM_OC2_SetConfig+0x100>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d00f      	beq.n	8006758 <TIM_OC2_SetConfig+0xb0>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a1c      	ldr	r2, [pc, #112]	@ (80067ac <TIM_OC2_SetConfig+0x104>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d00b      	beq.n	8006758 <TIM_OC2_SetConfig+0xb0>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a1b      	ldr	r2, [pc, #108]	@ (80067b0 <TIM_OC2_SetConfig+0x108>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d007      	beq.n	8006758 <TIM_OC2_SetConfig+0xb0>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a1a      	ldr	r2, [pc, #104]	@ (80067b4 <TIM_OC2_SetConfig+0x10c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d003      	beq.n	8006758 <TIM_OC2_SetConfig+0xb0>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a19      	ldr	r2, [pc, #100]	@ (80067b8 <TIM_OC2_SetConfig+0x110>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d113      	bne.n	8006780 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800675e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	4313      	orrs	r3, r2
 8006772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	621a      	str	r2, [r3, #32]
}
 800679a:	bf00      	nop
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40012c00 	.word	0x40012c00
 80067ac:	40013400 	.word	0x40013400
 80067b0:	40014000 	.word	0x40014000
 80067b4:	40014400 	.word	0x40014400
 80067b8:	40014800 	.word	0x40014800

080067bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f023 0303 	bic.w	r3, r3, #3
 80067f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	021b      	lsls	r3, r3, #8
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	4313      	orrs	r3, r2
 8006814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a27      	ldr	r2, [pc, #156]	@ (80068b8 <TIM_OC3_SetConfig+0xfc>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d003      	beq.n	8006826 <TIM_OC3_SetConfig+0x6a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a26      	ldr	r2, [pc, #152]	@ (80068bc <TIM_OC3_SetConfig+0x100>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d10d      	bne.n	8006842 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800682c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	021b      	lsls	r3, r3, #8
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	4313      	orrs	r3, r2
 8006838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a1c      	ldr	r2, [pc, #112]	@ (80068b8 <TIM_OC3_SetConfig+0xfc>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00f      	beq.n	800686a <TIM_OC3_SetConfig+0xae>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a1b      	ldr	r2, [pc, #108]	@ (80068bc <TIM_OC3_SetConfig+0x100>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00b      	beq.n	800686a <TIM_OC3_SetConfig+0xae>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a1a      	ldr	r2, [pc, #104]	@ (80068c0 <TIM_OC3_SetConfig+0x104>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d007      	beq.n	800686a <TIM_OC3_SetConfig+0xae>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a19      	ldr	r2, [pc, #100]	@ (80068c4 <TIM_OC3_SetConfig+0x108>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d003      	beq.n	800686a <TIM_OC3_SetConfig+0xae>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a18      	ldr	r2, [pc, #96]	@ (80068c8 <TIM_OC3_SetConfig+0x10c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d113      	bne.n	8006892 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	4313      	orrs	r3, r2
 8006890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	621a      	str	r2, [r3, #32]
}
 80068ac:	bf00      	nop
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	40012c00 	.word	0x40012c00
 80068bc:	40013400 	.word	0x40013400
 80068c0:	40014000 	.word	0x40014000
 80068c4:	40014400 	.word	0x40014400
 80068c8:	40014800 	.word	0x40014800

080068cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	4313      	orrs	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800691a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	031b      	lsls	r3, r3, #12
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a18      	ldr	r2, [pc, #96]	@ (800698c <TIM_OC4_SetConfig+0xc0>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d00f      	beq.n	8006950 <TIM_OC4_SetConfig+0x84>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a17      	ldr	r2, [pc, #92]	@ (8006990 <TIM_OC4_SetConfig+0xc4>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d00b      	beq.n	8006950 <TIM_OC4_SetConfig+0x84>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a16      	ldr	r2, [pc, #88]	@ (8006994 <TIM_OC4_SetConfig+0xc8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d007      	beq.n	8006950 <TIM_OC4_SetConfig+0x84>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a15      	ldr	r2, [pc, #84]	@ (8006998 <TIM_OC4_SetConfig+0xcc>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d003      	beq.n	8006950 <TIM_OC4_SetConfig+0x84>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a14      	ldr	r2, [pc, #80]	@ (800699c <TIM_OC4_SetConfig+0xd0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d109      	bne.n	8006964 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006956:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	019b      	lsls	r3, r3, #6
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	4313      	orrs	r3, r2
 8006962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	621a      	str	r2, [r3, #32]
}
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40012c00 	.word	0x40012c00
 8006990:	40013400 	.word	0x40013400
 8006994:	40014000 	.word	0x40014000
 8006998:	40014400 	.word	0x40014400
 800699c:	40014800 	.word	0x40014800

080069a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80069e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	041b      	lsls	r3, r3, #16
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a17      	ldr	r2, [pc, #92]	@ (8006a54 <TIM_OC5_SetConfig+0xb4>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00f      	beq.n	8006a1a <TIM_OC5_SetConfig+0x7a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a16      	ldr	r2, [pc, #88]	@ (8006a58 <TIM_OC5_SetConfig+0xb8>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d00b      	beq.n	8006a1a <TIM_OC5_SetConfig+0x7a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a15      	ldr	r2, [pc, #84]	@ (8006a5c <TIM_OC5_SetConfig+0xbc>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d007      	beq.n	8006a1a <TIM_OC5_SetConfig+0x7a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a14      	ldr	r2, [pc, #80]	@ (8006a60 <TIM_OC5_SetConfig+0xc0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d003      	beq.n	8006a1a <TIM_OC5_SetConfig+0x7a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a13      	ldr	r2, [pc, #76]	@ (8006a64 <TIM_OC5_SetConfig+0xc4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d109      	bne.n	8006a2e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	021b      	lsls	r3, r3, #8
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	621a      	str	r2, [r3, #32]
}
 8006a48:	bf00      	nop
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	40012c00 	.word	0x40012c00
 8006a58:	40013400 	.word	0x40013400
 8006a5c:	40014000 	.word	0x40014000
 8006a60:	40014400 	.word	0x40014400
 8006a64:	40014800 	.word	0x40014800

08006a68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006aae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	051b      	lsls	r3, r3, #20
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a18      	ldr	r2, [pc, #96]	@ (8006b20 <TIM_OC6_SetConfig+0xb8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d00f      	beq.n	8006ae4 <TIM_OC6_SetConfig+0x7c>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a17      	ldr	r2, [pc, #92]	@ (8006b24 <TIM_OC6_SetConfig+0xbc>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d00b      	beq.n	8006ae4 <TIM_OC6_SetConfig+0x7c>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a16      	ldr	r2, [pc, #88]	@ (8006b28 <TIM_OC6_SetConfig+0xc0>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d007      	beq.n	8006ae4 <TIM_OC6_SetConfig+0x7c>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a15      	ldr	r2, [pc, #84]	@ (8006b2c <TIM_OC6_SetConfig+0xc4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d003      	beq.n	8006ae4 <TIM_OC6_SetConfig+0x7c>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a14      	ldr	r2, [pc, #80]	@ (8006b30 <TIM_OC6_SetConfig+0xc8>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d109      	bne.n	8006af8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006aea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	029b      	lsls	r3, r3, #10
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	621a      	str	r2, [r3, #32]
}
 8006b12:	bf00      	nop
 8006b14:	371c      	adds	r7, #28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	40012c00 	.word	0x40012c00
 8006b24:	40013400 	.word	0x40013400
 8006b28:	40014000 	.word	0x40014000
 8006b2c:	40014400 	.word	0x40014400
 8006b30:	40014800 	.word	0x40014800

08006b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f023 0201 	bic.w	r2, r3, #1
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f023 030a 	bic.w	r3, r3, #10
 8006b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	621a      	str	r2, [r3, #32]
}
 8006b86:	bf00      	nop
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b087      	sub	sp, #28
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	f023 0210 	bic.w	r2, r3, #16
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	031b      	lsls	r3, r3, #12
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	621a      	str	r2, [r3, #32]
}
 8006be6:	bf00      	nop
 8006be8:	371c      	adds	r7, #28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f043 0307 	orr.w	r3, r3, #7
 8006c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	609a      	str	r2, [r3, #8]
}
 8006c1c:	bf00      	nop
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	021a      	lsls	r2, r3, #8
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	609a      	str	r2, [r3, #8]
}
 8006c5c:	bf00      	nop
 8006c5e:	371c      	adds	r7, #28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f003 031f 	and.w	r3, r3, #31
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a1a      	ldr	r2, [r3, #32]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	43db      	mvns	r3, r3
 8006c8a:	401a      	ands	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a1a      	ldr	r2, [r3, #32]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f003 031f 	and.w	r3, r3, #31
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	621a      	str	r2, [r3, #32]
}
 8006ca6:	bf00      	nop
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
	...

08006cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e068      	b.n	8006d9e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a2e      	ldr	r2, [pc, #184]	@ (8006dac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d004      	beq.n	8006d00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a2d      	ldr	r2, [pc, #180]	@ (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d108      	bne.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a1e      	ldr	r2, [pc, #120]	@ (8006dac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d01d      	beq.n	8006d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d3e:	d018      	beq.n	8006d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a1b      	ldr	r2, [pc, #108]	@ (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d013      	beq.n	8006d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a1a      	ldr	r2, [pc, #104]	@ (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d00e      	beq.n	8006d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a18      	ldr	r2, [pc, #96]	@ (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d009      	beq.n	8006d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a13      	ldr	r2, [pc, #76]	@ (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d004      	beq.n	8006d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a14      	ldr	r2, [pc, #80]	@ (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d10c      	bne.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	40012c00 	.word	0x40012c00
 8006db0:	40013400 	.word	0x40013400
 8006db4:	40000400 	.word	0x40000400
 8006db8:	40000800 	.word	0x40000800
 8006dbc:	40000c00 	.word	0x40000c00
 8006dc0:	40014000 	.word	0x40014000

08006dc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	e065      	b.n	8006eac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	041b      	lsls	r3, r3, #16
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a16      	ldr	r2, [pc, #88]	@ (8006eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d004      	beq.n	8006e6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a14      	ldr	r2, [pc, #80]	@ (8006ebc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d115      	bne.n	8006e9a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e78:	051b      	lsls	r3, r3, #20
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	69db      	ldr	r3, [r3, #28]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	40012c00 	.word	0x40012c00
 8006ebc:	40013400 	.word	0x40013400

08006ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e040      	b.n	8006f90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d106      	bne.n	8006f24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fa fc74 	bl	800180c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2224      	movs	r2, #36	@ 0x24
 8006f28:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 0201 	bic.w	r2, r2, #1
 8006f38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fe74 	bl	8007c30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fbb9 	bl	80076c0 <UART_SetConfig>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d101      	bne.n	8006f58 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e01b      	b.n	8006f90 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	689a      	ldr	r2, [r3, #8]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0201 	orr.w	r2, r2, #1
 8006f86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fef3 	bl	8007d74 <UART_CheckIdleState>
 8006f8e:	4603      	mov	r3, r0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08a      	sub	sp, #40	@ 0x28
 8006f9c:	af02      	add	r7, sp, #8
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	603b      	str	r3, [r7, #0]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fac:	2b20      	cmp	r3, #32
 8006fae:	d177      	bne.n	80070a0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <HAL_UART_Transmit+0x24>
 8006fb6:	88fb      	ldrh	r3, [r7, #6]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e070      	b.n	80070a2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2221      	movs	r2, #33	@ 0x21
 8006fcc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fce:	f7fa fcdf 	bl	8001990 <HAL_GetTick>
 8006fd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	88fa      	ldrh	r2, [r7, #6]
 8006fd8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	88fa      	ldrh	r2, [r7, #6]
 8006fe0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fec:	d108      	bne.n	8007000 <HAL_UART_Transmit+0x68>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d104      	bne.n	8007000 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	61bb      	str	r3, [r7, #24]
 8006ffe:	e003      	b.n	8007008 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007004:	2300      	movs	r3, #0
 8007006:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007008:	e02f      	b.n	800706a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2200      	movs	r2, #0
 8007012:	2180      	movs	r1, #128	@ 0x80
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 ff55 	bl	8007ec4 <UART_WaitOnFlagUntilTimeout>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d004      	beq.n	800702a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2220      	movs	r2, #32
 8007024:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e03b      	b.n	80070a2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10b      	bne.n	8007048 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	881a      	ldrh	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800703c:	b292      	uxth	r2, r2
 800703e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	3302      	adds	r3, #2
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	e007      	b.n	8007058 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	781a      	ldrb	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	3301      	adds	r3, #1
 8007056:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29a      	uxth	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1c9      	bne.n	800700a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2200      	movs	r2, #0
 800707e:	2140      	movs	r1, #64	@ 0x40
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 ff1f 	bl	8007ec4 <UART_WaitOnFlagUntilTimeout>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d004      	beq.n	8007096 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e005      	b.n	80070a2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2220      	movs	r2, #32
 800709a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800709c:	2300      	movs	r3, #0
 800709e:	e000      	b.n	80070a2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80070a0:	2302      	movs	r3, #2
  }
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3720      	adds	r7, #32
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
	...

080070ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b0ba      	sub	sp, #232	@ 0xe8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80070d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80070da:	4013      	ands	r3, r2
 80070dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80070e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d115      	bne.n	8007114 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80070e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ec:	f003 0320 	and.w	r3, r3, #32
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00f      	beq.n	8007114 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d009      	beq.n	8007114 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 82ae 	beq.w	8007666 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	4798      	blx	r3
      }
      return;
 8007112:	e2a8      	b.n	8007666 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007114:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 8117 	beq.w	800734c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800711e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d106      	bne.n	8007138 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800712a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800712e:	4b85      	ldr	r3, [pc, #532]	@ (8007344 <HAL_UART_IRQHandler+0x298>)
 8007130:	4013      	ands	r3, r2
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 810a 	beq.w	800734c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d011      	beq.n	8007168 <HAL_UART_IRQHandler+0xbc>
 8007144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00b      	beq.n	8007168 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2201      	movs	r2, #1
 8007156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800715e:	f043 0201 	orr.w	r2, r3, #1
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800716c:	f003 0302 	and.w	r3, r3, #2
 8007170:	2b00      	cmp	r3, #0
 8007172:	d011      	beq.n	8007198 <HAL_UART_IRQHandler+0xec>
 8007174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00b      	beq.n	8007198 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2202      	movs	r2, #2
 8007186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800718e:	f043 0204 	orr.w	r2, r3, #4
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800719c:	f003 0304 	and.w	r3, r3, #4
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d011      	beq.n	80071c8 <HAL_UART_IRQHandler+0x11c>
 80071a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00b      	beq.n	80071c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2204      	movs	r2, #4
 80071b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071be:	f043 0202 	orr.w	r2, r3, #2
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d017      	beq.n	8007204 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071d8:	f003 0320 	and.w	r3, r3, #32
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d105      	bne.n	80071ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80071e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00b      	beq.n	8007204 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2208      	movs	r2, #8
 80071f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071fa:	f043 0208 	orr.w	r2, r3, #8
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800720c:	2b00      	cmp	r3, #0
 800720e:	d012      	beq.n	8007236 <HAL_UART_IRQHandler+0x18a>
 8007210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007214:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00c      	beq.n	8007236 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007224:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800722c:	f043 0220 	orr.w	r2, r3, #32
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 8214 	beq.w	800766a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00d      	beq.n	800726a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800724e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007252:	f003 0320 	and.w	r3, r3, #32
 8007256:	2b00      	cmp	r3, #0
 8007258:	d007      	beq.n	800726a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007270:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800727e:	2b40      	cmp	r3, #64	@ 0x40
 8007280:	d005      	beq.n	800728e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007286:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800728a:	2b00      	cmp	r3, #0
 800728c:	d04f      	beq.n	800732e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fe7f 	bl	8007f92 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800729e:	2b40      	cmp	r3, #64	@ 0x40
 80072a0:	d141      	bne.n	8007326 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3308      	adds	r3, #8
 80072a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80072b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3308      	adds	r3, #8
 80072ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80072ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80072d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80072da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80072e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1d9      	bne.n	80072a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d013      	beq.n	800731e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072fa:	4a13      	ldr	r2, [pc, #76]	@ (8007348 <HAL_UART_IRQHandler+0x29c>)
 80072fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007302:	4618      	mov	r0, r3
 8007304:	f7fb fd50 	bl	8002da8 <HAL_DMA_Abort_IT>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d017      	beq.n	800733e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007318:	4610      	mov	r0, r2
 800731a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800731c:	e00f      	b.n	800733e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f9b8 	bl	8007694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007324:	e00b      	b.n	800733e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f9b4 	bl	8007694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732c:	e007      	b.n	800733e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f9b0 	bl	8007694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800733c:	e195      	b.n	800766a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800733e:	bf00      	nop
    return;
 8007340:	e193      	b.n	800766a <HAL_UART_IRQHandler+0x5be>
 8007342:	bf00      	nop
 8007344:	04000120 	.word	0x04000120
 8007348:	0800805b 	.word	0x0800805b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007350:	2b01      	cmp	r3, #1
 8007352:	f040 814e 	bne.w	80075f2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800735a:	f003 0310 	and.w	r3, r3, #16
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 8147 	beq.w	80075f2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007368:	f003 0310 	and.w	r3, r3, #16
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 8140 	beq.w	80075f2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2210      	movs	r2, #16
 8007378:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007384:	2b40      	cmp	r3, #64	@ 0x40
 8007386:	f040 80b8 	bne.w	80074fa <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007396:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 8167 	beq.w	800766e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80073a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073aa:	429a      	cmp	r2, r3
 80073ac:	f080 815f 	bcs.w	800766e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0320 	and.w	r3, r3, #32
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f040 8086 	bne.w	80074d8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80073d8:	e853 3f00 	ldrex	r3, [r3]
 80073dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80073e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	461a      	mov	r2, r3
 80073f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80073f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80073fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007402:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800740e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1da      	bne.n	80073cc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3308      	adds	r3, #8
 800741c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007426:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007428:	f023 0301 	bic.w	r3, r3, #1
 800742c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3308      	adds	r3, #8
 8007436:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800743a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800743e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007442:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800744c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e1      	bne.n	8007416 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3308      	adds	r3, #8
 8007458:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3308      	adds	r3, #8
 8007472:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007476:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007478:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800747c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e3      	bne.n	8007452 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074a0:	e853 3f00 	ldrex	r3, [r3]
 80074a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074a8:	f023 0310 	bic.w	r3, r3, #16
 80074ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	461a      	mov	r2, r3
 80074b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074c2:	e841 2300 	strex	r3, r2, [r1]
 80074c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1e4      	bne.n	8007498 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fb fc2a 	bl	8002d2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f8d8 	bl	80076a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074f8:	e0b9      	b.n	800766e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007506:	b29b      	uxth	r3, r3
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007514:	b29b      	uxth	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	f000 80ab 	beq.w	8007672 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800751c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 80a6 	beq.w	8007672 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007536:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800753a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007548:	647b      	str	r3, [r7, #68]	@ 0x44
 800754a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800754e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007550:	e841 2300 	strex	r3, r2, [r1]
 8007554:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e4      	bne.n	8007526 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3308      	adds	r3, #8
 8007562:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	623b      	str	r3, [r7, #32]
   return(result);
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	f023 0301 	bic.w	r3, r3, #1
 8007572:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3308      	adds	r3, #8
 800757c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007580:	633a      	str	r2, [r7, #48]	@ 0x30
 8007582:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800758e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e3      	bne.n	800755c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2220      	movs	r2, #32
 8007598:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f023 0310 	bic.w	r3, r3, #16
 80075bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	461a      	mov	r2, r3
 80075c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80075ca:	61fb      	str	r3, [r7, #28]
 80075cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	69b9      	ldr	r1, [r7, #24]
 80075d0:	69fa      	ldr	r2, [r7, #28]
 80075d2:	e841 2300 	strex	r3, r2, [r1]
 80075d6:	617b      	str	r3, [r7, #20]
   return(result);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e4      	bne.n	80075a8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2202      	movs	r2, #2
 80075e2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f85c 	bl	80076a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075f0:	e03f      	b.n	8007672 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80075f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00e      	beq.n	800761c <HAL_UART_IRQHandler+0x570>
 80075fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d008      	beq.n	800761c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007612:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fd60 	bl	80080da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800761a:	e02d      	b.n	8007678 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800761c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00e      	beq.n	8007646 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800762c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007630:	2b00      	cmp	r3, #0
 8007632:	d008      	beq.n	8007646 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007638:	2b00      	cmp	r3, #0
 800763a:	d01c      	beq.n	8007676 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	4798      	blx	r3
    }
    return;
 8007644:	e017      	b.n	8007676 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800764a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800764e:	2b00      	cmp	r3, #0
 8007650:	d012      	beq.n	8007678 <HAL_UART_IRQHandler+0x5cc>
 8007652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00c      	beq.n	8007678 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fd11 	bl	8008086 <UART_EndTransmit_IT>
    return;
 8007664:	e008      	b.n	8007678 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007666:	bf00      	nop
 8007668:	e006      	b.n	8007678 <HAL_UART_IRQHandler+0x5cc>
    return;
 800766a:	bf00      	nop
 800766c:	e004      	b.n	8007678 <HAL_UART_IRQHandler+0x5cc>
      return;
 800766e:	bf00      	nop
 8007670:	e002      	b.n	8007678 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007672:	bf00      	nop
 8007674:	e000      	b.n	8007678 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007676:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007678:	37e8      	adds	r7, #232	@ 0xe8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop

08007680 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076c4:	b08a      	sub	sp, #40	@ 0x28
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	431a      	orrs	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	431a      	orrs	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	4ba4      	ldr	r3, [pc, #656]	@ (8007980 <UART_SetConfig+0x2c0>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	6812      	ldr	r2, [r2, #0]
 80076f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80076f8:	430b      	orrs	r3, r1
 80076fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	68da      	ldr	r2, [r3, #12]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a99      	ldr	r2, [pc, #612]	@ (8007984 <UART_SetConfig+0x2c4>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d004      	beq.n	800772c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007728:	4313      	orrs	r3, r2
 800772a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800773c:	430a      	orrs	r2, r1
 800773e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a90      	ldr	r2, [pc, #576]	@ (8007988 <UART_SetConfig+0x2c8>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d126      	bne.n	8007798 <UART_SetConfig+0xd8>
 800774a:	4b90      	ldr	r3, [pc, #576]	@ (800798c <UART_SetConfig+0x2cc>)
 800774c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007750:	f003 0303 	and.w	r3, r3, #3
 8007754:	2b03      	cmp	r3, #3
 8007756:	d81b      	bhi.n	8007790 <UART_SetConfig+0xd0>
 8007758:	a201      	add	r2, pc, #4	@ (adr r2, 8007760 <UART_SetConfig+0xa0>)
 800775a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775e:	bf00      	nop
 8007760:	08007771 	.word	0x08007771
 8007764:	08007781 	.word	0x08007781
 8007768:	08007779 	.word	0x08007779
 800776c:	08007789 	.word	0x08007789
 8007770:	2301      	movs	r3, #1
 8007772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007776:	e116      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007778:	2302      	movs	r3, #2
 800777a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800777e:	e112      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007780:	2304      	movs	r3, #4
 8007782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007786:	e10e      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007788:	2308      	movs	r3, #8
 800778a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800778e:	e10a      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007790:	2310      	movs	r3, #16
 8007792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007796:	e106      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a7c      	ldr	r2, [pc, #496]	@ (8007990 <UART_SetConfig+0x2d0>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d138      	bne.n	8007814 <UART_SetConfig+0x154>
 80077a2:	4b7a      	ldr	r3, [pc, #488]	@ (800798c <UART_SetConfig+0x2cc>)
 80077a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077a8:	f003 030c 	and.w	r3, r3, #12
 80077ac:	2b0c      	cmp	r3, #12
 80077ae:	d82d      	bhi.n	800780c <UART_SetConfig+0x14c>
 80077b0:	a201      	add	r2, pc, #4	@ (adr r2, 80077b8 <UART_SetConfig+0xf8>)
 80077b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b6:	bf00      	nop
 80077b8:	080077ed 	.word	0x080077ed
 80077bc:	0800780d 	.word	0x0800780d
 80077c0:	0800780d 	.word	0x0800780d
 80077c4:	0800780d 	.word	0x0800780d
 80077c8:	080077fd 	.word	0x080077fd
 80077cc:	0800780d 	.word	0x0800780d
 80077d0:	0800780d 	.word	0x0800780d
 80077d4:	0800780d 	.word	0x0800780d
 80077d8:	080077f5 	.word	0x080077f5
 80077dc:	0800780d 	.word	0x0800780d
 80077e0:	0800780d 	.word	0x0800780d
 80077e4:	0800780d 	.word	0x0800780d
 80077e8:	08007805 	.word	0x08007805
 80077ec:	2300      	movs	r3, #0
 80077ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077f2:	e0d8      	b.n	80079a6 <UART_SetConfig+0x2e6>
 80077f4:	2302      	movs	r3, #2
 80077f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077fa:	e0d4      	b.n	80079a6 <UART_SetConfig+0x2e6>
 80077fc:	2304      	movs	r3, #4
 80077fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007802:	e0d0      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007804:	2308      	movs	r3, #8
 8007806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800780a:	e0cc      	b.n	80079a6 <UART_SetConfig+0x2e6>
 800780c:	2310      	movs	r3, #16
 800780e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007812:	e0c8      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a5e      	ldr	r2, [pc, #376]	@ (8007994 <UART_SetConfig+0x2d4>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d125      	bne.n	800786a <UART_SetConfig+0x1aa>
 800781e:	4b5b      	ldr	r3, [pc, #364]	@ (800798c <UART_SetConfig+0x2cc>)
 8007820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007824:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007828:	2b30      	cmp	r3, #48	@ 0x30
 800782a:	d016      	beq.n	800785a <UART_SetConfig+0x19a>
 800782c:	2b30      	cmp	r3, #48	@ 0x30
 800782e:	d818      	bhi.n	8007862 <UART_SetConfig+0x1a2>
 8007830:	2b20      	cmp	r3, #32
 8007832:	d00a      	beq.n	800784a <UART_SetConfig+0x18a>
 8007834:	2b20      	cmp	r3, #32
 8007836:	d814      	bhi.n	8007862 <UART_SetConfig+0x1a2>
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <UART_SetConfig+0x182>
 800783c:	2b10      	cmp	r3, #16
 800783e:	d008      	beq.n	8007852 <UART_SetConfig+0x192>
 8007840:	e00f      	b.n	8007862 <UART_SetConfig+0x1a2>
 8007842:	2300      	movs	r3, #0
 8007844:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007848:	e0ad      	b.n	80079a6 <UART_SetConfig+0x2e6>
 800784a:	2302      	movs	r3, #2
 800784c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007850:	e0a9      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007852:	2304      	movs	r3, #4
 8007854:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007858:	e0a5      	b.n	80079a6 <UART_SetConfig+0x2e6>
 800785a:	2308      	movs	r3, #8
 800785c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007860:	e0a1      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007862:	2310      	movs	r3, #16
 8007864:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007868:	e09d      	b.n	80079a6 <UART_SetConfig+0x2e6>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a4a      	ldr	r2, [pc, #296]	@ (8007998 <UART_SetConfig+0x2d8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d125      	bne.n	80078c0 <UART_SetConfig+0x200>
 8007874:	4b45      	ldr	r3, [pc, #276]	@ (800798c <UART_SetConfig+0x2cc>)
 8007876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800787a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800787e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007880:	d016      	beq.n	80078b0 <UART_SetConfig+0x1f0>
 8007882:	2bc0      	cmp	r3, #192	@ 0xc0
 8007884:	d818      	bhi.n	80078b8 <UART_SetConfig+0x1f8>
 8007886:	2b80      	cmp	r3, #128	@ 0x80
 8007888:	d00a      	beq.n	80078a0 <UART_SetConfig+0x1e0>
 800788a:	2b80      	cmp	r3, #128	@ 0x80
 800788c:	d814      	bhi.n	80078b8 <UART_SetConfig+0x1f8>
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <UART_SetConfig+0x1d8>
 8007892:	2b40      	cmp	r3, #64	@ 0x40
 8007894:	d008      	beq.n	80078a8 <UART_SetConfig+0x1e8>
 8007896:	e00f      	b.n	80078b8 <UART_SetConfig+0x1f8>
 8007898:	2300      	movs	r3, #0
 800789a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800789e:	e082      	b.n	80079a6 <UART_SetConfig+0x2e6>
 80078a0:	2302      	movs	r3, #2
 80078a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078a6:	e07e      	b.n	80079a6 <UART_SetConfig+0x2e6>
 80078a8:	2304      	movs	r3, #4
 80078aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078ae:	e07a      	b.n	80079a6 <UART_SetConfig+0x2e6>
 80078b0:	2308      	movs	r3, #8
 80078b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078b6:	e076      	b.n	80079a6 <UART_SetConfig+0x2e6>
 80078b8:	2310      	movs	r3, #16
 80078ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078be:	e072      	b.n	80079a6 <UART_SetConfig+0x2e6>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a35      	ldr	r2, [pc, #212]	@ (800799c <UART_SetConfig+0x2dc>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d12a      	bne.n	8007920 <UART_SetConfig+0x260>
 80078ca:	4b30      	ldr	r3, [pc, #192]	@ (800798c <UART_SetConfig+0x2cc>)
 80078cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078d8:	d01a      	beq.n	8007910 <UART_SetConfig+0x250>
 80078da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078de:	d81b      	bhi.n	8007918 <UART_SetConfig+0x258>
 80078e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078e4:	d00c      	beq.n	8007900 <UART_SetConfig+0x240>
 80078e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078ea:	d815      	bhi.n	8007918 <UART_SetConfig+0x258>
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d003      	beq.n	80078f8 <UART_SetConfig+0x238>
 80078f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078f4:	d008      	beq.n	8007908 <UART_SetConfig+0x248>
 80078f6:	e00f      	b.n	8007918 <UART_SetConfig+0x258>
 80078f8:	2300      	movs	r3, #0
 80078fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078fe:	e052      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007900:	2302      	movs	r3, #2
 8007902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007906:	e04e      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007908:	2304      	movs	r3, #4
 800790a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800790e:	e04a      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007910:	2308      	movs	r3, #8
 8007912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007916:	e046      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007918:	2310      	movs	r3, #16
 800791a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800791e:	e042      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a17      	ldr	r2, [pc, #92]	@ (8007984 <UART_SetConfig+0x2c4>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d13a      	bne.n	80079a0 <UART_SetConfig+0x2e0>
 800792a:	4b18      	ldr	r3, [pc, #96]	@ (800798c <UART_SetConfig+0x2cc>)
 800792c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007930:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007934:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007938:	d01a      	beq.n	8007970 <UART_SetConfig+0x2b0>
 800793a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800793e:	d81b      	bhi.n	8007978 <UART_SetConfig+0x2b8>
 8007940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007944:	d00c      	beq.n	8007960 <UART_SetConfig+0x2a0>
 8007946:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800794a:	d815      	bhi.n	8007978 <UART_SetConfig+0x2b8>
 800794c:	2b00      	cmp	r3, #0
 800794e:	d003      	beq.n	8007958 <UART_SetConfig+0x298>
 8007950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007954:	d008      	beq.n	8007968 <UART_SetConfig+0x2a8>
 8007956:	e00f      	b.n	8007978 <UART_SetConfig+0x2b8>
 8007958:	2300      	movs	r3, #0
 800795a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800795e:	e022      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007960:	2302      	movs	r3, #2
 8007962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007966:	e01e      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007968:	2304      	movs	r3, #4
 800796a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800796e:	e01a      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007970:	2308      	movs	r3, #8
 8007972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007976:	e016      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007978:	2310      	movs	r3, #16
 800797a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800797e:	e012      	b.n	80079a6 <UART_SetConfig+0x2e6>
 8007980:	efff69f3 	.word	0xefff69f3
 8007984:	40008000 	.word	0x40008000
 8007988:	40013800 	.word	0x40013800
 800798c:	40021000 	.word	0x40021000
 8007990:	40004400 	.word	0x40004400
 8007994:	40004800 	.word	0x40004800
 8007998:	40004c00 	.word	0x40004c00
 800799c:	40005000 	.word	0x40005000
 80079a0:	2310      	movs	r3, #16
 80079a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a9f      	ldr	r2, [pc, #636]	@ (8007c28 <UART_SetConfig+0x568>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d17a      	bne.n	8007aa6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80079b4:	2b08      	cmp	r3, #8
 80079b6:	d824      	bhi.n	8007a02 <UART_SetConfig+0x342>
 80079b8:	a201      	add	r2, pc, #4	@ (adr r2, 80079c0 <UART_SetConfig+0x300>)
 80079ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079be:	bf00      	nop
 80079c0:	080079e5 	.word	0x080079e5
 80079c4:	08007a03 	.word	0x08007a03
 80079c8:	080079ed 	.word	0x080079ed
 80079cc:	08007a03 	.word	0x08007a03
 80079d0:	080079f3 	.word	0x080079f3
 80079d4:	08007a03 	.word	0x08007a03
 80079d8:	08007a03 	.word	0x08007a03
 80079dc:	08007a03 	.word	0x08007a03
 80079e0:	080079fb 	.word	0x080079fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079e4:	f7fc fef6 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 80079e8:	61f8      	str	r0, [r7, #28]
        break;
 80079ea:	e010      	b.n	8007a0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079ec:	4b8f      	ldr	r3, [pc, #572]	@ (8007c2c <UART_SetConfig+0x56c>)
 80079ee:	61fb      	str	r3, [r7, #28]
        break;
 80079f0:	e00d      	b.n	8007a0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079f2:	f7fc fe57 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 80079f6:	61f8      	str	r0, [r7, #28]
        break;
 80079f8:	e009      	b.n	8007a0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079fe:	61fb      	str	r3, [r7, #28]
        break;
 8007a00:	e005      	b.n	8007a0e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 80fb 	beq.w	8007c0c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	4413      	add	r3, r2
 8007a20:	69fa      	ldr	r2, [r7, #28]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d305      	bcc.n	8007a32 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a2c:	69fa      	ldr	r2, [r7, #28]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d903      	bls.n	8007a3a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a38:	e0e8      	b.n	8007c0c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	461c      	mov	r4, r3
 8007a40:	4615      	mov	r5, r2
 8007a42:	f04f 0200 	mov.w	r2, #0
 8007a46:	f04f 0300 	mov.w	r3, #0
 8007a4a:	022b      	lsls	r3, r5, #8
 8007a4c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007a50:	0222      	lsls	r2, r4, #8
 8007a52:	68f9      	ldr	r1, [r7, #12]
 8007a54:	6849      	ldr	r1, [r1, #4]
 8007a56:	0849      	lsrs	r1, r1, #1
 8007a58:	2000      	movs	r0, #0
 8007a5a:	4688      	mov	r8, r1
 8007a5c:	4681      	mov	r9, r0
 8007a5e:	eb12 0a08 	adds.w	sl, r2, r8
 8007a62:	eb43 0b09 	adc.w	fp, r3, r9
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	603b      	str	r3, [r7, #0]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a74:	4650      	mov	r0, sl
 8007a76:	4659      	mov	r1, fp
 8007a78:	f7f8 fbfa 	bl	8000270 <__aeabi_uldivmod>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4613      	mov	r3, r2
 8007a82:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a8a:	d308      	bcc.n	8007a9e <UART_SetConfig+0x3de>
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a92:	d204      	bcs.n	8007a9e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	60da      	str	r2, [r3, #12]
 8007a9c:	e0b6      	b.n	8007c0c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007aa4:	e0b2      	b.n	8007c0c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007aae:	d15e      	bne.n	8007b6e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007ab0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007ab4:	2b08      	cmp	r3, #8
 8007ab6:	d828      	bhi.n	8007b0a <UART_SetConfig+0x44a>
 8007ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac0 <UART_SetConfig+0x400>)
 8007aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abe:	bf00      	nop
 8007ac0:	08007ae5 	.word	0x08007ae5
 8007ac4:	08007aed 	.word	0x08007aed
 8007ac8:	08007af5 	.word	0x08007af5
 8007acc:	08007b0b 	.word	0x08007b0b
 8007ad0:	08007afb 	.word	0x08007afb
 8007ad4:	08007b0b 	.word	0x08007b0b
 8007ad8:	08007b0b 	.word	0x08007b0b
 8007adc:	08007b0b 	.word	0x08007b0b
 8007ae0:	08007b03 	.word	0x08007b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ae4:	f7fc fe76 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8007ae8:	61f8      	str	r0, [r7, #28]
        break;
 8007aea:	e014      	b.n	8007b16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007aec:	f7fc fe88 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 8007af0:	61f8      	str	r0, [r7, #28]
        break;
 8007af2:	e010      	b.n	8007b16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007af4:	4b4d      	ldr	r3, [pc, #308]	@ (8007c2c <UART_SetConfig+0x56c>)
 8007af6:	61fb      	str	r3, [r7, #28]
        break;
 8007af8:	e00d      	b.n	8007b16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007afa:	f7fc fdd3 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 8007afe:	61f8      	str	r0, [r7, #28]
        break;
 8007b00:	e009      	b.n	8007b16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b06:	61fb      	str	r3, [r7, #28]
        break;
 8007b08:	e005      	b.n	8007b16 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007b14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d077      	beq.n	8007c0c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	005a      	lsls	r2, r3, #1
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	085b      	lsrs	r3, r3, #1
 8007b26:	441a      	add	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	2b0f      	cmp	r3, #15
 8007b36:	d916      	bls.n	8007b66 <UART_SetConfig+0x4a6>
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b3e:	d212      	bcs.n	8007b66 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	f023 030f 	bic.w	r3, r3, #15
 8007b48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	085b      	lsrs	r3, r3, #1
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	f003 0307 	and.w	r3, r3, #7
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	8afb      	ldrh	r3, [r7, #22]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	8afa      	ldrh	r2, [r7, #22]
 8007b62:	60da      	str	r2, [r3, #12]
 8007b64:	e052      	b.n	8007c0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007b6c:	e04e      	b.n	8007c0c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b72:	2b08      	cmp	r3, #8
 8007b74:	d827      	bhi.n	8007bc6 <UART_SetConfig+0x506>
 8007b76:	a201      	add	r2, pc, #4	@ (adr r2, 8007b7c <UART_SetConfig+0x4bc>)
 8007b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7c:	08007ba1 	.word	0x08007ba1
 8007b80:	08007ba9 	.word	0x08007ba9
 8007b84:	08007bb1 	.word	0x08007bb1
 8007b88:	08007bc7 	.word	0x08007bc7
 8007b8c:	08007bb7 	.word	0x08007bb7
 8007b90:	08007bc7 	.word	0x08007bc7
 8007b94:	08007bc7 	.word	0x08007bc7
 8007b98:	08007bc7 	.word	0x08007bc7
 8007b9c:	08007bbf 	.word	0x08007bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ba0:	f7fc fe18 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8007ba4:	61f8      	str	r0, [r7, #28]
        break;
 8007ba6:	e014      	b.n	8007bd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ba8:	f7fc fe2a 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 8007bac:	61f8      	str	r0, [r7, #28]
        break;
 8007bae:	e010      	b.n	8007bd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8007c2c <UART_SetConfig+0x56c>)
 8007bb2:	61fb      	str	r3, [r7, #28]
        break;
 8007bb4:	e00d      	b.n	8007bd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bb6:	f7fc fd75 	bl	80046a4 <HAL_RCC_GetSysClockFreq>
 8007bba:	61f8      	str	r0, [r7, #28]
        break;
 8007bbc:	e009      	b.n	8007bd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bc2:	61fb      	str	r3, [r7, #28]
        break;
 8007bc4:	e005      	b.n	8007bd2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007bd0:	bf00      	nop
    }

    if (pclk != 0U)
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d019      	beq.n	8007c0c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	085a      	lsrs	r2, r3, #1
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	441a      	add	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	2b0f      	cmp	r3, #15
 8007bf0:	d909      	bls.n	8007c06 <UART_SetConfig+0x546>
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bf8:	d205      	bcs.n	8007c06 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	60da      	str	r2, [r3, #12]
 8007c04:	e002      	b.n	8007c0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007c18:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3728      	adds	r7, #40	@ 0x28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c26:	bf00      	nop
 8007c28:	40008000 	.word	0x40008000
 8007c2c:	00f42400 	.word	0x00f42400

08007c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c3c:	f003 0308 	and.w	r3, r3, #8
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00a      	beq.n	8007c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00a      	beq.n	8007c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	430a      	orrs	r2, r1
 8007c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00a      	beq.n	8007c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca2:	f003 0304 	and.w	r3, r3, #4
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00a      	beq.n	8007cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc4:	f003 0310 	and.w	r3, r3, #16
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00a      	beq.n	8007ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce6:	f003 0320 	and.w	r3, r3, #32
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	430a      	orrs	r2, r1
 8007d02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d01a      	beq.n	8007d46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	430a      	orrs	r2, r1
 8007d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d2e:	d10a      	bne.n	8007d46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	605a      	str	r2, [r3, #4]
  }
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b098      	sub	sp, #96	@ 0x60
 8007d78:	af02      	add	r7, sp, #8
 8007d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d84:	f7f9 fe04 	bl	8001990 <HAL_GetTick>
 8007d88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0308 	and.w	r3, r3, #8
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d12e      	bne.n	8007df6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007da0:	2200      	movs	r2, #0
 8007da2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f88c 	bl	8007ec4 <UART_WaitOnFlagUntilTimeout>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d021      	beq.n	8007df6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dd2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e6      	bne.n	8007db2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2220      	movs	r2, #32
 8007de8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e062      	b.n	8007ebc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0304 	and.w	r3, r3, #4
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	d149      	bne.n	8007e98 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f856 	bl	8007ec4 <UART_WaitOnFlagUntilTimeout>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d03c      	beq.n	8007e98 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e26:	e853 3f00 	ldrex	r3, [r3]
 8007e2a:	623b      	str	r3, [r7, #32]
   return(result);
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e44:	e841 2300 	strex	r3, r2, [r1]
 8007e48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1e6      	bne.n	8007e1e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3308      	adds	r3, #8
 8007e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	e853 3f00 	ldrex	r3, [r3]
 8007e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f023 0301 	bic.w	r3, r3, #1
 8007e66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3308      	adds	r3, #8
 8007e6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e70:	61fa      	str	r2, [r7, #28]
 8007e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e74:	69b9      	ldr	r1, [r7, #24]
 8007e76:	69fa      	ldr	r2, [r7, #28]
 8007e78:	e841 2300 	strex	r3, r2, [r1]
 8007e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e5      	bne.n	8007e50 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2220      	movs	r2, #32
 8007e88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e011      	b.n	8007ebc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3758      	adds	r7, #88	@ 0x58
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ed4:	e049      	b.n	8007f6a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007edc:	d045      	beq.n	8007f6a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ede:	f7f9 fd57 	bl	8001990 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d302      	bcc.n	8007ef4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e048      	b.n	8007f8a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0304 	and.w	r3, r3, #4
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d031      	beq.n	8007f6a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	69db      	ldr	r3, [r3, #28]
 8007f0c:	f003 0308 	and.w	r3, r3, #8
 8007f10:	2b08      	cmp	r3, #8
 8007f12:	d110      	bne.n	8007f36 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2208      	movs	r2, #8
 8007f1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f000 f838 	bl	8007f92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2208      	movs	r2, #8
 8007f26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e029      	b.n	8007f8a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f44:	d111      	bne.n	8007f6a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 f81e 	bl	8007f92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e00f      	b.n	8007f8a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	69da      	ldr	r2, [r3, #28]
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	4013      	ands	r3, r2
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	bf0c      	ite	eq
 8007f7a:	2301      	moveq	r3, #1
 8007f7c:	2300      	movne	r3, #0
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	461a      	mov	r2, r3
 8007f82:	79fb      	ldrb	r3, [r7, #7]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d0a6      	beq.n	8007ed6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b095      	sub	sp, #84	@ 0x54
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fa2:	e853 3f00 	ldrex	r3, [r3]
 8007fa6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007faa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fc0:	e841 2300 	strex	r3, r2, [r1]
 8007fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e6      	bne.n	8007f9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	e853 3f00 	ldrex	r3, [r3]
 8007fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	f023 0301 	bic.w	r3, r3, #1
 8007fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3308      	adds	r3, #8
 8007fea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ff4:	e841 2300 	strex	r3, r2, [r1]
 8007ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e5      	bne.n	8007fcc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008004:	2b01      	cmp	r3, #1
 8008006:	d118      	bne.n	800803a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	e853 3f00 	ldrex	r3, [r3]
 8008014:	60bb      	str	r3, [r7, #8]
   return(result);
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	f023 0310 	bic.w	r3, r3, #16
 800801c:	647b      	str	r3, [r7, #68]	@ 0x44
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008026:	61bb      	str	r3, [r7, #24]
 8008028:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802a:	6979      	ldr	r1, [r7, #20]
 800802c:	69ba      	ldr	r2, [r7, #24]
 800802e:	e841 2300 	strex	r3, r2, [r1]
 8008032:	613b      	str	r3, [r7, #16]
   return(result);
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1e6      	bne.n	8008008 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2220      	movs	r2, #32
 800803e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800804e:	bf00      	nop
 8008050:	3754      	adds	r7, #84	@ 0x54
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008066:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f7ff fb0b 	bl	8007694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800807e:	bf00      	nop
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b088      	sub	sp, #32
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	e853 3f00 	ldrex	r3, [r3]
 800809a:	60bb      	str	r3, [r7, #8]
   return(result);
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080a2:	61fb      	str	r3, [r7, #28]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	461a      	mov	r2, r3
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	61bb      	str	r3, [r7, #24]
 80080ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b0:	6979      	ldr	r1, [r7, #20]
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	e841 2300 	strex	r3, r2, [r1]
 80080b8:	613b      	str	r3, [r7, #16]
   return(result);
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e6      	bne.n	800808e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2220      	movs	r2, #32
 80080c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7ff fad7 	bl	8007680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080d2:	bf00      	nop
 80080d4:	3720      	adds	r7, #32
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <elcd16x2_init>:
static LCD16x2_Result elcd16x2_idisplay(ts_lcd16x2 *lcdstr);
static LCD16x2_Result elcd16x2_inoDisplay(ts_lcd16x2 *lcdstr);
static LCD16x2_Result elcd16x2_isetCursor(ts_lcd16x2 *lcdstr, uint8_t col, uint8_t row);

LCD16x2_Result elcd16x2_init(ts_lcd16x2 *lcdstr)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
	LCD16x2_Result eResult = LCD16x2_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
	lcdstr->displaycontrol=0;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	725a      	strb	r2, [r3, #9]
	lcdstr->displaymode=0;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	729a      	strb	r2, [r3, #10]
	lcdstr->initialized=0;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	72da      	strb	r2, [r3, #11]
	lcdstr->numlines=0;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	731a      	strb	r2, [r3, #12]
	lcdstr->currline=0;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	735a      	strb	r2, [r3, #13]

    if (lcdstr->u8lines > 1) {
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	795b      	ldrb	r3, [r3, #5]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d906      	bls.n	800812e <elcd16x2_init+0x40>
    	lcdstr->displayfunction |= LCD_2LINE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	7a1b      	ldrb	r3, [r3, #8]
 8008124:	f043 0308 	orr.w	r3, r3, #8
 8008128:	b2da      	uxtb	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	721a      	strb	r2, [r3, #8]
    }
    lcdstr->numlines = lcdstr->u8lines;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	795a      	ldrb	r2, [r3, #5]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	731a      	strb	r2, [r3, #12]
    lcdstr->currline = 0;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	735a      	strb	r2, [r3, #13]

    // for some 1 line displays you can select a 10 pixel high font
    if ((lcdstr->u8dotsize != 0) && (lcdstr->u8lines == 1)) {
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	799b      	ldrb	r3, [r3, #6]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00a      	beq.n	800815a <elcd16x2_init+0x6c>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	795b      	ldrb	r3, [r3, #5]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d106      	bne.n	800815a <elcd16x2_init+0x6c>
    	lcdstr->displayfunction |= LCD_5x10DOTS;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	7a1b      	ldrb	r3, [r3, #8]
 8008150:	f043 0304 	orr.w	r3, r3, #4
 8008154:	b2da      	uxtb	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	721a      	strb	r2, [r3, #8]
    }

    HAL_Delay(50);
 800815a:	2032      	movs	r0, #50	@ 0x32
 800815c:	f7f9 fc24 	bl	80019a8 <HAL_Delay>

    // Send function set command sequence
    eResult = elcd16x2_icommand(lcdstr, LCD16x2_FUNCTIONSET | lcdstr->displayfunction);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	7a1b      	ldrb	r3, [r3, #8]
 8008164:	f043 0320 	orr.w	r3, r3, #32
 8008168:	b2db      	uxtb	r3, r3
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f8fd 	bl	800836c <elcd16x2_icommand>
 8008172:	4603      	mov	r3, r0
 8008174:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(5);  // wait more than 4.1ms
 8008176:	2005      	movs	r0, #5
 8008178:	f7f9 fc16 	bl	80019a8 <HAL_Delay>

    // second try
    eResult = elcd16x2_icommand(lcdstr, LCD16x2_FUNCTIONSET | lcdstr->displayfunction);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	7a1b      	ldrb	r3, [r3, #8]
 8008180:	f043 0320 	orr.w	r3, r3, #32
 8008184:	b2db      	uxtb	r3, r3
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f8ef 	bl	800836c <elcd16x2_icommand>
 800818e:	4603      	mov	r3, r0
 8008190:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1);
 8008192:	2001      	movs	r0, #1
 8008194:	f7f9 fc08 	bl	80019a8 <HAL_Delay>

    // third go
    eResult = elcd16x2_icommand(lcdstr, LCD16x2_FUNCTIONSET | lcdstr->displayfunction);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	7a1b      	ldrb	r3, [r3, #8]
 800819c:	f043 0320 	orr.w	r3, r3, #32
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f8e1 	bl	800836c <elcd16x2_icommand>
 80081aa:	4603      	mov	r3, r0
 80081ac:	73fb      	strb	r3, [r7, #15]


    // finally, set # lines, font size, etc.
    eResult = elcd16x2_icommand(lcdstr, LCD16x2_FUNCTIONSET | lcdstr->displayfunction);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	7a1b      	ldrb	r3, [r3, #8]
 80081b2:	f043 0320 	orr.w	r3, r3, #32
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	4619      	mov	r1, r3
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f8d6 	bl	800836c <elcd16x2_icommand>
 80081c0:	4603      	mov	r3, r0
 80081c2:	73fb      	strb	r3, [r7, #15]

    // turn the display on with no cursor or blinking default
    lcdstr->displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2204      	movs	r2, #4
 80081c8:	725a      	strb	r2, [r3, #9]
    eResult = elcd16x2_idisplay(lcdstr);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f8f0 	bl	80083b0 <elcd16x2_idisplay>
 80081d0:	4603      	mov	r3, r0
 80081d2:	73fb      	strb	r3, [r7, #15]

    // clear it off
    eResult = elcd16x2_clear(lcdstr);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f86e 	bl	80082b6 <elcd16x2_clear>
 80081da:	4603      	mov	r3, r0
 80081dc:	73fb      	strb	r3, [r7, #15]

    lcdstr->displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2202      	movs	r2, #2
 80081e2:	729a      	strb	r2, [r3, #10]
    // set the entry mode
    eResult = elcd16x2_icommand(lcdstr, LCD16x2_ENTRYMODESET | lcdstr->displaymode);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	7a9b      	ldrb	r3, [r3, #10]
 80081e8:	f043 0304 	orr.w	r3, r3, #4
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f8bb 	bl	800836c <elcd16x2_icommand>
 80081f6:	4603      	mov	r3, r0
 80081f8:	73fb      	strb	r3, [r7, #15]
    return eResult;
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <elcd16x2_write>:

LCD16x2_Result elcd16x2_write(ts_lcd16x2 *lcdstr, uint8_t value)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af02      	add	r7, sp, #8
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	460b      	mov	r3, r1
 800820e:	70fb      	strb	r3, [r7, #3]
	LCD16x2_Result eResult = LCD16x2_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	73fb      	strb	r3, [r7, #15]
    unsigned char dta[2] = {0x40, value};
 8008214:	2340      	movs	r3, #64	@ 0x40
 8008216:	733b      	strb	r3, [r7, #12]
 8008218:	78fb      	ldrb	r3, [r7, #3]
 800821a:	737b      	strb	r3, [r7, #13]
    if(HAL_I2C_Master_Transmit(lcdstr->hi2c, lcdstr->u8adress, dta, 2, 100)!=HAL_OK)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6818      	ldr	r0, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	79db      	ldrb	r3, [r3, #7]
 8008224:	4619      	mov	r1, r3
 8008226:	f107 020c 	add.w	r2, r7, #12
 800822a:	2364      	movs	r3, #100	@ 0x64
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	2302      	movs	r3, #2
 8008230:	f7fb f938 	bl	80034a4 <HAL_I2C_Master_Transmit>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <elcd16x2_write+0x3a>
    {
    	eResult = LCD16x2_INTERNAL_ERROR;
 800823a:	2302      	movs	r3, #2
 800823c:	73fb      	strb	r3, [r7, #15]
    }
    return eResult;
 800823e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <elcd16x2_writeMsg>:

LCD16x2_Result elcd16x2_writeMsg(ts_lcd16x2 *lcdstr, uint8_t* fpu8Value, uint8_t fu8Lentgh, uint8_t fu8ColInd, LCD16x2_LINE fu8RowInd)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	4611      	mov	r1, r2
 8008254:	461a      	mov	r2, r3
 8008256:	460b      	mov	r3, r1
 8008258:	71fb      	strb	r3, [r7, #7]
 800825a:	4613      	mov	r3, r2
 800825c:	71bb      	strb	r3, [r7, #6]
	LCD16x2_Result eResult = LCD16x2_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	75fb      	strb	r3, [r7, #23]
	eResult = elcd16x2_isetCursor(lcdstr, fu8ColInd, (uint8_t)fu8RowInd);
 8008262:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008266:	79bb      	ldrb	r3, [r7, #6]
 8008268:	4619      	mov	r1, r3
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 f8bd 	bl	80083ea <elcd16x2_isetCursor>
 8008270:	4603      	mov	r3, r0
 8008272:	75fb      	strb	r3, [r7, #23]
	if(eResult == LCD16x2_OK)
 8008274:	7dfb      	ldrb	r3, [r7, #23]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d118      	bne.n	80082ac <elcd16x2_writeMsg+0x64>
	{
		for(uint8_t i=0;i<fu8Lentgh;i++)
 800827a:	2300      	movs	r3, #0
 800827c:	75bb      	strb	r3, [r7, #22]
 800827e:	e00f      	b.n	80082a0 <elcd16x2_writeMsg+0x58>
		{
			eResult = elcd16x2_write(lcdstr,*(fpu8Value+i));
 8008280:	7dbb      	ldrb	r3, [r7, #22]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	4413      	add	r3, r2
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	4619      	mov	r1, r3
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f7ff ffba 	bl	8008204 <elcd16x2_write>
 8008290:	4603      	mov	r3, r0
 8008292:	75fb      	strb	r3, [r7, #23]
			if(eResult != LCD16x2_OK)
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d107      	bne.n	80082aa <elcd16x2_writeMsg+0x62>
		for(uint8_t i=0;i<fu8Lentgh;i++)
 800829a:	7dbb      	ldrb	r3, [r7, #22]
 800829c:	3301      	adds	r3, #1
 800829e:	75bb      	strb	r3, [r7, #22]
 80082a0:	7dba      	ldrb	r2, [r7, #22]
 80082a2:	79fb      	ldrb	r3, [r7, #7]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d3eb      	bcc.n	8008280 <elcd16x2_writeMsg+0x38>
 80082a8:	e000      	b.n	80082ac <elcd16x2_writeMsg+0x64>
			{
				break;
 80082aa:	bf00      	nop
			}
		}
	}
    return eResult;
 80082ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <elcd16x2_clear>:

LCD16x2_Result elcd16x2_clear(ts_lcd16x2 *lcdstr)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
	LCD16x2_Result eResult = LCD16x2_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	73fb      	strb	r3, [r7, #15]
	eResult = elcd16x2_icommand(lcdstr,LCD16x2_CLEARDISPLAY);        // clear display, set cursor position to zero
 80082c2:	2101      	movs	r1, #1
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f851 	bl	800836c <elcd16x2_icommand>
 80082ca:	4603      	mov	r3, r0
 80082cc:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(2);
 80082ce:	2002      	movs	r0, #2
 80082d0:	f7f9 fb6a 	bl	80019a8 <HAL_Delay>
    return eResult;
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
	...

080082e0 <elcd16x2_DispLoading>:
	}
	return eResult;
}

LCD16x2_Result elcd16x2_DispLoading(ts_lcd16x2 *lcdstr, uint8_t u8Progress)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08a      	sub	sp, #40	@ 0x28
 80082e4:	af02      	add	r7, sp, #8
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	70fb      	strb	r3, [r7, #3]
	LCD16x2_Result eResult = LCD16x2_OK;
 80082ec:	2300      	movs	r3, #0
 80082ee:	77bb      	strb	r3, [r7, #30]
	uint8_t pu8LoadDisp[16];
	elcd16x2_writeMsg(lcdstr, "     LOADING    ", 16, 0, LCD16x2_LINE1);
 80082f0:	2300      	movs	r3, #0
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	2300      	movs	r3, #0
 80082f6:	2210      	movs	r2, #16
 80082f8:	491a      	ldr	r1, [pc, #104]	@ (8008364 <elcd16x2_DispLoading+0x84>)
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7ff ffa4 	bl	8008248 <elcd16x2_writeMsg>
	uint8_t u8nBlock = u8Progress*16/90;
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	011b      	lsls	r3, r3, #4
 8008304:	4a18      	ldr	r2, [pc, #96]	@ (8008368 <elcd16x2_DispLoading+0x88>)
 8008306:	fb82 1203 	smull	r1, r2, r2, r3
 800830a:	441a      	add	r2, r3
 800830c:	1192      	asrs	r2, r2, #6
 800830e:	17db      	asrs	r3, r3, #31
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	777b      	strb	r3, [r7, #29]
	for(uint8_t i=0;i<16;i++)
 8008314:	2300      	movs	r3, #0
 8008316:	77fb      	strb	r3, [r7, #31]
 8008318:	e013      	b.n	8008342 <elcd16x2_DispLoading+0x62>
	{
		if(i<u8nBlock)
 800831a:	7ffa      	ldrb	r2, [r7, #31]
 800831c:	7f7b      	ldrb	r3, [r7, #29]
 800831e:	429a      	cmp	r2, r3
 8008320:	d206      	bcs.n	8008330 <elcd16x2_DispLoading+0x50>
		{
			pu8LoadDisp[i] = 255;
 8008322:	7ffb      	ldrb	r3, [r7, #31]
 8008324:	3320      	adds	r3, #32
 8008326:	443b      	add	r3, r7
 8008328:	22ff      	movs	r2, #255	@ 0xff
 800832a:	f803 2c14 	strb.w	r2, [r3, #-20]
 800832e:	e005      	b.n	800833c <elcd16x2_DispLoading+0x5c>
		}
		else
		{
			pu8LoadDisp[i] = ' ';
 8008330:	7ffb      	ldrb	r3, [r7, #31]
 8008332:	3320      	adds	r3, #32
 8008334:	443b      	add	r3, r7
 8008336:	2220      	movs	r2, #32
 8008338:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(uint8_t i=0;i<16;i++)
 800833c:	7ffb      	ldrb	r3, [r7, #31]
 800833e:	3301      	adds	r3, #1
 8008340:	77fb      	strb	r3, [r7, #31]
 8008342:	7ffb      	ldrb	r3, [r7, #31]
 8008344:	2b0f      	cmp	r3, #15
 8008346:	d9e8      	bls.n	800831a <elcd16x2_DispLoading+0x3a>
		}
	}
	elcd16x2_writeMsg(lcdstr, pu8LoadDisp, 16, 0, LCD16x2_LINE2);
 8008348:	f107 010c 	add.w	r1, r7, #12
 800834c:	2301      	movs	r3, #1
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	2300      	movs	r3, #0
 8008352:	2210      	movs	r2, #16
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff ff77 	bl	8008248 <elcd16x2_writeMsg>


}
 800835a:	bf00      	nop
 800835c:	4618      	mov	r0, r3
 800835e:	3720      	adds	r7, #32
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	0800951c 	.word	0x0800951c
 8008368:	b60b60b7 	.word	0xb60b60b7

0800836c <elcd16x2_icommand>:



static LCD16x2_Result elcd16x2_icommand(ts_lcd16x2 *lcdstr, uint8_t value)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af02      	add	r7, sp, #8
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	70fb      	strb	r3, [r7, #3]
	LCD16x2_Result eResult = LCD16x2_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	73fb      	strb	r3, [r7, #15]
    unsigned char dta[2] = {0x80, value};
 800837c:	2380      	movs	r3, #128	@ 0x80
 800837e:	733b      	strb	r3, [r7, #12]
 8008380:	78fb      	ldrb	r3, [r7, #3]
 8008382:	737b      	strb	r3, [r7, #13]
    if(HAL_I2C_Master_Transmit(lcdstr->hi2c, lcdstr->u8adress, dta, 2, 100)!=HAL_OK)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	79db      	ldrb	r3, [r3, #7]
 800838c:	4619      	mov	r1, r3
 800838e:	f107 020c 	add.w	r2, r7, #12
 8008392:	2364      	movs	r3, #100	@ 0x64
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	2302      	movs	r3, #2
 8008398:	f7fb f884 	bl	80034a4 <HAL_I2C_Master_Transmit>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <elcd16x2_icommand+0x3a>
    {
    	eResult = LCD16x2_INTERNAL_ERROR;
 80083a2:	2302      	movs	r3, #2
 80083a4:	73fb      	strb	r3, [r7, #15]
    }
    return eResult;
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <elcd16x2_idisplay>:
static LCD16x2_Result elcd16x2_idisplay(ts_lcd16x2 *lcdstr)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
	LCD16x2_Result eResult = LCD16x2_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73fb      	strb	r3, [r7, #15]
	lcdstr->displaycontrol |= LCD_DISPLAYON;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	7a5b      	ldrb	r3, [r3, #9]
 80083c0:	f043 0304 	orr.w	r3, r3, #4
 80083c4:	b2da      	uxtb	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	725a      	strb	r2, [r3, #9]
	eResult = elcd16x2_icommand(lcdstr, LCD16x2_DISPLAYCONTROL | lcdstr->displaycontrol);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	7a5b      	ldrb	r3, [r3, #9]
 80083ce:	f043 0308 	orr.w	r3, r3, #8
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7ff ffc8 	bl	800836c <elcd16x2_icommand>
 80083dc:	4603      	mov	r3, r0
 80083de:	73fb      	strb	r3, [r7, #15]
    return eResult;
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <elcd16x2_isetCursor>:
	lcdstr->displaycontrol &= ~LCD_DISPLAYON;
	eResult = elcd16x2_icommand(lcdstr, LCD16x2_DISPLAYCONTROL | lcdstr->displaycontrol);
    return eResult;
}
static LCD16x2_Result elcd16x2_isetCursor(ts_lcd16x2 *lcdstr, uint8_t col, uint8_t row)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	460b      	mov	r3, r1
 80083f4:	70fb      	strb	r3, [r7, #3]
 80083f6:	4613      	mov	r3, r2
 80083f8:	70bb      	strb	r3, [r7, #2]
	LCD16x2_Result eResult = LCD16x2_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	73fb      	strb	r3, [r7, #15]
    col = (row == 0 ? col | 0x80 : col | 0xc0);
 80083fe:	78bb      	ldrb	r3, [r7, #2]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d104      	bne.n	800840e <elcd16x2_isetCursor+0x24>
 8008404:	78fb      	ldrb	r3, [r7, #3]
 8008406:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800840a:	b2db      	uxtb	r3, r3
 800840c:	e003      	b.n	8008416 <elcd16x2_isetCursor+0x2c>
 800840e:	78fb      	ldrb	r3, [r7, #3]
 8008410:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8008414:	b2db      	uxtb	r3, r3
 8008416:	70fb      	strb	r3, [r7, #3]
    eResult = elcd16x2_icommand(lcdstr, col);
 8008418:	78fb      	ldrb	r3, [r7, #3]
 800841a:	4619      	mov	r1, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f7ff ffa5 	bl	800836c <elcd16x2_icommand>
 8008422:	4603      	mov	r3, r0
 8008424:	73fb      	strb	r3, [r7, #15]
    return eResult;
 8008426:	7bfb      	ldrb	r3, [r7, #15]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <WS2813_eInit>:
/**
 * @}
 */

WS2813_Result WS2813_eInit(WS2813_HandlerTypeDef *Fhandler,
		TIM_HandleTypeDef *Ftdhtim, uint32_t *Fpu32Buffer) {
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
	WS2813_Result eResult = WS2813_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	75fb      	strb	r3, [r7, #23]
	if (Fhandler == 0 || Ftdhtim == 0 || Fpu32Buffer == 0) {
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d005      	beq.n	8008452 <WS2813_eInit+0x22>
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <WS2813_eInit+0x22>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d102      	bne.n	8008458 <WS2813_eInit+0x28>
		eResult = WS2813_PARAMETER_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	75fb      	strb	r3, [r7, #23]
 8008456:	e005      	b.n	8008464 <WS2813_eInit+0x34>
	} else {
		Fhandler->WS2813_htim = Ftdhtim;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	609a      	str	r2, [r3, #8]
		Fhandler->WS2813_dmaBuffer = Fpu32Buffer;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	605a      	str	r2, [r3, #4]
	}
	return eResult;
 8008464:	7dfb      	ldrb	r3, [r7, #23]
}
 8008466:	4618      	mov	r0, r3
 8008468:	371c      	adds	r7, #28
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
	...

08008474 <WS2813_eSetColor>:
	}
	return eResult;
}

WS2813_Result WS2813_eSetColor(WS2813_HandlerTypeDef *Fhandler,
		WS2813_ColorTypeDef FeColor, uint8_t Fu8LedId) {
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	460b      	mov	r3, r1
 800847e:	70fb      	strb	r3, [r7, #3]
 8008480:	4613      	mov	r3, r2
 8008482:	70bb      	strb	r3, [r7, #2]
	WS2813_Result eResult;
	WS2813_PixelRGBTypeDef fu32ColorVal;
	switch ((uint8_t) FeColor) {
 8008484:	78fb      	ldrb	r3, [r7, #3]
 8008486:	2b07      	cmp	r3, #7
 8008488:	d87a      	bhi.n	8008580 <WS2813_eSetColor+0x10c>
 800848a:	a201      	add	r2, pc, #4	@ (adr r2, 8008490 <WS2813_eSetColor+0x1c>)
 800848c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008490:	080084b1 	.word	0x080084b1
 8008494:	080084cb 	.word	0x080084cb
 8008498:	080084e5 	.word	0x080084e5
 800849c:	080084ff 	.word	0x080084ff
 80084a0:	08008519 	.word	0x08008519
 80084a4:	08008533 	.word	0x08008533
 80084a8:	0800854d 	.word	0x0800854d
 80084ac:	08008567 	.word	0x08008567
	case WS2813Blue:
		fu32ColorVal.strcolor.dblue = 255;
 80084b0:	23ff      	movs	r3, #255	@ 0xff
 80084b2:	733b      	strb	r3, [r7, #12]
		fu32ColorVal.strcolor.dred = 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	737b      	strb	r3, [r7, #13]
		fu32ColorVal.strcolor.dgreen = 0;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73bb      	strb	r3, [r7, #14]
		WS2813_eSetColorval(Fhandler, fu32ColorVal, Fu8LedId);
 80084bc:	78bb      	ldrb	r3, [r7, #2]
 80084be:	461a      	mov	r2, r3
 80084c0:	68f9      	ldr	r1, [r7, #12]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f86e 	bl	80085a4 <WS2813_eSetColorval>
		break;
 80084c8:	e067      	b.n	800859a <WS2813_eSetColor+0x126>
	case WS2813Red:
		fu32ColorVal.strcolor.dblue = 0;
 80084ca:	2300      	movs	r3, #0
 80084cc:	733b      	strb	r3, [r7, #12]
		fu32ColorVal.strcolor.dred = 255;
 80084ce:	23ff      	movs	r3, #255	@ 0xff
 80084d0:	737b      	strb	r3, [r7, #13]
		fu32ColorVal.strcolor.dgreen = 0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	73bb      	strb	r3, [r7, #14]
		WS2813_eSetColorval(Fhandler, fu32ColorVal, Fu8LedId);
 80084d6:	78bb      	ldrb	r3, [r7, #2]
 80084d8:	461a      	mov	r2, r3
 80084da:	68f9      	ldr	r1, [r7, #12]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f861 	bl	80085a4 <WS2813_eSetColorval>
		break;
 80084e2:	e05a      	b.n	800859a <WS2813_eSetColor+0x126>
	case WS2813Green:
		fu32ColorVal.strcolor.dblue = 0;
 80084e4:	2300      	movs	r3, #0
 80084e6:	733b      	strb	r3, [r7, #12]
		fu32ColorVal.strcolor.dred = 0;
 80084e8:	2300      	movs	r3, #0
 80084ea:	737b      	strb	r3, [r7, #13]
		fu32ColorVal.strcolor.dgreen = 255;
 80084ec:	23ff      	movs	r3, #255	@ 0xff
 80084ee:	73bb      	strb	r3, [r7, #14]
		WS2813_eSetColorval(Fhandler, fu32ColorVal, Fu8LedId);
 80084f0:	78bb      	ldrb	r3, [r7, #2]
 80084f2:	461a      	mov	r2, r3
 80084f4:	68f9      	ldr	r1, [r7, #12]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f854 	bl	80085a4 <WS2813_eSetColorval>
		break;
 80084fc:	e04d      	b.n	800859a <WS2813_eSetColor+0x126>
	case WS2813Cyan:
		fu32ColorVal.strcolor.dblue = 255;
 80084fe:	23ff      	movs	r3, #255	@ 0xff
 8008500:	733b      	strb	r3, [r7, #12]
		fu32ColorVal.strcolor.dred = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	737b      	strb	r3, [r7, #13]
		fu32ColorVal.strcolor.dgreen = 255;
 8008506:	23ff      	movs	r3, #255	@ 0xff
 8008508:	73bb      	strb	r3, [r7, #14]
		WS2813_eSetColorval(Fhandler, fu32ColorVal, Fu8LedId);
 800850a:	78bb      	ldrb	r3, [r7, #2]
 800850c:	461a      	mov	r2, r3
 800850e:	68f9      	ldr	r1, [r7, #12]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f847 	bl	80085a4 <WS2813_eSetColorval>
		break;
 8008516:	e040      	b.n	800859a <WS2813_eSetColor+0x126>
	case WS2813Purple:
		fu32ColorVal.strcolor.dblue = 128;
 8008518:	2380      	movs	r3, #128	@ 0x80
 800851a:	733b      	strb	r3, [r7, #12]
		fu32ColorVal.strcolor.dred = 128;
 800851c:	2380      	movs	r3, #128	@ 0x80
 800851e:	737b      	strb	r3, [r7, #13]
		fu32ColorVal.strcolor.dgreen = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	73bb      	strb	r3, [r7, #14]
		WS2813_eSetColorval(Fhandler, fu32ColorVal, Fu8LedId);
 8008524:	78bb      	ldrb	r3, [r7, #2]
 8008526:	461a      	mov	r2, r3
 8008528:	68f9      	ldr	r1, [r7, #12]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f83a 	bl	80085a4 <WS2813_eSetColorval>
		break;
 8008530:	e033      	b.n	800859a <WS2813_eSetColor+0x126>
	case WS2813Yellow:
		fu32ColorVal.strcolor.dblue = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	733b      	strb	r3, [r7, #12]
		fu32ColorVal.strcolor.dred = 255;
 8008536:	23ff      	movs	r3, #255	@ 0xff
 8008538:	737b      	strb	r3, [r7, #13]
		fu32ColorVal.strcolor.dgreen = 255;
 800853a:	23ff      	movs	r3, #255	@ 0xff
 800853c:	73bb      	strb	r3, [r7, #14]
		WS2813_eSetColorval(Fhandler, fu32ColorVal, Fu8LedId);
 800853e:	78bb      	ldrb	r3, [r7, #2]
 8008540:	461a      	mov	r2, r3
 8008542:	68f9      	ldr	r1, [r7, #12]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f82d 	bl	80085a4 <WS2813_eSetColorval>
		break;
 800854a:	e026      	b.n	800859a <WS2813_eSetColor+0x126>
	case WS2813Orange:
		fu32ColorVal.strcolor.dblue = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	733b      	strb	r3, [r7, #12]
		fu32ColorVal.strcolor.dred = 255;
 8008550:	23ff      	movs	r3, #255	@ 0xff
 8008552:	737b      	strb	r3, [r7, #13]
		fu32ColorVal.strcolor.dgreen = 137;
 8008554:	2389      	movs	r3, #137	@ 0x89
 8008556:	73bb      	strb	r3, [r7, #14]
		WS2813_eSetColorval(Fhandler, fu32ColorVal, Fu8LedId);
 8008558:	78bb      	ldrb	r3, [r7, #2]
 800855a:	461a      	mov	r2, r3
 800855c:	68f9      	ldr	r1, [r7, #12]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f820 	bl	80085a4 <WS2813_eSetColorval>
		break;
 8008564:	e019      	b.n	800859a <WS2813_eSetColor+0x126>
	case WS2813Off:
		fu32ColorVal.strcolor.dblue = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	733b      	strb	r3, [r7, #12]
		fu32ColorVal.strcolor.dred = 0;
 800856a:	2300      	movs	r3, #0
 800856c:	737b      	strb	r3, [r7, #13]
		fu32ColorVal.strcolor.dgreen = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	73bb      	strb	r3, [r7, #14]
		WS2813_eSetColorval(Fhandler, fu32ColorVal, Fu8LedId);
 8008572:	78bb      	ldrb	r3, [r7, #2]
 8008574:	461a      	mov	r2, r3
 8008576:	68f9      	ldr	r1, [r7, #12]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f813 	bl	80085a4 <WS2813_eSetColorval>
		break;
 800857e:	e00c      	b.n	800859a <WS2813_eSetColor+0x126>
	default:
		fu32ColorVal.strcolor.dblue = 0;
 8008580:	2300      	movs	r3, #0
 8008582:	733b      	strb	r3, [r7, #12]
		fu32ColorVal.strcolor.dred = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	737b      	strb	r3, [r7, #13]
		fu32ColorVal.strcolor.dgreen = 0;
 8008588:	2300      	movs	r3, #0
 800858a:	73bb      	strb	r3, [r7, #14]
		WS2813_eSetColorval(Fhandler, fu32ColorVal, Fu8LedId);
 800858c:	78bb      	ldrb	r3, [r7, #2]
 800858e:	461a      	mov	r2, r3
 8008590:	68f9      	ldr	r1, [r7, #12]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f806 	bl	80085a4 <WS2813_eSetColorval>
		break;
 8008598:	bf00      	nop
	}
}
 800859a:	bf00      	nop
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <WS2813_eSetColorval>:

WS2813_Result WS2813_eSetColorval(WS2813_HandlerTypeDef *Fhandler,
		WS2813_PixelRGBTypeDef fu32ColorVal, uint8_t Fu8LedId) {
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b088      	sub	sp, #32
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	4613      	mov	r3, r2
 80085b0:	71fb      	strb	r3, [r7, #7]
	WS2813_Result eResult = WS2813_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	77fb      	strb	r3, [r7, #31]
	if (Fu8LedId >= WS2813_NUM_PIXELS) {
 80085b6:	79fb      	ldrb	r3, [r7, #7]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d002      	beq.n	80085c2 <WS2813_eSetColorval+0x1e>
		eResult = WS2813_PARAMETER_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	77fb      	strb	r3, [r7, #31]
 80085c0:	e04d      	b.n	800865e <WS2813_eSetColorval+0xba>
	} else {
		for (uint8_t u8LedId = 0; u8LedId <= Fu8LedId; u8LedId++) {
 80085c2:	2300      	movs	r3, #0
 80085c4:	77bb      	strb	r3, [r7, #30]
 80085c6:	e046      	b.n	8008656 <WS2813_eSetColorval+0xb2>
			if (u8LedId == Fu8LedId)
 80085c8:	7fba      	ldrb	r2, [r7, #30]
 80085ca:	79fb      	ldrb	r3, [r7, #7]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d104      	bne.n	80085da <WS2813_eSetColorval+0x36>
				Fhandler->WS2813_pixel[u8LedId] = fu32ColorVal;
 80085d0:	7fba      	ldrb	r2, [r7, #30]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	68b9      	ldr	r1, [r7, #8]
 80085d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			uint32_t *pBuff;
			pBuff = Fhandler->WS2813_dmaBuffer;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	61bb      	str	r3, [r7, #24]
			for (int8_t j = 23; j >= 0; j--) {
 80085e0:	2317      	movs	r3, #23
 80085e2:	75fb      	strb	r3, [r7, #23]
 80085e4:	e01b      	b.n	800861e <WS2813_eSetColorval+0x7a>
				if ((Fhandler->WS2813_pixel[Fu8LedId].data >> j) & 0x01) {
 80085e6:	79fa      	ldrb	r2, [r7, #7]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80085ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085f2:	fa22 f303 	lsr.w	r3, r2, r3
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <WS2813_eSetColorval+0x62>
					*pBuff = WS2813_ONE;
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	2233      	movs	r2, #51	@ 0x33
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	e002      	b.n	800860c <WS2813_eSetColorval+0x68>
				} else {
					*pBuff = WS2813_ZERO;
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	2219      	movs	r2, #25
 800860a:	601a      	str	r2, [r3, #0]
				}
				pBuff++;
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	3304      	adds	r3, #4
 8008610:	61bb      	str	r3, [r7, #24]
			for (int8_t j = 23; j >= 0; j--) {
 8008612:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008616:	b2db      	uxtb	r3, r3
 8008618:	3b01      	subs	r3, #1
 800861a:	b2db      	uxtb	r3, r3
 800861c:	75fb      	strb	r3, [r7, #23]
 800861e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008622:	2b00      	cmp	r3, #0
 8008624:	dadf      	bge.n	80085e6 <WS2813_eSetColorval+0x42>
			}
			Fhandler->WS2813_dmaBuffer[WS2813_DMA_BUFF_SIZE - 1] = 0;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	3360      	adds	r3, #96	@ 0x60
 800862c:	2200      	movs	r2, #0
 800862e:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Start_DMA(Fhandler->WS2813_htim, WS2813_TIM_CHANNEL,
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6898      	ldr	r0, [r3, #8]
					Fhandler->WS2813_dmaBuffer, WS2813_DMA_BUFF_SIZE);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	685a      	ldr	r2, [r3, #4]
			HAL_TIM_PWM_Start_DMA(Fhandler->WS2813_htim, WS2813_TIM_CHANNEL,
 8008638:	2319      	movs	r3, #25
 800863a:	2108      	movs	r1, #8
 800863c:	f7fd f810 	bl	8005660 <HAL_TIM_PWM_Start_DMA>
			while (!u8WS2813_idatasentflag) {
 8008640:	bf00      	nop
 8008642:	4b09      	ldr	r3, [pc, #36]	@ (8008668 <WS2813_eSetColorval+0xc4>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d0fb      	beq.n	8008642 <WS2813_eSetColorval+0x9e>
			};
			u8WS2813_idatasentflag = 0;
 800864a:	4b07      	ldr	r3, [pc, #28]	@ (8008668 <WS2813_eSetColorval+0xc4>)
 800864c:	2200      	movs	r2, #0
 800864e:	701a      	strb	r2, [r3, #0]
		for (uint8_t u8LedId = 0; u8LedId <= Fu8LedId; u8LedId++) {
 8008650:	7fbb      	ldrb	r3, [r7, #30]
 8008652:	3301      	adds	r3, #1
 8008654:	77bb      	strb	r3, [r7, #30]
 8008656:	7fba      	ldrb	r2, [r7, #30]
 8008658:	79fb      	ldrb	r3, [r7, #7]
 800865a:	429a      	cmp	r2, r3
 800865c:	d9b4      	bls.n	80085c8 <WS2813_eSetColorval+0x24>
		}
	}
	return eResult;
 800865e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3720      	adds	r7, #32
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	20000488 	.word	0x20000488

0800866c <HAL_TIM_PWM_PulseFinishedCallback>:
		}
		HAL_Delay(1000);
	  }
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, WS2813_TIM_CHANNEL);
 8008674:	2108      	movs	r1, #8
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7fd fa12 	bl	8005aa0 <HAL_TIM_PWM_Stop_DMA>
	u8WS2813_idatasentflag = 1;
 800867c:	4b03      	ldr	r3, [pc, #12]	@ (800868c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800867e:	2201      	movs	r2, #1
 8008680:	701a      	strb	r2, [r3, #0]
}
 8008682:	bf00      	nop
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	20000488 	.word	0x20000488

08008690 <std>:
 8008690:	2300      	movs	r3, #0
 8008692:	b510      	push	{r4, lr}
 8008694:	4604      	mov	r4, r0
 8008696:	e9c0 3300 	strd	r3, r3, [r0]
 800869a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800869e:	6083      	str	r3, [r0, #8]
 80086a0:	8181      	strh	r1, [r0, #12]
 80086a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80086a4:	81c2      	strh	r2, [r0, #14]
 80086a6:	6183      	str	r3, [r0, #24]
 80086a8:	4619      	mov	r1, r3
 80086aa:	2208      	movs	r2, #8
 80086ac:	305c      	adds	r0, #92	@ 0x5c
 80086ae:	f000 f906 	bl	80088be <memset>
 80086b2:	4b0d      	ldr	r3, [pc, #52]	@ (80086e8 <std+0x58>)
 80086b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80086b6:	4b0d      	ldr	r3, [pc, #52]	@ (80086ec <std+0x5c>)
 80086b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80086ba:	4b0d      	ldr	r3, [pc, #52]	@ (80086f0 <std+0x60>)
 80086bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80086be:	4b0d      	ldr	r3, [pc, #52]	@ (80086f4 <std+0x64>)
 80086c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80086c2:	4b0d      	ldr	r3, [pc, #52]	@ (80086f8 <std+0x68>)
 80086c4:	6224      	str	r4, [r4, #32]
 80086c6:	429c      	cmp	r4, r3
 80086c8:	d006      	beq.n	80086d8 <std+0x48>
 80086ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80086ce:	4294      	cmp	r4, r2
 80086d0:	d002      	beq.n	80086d8 <std+0x48>
 80086d2:	33d0      	adds	r3, #208	@ 0xd0
 80086d4:	429c      	cmp	r4, r3
 80086d6:	d105      	bne.n	80086e4 <std+0x54>
 80086d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80086dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086e0:	f000 b966 	b.w	80089b0 <__retarget_lock_init_recursive>
 80086e4:	bd10      	pop	{r4, pc}
 80086e6:	bf00      	nop
 80086e8:	08008839 	.word	0x08008839
 80086ec:	0800885b 	.word	0x0800885b
 80086f0:	08008893 	.word	0x08008893
 80086f4:	080088b7 	.word	0x080088b7
 80086f8:	2000048c 	.word	0x2000048c

080086fc <stdio_exit_handler>:
 80086fc:	4a02      	ldr	r2, [pc, #8]	@ (8008708 <stdio_exit_handler+0xc>)
 80086fe:	4903      	ldr	r1, [pc, #12]	@ (800870c <stdio_exit_handler+0x10>)
 8008700:	4803      	ldr	r0, [pc, #12]	@ (8008710 <stdio_exit_handler+0x14>)
 8008702:	f000 b869 	b.w	80087d8 <_fwalk_sglue>
 8008706:	bf00      	nop
 8008708:	2000000c 	.word	0x2000000c
 800870c:	08009251 	.word	0x08009251
 8008710:	2000001c 	.word	0x2000001c

08008714 <cleanup_stdio>:
 8008714:	6841      	ldr	r1, [r0, #4]
 8008716:	4b0c      	ldr	r3, [pc, #48]	@ (8008748 <cleanup_stdio+0x34>)
 8008718:	4299      	cmp	r1, r3
 800871a:	b510      	push	{r4, lr}
 800871c:	4604      	mov	r4, r0
 800871e:	d001      	beq.n	8008724 <cleanup_stdio+0x10>
 8008720:	f000 fd96 	bl	8009250 <_fflush_r>
 8008724:	68a1      	ldr	r1, [r4, #8]
 8008726:	4b09      	ldr	r3, [pc, #36]	@ (800874c <cleanup_stdio+0x38>)
 8008728:	4299      	cmp	r1, r3
 800872a:	d002      	beq.n	8008732 <cleanup_stdio+0x1e>
 800872c:	4620      	mov	r0, r4
 800872e:	f000 fd8f 	bl	8009250 <_fflush_r>
 8008732:	68e1      	ldr	r1, [r4, #12]
 8008734:	4b06      	ldr	r3, [pc, #24]	@ (8008750 <cleanup_stdio+0x3c>)
 8008736:	4299      	cmp	r1, r3
 8008738:	d004      	beq.n	8008744 <cleanup_stdio+0x30>
 800873a:	4620      	mov	r0, r4
 800873c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008740:	f000 bd86 	b.w	8009250 <_fflush_r>
 8008744:	bd10      	pop	{r4, pc}
 8008746:	bf00      	nop
 8008748:	2000048c 	.word	0x2000048c
 800874c:	200004f4 	.word	0x200004f4
 8008750:	2000055c 	.word	0x2000055c

08008754 <global_stdio_init.part.0>:
 8008754:	b510      	push	{r4, lr}
 8008756:	4b0b      	ldr	r3, [pc, #44]	@ (8008784 <global_stdio_init.part.0+0x30>)
 8008758:	4c0b      	ldr	r4, [pc, #44]	@ (8008788 <global_stdio_init.part.0+0x34>)
 800875a:	4a0c      	ldr	r2, [pc, #48]	@ (800878c <global_stdio_init.part.0+0x38>)
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	4620      	mov	r0, r4
 8008760:	2200      	movs	r2, #0
 8008762:	2104      	movs	r1, #4
 8008764:	f7ff ff94 	bl	8008690 <std>
 8008768:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800876c:	2201      	movs	r2, #1
 800876e:	2109      	movs	r1, #9
 8008770:	f7ff ff8e 	bl	8008690 <std>
 8008774:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008778:	2202      	movs	r2, #2
 800877a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800877e:	2112      	movs	r1, #18
 8008780:	f7ff bf86 	b.w	8008690 <std>
 8008784:	200005c4 	.word	0x200005c4
 8008788:	2000048c 	.word	0x2000048c
 800878c:	080086fd 	.word	0x080086fd

08008790 <__sfp_lock_acquire>:
 8008790:	4801      	ldr	r0, [pc, #4]	@ (8008798 <__sfp_lock_acquire+0x8>)
 8008792:	f000 b90e 	b.w	80089b2 <__retarget_lock_acquire_recursive>
 8008796:	bf00      	nop
 8008798:	200005cd 	.word	0x200005cd

0800879c <__sfp_lock_release>:
 800879c:	4801      	ldr	r0, [pc, #4]	@ (80087a4 <__sfp_lock_release+0x8>)
 800879e:	f000 b909 	b.w	80089b4 <__retarget_lock_release_recursive>
 80087a2:	bf00      	nop
 80087a4:	200005cd 	.word	0x200005cd

080087a8 <__sinit>:
 80087a8:	b510      	push	{r4, lr}
 80087aa:	4604      	mov	r4, r0
 80087ac:	f7ff fff0 	bl	8008790 <__sfp_lock_acquire>
 80087b0:	6a23      	ldr	r3, [r4, #32]
 80087b2:	b11b      	cbz	r3, 80087bc <__sinit+0x14>
 80087b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087b8:	f7ff bff0 	b.w	800879c <__sfp_lock_release>
 80087bc:	4b04      	ldr	r3, [pc, #16]	@ (80087d0 <__sinit+0x28>)
 80087be:	6223      	str	r3, [r4, #32]
 80087c0:	4b04      	ldr	r3, [pc, #16]	@ (80087d4 <__sinit+0x2c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1f5      	bne.n	80087b4 <__sinit+0xc>
 80087c8:	f7ff ffc4 	bl	8008754 <global_stdio_init.part.0>
 80087cc:	e7f2      	b.n	80087b4 <__sinit+0xc>
 80087ce:	bf00      	nop
 80087d0:	08008715 	.word	0x08008715
 80087d4:	200005c4 	.word	0x200005c4

080087d8 <_fwalk_sglue>:
 80087d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087dc:	4607      	mov	r7, r0
 80087de:	4688      	mov	r8, r1
 80087e0:	4614      	mov	r4, r2
 80087e2:	2600      	movs	r6, #0
 80087e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087e8:	f1b9 0901 	subs.w	r9, r9, #1
 80087ec:	d505      	bpl.n	80087fa <_fwalk_sglue+0x22>
 80087ee:	6824      	ldr	r4, [r4, #0]
 80087f0:	2c00      	cmp	r4, #0
 80087f2:	d1f7      	bne.n	80087e4 <_fwalk_sglue+0xc>
 80087f4:	4630      	mov	r0, r6
 80087f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087fa:	89ab      	ldrh	r3, [r5, #12]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d907      	bls.n	8008810 <_fwalk_sglue+0x38>
 8008800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008804:	3301      	adds	r3, #1
 8008806:	d003      	beq.n	8008810 <_fwalk_sglue+0x38>
 8008808:	4629      	mov	r1, r5
 800880a:	4638      	mov	r0, r7
 800880c:	47c0      	blx	r8
 800880e:	4306      	orrs	r6, r0
 8008810:	3568      	adds	r5, #104	@ 0x68
 8008812:	e7e9      	b.n	80087e8 <_fwalk_sglue+0x10>

08008814 <iprintf>:
 8008814:	b40f      	push	{r0, r1, r2, r3}
 8008816:	b507      	push	{r0, r1, r2, lr}
 8008818:	4906      	ldr	r1, [pc, #24]	@ (8008834 <iprintf+0x20>)
 800881a:	ab04      	add	r3, sp, #16
 800881c:	6808      	ldr	r0, [r1, #0]
 800881e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008822:	6881      	ldr	r1, [r0, #8]
 8008824:	9301      	str	r3, [sp, #4]
 8008826:	f000 f9e9 	bl	8008bfc <_vfiprintf_r>
 800882a:	b003      	add	sp, #12
 800882c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008830:	b004      	add	sp, #16
 8008832:	4770      	bx	lr
 8008834:	20000018 	.word	0x20000018

08008838 <__sread>:
 8008838:	b510      	push	{r4, lr}
 800883a:	460c      	mov	r4, r1
 800883c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008840:	f000 f868 	bl	8008914 <_read_r>
 8008844:	2800      	cmp	r0, #0
 8008846:	bfab      	itete	ge
 8008848:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800884a:	89a3      	ldrhlt	r3, [r4, #12]
 800884c:	181b      	addge	r3, r3, r0
 800884e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008852:	bfac      	ite	ge
 8008854:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008856:	81a3      	strhlt	r3, [r4, #12]
 8008858:	bd10      	pop	{r4, pc}

0800885a <__swrite>:
 800885a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800885e:	461f      	mov	r7, r3
 8008860:	898b      	ldrh	r3, [r1, #12]
 8008862:	05db      	lsls	r3, r3, #23
 8008864:	4605      	mov	r5, r0
 8008866:	460c      	mov	r4, r1
 8008868:	4616      	mov	r6, r2
 800886a:	d505      	bpl.n	8008878 <__swrite+0x1e>
 800886c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008870:	2302      	movs	r3, #2
 8008872:	2200      	movs	r2, #0
 8008874:	f000 f83c 	bl	80088f0 <_lseek_r>
 8008878:	89a3      	ldrh	r3, [r4, #12]
 800887a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800887e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008882:	81a3      	strh	r3, [r4, #12]
 8008884:	4632      	mov	r2, r6
 8008886:	463b      	mov	r3, r7
 8008888:	4628      	mov	r0, r5
 800888a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800888e:	f000 b853 	b.w	8008938 <_write_r>

08008892 <__sseek>:
 8008892:	b510      	push	{r4, lr}
 8008894:	460c      	mov	r4, r1
 8008896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800889a:	f000 f829 	bl	80088f0 <_lseek_r>
 800889e:	1c43      	adds	r3, r0, #1
 80088a0:	89a3      	ldrh	r3, [r4, #12]
 80088a2:	bf15      	itete	ne
 80088a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80088a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80088aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80088ae:	81a3      	strheq	r3, [r4, #12]
 80088b0:	bf18      	it	ne
 80088b2:	81a3      	strhne	r3, [r4, #12]
 80088b4:	bd10      	pop	{r4, pc}

080088b6 <__sclose>:
 80088b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ba:	f000 b809 	b.w	80088d0 <_close_r>

080088be <memset>:
 80088be:	4402      	add	r2, r0
 80088c0:	4603      	mov	r3, r0
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d100      	bne.n	80088c8 <memset+0xa>
 80088c6:	4770      	bx	lr
 80088c8:	f803 1b01 	strb.w	r1, [r3], #1
 80088cc:	e7f9      	b.n	80088c2 <memset+0x4>
	...

080088d0 <_close_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4d06      	ldr	r5, [pc, #24]	@ (80088ec <_close_r+0x1c>)
 80088d4:	2300      	movs	r3, #0
 80088d6:	4604      	mov	r4, r0
 80088d8:	4608      	mov	r0, r1
 80088da:	602b      	str	r3, [r5, #0]
 80088dc:	f7f8 fb87 	bl	8000fee <_close>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d102      	bne.n	80088ea <_close_r+0x1a>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	b103      	cbz	r3, 80088ea <_close_r+0x1a>
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	200005c8 	.word	0x200005c8

080088f0 <_lseek_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	4d07      	ldr	r5, [pc, #28]	@ (8008910 <_lseek_r+0x20>)
 80088f4:	4604      	mov	r4, r0
 80088f6:	4608      	mov	r0, r1
 80088f8:	4611      	mov	r1, r2
 80088fa:	2200      	movs	r2, #0
 80088fc:	602a      	str	r2, [r5, #0]
 80088fe:	461a      	mov	r2, r3
 8008900:	f7f8 fb9c 	bl	800103c <_lseek>
 8008904:	1c43      	adds	r3, r0, #1
 8008906:	d102      	bne.n	800890e <_lseek_r+0x1e>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	b103      	cbz	r3, 800890e <_lseek_r+0x1e>
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	bd38      	pop	{r3, r4, r5, pc}
 8008910:	200005c8 	.word	0x200005c8

08008914 <_read_r>:
 8008914:	b538      	push	{r3, r4, r5, lr}
 8008916:	4d07      	ldr	r5, [pc, #28]	@ (8008934 <_read_r+0x20>)
 8008918:	4604      	mov	r4, r0
 800891a:	4608      	mov	r0, r1
 800891c:	4611      	mov	r1, r2
 800891e:	2200      	movs	r2, #0
 8008920:	602a      	str	r2, [r5, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	f7f8 fb46 	bl	8000fb4 <_read>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d102      	bne.n	8008932 <_read_r+0x1e>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	b103      	cbz	r3, 8008932 <_read_r+0x1e>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	200005c8 	.word	0x200005c8

08008938 <_write_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4d07      	ldr	r5, [pc, #28]	@ (8008958 <_write_r+0x20>)
 800893c:	4604      	mov	r4, r0
 800893e:	4608      	mov	r0, r1
 8008940:	4611      	mov	r1, r2
 8008942:	2200      	movs	r2, #0
 8008944:	602a      	str	r2, [r5, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	f7f8 f976 	bl	8000c38 <_write>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_write_r+0x1e>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	b103      	cbz	r3, 8008956 <_write_r+0x1e>
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	200005c8 	.word	0x200005c8

0800895c <__errno>:
 800895c:	4b01      	ldr	r3, [pc, #4]	@ (8008964 <__errno+0x8>)
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	20000018 	.word	0x20000018

08008968 <__libc_init_array>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	4d0d      	ldr	r5, [pc, #52]	@ (80089a0 <__libc_init_array+0x38>)
 800896c:	4c0d      	ldr	r4, [pc, #52]	@ (80089a4 <__libc_init_array+0x3c>)
 800896e:	1b64      	subs	r4, r4, r5
 8008970:	10a4      	asrs	r4, r4, #2
 8008972:	2600      	movs	r6, #0
 8008974:	42a6      	cmp	r6, r4
 8008976:	d109      	bne.n	800898c <__libc_init_array+0x24>
 8008978:	4d0b      	ldr	r5, [pc, #44]	@ (80089a8 <__libc_init_array+0x40>)
 800897a:	4c0c      	ldr	r4, [pc, #48]	@ (80089ac <__libc_init_array+0x44>)
 800897c:	f000 fdb8 	bl	80094f0 <_init>
 8008980:	1b64      	subs	r4, r4, r5
 8008982:	10a4      	asrs	r4, r4, #2
 8008984:	2600      	movs	r6, #0
 8008986:	42a6      	cmp	r6, r4
 8008988:	d105      	bne.n	8008996 <__libc_init_array+0x2e>
 800898a:	bd70      	pop	{r4, r5, r6, pc}
 800898c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008990:	4798      	blx	r3
 8008992:	3601      	adds	r6, #1
 8008994:	e7ee      	b.n	8008974 <__libc_init_array+0xc>
 8008996:	f855 3b04 	ldr.w	r3, [r5], #4
 800899a:	4798      	blx	r3
 800899c:	3601      	adds	r6, #1
 800899e:	e7f2      	b.n	8008986 <__libc_init_array+0x1e>
 80089a0:	080095b4 	.word	0x080095b4
 80089a4:	080095b4 	.word	0x080095b4
 80089a8:	080095b4 	.word	0x080095b4
 80089ac:	080095b8 	.word	0x080095b8

080089b0 <__retarget_lock_init_recursive>:
 80089b0:	4770      	bx	lr

080089b2 <__retarget_lock_acquire_recursive>:
 80089b2:	4770      	bx	lr

080089b4 <__retarget_lock_release_recursive>:
 80089b4:	4770      	bx	lr
	...

080089b8 <_free_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	4605      	mov	r5, r0
 80089bc:	2900      	cmp	r1, #0
 80089be:	d041      	beq.n	8008a44 <_free_r+0x8c>
 80089c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089c4:	1f0c      	subs	r4, r1, #4
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	bfb8      	it	lt
 80089ca:	18e4      	addlt	r4, r4, r3
 80089cc:	f000 f8e0 	bl	8008b90 <__malloc_lock>
 80089d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a48 <_free_r+0x90>)
 80089d2:	6813      	ldr	r3, [r2, #0]
 80089d4:	b933      	cbnz	r3, 80089e4 <_free_r+0x2c>
 80089d6:	6063      	str	r3, [r4, #4]
 80089d8:	6014      	str	r4, [r2, #0]
 80089da:	4628      	mov	r0, r5
 80089dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089e0:	f000 b8dc 	b.w	8008b9c <__malloc_unlock>
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	d908      	bls.n	80089fa <_free_r+0x42>
 80089e8:	6820      	ldr	r0, [r4, #0]
 80089ea:	1821      	adds	r1, r4, r0
 80089ec:	428b      	cmp	r3, r1
 80089ee:	bf01      	itttt	eq
 80089f0:	6819      	ldreq	r1, [r3, #0]
 80089f2:	685b      	ldreq	r3, [r3, #4]
 80089f4:	1809      	addeq	r1, r1, r0
 80089f6:	6021      	streq	r1, [r4, #0]
 80089f8:	e7ed      	b.n	80089d6 <_free_r+0x1e>
 80089fa:	461a      	mov	r2, r3
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	b10b      	cbz	r3, 8008a04 <_free_r+0x4c>
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	d9fa      	bls.n	80089fa <_free_r+0x42>
 8008a04:	6811      	ldr	r1, [r2, #0]
 8008a06:	1850      	adds	r0, r2, r1
 8008a08:	42a0      	cmp	r0, r4
 8008a0a:	d10b      	bne.n	8008a24 <_free_r+0x6c>
 8008a0c:	6820      	ldr	r0, [r4, #0]
 8008a0e:	4401      	add	r1, r0
 8008a10:	1850      	adds	r0, r2, r1
 8008a12:	4283      	cmp	r3, r0
 8008a14:	6011      	str	r1, [r2, #0]
 8008a16:	d1e0      	bne.n	80089da <_free_r+0x22>
 8008a18:	6818      	ldr	r0, [r3, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	6053      	str	r3, [r2, #4]
 8008a1e:	4408      	add	r0, r1
 8008a20:	6010      	str	r0, [r2, #0]
 8008a22:	e7da      	b.n	80089da <_free_r+0x22>
 8008a24:	d902      	bls.n	8008a2c <_free_r+0x74>
 8008a26:	230c      	movs	r3, #12
 8008a28:	602b      	str	r3, [r5, #0]
 8008a2a:	e7d6      	b.n	80089da <_free_r+0x22>
 8008a2c:	6820      	ldr	r0, [r4, #0]
 8008a2e:	1821      	adds	r1, r4, r0
 8008a30:	428b      	cmp	r3, r1
 8008a32:	bf04      	itt	eq
 8008a34:	6819      	ldreq	r1, [r3, #0]
 8008a36:	685b      	ldreq	r3, [r3, #4]
 8008a38:	6063      	str	r3, [r4, #4]
 8008a3a:	bf04      	itt	eq
 8008a3c:	1809      	addeq	r1, r1, r0
 8008a3e:	6021      	streq	r1, [r4, #0]
 8008a40:	6054      	str	r4, [r2, #4]
 8008a42:	e7ca      	b.n	80089da <_free_r+0x22>
 8008a44:	bd38      	pop	{r3, r4, r5, pc}
 8008a46:	bf00      	nop
 8008a48:	200005d4 	.word	0x200005d4

08008a4c <sbrk_aligned>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	4e0f      	ldr	r6, [pc, #60]	@ (8008a8c <sbrk_aligned+0x40>)
 8008a50:	460c      	mov	r4, r1
 8008a52:	6831      	ldr	r1, [r6, #0]
 8008a54:	4605      	mov	r5, r0
 8008a56:	b911      	cbnz	r1, 8008a5e <sbrk_aligned+0x12>
 8008a58:	f000 fcb6 	bl	80093c8 <_sbrk_r>
 8008a5c:	6030      	str	r0, [r6, #0]
 8008a5e:	4621      	mov	r1, r4
 8008a60:	4628      	mov	r0, r5
 8008a62:	f000 fcb1 	bl	80093c8 <_sbrk_r>
 8008a66:	1c43      	adds	r3, r0, #1
 8008a68:	d103      	bne.n	8008a72 <sbrk_aligned+0x26>
 8008a6a:	f04f 34ff 	mov.w	r4, #4294967295
 8008a6e:	4620      	mov	r0, r4
 8008a70:	bd70      	pop	{r4, r5, r6, pc}
 8008a72:	1cc4      	adds	r4, r0, #3
 8008a74:	f024 0403 	bic.w	r4, r4, #3
 8008a78:	42a0      	cmp	r0, r4
 8008a7a:	d0f8      	beq.n	8008a6e <sbrk_aligned+0x22>
 8008a7c:	1a21      	subs	r1, r4, r0
 8008a7e:	4628      	mov	r0, r5
 8008a80:	f000 fca2 	bl	80093c8 <_sbrk_r>
 8008a84:	3001      	adds	r0, #1
 8008a86:	d1f2      	bne.n	8008a6e <sbrk_aligned+0x22>
 8008a88:	e7ef      	b.n	8008a6a <sbrk_aligned+0x1e>
 8008a8a:	bf00      	nop
 8008a8c:	200005d0 	.word	0x200005d0

08008a90 <_malloc_r>:
 8008a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a94:	1ccd      	adds	r5, r1, #3
 8008a96:	f025 0503 	bic.w	r5, r5, #3
 8008a9a:	3508      	adds	r5, #8
 8008a9c:	2d0c      	cmp	r5, #12
 8008a9e:	bf38      	it	cc
 8008aa0:	250c      	movcc	r5, #12
 8008aa2:	2d00      	cmp	r5, #0
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	db01      	blt.n	8008aac <_malloc_r+0x1c>
 8008aa8:	42a9      	cmp	r1, r5
 8008aaa:	d904      	bls.n	8008ab6 <_malloc_r+0x26>
 8008aac:	230c      	movs	r3, #12
 8008aae:	6033      	str	r3, [r6, #0]
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b8c <_malloc_r+0xfc>
 8008aba:	f000 f869 	bl	8008b90 <__malloc_lock>
 8008abe:	f8d8 3000 	ldr.w	r3, [r8]
 8008ac2:	461c      	mov	r4, r3
 8008ac4:	bb44      	cbnz	r4, 8008b18 <_malloc_r+0x88>
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f7ff ffbf 	bl	8008a4c <sbrk_aligned>
 8008ace:	1c43      	adds	r3, r0, #1
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	d158      	bne.n	8008b86 <_malloc_r+0xf6>
 8008ad4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ad8:	4627      	mov	r7, r4
 8008ada:	2f00      	cmp	r7, #0
 8008adc:	d143      	bne.n	8008b66 <_malloc_r+0xd6>
 8008ade:	2c00      	cmp	r4, #0
 8008ae0:	d04b      	beq.n	8008b7a <_malloc_r+0xea>
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	4639      	mov	r1, r7
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	eb04 0903 	add.w	r9, r4, r3
 8008aec:	f000 fc6c 	bl	80093c8 <_sbrk_r>
 8008af0:	4581      	cmp	r9, r0
 8008af2:	d142      	bne.n	8008b7a <_malloc_r+0xea>
 8008af4:	6821      	ldr	r1, [r4, #0]
 8008af6:	1a6d      	subs	r5, r5, r1
 8008af8:	4629      	mov	r1, r5
 8008afa:	4630      	mov	r0, r6
 8008afc:	f7ff ffa6 	bl	8008a4c <sbrk_aligned>
 8008b00:	3001      	adds	r0, #1
 8008b02:	d03a      	beq.n	8008b7a <_malloc_r+0xea>
 8008b04:	6823      	ldr	r3, [r4, #0]
 8008b06:	442b      	add	r3, r5
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	bb62      	cbnz	r2, 8008b6c <_malloc_r+0xdc>
 8008b12:	f8c8 7000 	str.w	r7, [r8]
 8008b16:	e00f      	b.n	8008b38 <_malloc_r+0xa8>
 8008b18:	6822      	ldr	r2, [r4, #0]
 8008b1a:	1b52      	subs	r2, r2, r5
 8008b1c:	d420      	bmi.n	8008b60 <_malloc_r+0xd0>
 8008b1e:	2a0b      	cmp	r2, #11
 8008b20:	d917      	bls.n	8008b52 <_malloc_r+0xc2>
 8008b22:	1961      	adds	r1, r4, r5
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	6025      	str	r5, [r4, #0]
 8008b28:	bf18      	it	ne
 8008b2a:	6059      	strne	r1, [r3, #4]
 8008b2c:	6863      	ldr	r3, [r4, #4]
 8008b2e:	bf08      	it	eq
 8008b30:	f8c8 1000 	streq.w	r1, [r8]
 8008b34:	5162      	str	r2, [r4, r5]
 8008b36:	604b      	str	r3, [r1, #4]
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f000 f82f 	bl	8008b9c <__malloc_unlock>
 8008b3e:	f104 000b 	add.w	r0, r4, #11
 8008b42:	1d23      	adds	r3, r4, #4
 8008b44:	f020 0007 	bic.w	r0, r0, #7
 8008b48:	1ac2      	subs	r2, r0, r3
 8008b4a:	bf1c      	itt	ne
 8008b4c:	1a1b      	subne	r3, r3, r0
 8008b4e:	50a3      	strne	r3, [r4, r2]
 8008b50:	e7af      	b.n	8008ab2 <_malloc_r+0x22>
 8008b52:	6862      	ldr	r2, [r4, #4]
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	bf0c      	ite	eq
 8008b58:	f8c8 2000 	streq.w	r2, [r8]
 8008b5c:	605a      	strne	r2, [r3, #4]
 8008b5e:	e7eb      	b.n	8008b38 <_malloc_r+0xa8>
 8008b60:	4623      	mov	r3, r4
 8008b62:	6864      	ldr	r4, [r4, #4]
 8008b64:	e7ae      	b.n	8008ac4 <_malloc_r+0x34>
 8008b66:	463c      	mov	r4, r7
 8008b68:	687f      	ldr	r7, [r7, #4]
 8008b6a:	e7b6      	b.n	8008ada <_malloc_r+0x4a>
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	42a3      	cmp	r3, r4
 8008b72:	d1fb      	bne.n	8008b6c <_malloc_r+0xdc>
 8008b74:	2300      	movs	r3, #0
 8008b76:	6053      	str	r3, [r2, #4]
 8008b78:	e7de      	b.n	8008b38 <_malloc_r+0xa8>
 8008b7a:	230c      	movs	r3, #12
 8008b7c:	6033      	str	r3, [r6, #0]
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f000 f80c 	bl	8008b9c <__malloc_unlock>
 8008b84:	e794      	b.n	8008ab0 <_malloc_r+0x20>
 8008b86:	6005      	str	r5, [r0, #0]
 8008b88:	e7d6      	b.n	8008b38 <_malloc_r+0xa8>
 8008b8a:	bf00      	nop
 8008b8c:	200005d4 	.word	0x200005d4

08008b90 <__malloc_lock>:
 8008b90:	4801      	ldr	r0, [pc, #4]	@ (8008b98 <__malloc_lock+0x8>)
 8008b92:	f7ff bf0e 	b.w	80089b2 <__retarget_lock_acquire_recursive>
 8008b96:	bf00      	nop
 8008b98:	200005cc 	.word	0x200005cc

08008b9c <__malloc_unlock>:
 8008b9c:	4801      	ldr	r0, [pc, #4]	@ (8008ba4 <__malloc_unlock+0x8>)
 8008b9e:	f7ff bf09 	b.w	80089b4 <__retarget_lock_release_recursive>
 8008ba2:	bf00      	nop
 8008ba4:	200005cc 	.word	0x200005cc

08008ba8 <__sfputc_r>:
 8008ba8:	6893      	ldr	r3, [r2, #8]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	b410      	push	{r4}
 8008bb0:	6093      	str	r3, [r2, #8]
 8008bb2:	da08      	bge.n	8008bc6 <__sfputc_r+0x1e>
 8008bb4:	6994      	ldr	r4, [r2, #24]
 8008bb6:	42a3      	cmp	r3, r4
 8008bb8:	db01      	blt.n	8008bbe <__sfputc_r+0x16>
 8008bba:	290a      	cmp	r1, #10
 8008bbc:	d103      	bne.n	8008bc6 <__sfputc_r+0x1e>
 8008bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bc2:	f000 bb6d 	b.w	80092a0 <__swbuf_r>
 8008bc6:	6813      	ldr	r3, [r2, #0]
 8008bc8:	1c58      	adds	r0, r3, #1
 8008bca:	6010      	str	r0, [r2, #0]
 8008bcc:	7019      	strb	r1, [r3, #0]
 8008bce:	4608      	mov	r0, r1
 8008bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <__sfputs_r>:
 8008bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd8:	4606      	mov	r6, r0
 8008bda:	460f      	mov	r7, r1
 8008bdc:	4614      	mov	r4, r2
 8008bde:	18d5      	adds	r5, r2, r3
 8008be0:	42ac      	cmp	r4, r5
 8008be2:	d101      	bne.n	8008be8 <__sfputs_r+0x12>
 8008be4:	2000      	movs	r0, #0
 8008be6:	e007      	b.n	8008bf8 <__sfputs_r+0x22>
 8008be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bec:	463a      	mov	r2, r7
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f7ff ffda 	bl	8008ba8 <__sfputc_r>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d1f3      	bne.n	8008be0 <__sfputs_r+0xa>
 8008bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008bfc <_vfiprintf_r>:
 8008bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	460d      	mov	r5, r1
 8008c02:	b09d      	sub	sp, #116	@ 0x74
 8008c04:	4614      	mov	r4, r2
 8008c06:	4698      	mov	r8, r3
 8008c08:	4606      	mov	r6, r0
 8008c0a:	b118      	cbz	r0, 8008c14 <_vfiprintf_r+0x18>
 8008c0c:	6a03      	ldr	r3, [r0, #32]
 8008c0e:	b90b      	cbnz	r3, 8008c14 <_vfiprintf_r+0x18>
 8008c10:	f7ff fdca 	bl	80087a8 <__sinit>
 8008c14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c16:	07d9      	lsls	r1, r3, #31
 8008c18:	d405      	bmi.n	8008c26 <_vfiprintf_r+0x2a>
 8008c1a:	89ab      	ldrh	r3, [r5, #12]
 8008c1c:	059a      	lsls	r2, r3, #22
 8008c1e:	d402      	bmi.n	8008c26 <_vfiprintf_r+0x2a>
 8008c20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c22:	f7ff fec6 	bl	80089b2 <__retarget_lock_acquire_recursive>
 8008c26:	89ab      	ldrh	r3, [r5, #12]
 8008c28:	071b      	lsls	r3, r3, #28
 8008c2a:	d501      	bpl.n	8008c30 <_vfiprintf_r+0x34>
 8008c2c:	692b      	ldr	r3, [r5, #16]
 8008c2e:	b99b      	cbnz	r3, 8008c58 <_vfiprintf_r+0x5c>
 8008c30:	4629      	mov	r1, r5
 8008c32:	4630      	mov	r0, r6
 8008c34:	f000 fb72 	bl	800931c <__swsetup_r>
 8008c38:	b170      	cbz	r0, 8008c58 <_vfiprintf_r+0x5c>
 8008c3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c3c:	07dc      	lsls	r4, r3, #31
 8008c3e:	d504      	bpl.n	8008c4a <_vfiprintf_r+0x4e>
 8008c40:	f04f 30ff 	mov.w	r0, #4294967295
 8008c44:	b01d      	add	sp, #116	@ 0x74
 8008c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4a:	89ab      	ldrh	r3, [r5, #12]
 8008c4c:	0598      	lsls	r0, r3, #22
 8008c4e:	d4f7      	bmi.n	8008c40 <_vfiprintf_r+0x44>
 8008c50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c52:	f7ff feaf 	bl	80089b4 <__retarget_lock_release_recursive>
 8008c56:	e7f3      	b.n	8008c40 <_vfiprintf_r+0x44>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c5c:	2320      	movs	r3, #32
 8008c5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c66:	2330      	movs	r3, #48	@ 0x30
 8008c68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e18 <_vfiprintf_r+0x21c>
 8008c6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c70:	f04f 0901 	mov.w	r9, #1
 8008c74:	4623      	mov	r3, r4
 8008c76:	469a      	mov	sl, r3
 8008c78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c7c:	b10a      	cbz	r2, 8008c82 <_vfiprintf_r+0x86>
 8008c7e:	2a25      	cmp	r2, #37	@ 0x25
 8008c80:	d1f9      	bne.n	8008c76 <_vfiprintf_r+0x7a>
 8008c82:	ebba 0b04 	subs.w	fp, sl, r4
 8008c86:	d00b      	beq.n	8008ca0 <_vfiprintf_r+0xa4>
 8008c88:	465b      	mov	r3, fp
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	4629      	mov	r1, r5
 8008c8e:	4630      	mov	r0, r6
 8008c90:	f7ff ffa1 	bl	8008bd6 <__sfputs_r>
 8008c94:	3001      	adds	r0, #1
 8008c96:	f000 80a7 	beq.w	8008de8 <_vfiprintf_r+0x1ec>
 8008c9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c9c:	445a      	add	r2, fp
 8008c9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 809f 	beq.w	8008de8 <_vfiprintf_r+0x1ec>
 8008caa:	2300      	movs	r3, #0
 8008cac:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cb4:	f10a 0a01 	add.w	sl, sl, #1
 8008cb8:	9304      	str	r3, [sp, #16]
 8008cba:	9307      	str	r3, [sp, #28]
 8008cbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008cc0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cc2:	4654      	mov	r4, sl
 8008cc4:	2205      	movs	r2, #5
 8008cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cca:	4853      	ldr	r0, [pc, #332]	@ (8008e18 <_vfiprintf_r+0x21c>)
 8008ccc:	f7f7 fa80 	bl	80001d0 <memchr>
 8008cd0:	9a04      	ldr	r2, [sp, #16]
 8008cd2:	b9d8      	cbnz	r0, 8008d0c <_vfiprintf_r+0x110>
 8008cd4:	06d1      	lsls	r1, r2, #27
 8008cd6:	bf44      	itt	mi
 8008cd8:	2320      	movmi	r3, #32
 8008cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cde:	0713      	lsls	r3, r2, #28
 8008ce0:	bf44      	itt	mi
 8008ce2:	232b      	movmi	r3, #43	@ 0x2b
 8008ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8008cec:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cee:	d015      	beq.n	8008d1c <_vfiprintf_r+0x120>
 8008cf0:	9a07      	ldr	r2, [sp, #28]
 8008cf2:	4654      	mov	r4, sl
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	f04f 0c0a 	mov.w	ip, #10
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d00:	3b30      	subs	r3, #48	@ 0x30
 8008d02:	2b09      	cmp	r3, #9
 8008d04:	d94b      	bls.n	8008d9e <_vfiprintf_r+0x1a2>
 8008d06:	b1b0      	cbz	r0, 8008d36 <_vfiprintf_r+0x13a>
 8008d08:	9207      	str	r2, [sp, #28]
 8008d0a:	e014      	b.n	8008d36 <_vfiprintf_r+0x13a>
 8008d0c:	eba0 0308 	sub.w	r3, r0, r8
 8008d10:	fa09 f303 	lsl.w	r3, r9, r3
 8008d14:	4313      	orrs	r3, r2
 8008d16:	9304      	str	r3, [sp, #16]
 8008d18:	46a2      	mov	sl, r4
 8008d1a:	e7d2      	b.n	8008cc2 <_vfiprintf_r+0xc6>
 8008d1c:	9b03      	ldr	r3, [sp, #12]
 8008d1e:	1d19      	adds	r1, r3, #4
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	9103      	str	r1, [sp, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	bfbb      	ittet	lt
 8008d28:	425b      	neglt	r3, r3
 8008d2a:	f042 0202 	orrlt.w	r2, r2, #2
 8008d2e:	9307      	strge	r3, [sp, #28]
 8008d30:	9307      	strlt	r3, [sp, #28]
 8008d32:	bfb8      	it	lt
 8008d34:	9204      	strlt	r2, [sp, #16]
 8008d36:	7823      	ldrb	r3, [r4, #0]
 8008d38:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d3a:	d10a      	bne.n	8008d52 <_vfiprintf_r+0x156>
 8008d3c:	7863      	ldrb	r3, [r4, #1]
 8008d3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d40:	d132      	bne.n	8008da8 <_vfiprintf_r+0x1ac>
 8008d42:	9b03      	ldr	r3, [sp, #12]
 8008d44:	1d1a      	adds	r2, r3, #4
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	9203      	str	r2, [sp, #12]
 8008d4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d4e:	3402      	adds	r4, #2
 8008d50:	9305      	str	r3, [sp, #20]
 8008d52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e28 <_vfiprintf_r+0x22c>
 8008d56:	7821      	ldrb	r1, [r4, #0]
 8008d58:	2203      	movs	r2, #3
 8008d5a:	4650      	mov	r0, sl
 8008d5c:	f7f7 fa38 	bl	80001d0 <memchr>
 8008d60:	b138      	cbz	r0, 8008d72 <_vfiprintf_r+0x176>
 8008d62:	9b04      	ldr	r3, [sp, #16]
 8008d64:	eba0 000a 	sub.w	r0, r0, sl
 8008d68:	2240      	movs	r2, #64	@ 0x40
 8008d6a:	4082      	lsls	r2, r0
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	3401      	adds	r4, #1
 8008d70:	9304      	str	r3, [sp, #16]
 8008d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d76:	4829      	ldr	r0, [pc, #164]	@ (8008e1c <_vfiprintf_r+0x220>)
 8008d78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d7c:	2206      	movs	r2, #6
 8008d7e:	f7f7 fa27 	bl	80001d0 <memchr>
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d03f      	beq.n	8008e06 <_vfiprintf_r+0x20a>
 8008d86:	4b26      	ldr	r3, [pc, #152]	@ (8008e20 <_vfiprintf_r+0x224>)
 8008d88:	bb1b      	cbnz	r3, 8008dd2 <_vfiprintf_r+0x1d6>
 8008d8a:	9b03      	ldr	r3, [sp, #12]
 8008d8c:	3307      	adds	r3, #7
 8008d8e:	f023 0307 	bic.w	r3, r3, #7
 8008d92:	3308      	adds	r3, #8
 8008d94:	9303      	str	r3, [sp, #12]
 8008d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d98:	443b      	add	r3, r7
 8008d9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d9c:	e76a      	b.n	8008c74 <_vfiprintf_r+0x78>
 8008d9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008da2:	460c      	mov	r4, r1
 8008da4:	2001      	movs	r0, #1
 8008da6:	e7a8      	b.n	8008cfa <_vfiprintf_r+0xfe>
 8008da8:	2300      	movs	r3, #0
 8008daa:	3401      	adds	r4, #1
 8008dac:	9305      	str	r3, [sp, #20]
 8008dae:	4619      	mov	r1, r3
 8008db0:	f04f 0c0a 	mov.w	ip, #10
 8008db4:	4620      	mov	r0, r4
 8008db6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dba:	3a30      	subs	r2, #48	@ 0x30
 8008dbc:	2a09      	cmp	r2, #9
 8008dbe:	d903      	bls.n	8008dc8 <_vfiprintf_r+0x1cc>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d0c6      	beq.n	8008d52 <_vfiprintf_r+0x156>
 8008dc4:	9105      	str	r1, [sp, #20]
 8008dc6:	e7c4      	b.n	8008d52 <_vfiprintf_r+0x156>
 8008dc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dcc:	4604      	mov	r4, r0
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e7f0      	b.n	8008db4 <_vfiprintf_r+0x1b8>
 8008dd2:	ab03      	add	r3, sp, #12
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	462a      	mov	r2, r5
 8008dd8:	4b12      	ldr	r3, [pc, #72]	@ (8008e24 <_vfiprintf_r+0x228>)
 8008dda:	a904      	add	r1, sp, #16
 8008ddc:	4630      	mov	r0, r6
 8008dde:	f3af 8000 	nop.w
 8008de2:	4607      	mov	r7, r0
 8008de4:	1c78      	adds	r0, r7, #1
 8008de6:	d1d6      	bne.n	8008d96 <_vfiprintf_r+0x19a>
 8008de8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dea:	07d9      	lsls	r1, r3, #31
 8008dec:	d405      	bmi.n	8008dfa <_vfiprintf_r+0x1fe>
 8008dee:	89ab      	ldrh	r3, [r5, #12]
 8008df0:	059a      	lsls	r2, r3, #22
 8008df2:	d402      	bmi.n	8008dfa <_vfiprintf_r+0x1fe>
 8008df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008df6:	f7ff fddd 	bl	80089b4 <__retarget_lock_release_recursive>
 8008dfa:	89ab      	ldrh	r3, [r5, #12]
 8008dfc:	065b      	lsls	r3, r3, #25
 8008dfe:	f53f af1f 	bmi.w	8008c40 <_vfiprintf_r+0x44>
 8008e02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e04:	e71e      	b.n	8008c44 <_vfiprintf_r+0x48>
 8008e06:	ab03      	add	r3, sp, #12
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	462a      	mov	r2, r5
 8008e0c:	4b05      	ldr	r3, [pc, #20]	@ (8008e24 <_vfiprintf_r+0x228>)
 8008e0e:	a904      	add	r1, sp, #16
 8008e10:	4630      	mov	r0, r6
 8008e12:	f000 f879 	bl	8008f08 <_printf_i>
 8008e16:	e7e4      	b.n	8008de2 <_vfiprintf_r+0x1e6>
 8008e18:	08009578 	.word	0x08009578
 8008e1c:	08009582 	.word	0x08009582
 8008e20:	00000000 	.word	0x00000000
 8008e24:	08008bd7 	.word	0x08008bd7
 8008e28:	0800957e 	.word	0x0800957e

08008e2c <_printf_common>:
 8008e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e30:	4616      	mov	r6, r2
 8008e32:	4698      	mov	r8, r3
 8008e34:	688a      	ldr	r2, [r1, #8]
 8008e36:	690b      	ldr	r3, [r1, #16]
 8008e38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	bfb8      	it	lt
 8008e40:	4613      	movlt	r3, r2
 8008e42:	6033      	str	r3, [r6, #0]
 8008e44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e48:	4607      	mov	r7, r0
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	b10a      	cbz	r2, 8008e52 <_printf_common+0x26>
 8008e4e:	3301      	adds	r3, #1
 8008e50:	6033      	str	r3, [r6, #0]
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	0699      	lsls	r1, r3, #26
 8008e56:	bf42      	ittt	mi
 8008e58:	6833      	ldrmi	r3, [r6, #0]
 8008e5a:	3302      	addmi	r3, #2
 8008e5c:	6033      	strmi	r3, [r6, #0]
 8008e5e:	6825      	ldr	r5, [r4, #0]
 8008e60:	f015 0506 	ands.w	r5, r5, #6
 8008e64:	d106      	bne.n	8008e74 <_printf_common+0x48>
 8008e66:	f104 0a19 	add.w	sl, r4, #25
 8008e6a:	68e3      	ldr	r3, [r4, #12]
 8008e6c:	6832      	ldr	r2, [r6, #0]
 8008e6e:	1a9b      	subs	r3, r3, r2
 8008e70:	42ab      	cmp	r3, r5
 8008e72:	dc26      	bgt.n	8008ec2 <_printf_common+0x96>
 8008e74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e78:	6822      	ldr	r2, [r4, #0]
 8008e7a:	3b00      	subs	r3, #0
 8008e7c:	bf18      	it	ne
 8008e7e:	2301      	movne	r3, #1
 8008e80:	0692      	lsls	r2, r2, #26
 8008e82:	d42b      	bmi.n	8008edc <_printf_common+0xb0>
 8008e84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e88:	4641      	mov	r1, r8
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	47c8      	blx	r9
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d01e      	beq.n	8008ed0 <_printf_common+0xa4>
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	6922      	ldr	r2, [r4, #16]
 8008e96:	f003 0306 	and.w	r3, r3, #6
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	bf02      	ittt	eq
 8008e9e:	68e5      	ldreq	r5, [r4, #12]
 8008ea0:	6833      	ldreq	r3, [r6, #0]
 8008ea2:	1aed      	subeq	r5, r5, r3
 8008ea4:	68a3      	ldr	r3, [r4, #8]
 8008ea6:	bf0c      	ite	eq
 8008ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008eac:	2500      	movne	r5, #0
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	bfc4      	itt	gt
 8008eb2:	1a9b      	subgt	r3, r3, r2
 8008eb4:	18ed      	addgt	r5, r5, r3
 8008eb6:	2600      	movs	r6, #0
 8008eb8:	341a      	adds	r4, #26
 8008eba:	42b5      	cmp	r5, r6
 8008ebc:	d11a      	bne.n	8008ef4 <_printf_common+0xc8>
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	e008      	b.n	8008ed4 <_printf_common+0xa8>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	4652      	mov	r2, sl
 8008ec6:	4641      	mov	r1, r8
 8008ec8:	4638      	mov	r0, r7
 8008eca:	47c8      	blx	r9
 8008ecc:	3001      	adds	r0, #1
 8008ece:	d103      	bne.n	8008ed8 <_printf_common+0xac>
 8008ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed8:	3501      	adds	r5, #1
 8008eda:	e7c6      	b.n	8008e6a <_printf_common+0x3e>
 8008edc:	18e1      	adds	r1, r4, r3
 8008ede:	1c5a      	adds	r2, r3, #1
 8008ee0:	2030      	movs	r0, #48	@ 0x30
 8008ee2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ee6:	4422      	add	r2, r4
 8008ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008eec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ef0:	3302      	adds	r3, #2
 8008ef2:	e7c7      	b.n	8008e84 <_printf_common+0x58>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	4622      	mov	r2, r4
 8008ef8:	4641      	mov	r1, r8
 8008efa:	4638      	mov	r0, r7
 8008efc:	47c8      	blx	r9
 8008efe:	3001      	adds	r0, #1
 8008f00:	d0e6      	beq.n	8008ed0 <_printf_common+0xa4>
 8008f02:	3601      	adds	r6, #1
 8008f04:	e7d9      	b.n	8008eba <_printf_common+0x8e>
	...

08008f08 <_printf_i>:
 8008f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f0c:	7e0f      	ldrb	r7, [r1, #24]
 8008f0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f10:	2f78      	cmp	r7, #120	@ 0x78
 8008f12:	4691      	mov	r9, r2
 8008f14:	4680      	mov	r8, r0
 8008f16:	460c      	mov	r4, r1
 8008f18:	469a      	mov	sl, r3
 8008f1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f1e:	d807      	bhi.n	8008f30 <_printf_i+0x28>
 8008f20:	2f62      	cmp	r7, #98	@ 0x62
 8008f22:	d80a      	bhi.n	8008f3a <_printf_i+0x32>
 8008f24:	2f00      	cmp	r7, #0
 8008f26:	f000 80d2 	beq.w	80090ce <_printf_i+0x1c6>
 8008f2a:	2f58      	cmp	r7, #88	@ 0x58
 8008f2c:	f000 80b9 	beq.w	80090a2 <_printf_i+0x19a>
 8008f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f38:	e03a      	b.n	8008fb0 <_printf_i+0xa8>
 8008f3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f3e:	2b15      	cmp	r3, #21
 8008f40:	d8f6      	bhi.n	8008f30 <_printf_i+0x28>
 8008f42:	a101      	add	r1, pc, #4	@ (adr r1, 8008f48 <_printf_i+0x40>)
 8008f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f48:	08008fa1 	.word	0x08008fa1
 8008f4c:	08008fb5 	.word	0x08008fb5
 8008f50:	08008f31 	.word	0x08008f31
 8008f54:	08008f31 	.word	0x08008f31
 8008f58:	08008f31 	.word	0x08008f31
 8008f5c:	08008f31 	.word	0x08008f31
 8008f60:	08008fb5 	.word	0x08008fb5
 8008f64:	08008f31 	.word	0x08008f31
 8008f68:	08008f31 	.word	0x08008f31
 8008f6c:	08008f31 	.word	0x08008f31
 8008f70:	08008f31 	.word	0x08008f31
 8008f74:	080090b5 	.word	0x080090b5
 8008f78:	08008fdf 	.word	0x08008fdf
 8008f7c:	0800906f 	.word	0x0800906f
 8008f80:	08008f31 	.word	0x08008f31
 8008f84:	08008f31 	.word	0x08008f31
 8008f88:	080090d7 	.word	0x080090d7
 8008f8c:	08008f31 	.word	0x08008f31
 8008f90:	08008fdf 	.word	0x08008fdf
 8008f94:	08008f31 	.word	0x08008f31
 8008f98:	08008f31 	.word	0x08008f31
 8008f9c:	08009077 	.word	0x08009077
 8008fa0:	6833      	ldr	r3, [r6, #0]
 8008fa2:	1d1a      	adds	r2, r3, #4
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6032      	str	r2, [r6, #0]
 8008fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e09d      	b.n	80090f0 <_printf_i+0x1e8>
 8008fb4:	6833      	ldr	r3, [r6, #0]
 8008fb6:	6820      	ldr	r0, [r4, #0]
 8008fb8:	1d19      	adds	r1, r3, #4
 8008fba:	6031      	str	r1, [r6, #0]
 8008fbc:	0606      	lsls	r6, r0, #24
 8008fbe:	d501      	bpl.n	8008fc4 <_printf_i+0xbc>
 8008fc0:	681d      	ldr	r5, [r3, #0]
 8008fc2:	e003      	b.n	8008fcc <_printf_i+0xc4>
 8008fc4:	0645      	lsls	r5, r0, #25
 8008fc6:	d5fb      	bpl.n	8008fc0 <_printf_i+0xb8>
 8008fc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008fcc:	2d00      	cmp	r5, #0
 8008fce:	da03      	bge.n	8008fd8 <_printf_i+0xd0>
 8008fd0:	232d      	movs	r3, #45	@ 0x2d
 8008fd2:	426d      	negs	r5, r5
 8008fd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fd8:	4859      	ldr	r0, [pc, #356]	@ (8009140 <_printf_i+0x238>)
 8008fda:	230a      	movs	r3, #10
 8008fdc:	e011      	b.n	8009002 <_printf_i+0xfa>
 8008fde:	6821      	ldr	r1, [r4, #0]
 8008fe0:	6833      	ldr	r3, [r6, #0]
 8008fe2:	0608      	lsls	r0, r1, #24
 8008fe4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008fe8:	d402      	bmi.n	8008ff0 <_printf_i+0xe8>
 8008fea:	0649      	lsls	r1, r1, #25
 8008fec:	bf48      	it	mi
 8008fee:	b2ad      	uxthmi	r5, r5
 8008ff0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ff2:	4853      	ldr	r0, [pc, #332]	@ (8009140 <_printf_i+0x238>)
 8008ff4:	6033      	str	r3, [r6, #0]
 8008ff6:	bf14      	ite	ne
 8008ff8:	230a      	movne	r3, #10
 8008ffa:	2308      	moveq	r3, #8
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009002:	6866      	ldr	r6, [r4, #4]
 8009004:	60a6      	str	r6, [r4, #8]
 8009006:	2e00      	cmp	r6, #0
 8009008:	bfa2      	ittt	ge
 800900a:	6821      	ldrge	r1, [r4, #0]
 800900c:	f021 0104 	bicge.w	r1, r1, #4
 8009010:	6021      	strge	r1, [r4, #0]
 8009012:	b90d      	cbnz	r5, 8009018 <_printf_i+0x110>
 8009014:	2e00      	cmp	r6, #0
 8009016:	d04b      	beq.n	80090b0 <_printf_i+0x1a8>
 8009018:	4616      	mov	r6, r2
 800901a:	fbb5 f1f3 	udiv	r1, r5, r3
 800901e:	fb03 5711 	mls	r7, r3, r1, r5
 8009022:	5dc7      	ldrb	r7, [r0, r7]
 8009024:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009028:	462f      	mov	r7, r5
 800902a:	42bb      	cmp	r3, r7
 800902c:	460d      	mov	r5, r1
 800902e:	d9f4      	bls.n	800901a <_printf_i+0x112>
 8009030:	2b08      	cmp	r3, #8
 8009032:	d10b      	bne.n	800904c <_printf_i+0x144>
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	07df      	lsls	r7, r3, #31
 8009038:	d508      	bpl.n	800904c <_printf_i+0x144>
 800903a:	6923      	ldr	r3, [r4, #16]
 800903c:	6861      	ldr	r1, [r4, #4]
 800903e:	4299      	cmp	r1, r3
 8009040:	bfde      	ittt	le
 8009042:	2330      	movle	r3, #48	@ 0x30
 8009044:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009048:	f106 36ff 	addle.w	r6, r6, #4294967295
 800904c:	1b92      	subs	r2, r2, r6
 800904e:	6122      	str	r2, [r4, #16]
 8009050:	f8cd a000 	str.w	sl, [sp]
 8009054:	464b      	mov	r3, r9
 8009056:	aa03      	add	r2, sp, #12
 8009058:	4621      	mov	r1, r4
 800905a:	4640      	mov	r0, r8
 800905c:	f7ff fee6 	bl	8008e2c <_printf_common>
 8009060:	3001      	adds	r0, #1
 8009062:	d14a      	bne.n	80090fa <_printf_i+0x1f2>
 8009064:	f04f 30ff 	mov.w	r0, #4294967295
 8009068:	b004      	add	sp, #16
 800906a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	f043 0320 	orr.w	r3, r3, #32
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	4833      	ldr	r0, [pc, #204]	@ (8009144 <_printf_i+0x23c>)
 8009078:	2778      	movs	r7, #120	@ 0x78
 800907a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	6831      	ldr	r1, [r6, #0]
 8009082:	061f      	lsls	r7, r3, #24
 8009084:	f851 5b04 	ldr.w	r5, [r1], #4
 8009088:	d402      	bmi.n	8009090 <_printf_i+0x188>
 800908a:	065f      	lsls	r7, r3, #25
 800908c:	bf48      	it	mi
 800908e:	b2ad      	uxthmi	r5, r5
 8009090:	6031      	str	r1, [r6, #0]
 8009092:	07d9      	lsls	r1, r3, #31
 8009094:	bf44      	itt	mi
 8009096:	f043 0320 	orrmi.w	r3, r3, #32
 800909a:	6023      	strmi	r3, [r4, #0]
 800909c:	b11d      	cbz	r5, 80090a6 <_printf_i+0x19e>
 800909e:	2310      	movs	r3, #16
 80090a0:	e7ac      	b.n	8008ffc <_printf_i+0xf4>
 80090a2:	4827      	ldr	r0, [pc, #156]	@ (8009140 <_printf_i+0x238>)
 80090a4:	e7e9      	b.n	800907a <_printf_i+0x172>
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	f023 0320 	bic.w	r3, r3, #32
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	e7f6      	b.n	800909e <_printf_i+0x196>
 80090b0:	4616      	mov	r6, r2
 80090b2:	e7bd      	b.n	8009030 <_printf_i+0x128>
 80090b4:	6833      	ldr	r3, [r6, #0]
 80090b6:	6825      	ldr	r5, [r4, #0]
 80090b8:	6961      	ldr	r1, [r4, #20]
 80090ba:	1d18      	adds	r0, r3, #4
 80090bc:	6030      	str	r0, [r6, #0]
 80090be:	062e      	lsls	r6, r5, #24
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	d501      	bpl.n	80090c8 <_printf_i+0x1c0>
 80090c4:	6019      	str	r1, [r3, #0]
 80090c6:	e002      	b.n	80090ce <_printf_i+0x1c6>
 80090c8:	0668      	lsls	r0, r5, #25
 80090ca:	d5fb      	bpl.n	80090c4 <_printf_i+0x1bc>
 80090cc:	8019      	strh	r1, [r3, #0]
 80090ce:	2300      	movs	r3, #0
 80090d0:	6123      	str	r3, [r4, #16]
 80090d2:	4616      	mov	r6, r2
 80090d4:	e7bc      	b.n	8009050 <_printf_i+0x148>
 80090d6:	6833      	ldr	r3, [r6, #0]
 80090d8:	1d1a      	adds	r2, r3, #4
 80090da:	6032      	str	r2, [r6, #0]
 80090dc:	681e      	ldr	r6, [r3, #0]
 80090de:	6862      	ldr	r2, [r4, #4]
 80090e0:	2100      	movs	r1, #0
 80090e2:	4630      	mov	r0, r6
 80090e4:	f7f7 f874 	bl	80001d0 <memchr>
 80090e8:	b108      	cbz	r0, 80090ee <_printf_i+0x1e6>
 80090ea:	1b80      	subs	r0, r0, r6
 80090ec:	6060      	str	r0, [r4, #4]
 80090ee:	6863      	ldr	r3, [r4, #4]
 80090f0:	6123      	str	r3, [r4, #16]
 80090f2:	2300      	movs	r3, #0
 80090f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090f8:	e7aa      	b.n	8009050 <_printf_i+0x148>
 80090fa:	6923      	ldr	r3, [r4, #16]
 80090fc:	4632      	mov	r2, r6
 80090fe:	4649      	mov	r1, r9
 8009100:	4640      	mov	r0, r8
 8009102:	47d0      	blx	sl
 8009104:	3001      	adds	r0, #1
 8009106:	d0ad      	beq.n	8009064 <_printf_i+0x15c>
 8009108:	6823      	ldr	r3, [r4, #0]
 800910a:	079b      	lsls	r3, r3, #30
 800910c:	d413      	bmi.n	8009136 <_printf_i+0x22e>
 800910e:	68e0      	ldr	r0, [r4, #12]
 8009110:	9b03      	ldr	r3, [sp, #12]
 8009112:	4298      	cmp	r0, r3
 8009114:	bfb8      	it	lt
 8009116:	4618      	movlt	r0, r3
 8009118:	e7a6      	b.n	8009068 <_printf_i+0x160>
 800911a:	2301      	movs	r3, #1
 800911c:	4632      	mov	r2, r6
 800911e:	4649      	mov	r1, r9
 8009120:	4640      	mov	r0, r8
 8009122:	47d0      	blx	sl
 8009124:	3001      	adds	r0, #1
 8009126:	d09d      	beq.n	8009064 <_printf_i+0x15c>
 8009128:	3501      	adds	r5, #1
 800912a:	68e3      	ldr	r3, [r4, #12]
 800912c:	9903      	ldr	r1, [sp, #12]
 800912e:	1a5b      	subs	r3, r3, r1
 8009130:	42ab      	cmp	r3, r5
 8009132:	dcf2      	bgt.n	800911a <_printf_i+0x212>
 8009134:	e7eb      	b.n	800910e <_printf_i+0x206>
 8009136:	2500      	movs	r5, #0
 8009138:	f104 0619 	add.w	r6, r4, #25
 800913c:	e7f5      	b.n	800912a <_printf_i+0x222>
 800913e:	bf00      	nop
 8009140:	08009589 	.word	0x08009589
 8009144:	0800959a 	.word	0x0800959a

08009148 <__sflush_r>:
 8009148:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800914c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009150:	0716      	lsls	r6, r2, #28
 8009152:	4605      	mov	r5, r0
 8009154:	460c      	mov	r4, r1
 8009156:	d454      	bmi.n	8009202 <__sflush_r+0xba>
 8009158:	684b      	ldr	r3, [r1, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	dc02      	bgt.n	8009164 <__sflush_r+0x1c>
 800915e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009160:	2b00      	cmp	r3, #0
 8009162:	dd48      	ble.n	80091f6 <__sflush_r+0xae>
 8009164:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009166:	2e00      	cmp	r6, #0
 8009168:	d045      	beq.n	80091f6 <__sflush_r+0xae>
 800916a:	2300      	movs	r3, #0
 800916c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009170:	682f      	ldr	r7, [r5, #0]
 8009172:	6a21      	ldr	r1, [r4, #32]
 8009174:	602b      	str	r3, [r5, #0]
 8009176:	d030      	beq.n	80091da <__sflush_r+0x92>
 8009178:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	0759      	lsls	r1, r3, #29
 800917e:	d505      	bpl.n	800918c <__sflush_r+0x44>
 8009180:	6863      	ldr	r3, [r4, #4]
 8009182:	1ad2      	subs	r2, r2, r3
 8009184:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009186:	b10b      	cbz	r3, 800918c <__sflush_r+0x44>
 8009188:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800918a:	1ad2      	subs	r2, r2, r3
 800918c:	2300      	movs	r3, #0
 800918e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009190:	6a21      	ldr	r1, [r4, #32]
 8009192:	4628      	mov	r0, r5
 8009194:	47b0      	blx	r6
 8009196:	1c43      	adds	r3, r0, #1
 8009198:	89a3      	ldrh	r3, [r4, #12]
 800919a:	d106      	bne.n	80091aa <__sflush_r+0x62>
 800919c:	6829      	ldr	r1, [r5, #0]
 800919e:	291d      	cmp	r1, #29
 80091a0:	d82b      	bhi.n	80091fa <__sflush_r+0xb2>
 80091a2:	4a2a      	ldr	r2, [pc, #168]	@ (800924c <__sflush_r+0x104>)
 80091a4:	410a      	asrs	r2, r1
 80091a6:	07d6      	lsls	r6, r2, #31
 80091a8:	d427      	bmi.n	80091fa <__sflush_r+0xb2>
 80091aa:	2200      	movs	r2, #0
 80091ac:	6062      	str	r2, [r4, #4]
 80091ae:	04d9      	lsls	r1, r3, #19
 80091b0:	6922      	ldr	r2, [r4, #16]
 80091b2:	6022      	str	r2, [r4, #0]
 80091b4:	d504      	bpl.n	80091c0 <__sflush_r+0x78>
 80091b6:	1c42      	adds	r2, r0, #1
 80091b8:	d101      	bne.n	80091be <__sflush_r+0x76>
 80091ba:	682b      	ldr	r3, [r5, #0]
 80091bc:	b903      	cbnz	r3, 80091c0 <__sflush_r+0x78>
 80091be:	6560      	str	r0, [r4, #84]	@ 0x54
 80091c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091c2:	602f      	str	r7, [r5, #0]
 80091c4:	b1b9      	cbz	r1, 80091f6 <__sflush_r+0xae>
 80091c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091ca:	4299      	cmp	r1, r3
 80091cc:	d002      	beq.n	80091d4 <__sflush_r+0x8c>
 80091ce:	4628      	mov	r0, r5
 80091d0:	f7ff fbf2 	bl	80089b8 <_free_r>
 80091d4:	2300      	movs	r3, #0
 80091d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80091d8:	e00d      	b.n	80091f6 <__sflush_r+0xae>
 80091da:	2301      	movs	r3, #1
 80091dc:	4628      	mov	r0, r5
 80091de:	47b0      	blx	r6
 80091e0:	4602      	mov	r2, r0
 80091e2:	1c50      	adds	r0, r2, #1
 80091e4:	d1c9      	bne.n	800917a <__sflush_r+0x32>
 80091e6:	682b      	ldr	r3, [r5, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d0c6      	beq.n	800917a <__sflush_r+0x32>
 80091ec:	2b1d      	cmp	r3, #29
 80091ee:	d001      	beq.n	80091f4 <__sflush_r+0xac>
 80091f0:	2b16      	cmp	r3, #22
 80091f2:	d11e      	bne.n	8009232 <__sflush_r+0xea>
 80091f4:	602f      	str	r7, [r5, #0]
 80091f6:	2000      	movs	r0, #0
 80091f8:	e022      	b.n	8009240 <__sflush_r+0xf8>
 80091fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091fe:	b21b      	sxth	r3, r3
 8009200:	e01b      	b.n	800923a <__sflush_r+0xf2>
 8009202:	690f      	ldr	r7, [r1, #16]
 8009204:	2f00      	cmp	r7, #0
 8009206:	d0f6      	beq.n	80091f6 <__sflush_r+0xae>
 8009208:	0793      	lsls	r3, r2, #30
 800920a:	680e      	ldr	r6, [r1, #0]
 800920c:	bf08      	it	eq
 800920e:	694b      	ldreq	r3, [r1, #20]
 8009210:	600f      	str	r7, [r1, #0]
 8009212:	bf18      	it	ne
 8009214:	2300      	movne	r3, #0
 8009216:	eba6 0807 	sub.w	r8, r6, r7
 800921a:	608b      	str	r3, [r1, #8]
 800921c:	f1b8 0f00 	cmp.w	r8, #0
 8009220:	dde9      	ble.n	80091f6 <__sflush_r+0xae>
 8009222:	6a21      	ldr	r1, [r4, #32]
 8009224:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009226:	4643      	mov	r3, r8
 8009228:	463a      	mov	r2, r7
 800922a:	4628      	mov	r0, r5
 800922c:	47b0      	blx	r6
 800922e:	2800      	cmp	r0, #0
 8009230:	dc08      	bgt.n	8009244 <__sflush_r+0xfc>
 8009232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800923a:	81a3      	strh	r3, [r4, #12]
 800923c:	f04f 30ff 	mov.w	r0, #4294967295
 8009240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009244:	4407      	add	r7, r0
 8009246:	eba8 0800 	sub.w	r8, r8, r0
 800924a:	e7e7      	b.n	800921c <__sflush_r+0xd4>
 800924c:	dfbffffe 	.word	0xdfbffffe

08009250 <_fflush_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	690b      	ldr	r3, [r1, #16]
 8009254:	4605      	mov	r5, r0
 8009256:	460c      	mov	r4, r1
 8009258:	b913      	cbnz	r3, 8009260 <_fflush_r+0x10>
 800925a:	2500      	movs	r5, #0
 800925c:	4628      	mov	r0, r5
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	b118      	cbz	r0, 800926a <_fflush_r+0x1a>
 8009262:	6a03      	ldr	r3, [r0, #32]
 8009264:	b90b      	cbnz	r3, 800926a <_fflush_r+0x1a>
 8009266:	f7ff fa9f 	bl	80087a8 <__sinit>
 800926a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0f3      	beq.n	800925a <_fflush_r+0xa>
 8009272:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009274:	07d0      	lsls	r0, r2, #31
 8009276:	d404      	bmi.n	8009282 <_fflush_r+0x32>
 8009278:	0599      	lsls	r1, r3, #22
 800927a:	d402      	bmi.n	8009282 <_fflush_r+0x32>
 800927c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800927e:	f7ff fb98 	bl	80089b2 <__retarget_lock_acquire_recursive>
 8009282:	4628      	mov	r0, r5
 8009284:	4621      	mov	r1, r4
 8009286:	f7ff ff5f 	bl	8009148 <__sflush_r>
 800928a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800928c:	07da      	lsls	r2, r3, #31
 800928e:	4605      	mov	r5, r0
 8009290:	d4e4      	bmi.n	800925c <_fflush_r+0xc>
 8009292:	89a3      	ldrh	r3, [r4, #12]
 8009294:	059b      	lsls	r3, r3, #22
 8009296:	d4e1      	bmi.n	800925c <_fflush_r+0xc>
 8009298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800929a:	f7ff fb8b 	bl	80089b4 <__retarget_lock_release_recursive>
 800929e:	e7dd      	b.n	800925c <_fflush_r+0xc>

080092a0 <__swbuf_r>:
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	460e      	mov	r6, r1
 80092a4:	4614      	mov	r4, r2
 80092a6:	4605      	mov	r5, r0
 80092a8:	b118      	cbz	r0, 80092b2 <__swbuf_r+0x12>
 80092aa:	6a03      	ldr	r3, [r0, #32]
 80092ac:	b90b      	cbnz	r3, 80092b2 <__swbuf_r+0x12>
 80092ae:	f7ff fa7b 	bl	80087a8 <__sinit>
 80092b2:	69a3      	ldr	r3, [r4, #24]
 80092b4:	60a3      	str	r3, [r4, #8]
 80092b6:	89a3      	ldrh	r3, [r4, #12]
 80092b8:	071a      	lsls	r2, r3, #28
 80092ba:	d501      	bpl.n	80092c0 <__swbuf_r+0x20>
 80092bc:	6923      	ldr	r3, [r4, #16]
 80092be:	b943      	cbnz	r3, 80092d2 <__swbuf_r+0x32>
 80092c0:	4621      	mov	r1, r4
 80092c2:	4628      	mov	r0, r5
 80092c4:	f000 f82a 	bl	800931c <__swsetup_r>
 80092c8:	b118      	cbz	r0, 80092d2 <__swbuf_r+0x32>
 80092ca:	f04f 37ff 	mov.w	r7, #4294967295
 80092ce:	4638      	mov	r0, r7
 80092d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092d2:	6823      	ldr	r3, [r4, #0]
 80092d4:	6922      	ldr	r2, [r4, #16]
 80092d6:	1a98      	subs	r0, r3, r2
 80092d8:	6963      	ldr	r3, [r4, #20]
 80092da:	b2f6      	uxtb	r6, r6
 80092dc:	4283      	cmp	r3, r0
 80092de:	4637      	mov	r7, r6
 80092e0:	dc05      	bgt.n	80092ee <__swbuf_r+0x4e>
 80092e2:	4621      	mov	r1, r4
 80092e4:	4628      	mov	r0, r5
 80092e6:	f7ff ffb3 	bl	8009250 <_fflush_r>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	d1ed      	bne.n	80092ca <__swbuf_r+0x2a>
 80092ee:	68a3      	ldr	r3, [r4, #8]
 80092f0:	3b01      	subs	r3, #1
 80092f2:	60a3      	str	r3, [r4, #8]
 80092f4:	6823      	ldr	r3, [r4, #0]
 80092f6:	1c5a      	adds	r2, r3, #1
 80092f8:	6022      	str	r2, [r4, #0]
 80092fa:	701e      	strb	r6, [r3, #0]
 80092fc:	6962      	ldr	r2, [r4, #20]
 80092fe:	1c43      	adds	r3, r0, #1
 8009300:	429a      	cmp	r2, r3
 8009302:	d004      	beq.n	800930e <__swbuf_r+0x6e>
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	07db      	lsls	r3, r3, #31
 8009308:	d5e1      	bpl.n	80092ce <__swbuf_r+0x2e>
 800930a:	2e0a      	cmp	r6, #10
 800930c:	d1df      	bne.n	80092ce <__swbuf_r+0x2e>
 800930e:	4621      	mov	r1, r4
 8009310:	4628      	mov	r0, r5
 8009312:	f7ff ff9d 	bl	8009250 <_fflush_r>
 8009316:	2800      	cmp	r0, #0
 8009318:	d0d9      	beq.n	80092ce <__swbuf_r+0x2e>
 800931a:	e7d6      	b.n	80092ca <__swbuf_r+0x2a>

0800931c <__swsetup_r>:
 800931c:	b538      	push	{r3, r4, r5, lr}
 800931e:	4b29      	ldr	r3, [pc, #164]	@ (80093c4 <__swsetup_r+0xa8>)
 8009320:	4605      	mov	r5, r0
 8009322:	6818      	ldr	r0, [r3, #0]
 8009324:	460c      	mov	r4, r1
 8009326:	b118      	cbz	r0, 8009330 <__swsetup_r+0x14>
 8009328:	6a03      	ldr	r3, [r0, #32]
 800932a:	b90b      	cbnz	r3, 8009330 <__swsetup_r+0x14>
 800932c:	f7ff fa3c 	bl	80087a8 <__sinit>
 8009330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009334:	0719      	lsls	r1, r3, #28
 8009336:	d422      	bmi.n	800937e <__swsetup_r+0x62>
 8009338:	06da      	lsls	r2, r3, #27
 800933a:	d407      	bmi.n	800934c <__swsetup_r+0x30>
 800933c:	2209      	movs	r2, #9
 800933e:	602a      	str	r2, [r5, #0]
 8009340:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009344:	81a3      	strh	r3, [r4, #12]
 8009346:	f04f 30ff 	mov.w	r0, #4294967295
 800934a:	e033      	b.n	80093b4 <__swsetup_r+0x98>
 800934c:	0758      	lsls	r0, r3, #29
 800934e:	d512      	bpl.n	8009376 <__swsetup_r+0x5a>
 8009350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009352:	b141      	cbz	r1, 8009366 <__swsetup_r+0x4a>
 8009354:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009358:	4299      	cmp	r1, r3
 800935a:	d002      	beq.n	8009362 <__swsetup_r+0x46>
 800935c:	4628      	mov	r0, r5
 800935e:	f7ff fb2b 	bl	80089b8 <_free_r>
 8009362:	2300      	movs	r3, #0
 8009364:	6363      	str	r3, [r4, #52]	@ 0x34
 8009366:	89a3      	ldrh	r3, [r4, #12]
 8009368:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800936c:	81a3      	strh	r3, [r4, #12]
 800936e:	2300      	movs	r3, #0
 8009370:	6063      	str	r3, [r4, #4]
 8009372:	6923      	ldr	r3, [r4, #16]
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	f043 0308 	orr.w	r3, r3, #8
 800937c:	81a3      	strh	r3, [r4, #12]
 800937e:	6923      	ldr	r3, [r4, #16]
 8009380:	b94b      	cbnz	r3, 8009396 <__swsetup_r+0x7a>
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800938c:	d003      	beq.n	8009396 <__swsetup_r+0x7a>
 800938e:	4621      	mov	r1, r4
 8009390:	4628      	mov	r0, r5
 8009392:	f000 f84f 	bl	8009434 <__smakebuf_r>
 8009396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800939a:	f013 0201 	ands.w	r2, r3, #1
 800939e:	d00a      	beq.n	80093b6 <__swsetup_r+0x9a>
 80093a0:	2200      	movs	r2, #0
 80093a2:	60a2      	str	r2, [r4, #8]
 80093a4:	6962      	ldr	r2, [r4, #20]
 80093a6:	4252      	negs	r2, r2
 80093a8:	61a2      	str	r2, [r4, #24]
 80093aa:	6922      	ldr	r2, [r4, #16]
 80093ac:	b942      	cbnz	r2, 80093c0 <__swsetup_r+0xa4>
 80093ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80093b2:	d1c5      	bne.n	8009340 <__swsetup_r+0x24>
 80093b4:	bd38      	pop	{r3, r4, r5, pc}
 80093b6:	0799      	lsls	r1, r3, #30
 80093b8:	bf58      	it	pl
 80093ba:	6962      	ldrpl	r2, [r4, #20]
 80093bc:	60a2      	str	r2, [r4, #8]
 80093be:	e7f4      	b.n	80093aa <__swsetup_r+0x8e>
 80093c0:	2000      	movs	r0, #0
 80093c2:	e7f7      	b.n	80093b4 <__swsetup_r+0x98>
 80093c4:	20000018 	.word	0x20000018

080093c8 <_sbrk_r>:
 80093c8:	b538      	push	{r3, r4, r5, lr}
 80093ca:	4d06      	ldr	r5, [pc, #24]	@ (80093e4 <_sbrk_r+0x1c>)
 80093cc:	2300      	movs	r3, #0
 80093ce:	4604      	mov	r4, r0
 80093d0:	4608      	mov	r0, r1
 80093d2:	602b      	str	r3, [r5, #0]
 80093d4:	f7f7 fe40 	bl	8001058 <_sbrk>
 80093d8:	1c43      	adds	r3, r0, #1
 80093da:	d102      	bne.n	80093e2 <_sbrk_r+0x1a>
 80093dc:	682b      	ldr	r3, [r5, #0]
 80093de:	b103      	cbz	r3, 80093e2 <_sbrk_r+0x1a>
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	bd38      	pop	{r3, r4, r5, pc}
 80093e4:	200005c8 	.word	0x200005c8

080093e8 <__swhatbuf_r>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	460c      	mov	r4, r1
 80093ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093f0:	2900      	cmp	r1, #0
 80093f2:	b096      	sub	sp, #88	@ 0x58
 80093f4:	4615      	mov	r5, r2
 80093f6:	461e      	mov	r6, r3
 80093f8:	da0d      	bge.n	8009416 <__swhatbuf_r+0x2e>
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009400:	f04f 0100 	mov.w	r1, #0
 8009404:	bf14      	ite	ne
 8009406:	2340      	movne	r3, #64	@ 0x40
 8009408:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800940c:	2000      	movs	r0, #0
 800940e:	6031      	str	r1, [r6, #0]
 8009410:	602b      	str	r3, [r5, #0]
 8009412:	b016      	add	sp, #88	@ 0x58
 8009414:	bd70      	pop	{r4, r5, r6, pc}
 8009416:	466a      	mov	r2, sp
 8009418:	f000 f848 	bl	80094ac <_fstat_r>
 800941c:	2800      	cmp	r0, #0
 800941e:	dbec      	blt.n	80093fa <__swhatbuf_r+0x12>
 8009420:	9901      	ldr	r1, [sp, #4]
 8009422:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009426:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800942a:	4259      	negs	r1, r3
 800942c:	4159      	adcs	r1, r3
 800942e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009432:	e7eb      	b.n	800940c <__swhatbuf_r+0x24>

08009434 <__smakebuf_r>:
 8009434:	898b      	ldrh	r3, [r1, #12]
 8009436:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009438:	079d      	lsls	r5, r3, #30
 800943a:	4606      	mov	r6, r0
 800943c:	460c      	mov	r4, r1
 800943e:	d507      	bpl.n	8009450 <__smakebuf_r+0x1c>
 8009440:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	6123      	str	r3, [r4, #16]
 8009448:	2301      	movs	r3, #1
 800944a:	6163      	str	r3, [r4, #20]
 800944c:	b003      	add	sp, #12
 800944e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009450:	ab01      	add	r3, sp, #4
 8009452:	466a      	mov	r2, sp
 8009454:	f7ff ffc8 	bl	80093e8 <__swhatbuf_r>
 8009458:	9f00      	ldr	r7, [sp, #0]
 800945a:	4605      	mov	r5, r0
 800945c:	4639      	mov	r1, r7
 800945e:	4630      	mov	r0, r6
 8009460:	f7ff fb16 	bl	8008a90 <_malloc_r>
 8009464:	b948      	cbnz	r0, 800947a <__smakebuf_r+0x46>
 8009466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800946a:	059a      	lsls	r2, r3, #22
 800946c:	d4ee      	bmi.n	800944c <__smakebuf_r+0x18>
 800946e:	f023 0303 	bic.w	r3, r3, #3
 8009472:	f043 0302 	orr.w	r3, r3, #2
 8009476:	81a3      	strh	r3, [r4, #12]
 8009478:	e7e2      	b.n	8009440 <__smakebuf_r+0xc>
 800947a:	89a3      	ldrh	r3, [r4, #12]
 800947c:	6020      	str	r0, [r4, #0]
 800947e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009482:	81a3      	strh	r3, [r4, #12]
 8009484:	9b01      	ldr	r3, [sp, #4]
 8009486:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800948a:	b15b      	cbz	r3, 80094a4 <__smakebuf_r+0x70>
 800948c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009490:	4630      	mov	r0, r6
 8009492:	f000 f81d 	bl	80094d0 <_isatty_r>
 8009496:	b128      	cbz	r0, 80094a4 <__smakebuf_r+0x70>
 8009498:	89a3      	ldrh	r3, [r4, #12]
 800949a:	f023 0303 	bic.w	r3, r3, #3
 800949e:	f043 0301 	orr.w	r3, r3, #1
 80094a2:	81a3      	strh	r3, [r4, #12]
 80094a4:	89a3      	ldrh	r3, [r4, #12]
 80094a6:	431d      	orrs	r5, r3
 80094a8:	81a5      	strh	r5, [r4, #12]
 80094aa:	e7cf      	b.n	800944c <__smakebuf_r+0x18>

080094ac <_fstat_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4d07      	ldr	r5, [pc, #28]	@ (80094cc <_fstat_r+0x20>)
 80094b0:	2300      	movs	r3, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	4611      	mov	r1, r2
 80094b8:	602b      	str	r3, [r5, #0]
 80094ba:	f7f7 fda4 	bl	8001006 <_fstat>
 80094be:	1c43      	adds	r3, r0, #1
 80094c0:	d102      	bne.n	80094c8 <_fstat_r+0x1c>
 80094c2:	682b      	ldr	r3, [r5, #0]
 80094c4:	b103      	cbz	r3, 80094c8 <_fstat_r+0x1c>
 80094c6:	6023      	str	r3, [r4, #0]
 80094c8:	bd38      	pop	{r3, r4, r5, pc}
 80094ca:	bf00      	nop
 80094cc:	200005c8 	.word	0x200005c8

080094d0 <_isatty_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4d06      	ldr	r5, [pc, #24]	@ (80094ec <_isatty_r+0x1c>)
 80094d4:	2300      	movs	r3, #0
 80094d6:	4604      	mov	r4, r0
 80094d8:	4608      	mov	r0, r1
 80094da:	602b      	str	r3, [r5, #0]
 80094dc:	f7f7 fda3 	bl	8001026 <_isatty>
 80094e0:	1c43      	adds	r3, r0, #1
 80094e2:	d102      	bne.n	80094ea <_isatty_r+0x1a>
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	b103      	cbz	r3, 80094ea <_isatty_r+0x1a>
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	bd38      	pop	{r3, r4, r5, pc}
 80094ec:	200005c8 	.word	0x200005c8

080094f0 <_init>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	bf00      	nop
 80094f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094f6:	bc08      	pop	{r3}
 80094f8:	469e      	mov	lr, r3
 80094fa:	4770      	bx	lr

080094fc <_fini>:
 80094fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fe:	bf00      	nop
 8009500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009502:	bc08      	pop	{r3}
 8009504:	469e      	mov	lr, r3
 8009506:	4770      	bx	lr
