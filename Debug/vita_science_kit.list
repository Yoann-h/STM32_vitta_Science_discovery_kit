
vita_science_kit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000127f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  08012984  08012984  00013984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080131cc  080131cc  000161e0  2**0
                  CONTENTS
  4 .ARM          00000008  080131cc  080131cc  000141cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080131d4  080131d4  000161e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080131d4  080131d4  000141d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080131d8  080131d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000011e0  20000000  080131dc  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002984  200011e0  080143bc  000161e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003b64  080143bc  00016b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000161e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000328c6  00000000  00000000  00016210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007570  00000000  00000000  00048ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002720  00000000  00000000  00050048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e21  00000000  00000000  00052768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000316aa  00000000  00000000  00054589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000357b3  00000000  00000000  00085c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a06c  00000000  00000000  000bb3e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d5452  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b004  00000000  00000000  001d5498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  001e049c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200011e0 	.word	0x200011e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801296c 	.word	0x0801296c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200011e4 	.word	0x200011e4
 80001cc:	0801296c 	.word	0x0801296c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	@ 0x28
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
 8000f68:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8000f6c:	4a3e      	ldr	r2, [pc, #248]	@ (8001068 <MX_ADC1_Init+0x120>)
 8000f6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000f70:	4b3c      	ldr	r3, [pc, #240]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8000f72:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8000f76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f78:	4b3a      	ldr	r3, [pc, #232]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f7e:	4b39      	ldr	r3, [pc, #228]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f84:	4b37      	ldr	r3, [pc, #220]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f8a:	4b36      	ldr	r3, [pc, #216]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f90:	4b34      	ldr	r3, [pc, #208]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f96:	4b33      	ldr	r3, [pc, #204]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000f9c:	4b31      	ldr	r3, [pc, #196]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa2:	4b30      	ldr	r3, [pc, #192]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000faa:	4b2e      	ldr	r3, [pc, #184]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb0:	4b2c      	ldr	r3, [pc, #176]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fbe:	4b29      	ldr	r3, [pc, #164]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fc4:	4b27      	ldr	r3, [pc, #156]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fcc:	4825      	ldr	r0, [pc, #148]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8000fce:	f001 fcd7 	bl	8002980 <HAL_ADC_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000fd8:	f000 fc58 	bl	800188c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481f      	ldr	r0, [pc, #124]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8000fe8:	f002 fc1c 	bl	8003824 <HAL_ADCEx_MultiModeConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000ff2:	f000 fc4b 	bl	800188c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800106c <MX_ADC1_Init+0x124>)
 8000ff8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ffa:	2306      	movs	r3, #6
 8000ffc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000ffe:	2303      	movs	r3, #3
 8001000:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001002:	237f      	movs	r3, #127	@ 0x7f
 8001004:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001006:	2304      	movs	r3, #4
 8001008:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	4619      	mov	r1, r3
 8001012:	4814      	ldr	r0, [pc, #80]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8001014:	f001 fed4 	bl	8002dc0 <HAL_ADC_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800101e:	f000 fc35 	bl	800188c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001022:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <MX_ADC1_Init+0x128>)
 8001024:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001026:	230c      	movs	r3, #12
 8001028:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4619      	mov	r1, r3
 800102e:	480d      	ldr	r0, [pc, #52]	@ (8001064 <MX_ADC1_Init+0x11c>)
 8001030:	f001 fec6 	bl	8002dc0 <HAL_ADC_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800103a:	f000 fc27 	bl	800188c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800103e:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <MX_ADC1_Init+0x12c>)
 8001040:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001042:	2312      	movs	r3, #18
 8001044:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	@ (8001064 <MX_ADC1_Init+0x11c>)
 800104c:	f001 feb8 	bl	8002dc0 <HAL_ADC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001056:	f000 fc19 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	3728      	adds	r7, #40	@ 0x28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200011fc 	.word	0x200011fc
 8001068:	50040000 	.word	0x50040000
 800106c:	14f00020 	.word	0x14f00020
 8001070:	19200040 	.word	0x19200040
 8001074:	25b00200 	.word	0x25b00200

08001078 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b0ac      	sub	sp, #176	@ 0xb0
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2288      	movs	r2, #136	@ 0x88
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f010 fb01 	bl	80116a0 <memset>
  if(adcHandle->Instance==ADC1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a3d      	ldr	r2, [pc, #244]	@ (8001198 <HAL_ADC_MspInit+0x120>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d172      	bne.n	800118e <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010ac:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010ae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80010b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80010be:	2308      	movs	r3, #8
 80010c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010c2:	2307      	movs	r3, #7
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010d2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4618      	mov	r0, r3
 80010da:	f004 fdd7 	bl	8005c8c <HAL_RCCEx_PeriphCLKConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80010e4:	f000 fbd2 	bl	800188c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010e8:	4b2c      	ldr	r3, [pc, #176]	@ (800119c <HAL_ADC_MspInit+0x124>)
 80010ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ec:	4a2b      	ldr	r2, [pc, #172]	@ (800119c <HAL_ADC_MspInit+0x124>)
 80010ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <HAL_ADC_MspInit+0x124>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	4b26      	ldr	r3, [pc, #152]	@ (800119c <HAL_ADC_MspInit+0x124>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001104:	4a25      	ldr	r2, [pc, #148]	@ (800119c <HAL_ADC_MspInit+0x124>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110c:	4b23      	ldr	r3, [pc, #140]	@ (800119c <HAL_ADC_MspInit+0x124>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = temperature_Pin|light_Pin|GPIO_PIN_4;
 8001118:	2313      	movs	r3, #19
 800111a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800111e:	230b      	movs	r3, #11
 8001120:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800112e:	4619      	mov	r1, r3
 8001130:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001134:	f002 ff7e 	bl	8004034 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 8001138:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <HAL_ADC_MspInit+0x128>)
 800113a:	4a1a      	ldr	r2, [pc, #104]	@ (80011a4 <HAL_ADC_MspInit+0x12c>)
 800113c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800113e:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <HAL_ADC_MspInit+0x128>)
 8001140:	2200      	movs	r2, #0
 8001142:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001144:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <HAL_ADC_MspInit+0x128>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <HAL_ADC_MspInit+0x128>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001150:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <HAL_ADC_MspInit+0x128>)
 8001152:	2280      	movs	r2, #128	@ 0x80
 8001154:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001156:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <HAL_ADC_MspInit+0x128>)
 8001158:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800115c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <HAL_ADC_MspInit+0x128>)
 8001160:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001164:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001166:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <HAL_ADC_MspInit+0x128>)
 8001168:	2220      	movs	r2, #32
 800116a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800116c:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <HAL_ADC_MspInit+0x128>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001172:	480b      	ldr	r0, [pc, #44]	@ (80011a0 <HAL_ADC_MspInit+0x128>)
 8001174:	f002 fce8 	bl	8003b48 <HAL_DMA_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 800117e:	f000 fb85 	bl	800188c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a06      	ldr	r2, [pc, #24]	@ (80011a0 <HAL_ADC_MspInit+0x128>)
 8001186:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001188:	4a05      	ldr	r2, [pc, #20]	@ (80011a0 <HAL_ADC_MspInit+0x128>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800118e:	bf00      	nop
 8001190:	37b0      	adds	r7, #176	@ 0xb0
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	50040000 	.word	0x50040000
 800119c:	40021000 	.word	0x40021000
 80011a0:	20001260 	.word	0x20001260
 80011a4:	40020430 	.word	0x40020430

080011a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_DMA_Init+0x60>)
 80011b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011b2:	4a15      	ldr	r2, [pc, #84]	@ (8001208 <MX_DMA_Init+0x60>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <MX_DMA_Init+0x60>)
 80011bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011c6:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <MX_DMA_Init+0x60>)
 80011c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001208 <MX_DMA_Init+0x60>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80011d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <MX_DMA_Init+0x60>)
 80011d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2105      	movs	r1, #5
 80011e2:	200b      	movs	r0, #11
 80011e4:	f002 fc86 	bl	8003af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011e8:	200b      	movs	r0, #11
 80011ea:	f002 fc9f 	bl	8003b2c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2105      	movs	r1, #5
 80011f2:	203a      	movs	r0, #58	@ 0x3a
 80011f4:	f002 fc7e 	bl	8003af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80011f8:	203a      	movs	r0, #58	@ 0x3a
 80011fa:	f002 fc97 	bl	8003b2c <HAL_NVIC_EnableIRQ>

}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000

0800120c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of I2CMutex */
  I2CMutexHandle = osMutexNew(&I2CMutex_attributes);
 8001210:	4813      	ldr	r0, [pc, #76]	@ (8001260 <MX_FREERTOS_Init+0x54>)
 8001212:	f009 feb8 	bl	800af86 <osMutexNew>
 8001216:	4603      	mov	r3, r0
 8001218:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <MX_FREERTOS_Init+0x58>)
 800121a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL, &DisplayTask_attributes);
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <MX_FREERTOS_Init+0x5c>)
 800121e:	2100      	movs	r1, #0
 8001220:	4812      	ldr	r0, [pc, #72]	@ (800126c <MX_FREERTOS_Init+0x60>)
 8001222:	f009 fe03 	bl	800ae2c <osThreadNew>
 8001226:	4603      	mov	r3, r0
 8001228:	4a11      	ldr	r2, [pc, #68]	@ (8001270 <MX_FREERTOS_Init+0x64>)
 800122a:	6013      	str	r3, [r2, #0]

  /* creation of CommandTask */
  CommandTaskHandle = osThreadNew(StartCommandTask, NULL, &CommandTask_attributes);
 800122c:	4a11      	ldr	r2, [pc, #68]	@ (8001274 <MX_FREERTOS_Init+0x68>)
 800122e:	2100      	movs	r1, #0
 8001230:	4811      	ldr	r0, [pc, #68]	@ (8001278 <MX_FREERTOS_Init+0x6c>)
 8001232:	f009 fdfb 	bl	800ae2c <osThreadNew>
 8001236:	4603      	mov	r3, r0
 8001238:	4a10      	ldr	r2, [pc, #64]	@ (800127c <MX_FREERTOS_Init+0x70>)
 800123a:	6013      	str	r3, [r2, #0]

  /* creation of JukeboxTask */
  JukeboxTaskHandle = osThreadNew(StartJukeboxTask, NULL, &JukeboxTask_attributes);
 800123c:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <MX_FREERTOS_Init+0x74>)
 800123e:	2100      	movs	r1, #0
 8001240:	4810      	ldr	r0, [pc, #64]	@ (8001284 <MX_FREERTOS_Init+0x78>)
 8001242:	f009 fdf3 	bl	800ae2c <osThreadNew>
 8001246:	4603      	mov	r3, r0
 8001248:	4a0f      	ldr	r2, [pc, #60]	@ (8001288 <MX_FREERTOS_Init+0x7c>)
 800124a:	6013      	str	r3, [r2, #0]

  /* creation of TestTask */
  TestTaskHandle = osThreadNew(StartTest, NULL, &TestTask_attributes);
 800124c:	4a0f      	ldr	r2, [pc, #60]	@ (800128c <MX_FREERTOS_Init+0x80>)
 800124e:	2100      	movs	r1, #0
 8001250:	480f      	ldr	r0, [pc, #60]	@ (8001290 <MX_FREERTOS_Init+0x84>)
 8001252:	f009 fdeb 	bl	800ae2c <osThreadNew>
 8001256:	4603      	mov	r3, r0
 8001258:	4a0e      	ldr	r2, [pc, #56]	@ (8001294 <MX_FREERTOS_Init+0x88>)
 800125a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	08012fb8 	.word	0x08012fb8
 8001264:	200012b8 	.word	0x200012b8
 8001268:	08012f28 	.word	0x08012f28
 800126c:	08001299 	.word	0x08001299
 8001270:	200012a8 	.word	0x200012a8
 8001274:	08012f4c 	.word	0x08012f4c
 8001278:	08001381 	.word	0x08001381
 800127c:	200012ac 	.word	0x200012ac
 8001280:	08012f70 	.word	0x08012f70
 8001284:	08001399 	.word	0x08001399
 8001288:	200012b0 	.word	0x200012b0
 800128c:	08012f94 	.word	0x08012f94
 8001290:	08001415 	.word	0x08001415
 8001294:	200012b4 	.word	0x200012b4

08001298 <StartDisplayTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b096      	sub	sp, #88	@ 0x58
 800129c:	af02      	add	r7, sp, #8
 800129e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
	uint8_t lcdline1[24]={0};
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
	  uint8_t lcdline2[24]={0};
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	f107 0318 	add.w	r3, r7, #24
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
	  float temperature;
	  float light;
	  float moisture;
	  for(;;)
	  {
		  getAnalogMeasure(anaTemperature, &temperature);
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	2000      	movs	r0, #0
 80012d0:	f00d f9f2 	bl	800e6b8 <getAnalogMeasure>
		  getAnalogMeasure(anaLight, &light);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4619      	mov	r1, r3
 80012da:	2001      	movs	r0, #1
 80012dc:	f00d f9ec 	bl	800e6b8 <getAnalogMeasure>
		  getAnalogMeasure(anaMoisture, &moisture);
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	4619      	mov	r1, r3
 80012e6:	2002      	movs	r0, #2
 80012e8:	f00d f9e6 	bl	800e6b8 <getAnalogMeasure>

		  osMutexAcquire(I2CMutexHandle, 100);
 80012ec:	4b20      	ldr	r3, [pc, #128]	@ (8001370 <StartDisplayTask+0xd8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2164      	movs	r1, #100	@ 0x64
 80012f2:	4618      	mov	r0, r3
 80012f4:	f009 fecd 	bl	800b092 <osMutexAcquire>
		  dateFormat("dmy  H:i:s", getDateTime(), (char*)lcdline1);
 80012f8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00e fd0f 	bl	800fd20 <getDateTime>
 8001302:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800130c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800130e:	4819      	ldr	r0, [pc, #100]	@ (8001374 <StartDisplayTask+0xdc>)
 8001310:	f00e fae6 	bl	800f8e0 <dateFormat>

		  sprintf((char*)lcdline2, "T:%2ddC Lgt:%5d",(int)temperature,(int)light);
 8001314:	edd7 7a04 	vldr	s15, [r7, #16]
 8001318:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800131c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001320:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001324:	f107 0014 	add.w	r0, r7, #20
 8001328:	ee17 3a90 	vmov	r3, s15
 800132c:	ee17 2a10 	vmov	r2, s14
 8001330:	4911      	ldr	r1, [pc, #68]	@ (8001378 <StartDisplayTask+0xe0>)
 8001332:	f010 f8bd 	bl	80114b0 <siprintf>

		  writeMsg(&hi2c1, lcdline1, 16, 0, 0);
 8001336:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800133a:	2300      	movs	r3, #0
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2300      	movs	r3, #0
 8001340:	2210      	movs	r2, #16
 8001342:	480e      	ldr	r0, [pc, #56]	@ (800137c <StartDisplayTask+0xe4>)
 8001344:	f00e f8f2 	bl	800f52c <writeMsg>
		  writeMsg(&hi2c1, lcdline2,  16, 0, 1);
 8001348:	f107 0114 	add.w	r1, r7, #20
 800134c:	2301      	movs	r3, #1
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2300      	movs	r3, #0
 8001352:	2210      	movs	r2, #16
 8001354:	4809      	ldr	r0, [pc, #36]	@ (800137c <StartDisplayTask+0xe4>)
 8001356:	f00e f8e9 	bl	800f52c <writeMsg>

		  osMutexRelease(I2CMutexHandle);
 800135a:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <StartDisplayTask+0xd8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f009 fee2 	bl	800b128 <osMutexRelease>
		  osDelay(1000);
 8001364:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001368:	f009 fdf2 	bl	800af50 <osDelay>
		  getAnalogMeasure(anaTemperature, &temperature);
 800136c:	bf00      	nop
 800136e:	e7ab      	b.n	80012c8 <StartDisplayTask+0x30>
 8001370:	200012b8 	.word	0x200012b8
 8001374:	080129c0 	.word	0x080129c0
 8001378:	080129cc 	.word	0x080129cc
 800137c:	200012bc 	.word	0x200012bc

08001380 <StartCommandTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommandTask */
void StartCommandTask(void *argument)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandTask */
	vCommandConsoleTask(argument);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f00d fc55 	bl	800ec38 <vCommandConsoleTask>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800138e:	2001      	movs	r0, #1
 8001390:	f009 fdde 	bl	800af50 <osDelay>
 8001394:	e7fb      	b.n	800138e <StartCommandTask+0xe>
	...

08001398 <StartJukeboxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJukeboxTask */
void StartJukeboxTask(void *argument)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJukeboxTask */
  /* Infinite loop */
	for(;;)
	{
		  if(song == eZelda)
 80013a0:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <StartJukeboxTask+0x6c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d10a      	bne.n	80013be <StartJukeboxTask+0x26>
		  {
			  buzzerMNG_playSong(zelda,3,152,500);
 80013a8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80013ac:	2298      	movs	r2, #152	@ 0x98
 80013ae:	2103      	movs	r1, #3
 80013b0:	4815      	ldr	r0, [pc, #84]	@ (8001408 <StartJukeboxTask+0x70>)
 80013b2:	f00d faf1 	bl	800e998 <buzzerMNG_playSong>
			  song = eNone;
 80013b6:	4b13      	ldr	r3, [pc, #76]	@ (8001404 <StartJukeboxTask+0x6c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	e01d      	b.n	80013fa <StartJukeboxTask+0x62>
		  }
		  else if(song == eMario)
 80013be:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <StartJukeboxTask+0x6c>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d10a      	bne.n	80013dc <StartJukeboxTask+0x44>
		  {
			  buzzerMNG_playSong(mario,3,127, 360);
 80013c6:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80013ca:	227f      	movs	r2, #127	@ 0x7f
 80013cc:	2103      	movs	r1, #3
 80013ce:	480f      	ldr	r0, [pc, #60]	@ (800140c <StartJukeboxTask+0x74>)
 80013d0:	f00d fae2 	bl	800e998 <buzzerMNG_playSong>
			  song = eNone;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <StartJukeboxTask+0x6c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	e00e      	b.n	80013fa <StartJukeboxTask+0x62>
		  }
		  else if(song == ePokemon)
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <StartJukeboxTask+0x6c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d10a      	bne.n	80013fa <StartJukeboxTask+0x62>
		  {
			  buzzerMNG_playSong(pokemon,2,451, 180*4);
 80013e4:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
 80013e8:	f240 12c3 	movw	r2, #451	@ 0x1c3
 80013ec:	2102      	movs	r1, #2
 80013ee:	4808      	ldr	r0, [pc, #32]	@ (8001410 <StartJukeboxTask+0x78>)
 80013f0:	f00d fad2 	bl	800e998 <buzzerMNG_playSong>
			  song = eNone;
 80013f4:	4b03      	ldr	r3, [pc, #12]	@ (8001404 <StartJukeboxTask+0x6c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
		  }
	  osDelay(1000);
 80013fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013fe:	f009 fda7 	bl	800af50 <osDelay>
		  if(song == eZelda)
 8001402:	e7cd      	b.n	80013a0 <StartJukeboxTask+0x8>
 8001404:	200038cd 	.word	0x200038cd
 8001408:	20000360 	.word	0x20000360
 800140c:	20000064 	.word	0x20000064
 8001410:	200006f0 	.word	0x200006f0

08001414 <StartTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTest */
void StartTest(void *argument)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
//todo: test file creation, and file write content, complete file read.
	//fileMngTest();
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800141c:	2001      	movs	r0, #1
 800141e:	f009 fd97 	bl	800af50 <osDelay>
 8001422:	e7fb      	b.n	800141c <StartTest+0x8>

08001424 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	4b3c      	ldr	r3, [pc, #240]	@ (800152c <MX_GPIO_Init+0x108>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	4a3b      	ldr	r2, [pc, #236]	@ (800152c <MX_GPIO_Init+0x108>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001446:	4b39      	ldr	r3, [pc, #228]	@ (800152c <MX_GPIO_Init+0x108>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001452:	4b36      	ldr	r3, [pc, #216]	@ (800152c <MX_GPIO_Init+0x108>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	4a35      	ldr	r2, [pc, #212]	@ (800152c <MX_GPIO_Init+0x108>)
 8001458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800145c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145e:	4b33      	ldr	r3, [pc, #204]	@ (800152c <MX_GPIO_Init+0x108>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b30      	ldr	r3, [pc, #192]	@ (800152c <MX_GPIO_Init+0x108>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	4a2f      	ldr	r2, [pc, #188]	@ (800152c <MX_GPIO_Init+0x108>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001476:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <MX_GPIO_Init+0x108>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <MX_GPIO_Init+0x108>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a29      	ldr	r2, [pc, #164]	@ (800152c <MX_GPIO_Init+0x108>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148e:	4b27      	ldr	r3, [pc, #156]	@ (800152c <MX_GPIO_Init+0x108>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149a:	4b24      	ldr	r3, [pc, #144]	@ (800152c <MX_GPIO_Init+0x108>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a23      	ldr	r2, [pc, #140]	@ (800152c <MX_GPIO_Init+0x108>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b21      	ldr	r3, [pc, #132]	@ (800152c <MX_GPIO_Init+0x108>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ultrason_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80014b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014bc:	f002 ff64 	bl	8004388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2104      	movs	r1, #4
 80014c4:	481a      	ldr	r0, [pc, #104]	@ (8001530 <MX_GPIO_Init+0x10c>)
 80014c6:	f002 ff5f 	bl	8004388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4814      	ldr	r0, [pc, #80]	@ (8001534 <MX_GPIO_Init+0x110>)
 80014e2:	f002 fda7 	bl	8004034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|ultrason_Pin;
 80014e6:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80014ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001502:	f002 fd97 	bl	8004034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001506:	2304      	movs	r3, #4
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	4804      	ldr	r0, [pc, #16]	@ (8001530 <MX_GPIO_Init+0x10c>)
 800151e:	f002 fd89 	bl	8004034 <HAL_GPIO_Init>

}
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	@ 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	48000c00 	.word	0x48000c00
 8001534:	48000800 	.word	0x48000800

08001538 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <MX_I2C1_Init+0x74>)
 800153e:	4a1c      	ldr	r2, [pc, #112]	@ (80015b0 <MX_I2C1_Init+0x78>)
 8001540:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8001542:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <MX_I2C1_Init+0x74>)
 8001544:	4a1b      	ldr	r2, [pc, #108]	@ (80015b4 <MX_I2C1_Init+0x7c>)
 8001546:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001548:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <MX_I2C1_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154e:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <MX_I2C1_Init+0x74>)
 8001550:	2201      	movs	r2, #1
 8001552:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <MX_I2C1_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800155a:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <MX_I2C1_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001560:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <MX_I2C1_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001566:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_I2C1_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <MX_I2C1_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001572:	480e      	ldr	r0, [pc, #56]	@ (80015ac <MX_I2C1_Init+0x74>)
 8001574:	f002 ff20 	bl	80043b8 <HAL_I2C_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800157e:	f000 f985 	bl	800188c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001582:	2100      	movs	r1, #0
 8001584:	4809      	ldr	r0, [pc, #36]	@ (80015ac <MX_I2C1_Init+0x74>)
 8001586:	f003 fc53 	bl	8004e30 <HAL_I2CEx_ConfigAnalogFilter>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001590:	f000 f97c 	bl	800188c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001594:	2100      	movs	r1, #0
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <MX_I2C1_Init+0x74>)
 8001598:	f003 fc95 	bl	8004ec6 <HAL_I2CEx_ConfigDigitalFilter>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015a2:	f000 f973 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200012bc 	.word	0x200012bc
 80015b0:	40005400 	.word	0x40005400
 80015b4:	10d19ce4 	.word	0x10d19ce4

080015b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b0ac      	sub	sp, #176	@ 0xb0
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2288      	movs	r2, #136	@ 0x88
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f010 f861 	bl	80116a0 <memset>
  if(i2cHandle->Instance==I2C1)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a21      	ldr	r2, [pc, #132]	@ (8001668 <HAL_I2C_MspInit+0xb0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d13b      	bne.n	8001660 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015e8:	2340      	movs	r3, #64	@ 0x40
 80015ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4618      	mov	r0, r3
 80015f6:	f004 fb49 	bl	8005c8c <HAL_RCCEx_PeriphCLKConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001600:	f000 f944 	bl	800188c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001604:	4b19      	ldr	r3, [pc, #100]	@ (800166c <HAL_I2C_MspInit+0xb4>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001608:	4a18      	ldr	r2, [pc, #96]	@ (800166c <HAL_I2C_MspInit+0xb4>)
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001610:	4b16      	ldr	r3, [pc, #88]	@ (800166c <HAL_I2C_MspInit+0xb4>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800161c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001620:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001624:	2312      	movs	r3, #18
 8001626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001636:	2304      	movs	r3, #4
 8001638:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001640:	4619      	mov	r1, r3
 8001642:	480b      	ldr	r0, [pc, #44]	@ (8001670 <HAL_I2C_MspInit+0xb8>)
 8001644:	f002 fcf6 	bl	8004034 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001648:	4b08      	ldr	r3, [pc, #32]	@ (800166c <HAL_I2C_MspInit+0xb4>)
 800164a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164c:	4a07      	ldr	r2, [pc, #28]	@ (800166c <HAL_I2C_MspInit+0xb4>)
 800164e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001652:	6593      	str	r3, [r2, #88]	@ 0x58
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <HAL_I2C_MspInit+0xb4>)
 8001656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001658:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001660:	bf00      	nop
 8001662:	37b0      	adds	r7, #176	@ 0xb0
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40005400 	.word	0x40005400
 800166c:	40021000 	.word	0x40021000
 8001670:	48000400 	.word	0x48000400

08001674 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 800167c:	2108      	movs	r1, #8
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f006 fada 	bl	8007c38 <HAL_TIM_PWM_Stop_DMA>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	@ 0x28
 8001690:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001692:	f000 ff3b 	bl	800250c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001696:	f000 f875 	bl	8001784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169a:	f7ff fec3 	bl	8001424 <MX_GPIO_Init>
  MX_DMA_Init();
 800169e:	f7ff fd83 	bl	80011a8 <MX_DMA_Init>
  MX_I2C1_Init();
 80016a2:	f7ff ff49 	bl	8001538 <MX_I2C1_Init>
  MX_ADC1_Init();
 80016a6:	f7ff fc4f 	bl	8000f48 <MX_ADC1_Init>
  MX_TIM2_Init();
 80016aa:	f000 fbbb 	bl	8001e24 <MX_TIM2_Init>
  MX_TIM1_Init();
 80016ae:	f000 fb0d 	bl	8001ccc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80016b2:	f000 fe6d 	bl	8002390 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80016b6:	f000 fc2b 	bl	8001f10 <MX_TIM3_Init>
  MX_TIM8_Init();
 80016ba:	f000 fcf1 	bl	80020a0 <MX_TIM8_Init>
  MX_TIM5_Init();
 80016be:	f000 fc9f 	bl	8002000 <MX_TIM5_Init>
  MX_SPI3_Init();
 80016c2:	f000 f8e9 	bl	8001898 <MX_SPI3_Init>
  MX_FATFS_Init();
 80016c6:	f009 f8ad 	bl	800a824 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //test I2C lcd screen
  //scanI2C(&huart2,&hi2c1);

  lcd_init(&hi2c1, 16, 2, 1);
 80016ca:	2301      	movs	r3, #1
 80016cc:	2202      	movs	r2, #2
 80016ce:	2110      	movs	r1, #16
 80016d0:	4821      	ldr	r0, [pc, #132]	@ (8001758 <main+0xcc>)
 80016d2:	f00d ff55 	bl	800f580 <lcd_init>
  buzzerMNG_init(&huart2,&htim1, &htim5, TIM_CHANNEL_1);
 80016d6:	2300      	movs	r3, #0
 80016d8:	4a20      	ldr	r2, [pc, #128]	@ (800175c <main+0xd0>)
 80016da:	4921      	ldr	r1, [pc, #132]	@ (8001760 <main+0xd4>)
 80016dc:	4821      	ldr	r0, [pc, #132]	@ (8001764 <main+0xd8>)
 80016de:	f00d f8bf 	bl	800e860 <buzzerMNG_init>
  HCSR04Init(&htim8);
 80016e2:	4821      	ldr	r0, [pc, #132]	@ (8001768 <main+0xdc>)
 80016e4:	f00f fc4a 	bl	8010f7c <HCSR04Init>
  init_analog_mng(&hadc1);
 80016e8:	4820      	ldr	r0, [pc, #128]	@ (800176c <main+0xe0>)
 80016ea:	f00c ffc5 	bl	800e678 <init_analog_mng>
  servoMng_Init(&htim3, TIM_CHANNEL_2, 600,  2600, 0, 180);
 80016ee:	23b4      	movs	r3, #180	@ 0xb4
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	2300      	movs	r3, #0
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	f640 2328 	movw	r3, #2600	@ 0xa28
 80016fa:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80016fe:	2104      	movs	r1, #4
 8001700:	481b      	ldr	r0, [pc, #108]	@ (8001770 <main+0xe4>)
 8001702:	f00f fb43 	bl	8010d8c <servoMng_Init>
  WS28i3Init(&htim2);
 8001706:	481b      	ldr	r0, [pc, #108]	@ (8001774 <main+0xe8>)
 8001708:	f00d ffc0 	bl	800f68c <WS28i3Init>
  DS1307Init(&hi2c1);
 800170c:	4812      	ldr	r0, [pc, #72]	@ (8001758 <main+0xcc>)
 800170e:	f00e fe39 	bl	8010384 <DS1307Init>

  memset(strBuffer,0,40);
 8001712:	2228      	movs	r2, #40	@ 0x28
 8001714:	2100      	movs	r1, #0
 8001716:	4818      	ldr	r0, [pc, #96]	@ (8001778 <main+0xec>)
 8001718:	f00f ffc2 	bl	80116a0 <memset>
  char datef[20];
  dateFormat("dmy  H:i:s", getDateTime(), datef);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4618      	mov	r0, r3
 8001722:	f00e fafd 	bl	800fd20 <getDateTime>
 8001726:	463b      	mov	r3, r7
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001730:	4812      	ldr	r0, [pc, #72]	@ (800177c <main+0xf0>)
 8001732:	f00e f8d5 	bl	800f8e0 <dateFormat>
  sprintf((char*)strBuffer,"PROGRAM START %s\r\n",datef);
 8001736:	463b      	mov	r3, r7
 8001738:	461a      	mov	r2, r3
 800173a:	4911      	ldr	r1, [pc, #68]	@ (8001780 <main+0xf4>)
 800173c:	480e      	ldr	r0, [pc, #56]	@ (8001778 <main+0xec>)
 800173e:	f00f feb7 	bl	80114b0 <siprintf>
  printf((char*)strBuffer);
 8001742:	480d      	ldr	r0, [pc, #52]	@ (8001778 <main+0xec>)
 8001744:	f00f fe3c 	bl	80113c0 <iprintf>
  read_file("test.txt");*/
  //read_file("test.txt");
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001748:	f009 fb26 	bl	800ad98 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800174c:	f7ff fd5e 	bl	800120c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001750:	f009 fb46 	bl	800ade0 <osKernelStart>

//  int min_pwm=600; //us
//  int max_pwm=2600; //us
//  int pwm_value=min_pwm;
//  int step = 0;
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <main+0xc8>
 8001758:	200012bc 	.word	0x200012bc
 800175c:	200014d0 	.word	0x200014d0
 8001760:	200013ec 	.word	0x200013ec
 8001764:	200015b0 	.word	0x200015b0
 8001768:	2000151c 	.word	0x2000151c
 800176c:	200011fc 	.word	0x200011fc
 8001770:	20001484 	.word	0x20001484
 8001774:	20001438 	.word	0x20001438
 8001778:	20001310 	.word	0x20001310
 800177c:	080129dc 	.word	0x080129dc
 8001780:	080129e8 	.word	0x080129e8

08001784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b096      	sub	sp, #88	@ 0x58
 8001788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	2244      	movs	r2, #68	@ 0x44
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f00f ff84 	bl	80116a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001798:	463b      	mov	r3, r7
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80017aa:	f003 fbe7 	bl	8004f7c <HAL_PWREx_ControlVoltageScaling>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80017b4:	f000 f86a 	bl	800188c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017b8:	2302      	movs	r3, #2
 80017ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c2:	2310      	movs	r3, #16
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c6:	2302      	movs	r3, #2
 80017c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017ca:	2302      	movs	r3, #2
 80017cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017ce:	2301      	movs	r3, #1
 80017d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80017d2:	230a      	movs	r3, #10
 80017d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017d6:	2307      	movs	r3, #7
 80017d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017da:	2302      	movs	r3, #2
 80017dc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017de:	2302      	movs	r3, #2
 80017e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fc1e 	bl	8005028 <HAL_RCC_OscConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80017f2:	f000 f84b 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f6:	230f      	movs	r3, #15
 80017f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fa:	2303      	movs	r3, #3
 80017fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800180a:	463b      	mov	r3, r7
 800180c:	2104      	movs	r1, #4
 800180e:	4618      	mov	r0, r3
 8001810:	f003 ffe6 	bl	80057e0 <HAL_RCC_ClockConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800181a:	f000 f837 	bl	800188c <Error_Handler>
  }
}
 800181e:	bf00      	nop
 8001820:	3758      	adds	r7, #88	@ 0x58
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	b29a      	uxth	r2, r3
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	4804      	ldr	r0, [pc, #16]	@ (8001850 <_write+0x28>)
 8001840:	f007 fc76 	bl	8009130 <HAL_UART_Transmit>
  return len;
 8001844:	687b      	ldr	r3, [r7, #4]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200015b0 	.word	0x200015b0

08001854 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim == &htim5 )
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a08      	ldr	r2, [pc, #32]	@ (8001880 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d102      	bne.n	800186a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	 u8BuzzerTbFlag = 1;
 8001864:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a06      	ldr	r2, [pc, #24]	@ (8001888 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d101      	bne.n	8001878 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8001874:	f000 fe6a 	bl	800254c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200014d0 	.word	0x200014d0
 8001884:	200038cc 	.word	0x200038cc
 8001888:	40000800 	.word	0x40000800

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <Error_Handler+0x8>

08001898 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800189c:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <MX_SPI3_Init+0x74>)
 800189e:	4a1c      	ldr	r2, [pc, #112]	@ (8001910 <MX_SPI3_Init+0x78>)
 80018a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	@ (800190c <MX_SPI3_Init+0x74>)
 80018a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018aa:	4b18      	ldr	r3, [pc, #96]	@ (800190c <MX_SPI3_Init+0x74>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018b0:	4b16      	ldr	r3, [pc, #88]	@ (800190c <MX_SPI3_Init+0x74>)
 80018b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80018b6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018b8:	4b14      	ldr	r3, [pc, #80]	@ (800190c <MX_SPI3_Init+0x74>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018be:	4b13      	ldr	r3, [pc, #76]	@ (800190c <MX_SPI3_Init+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018c4:	4b11      	ldr	r3, [pc, #68]	@ (800190c <MX_SPI3_Init+0x74>)
 80018c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018ca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <MX_SPI3_Init+0x74>)
 80018ce:	2238      	movs	r2, #56	@ 0x38
 80018d0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <MX_SPI3_Init+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <MX_SPI3_Init+0x74>)
 80018da:	2200      	movs	r2, #0
 80018dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <MX_SPI3_Init+0x74>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80018e4:	4b09      	ldr	r3, [pc, #36]	@ (800190c <MX_SPI3_Init+0x74>)
 80018e6:	2207      	movs	r2, #7
 80018e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	@ (800190c <MX_SPI3_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <MX_SPI3_Init+0x74>)
 80018f2:	2208      	movs	r2, #8
 80018f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	@ (800190c <MX_SPI3_Init+0x74>)
 80018f8:	f004 fe84 	bl	8006604 <HAL_SPI_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001902:	f7ff ffc3 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20001338 	.word	0x20001338
 8001910:	40003c00 	.word	0x40003c00

08001914 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	@ 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a17      	ldr	r2, [pc, #92]	@ (8001990 <HAL_SPI_MspInit+0x7c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d128      	bne.n	8001988 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001936:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193a:	4a16      	ldr	r2, [pc, #88]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 800193c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001940:	6593      	str	r3, [r2, #88]	@ 0x58
 8001942:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001946:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800194e:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	4a10      	ldr	r2, [pc, #64]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001966:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001970:	2301      	movs	r3, #1
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001978:	2306      	movs	r3, #6
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4805      	ldr	r0, [pc, #20]	@ (8001998 <HAL_SPI_MspInit+0x84>)
 8001984:	f002 fb56 	bl	8004034 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001988:	bf00      	nop
 800198a:	3728      	adds	r7, #40	@ 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40003c00 	.word	0x40003c00
 8001994:	40021000 	.word	0x40021000
 8001998:	48000800 	.word	0x48000800

0800199c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a6:	4a10      	ldr	r2, [pc, #64]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ae:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019be:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019c6:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	210f      	movs	r1, #15
 80019d6:	f06f 0001 	mvn.w	r0, #1
 80019da:	f002 f88b 	bl	8003af4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000

080019ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08e      	sub	sp, #56	@ 0x38
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80019fa:	4b34      	ldr	r3, [pc, #208]	@ (8001acc <HAL_InitTick+0xe0>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fe:	4a33      	ldr	r2, [pc, #204]	@ (8001acc <HAL_InitTick+0xe0>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a06:	4b31      	ldr	r3, [pc, #196]	@ (8001acc <HAL_InitTick+0xe0>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a12:	f107 0210 	add.w	r2, r7, #16
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f004 f8a3 	bl	8005b68 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d103      	bne.n	8001a34 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a2c:	f004 f870 	bl	8005b10 <HAL_RCC_GetPCLK1Freq>
 8001a30:	6378      	str	r0, [r7, #52]	@ 0x34
 8001a32:	e004      	b.n	8001a3e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a34:	f004 f86c 	bl	8005b10 <HAL_RCC_GetPCLK1Freq>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a40:	4a23      	ldr	r2, [pc, #140]	@ (8001ad0 <HAL_InitTick+0xe4>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	0c9b      	lsrs	r3, r3, #18
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001a4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ad4 <HAL_InitTick+0xe8>)
 8001a4e:	4a22      	ldr	r2, [pc, #136]	@ (8001ad8 <HAL_InitTick+0xec>)
 8001a50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001a52:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <HAL_InitTick+0xe8>)
 8001a54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a58:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad4 <HAL_InitTick+0xe8>)
 8001a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a5e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad4 <HAL_InitTick+0xe8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <HAL_InitTick+0xe8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_InitTick+0xe8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001a72:	4818      	ldr	r0, [pc, #96]	@ (8001ad4 <HAL_InitTick+0xe8>)
 8001a74:	f005 fb64 	bl	8007140 <HAL_TIM_Base_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d11b      	bne.n	8001abe <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001a86:	4813      	ldr	r0, [pc, #76]	@ (8001ad4 <HAL_InitTick+0xe8>)
 8001a88:	f005 fc1a 	bl	80072c0 <HAL_TIM_Base_Start_IT>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001a92:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d111      	bne.n	8001abe <HAL_InitTick+0xd2>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a9a:	201e      	movs	r0, #30
 8001a9c:	f002 f846 	bl	8003b2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b0f      	cmp	r3, #15
 8001aa4:	d808      	bhi.n	8001ab8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	201e      	movs	r0, #30
 8001aac:	f002 f822 	bl	8003af4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <HAL_InitTick+0xf0>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e002      	b.n	8001abe <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001abe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3738      	adds	r7, #56	@ 0x38
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	431bde83 	.word	0x431bde83
 8001ad4:	2000139c 	.word	0x2000139c
 8001ad8:	40000800 	.word	0x40000800
 8001adc:	20000004 	.word	0x20000004

08001ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <NMI_Handler+0x4>

08001ae8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	volatile uint32_t csfr= SCB->CFSR ; // load into variable
 8001aee:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <HardFault_Handler+0x1c>)
 8001af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af2:	607b      	str	r3, [r7, #4]
	 printf ( "SCB-> CSFR 0x%08x \n", SCB->CFSR); // print
 8001af4:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <HardFault_Handler+0x1c>)
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af8:	4619      	mov	r1, r3
 8001afa:	4803      	ldr	r0, [pc, #12]	@ (8001b08 <HardFault_Handler+0x20>)
 8001afc:	f00f fc60 	bl	80113c0 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <HardFault_Handler+0x18>
 8001b04:	e000ed00 	.word	0xe000ed00
 8001b08:	080129fc 	.word	0x080129fc

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <MemManage_Handler+0x4>

08001b14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <BusFault_Handler+0x4>

08001b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <UsageFault_Handler+0x4>

08001b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8001b38:	4802      	ldr	r0, [pc, #8]	@ (8001b44 <DMA1_Channel1_IRQHandler+0x10>)
 8001b3a:	f002 f99c 	bl	8003e76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20001568 	.word	0x20001568

08001b48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b4c:	4802      	ldr	r0, [pc, #8]	@ (8001b58 <TIM4_IRQHandler+0x10>)
 8001b4e:	f006 f96b 	bl	8007e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	2000139c 	.word	0x2000139c

08001b5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b60:	4802      	ldr	r0, [pc, #8]	@ (8001b6c <USART2_IRQHandler+0x10>)
 8001b62:	f007 fbbb 	bl	80092dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200015b0 	.word	0x200015b0

08001b70 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b74:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <TIM5_IRQHandler+0x10>)
 8001b76:	f006 f957 	bl	8007e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200014d0 	.word	0x200014d0

08001b84 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <DMA2_Channel3_IRQHandler+0x10>)
 8001b8a:	f002 f974 	bl	8003e76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20001260 	.word	0x20001260

08001b98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e00a      	b.n	8001bc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001baa:	f3af 8000 	nop.w
 8001bae:	4601      	mov	r1, r0
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60ba      	str	r2, [r7, #8]
 8001bb6:	b2ca      	uxtb	r2, r1
 8001bb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dbf0      	blt.n	8001baa <_read+0x12>
  }

  return len;
 8001bc8:	687b      	ldr	r3, [r7, #4]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bfa:	605a      	str	r2, [r3, #4]
  return 0;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <_isatty>:

int _isatty(int file)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c44:	4a14      	ldr	r2, [pc, #80]	@ (8001c98 <_sbrk+0x5c>)
 8001c46:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <_sbrk+0x60>)
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c50:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d102      	bne.n	8001c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c58:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <_sbrk+0x64>)
 8001c5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ca4 <_sbrk+0x68>)
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d207      	bcs.n	8001c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c6c:	f00f fe04 	bl	8011878 <__errno>
 8001c70:	4603      	mov	r3, r0
 8001c72:	220c      	movs	r2, #12
 8001c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	e009      	b.n	8001c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c82:	4b07      	ldr	r3, [pc, #28]	@ (8001ca0 <_sbrk+0x64>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ca0 <_sbrk+0x64>)
 8001c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20018000 	.word	0x20018000
 8001c9c:	00000400 	.word	0x00000400
 8001ca0:	200013e8 	.word	0x200013e8
 8001ca4:	20003b68 	.word	0x20003b68

08001ca8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <SystemInit+0x20>)
 8001cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cb2:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <SystemInit+0x20>)
 8001cb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim2_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b09a      	sub	sp, #104	@ 0x68
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
 8001cfc:	615a      	str	r2, [r3, #20]
 8001cfe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	222c      	movs	r2, #44	@ 0x2c
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f00f fcca 	bl	80116a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d0c:	4b43      	ldr	r3, [pc, #268]	@ (8001e1c <MX_TIM1_Init+0x150>)
 8001d0e:	4a44      	ldr	r2, [pc, #272]	@ (8001e20 <MX_TIM1_Init+0x154>)
 8001d10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001d12:	4b42      	ldr	r3, [pc, #264]	@ (8001e1c <MX_TIM1_Init+0x150>)
 8001d14:	224f      	movs	r2, #79	@ 0x4f
 8001d16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d18:	4b40      	ldr	r3, [pc, #256]	@ (8001e1c <MX_TIM1_Init+0x150>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8001d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001e1c <MX_TIM1_Init+0x150>)
 8001d20:	22c7      	movs	r2, #199	@ 0xc7
 8001d22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d24:	4b3d      	ldr	r3, [pc, #244]	@ (8001e1c <MX_TIM1_Init+0x150>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d2a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e1c <MX_TIM1_Init+0x150>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d30:	4b3a      	ldr	r3, [pc, #232]	@ (8001e1c <MX_TIM1_Init+0x150>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d36:	4839      	ldr	r0, [pc, #228]	@ (8001e1c <MX_TIM1_Init+0x150>)
 8001d38:	f005 fa02 	bl	8007140 <HAL_TIM_Base_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d42:	f7ff fda3 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d4a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d4c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d50:	4619      	mov	r1, r3
 8001d52:	4832      	ldr	r0, [pc, #200]	@ (8001e1c <MX_TIM1_Init+0x150>)
 8001d54:	f006 fa7e 	bl	8008254 <HAL_TIM_ConfigClockSource>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d5e:	f7ff fd95 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d62:	482e      	ldr	r0, [pc, #184]	@ (8001e1c <MX_TIM1_Init+0x150>)
 8001d64:	f005 fb4b 	bl	80073fe <HAL_TIM_PWM_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d6e:	f7ff fd8d 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d7e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d82:	4619      	mov	r1, r3
 8001d84:	4825      	ldr	r0, [pc, #148]	@ (8001e1c <MX_TIM1_Init+0x150>)
 8001d86:	f007 f861 	bl	8008e4c <HAL_TIMEx_MasterConfigSynchronization>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001d90:	f7ff fd7c 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d94:	2360      	movs	r3, #96	@ 0x60
 8001d96:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 100;
 8001d98:	2364      	movs	r3, #100	@ 0x64
 8001d9a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001da0:	2300      	movs	r3, #0
 8001da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001da8:	2300      	movs	r3, #0
 8001daa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001db0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001db4:	2200      	movs	r2, #0
 8001db6:	4619      	mov	r1, r3
 8001db8:	4818      	ldr	r0, [pc, #96]	@ (8001e1c <MX_TIM1_Init+0x150>)
 8001dba:	f006 f937 	bl	800802c <HAL_TIM_PWM_ConfigChannel>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001dc4:	f7ff fd62 	bl	800188c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ddc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001de0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001dea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4807      	ldr	r0, [pc, #28]	@ (8001e1c <MX_TIM1_Init+0x150>)
 8001dfe:	f007 f8ad 	bl	8008f5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001e08:	f7ff fd40 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e0c:	4803      	ldr	r0, [pc, #12]	@ (8001e1c <MX_TIM1_Init+0x150>)
 8001e0e:	f000 fa3f 	bl	8002290 <HAL_TIM_MspPostInit>

}
 8001e12:	bf00      	nop
 8001e14:	3768      	adds	r7, #104	@ 0x68
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200013ec 	.word	0x200013ec
 8001e20:	40012c00 	.word	0x40012c00

08001e24 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08e      	sub	sp, #56	@ 0x38
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e44:	463b      	mov	r3, r7
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	611a      	str	r2, [r3, #16]
 8001e52:	615a      	str	r2, [r3, #20]
 8001e54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e56:	4b2d      	ldr	r3, [pc, #180]	@ (8001f0c <MX_TIM2_Init+0xe8>)
 8001e58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f0c <MX_TIM2_Init+0xe8>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e64:	4b29      	ldr	r3, [pc, #164]	@ (8001f0c <MX_TIM2_Init+0xe8>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001e6a:	4b28      	ldr	r3, [pc, #160]	@ (8001f0c <MX_TIM2_Init+0xe8>)
 8001e6c:	2264      	movs	r2, #100	@ 0x64
 8001e6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e70:	4b26      	ldr	r3, [pc, #152]	@ (8001f0c <MX_TIM2_Init+0xe8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e76:	4b25      	ldr	r3, [pc, #148]	@ (8001f0c <MX_TIM2_Init+0xe8>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e7c:	4823      	ldr	r0, [pc, #140]	@ (8001f0c <MX_TIM2_Init+0xe8>)
 8001e7e:	f005 f95f 	bl	8007140 <HAL_TIM_Base_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e88:	f7ff fd00 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e96:	4619      	mov	r1, r3
 8001e98:	481c      	ldr	r0, [pc, #112]	@ (8001f0c <MX_TIM2_Init+0xe8>)
 8001e9a:	f006 f9db 	bl	8008254 <HAL_TIM_ConfigClockSource>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ea4:	f7ff fcf2 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ea8:	4818      	ldr	r0, [pc, #96]	@ (8001f0c <MX_TIM2_Init+0xe8>)
 8001eaa:	f005 faa8 	bl	80073fe <HAL_TIM_PWM_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001eb4:	f7ff fcea 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4811      	ldr	r0, [pc, #68]	@ (8001f0c <MX_TIM2_Init+0xe8>)
 8001ec8:	f006 ffc0 	bl	8008e4c <HAL_TIMEx_MasterConfigSynchronization>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001ed2:	f7ff fcdb 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ed6:	2360      	movs	r3, #96	@ 0x60
 8001ed8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	2208      	movs	r2, #8
 8001eea:	4619      	mov	r1, r3
 8001eec:	4807      	ldr	r0, [pc, #28]	@ (8001f0c <MX_TIM2_Init+0xe8>)
 8001eee:	f006 f89d 	bl	800802c <HAL_TIM_PWM_ConfigChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ef8:	f7ff fcc8 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001efc:	4803      	ldr	r0, [pc, #12]	@ (8001f0c <MX_TIM2_Init+0xe8>)
 8001efe:	f000 f9c7 	bl	8002290 <HAL_TIM_MspPostInit>

}
 8001f02:	bf00      	nop
 8001f04:	3738      	adds	r7, #56	@ 0x38
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20001438 	.word	0x20001438

08001f10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08e      	sub	sp, #56	@ 0x38
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f30:	463b      	mov	r3, r7
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	611a      	str	r2, [r3, #16]
 8001f3e:	615a      	str	r2, [r3, #20]
 8001f40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f42:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff8 <MX_TIM3_Init+0xe8>)
 8001f44:	4a2d      	ldr	r2, [pc, #180]	@ (8001ffc <MX_TIM3_Init+0xec>)
 8001f46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8001f48:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff8 <MX_TIM3_Init+0xe8>)
 8001f4a:	224f      	movs	r2, #79	@ 0x4f
 8001f4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff8 <MX_TIM3_Init+0xe8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001f54:	4b28      	ldr	r3, [pc, #160]	@ (8001ff8 <MX_TIM3_Init+0xe8>)
 8001f56:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001f5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5c:	4b26      	ldr	r3, [pc, #152]	@ (8001ff8 <MX_TIM3_Init+0xe8>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f62:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <MX_TIM3_Init+0xe8>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f68:	4823      	ldr	r0, [pc, #140]	@ (8001ff8 <MX_TIM3_Init+0xe8>)
 8001f6a:	f005 f8e9 	bl	8007140 <HAL_TIM_Base_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f74:	f7ff fc8a 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f82:	4619      	mov	r1, r3
 8001f84:	481c      	ldr	r0, [pc, #112]	@ (8001ff8 <MX_TIM3_Init+0xe8>)
 8001f86:	f006 f965 	bl	8008254 <HAL_TIM_ConfigClockSource>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001f90:	f7ff fc7c 	bl	800188c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f94:	4818      	ldr	r0, [pc, #96]	@ (8001ff8 <MX_TIM3_Init+0xe8>)
 8001f96:	f005 fa32 	bl	80073fe <HAL_TIM_PWM_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001fa0:	f7ff fc74 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4811      	ldr	r0, [pc, #68]	@ (8001ff8 <MX_TIM3_Init+0xe8>)
 8001fb4:	f006 ff4a 	bl	8008e4c <HAL_TIMEx_MasterConfigSynchronization>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001fbe:	f7ff fc65 	bl	800188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fc2:	2360      	movs	r3, #96	@ 0x60
 8001fc4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4807      	ldr	r0, [pc, #28]	@ (8001ff8 <MX_TIM3_Init+0xe8>)
 8001fda:	f006 f827 	bl	800802c <HAL_TIM_PWM_ConfigChannel>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001fe4:	f7ff fc52 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fe8:	4803      	ldr	r0, [pc, #12]	@ (8001ff8 <MX_TIM3_Init+0xe8>)
 8001fea:	f000 f951 	bl	8002290 <HAL_TIM_MspPostInit>

}
 8001fee:	bf00      	nop
 8001ff0:	3738      	adds	r7, #56	@ 0x38
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20001484 	.word	0x20001484
 8001ffc:	40000400 	.word	0x40000400

08002000 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002006:	f107 0310 	add.w	r3, r7, #16
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800201e:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <MX_TIM5_Init+0x98>)
 8002020:	4a1e      	ldr	r2, [pc, #120]	@ (800209c <MX_TIM5_Init+0x9c>)
 8002022:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8000-1;
 8002024:	4b1c      	ldr	r3, [pc, #112]	@ (8002098 <MX_TIM5_Init+0x98>)
 8002026:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800202a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202c:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <MX_TIM5_Init+0x98>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3000;
 8002032:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <MX_TIM5_Init+0x98>)
 8002034:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002038:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203a:	4b17      	ldr	r3, [pc, #92]	@ (8002098 <MX_TIM5_Init+0x98>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002040:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <MX_TIM5_Init+0x98>)
 8002042:	2200      	movs	r2, #0
 8002044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002046:	4814      	ldr	r0, [pc, #80]	@ (8002098 <MX_TIM5_Init+0x98>)
 8002048:	f005 f87a 	bl	8007140 <HAL_TIM_Base_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8002052:	f7ff fc1b 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002056:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800205a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	4619      	mov	r1, r3
 8002062:	480d      	ldr	r0, [pc, #52]	@ (8002098 <MX_TIM5_Init+0x98>)
 8002064:	f006 f8f6 	bl	8008254 <HAL_TIM_ConfigClockSource>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800206e:	f7ff fc0d 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	4619      	mov	r1, r3
 800207e:	4806      	ldr	r0, [pc, #24]	@ (8002098 <MX_TIM5_Init+0x98>)
 8002080:	f006 fee4 	bl	8008e4c <HAL_TIMEx_MasterConfigSynchronization>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800208a:	f7ff fbff 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	3720      	adds	r7, #32
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200014d0 	.word	0x200014d0
 800209c:	40000c00 	.word	0x40000c00

080020a0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a6:	f107 0310 	add.w	r3, r7, #16
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80020be:	4b20      	ldr	r3, [pc, #128]	@ (8002140 <MX_TIM8_Init+0xa0>)
 80020c0:	4a20      	ldr	r2, [pc, #128]	@ (8002144 <MX_TIM8_Init+0xa4>)
 80020c2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 80-1;
 80020c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002140 <MX_TIM8_Init+0xa0>)
 80020c6:	224f      	movs	r2, #79	@ 0x4f
 80020c8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002140 <MX_TIM8_Init+0xa0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002140 <MX_TIM8_Init+0xa0>)
 80020d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020d6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d8:	4b19      	ldr	r3, [pc, #100]	@ (8002140 <MX_TIM8_Init+0xa0>)
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020de:	4b18      	ldr	r3, [pc, #96]	@ (8002140 <MX_TIM8_Init+0xa0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e4:	4b16      	ldr	r3, [pc, #88]	@ (8002140 <MX_TIM8_Init+0xa0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80020ea:	4815      	ldr	r0, [pc, #84]	@ (8002140 <MX_TIM8_Init+0xa0>)
 80020ec:	f005 f828 	bl	8007140 <HAL_TIM_Base_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80020f6:	f7ff fbc9 	bl	800188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002100:	f107 0310 	add.w	r3, r7, #16
 8002104:	4619      	mov	r1, r3
 8002106:	480e      	ldr	r0, [pc, #56]	@ (8002140 <MX_TIM8_Init+0xa0>)
 8002108:	f006 f8a4 	bl	8008254 <HAL_TIM_ConfigClockSource>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002112:	f7ff fbbb 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	4619      	mov	r1, r3
 8002126:	4806      	ldr	r0, [pc, #24]	@ (8002140 <MX_TIM8_Init+0xa0>)
 8002128:	f006 fe90 	bl	8008e4c <HAL_TIMEx_MasterConfigSynchronization>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002132:	f7ff fbab 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002136:	bf00      	nop
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2000151c 	.word	0x2000151c
 8002144:	40013400 	.word	0x40013400

08002148 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a47      	ldr	r2, [pc, #284]	@ (8002274 <HAL_TIM_Base_MspInit+0x12c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d10c      	bne.n	8002174 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800215a:	4b47      	ldr	r3, [pc, #284]	@ (8002278 <HAL_TIM_Base_MspInit+0x130>)
 800215c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800215e:	4a46      	ldr	r2, [pc, #280]	@ (8002278 <HAL_TIM_Base_MspInit+0x130>)
 8002160:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002164:	6613      	str	r3, [r2, #96]	@ 0x60
 8002166:	4b44      	ldr	r3, [pc, #272]	@ (8002278 <HAL_TIM_Base_MspInit+0x130>)
 8002168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002172:	e07a      	b.n	800226a <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217c:	d138      	bne.n	80021f0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800217e:	4b3e      	ldr	r3, [pc, #248]	@ (8002278 <HAL_TIM_Base_MspInit+0x130>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002182:	4a3d      	ldr	r2, [pc, #244]	@ (8002278 <HAL_TIM_Base_MspInit+0x130>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6593      	str	r3, [r2, #88]	@ 0x58
 800218a:	4b3b      	ldr	r3, [pc, #236]	@ (8002278 <HAL_TIM_Base_MspInit+0x130>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8002196:	4b39      	ldr	r3, [pc, #228]	@ (800227c <HAL_TIM_Base_MspInit+0x134>)
 8002198:	4a39      	ldr	r2, [pc, #228]	@ (8002280 <HAL_TIM_Base_MspInit+0x138>)
 800219a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_4;
 800219c:	4b37      	ldr	r3, [pc, #220]	@ (800227c <HAL_TIM_Base_MspInit+0x134>)
 800219e:	2204      	movs	r2, #4
 80021a0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021a2:	4b36      	ldr	r3, [pc, #216]	@ (800227c <HAL_TIM_Base_MspInit+0x134>)
 80021a4:	2210      	movs	r2, #16
 80021a6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a8:	4b34      	ldr	r3, [pc, #208]	@ (800227c <HAL_TIM_Base_MspInit+0x134>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80021ae:	4b33      	ldr	r3, [pc, #204]	@ (800227c <HAL_TIM_Base_MspInit+0x134>)
 80021b0:	2280      	movs	r2, #128	@ 0x80
 80021b2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021b4:	4b31      	ldr	r3, [pc, #196]	@ (800227c <HAL_TIM_Base_MspInit+0x134>)
 80021b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021ba:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021bc:	4b2f      	ldr	r3, [pc, #188]	@ (800227c <HAL_TIM_Base_MspInit+0x134>)
 80021be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021c2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80021c4:	4b2d      	ldr	r3, [pc, #180]	@ (800227c <HAL_TIM_Base_MspInit+0x134>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021ca:	4b2c      	ldr	r3, [pc, #176]	@ (800227c <HAL_TIM_Base_MspInit+0x134>)
 80021cc:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80021d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80021d2:	482a      	ldr	r0, [pc, #168]	@ (800227c <HAL_TIM_Base_MspInit+0x134>)
 80021d4:	f001 fcb8 	bl	8003b48 <HAL_DMA_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_TIM_Base_MspInit+0x9a>
      Error_Handler();
 80021de:	f7ff fb55 	bl	800188c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a25      	ldr	r2, [pc, #148]	@ (800227c <HAL_TIM_Base_MspInit+0x134>)
 80021e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021e8:	4a24      	ldr	r2, [pc, #144]	@ (800227c <HAL_TIM_Base_MspInit+0x134>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80021ee:	e03c      	b.n	800226a <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM3)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a23      	ldr	r2, [pc, #140]	@ (8002284 <HAL_TIM_Base_MspInit+0x13c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d10c      	bne.n	8002214 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002278 <HAL_TIM_Base_MspInit+0x130>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002278 <HAL_TIM_Base_MspInit+0x130>)
 8002200:	f043 0302 	orr.w	r3, r3, #2
 8002204:	6593      	str	r3, [r2, #88]	@ 0x58
 8002206:	4b1c      	ldr	r3, [pc, #112]	@ (8002278 <HAL_TIM_Base_MspInit+0x130>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
}
 8002212:	e02a      	b.n	800226a <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM5)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1b      	ldr	r2, [pc, #108]	@ (8002288 <HAL_TIM_Base_MspInit+0x140>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d114      	bne.n	8002248 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800221e:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <HAL_TIM_Base_MspInit+0x130>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	4a15      	ldr	r2, [pc, #84]	@ (8002278 <HAL_TIM_Base_MspInit+0x130>)
 8002224:	f043 0308 	orr.w	r3, r3, #8
 8002228:	6593      	str	r3, [r2, #88]	@ 0x58
 800222a:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <HAL_TIM_Base_MspInit+0x130>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2105      	movs	r1, #5
 800223a:	2032      	movs	r0, #50	@ 0x32
 800223c:	f001 fc5a 	bl	8003af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002240:	2032      	movs	r0, #50	@ 0x32
 8002242:	f001 fc73 	bl	8003b2c <HAL_NVIC_EnableIRQ>
}
 8002246:	e010      	b.n	800226a <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM8)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0f      	ldr	r2, [pc, #60]	@ (800228c <HAL_TIM_Base_MspInit+0x144>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d10b      	bne.n	800226a <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <HAL_TIM_Base_MspInit+0x130>)
 8002254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002256:	4a08      	ldr	r2, [pc, #32]	@ (8002278 <HAL_TIM_Base_MspInit+0x130>)
 8002258:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800225c:	6613      	str	r3, [r2, #96]	@ 0x60
 800225e:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <HAL_TIM_Base_MspInit+0x130>)
 8002260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
}
 800226a:	bf00      	nop
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40012c00 	.word	0x40012c00
 8002278:	40021000 	.word	0x40021000
 800227c:	20001568 	.word	0x20001568
 8002280:	40020008 	.word	0x40020008
 8002284:	40000400 	.word	0x40000400
 8002288:	40000c00 	.word	0x40000c00
 800228c:	40013400 	.word	0x40013400

08002290 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	@ 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a34      	ldr	r2, [pc, #208]	@ (8002380 <HAL_TIM_MspPostInit+0xf0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d11e      	bne.n	80022f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	4b34      	ldr	r3, [pc, #208]	@ (8002384 <HAL_TIM_MspPostInit+0xf4>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b6:	4a33      	ldr	r2, [pc, #204]	@ (8002384 <HAL_TIM_MspPostInit+0xf4>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022be:	4b31      	ldr	r3, [pc, #196]	@ (8002384 <HAL_TIM_MspPostInit+0xf4>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022dc:	2301      	movs	r3, #1
 80022de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ea:	f001 fea3 	bl	8004034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022ee:	e043      	b.n	8002378 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022f8:	d11d      	bne.n	8002336 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fa:	4b22      	ldr	r3, [pc, #136]	@ (8002384 <HAL_TIM_MspPostInit+0xf4>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fe:	4a21      	ldr	r2, [pc, #132]	@ (8002384 <HAL_TIM_MspPostInit+0xf4>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002306:	4b1f      	ldr	r3, [pc, #124]	@ (8002384 <HAL_TIM_MspPostInit+0xf4>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002324:	2301      	movs	r3, #1
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4619      	mov	r1, r3
 800232e:	4816      	ldr	r0, [pc, #88]	@ (8002388 <HAL_TIM_MspPostInit+0xf8>)
 8002330:	f001 fe80 	bl	8004034 <HAL_GPIO_Init>
}
 8002334:	e020      	b.n	8002378 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM3)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a14      	ldr	r2, [pc, #80]	@ (800238c <HAL_TIM_MspPostInit+0xfc>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d11b      	bne.n	8002378 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002340:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <HAL_TIM_MspPostInit+0xf4>)
 8002342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002344:	4a0f      	ldr	r2, [pc, #60]	@ (8002384 <HAL_TIM_MspPostInit+0xf4>)
 8002346:	f043 0302 	orr.w	r3, r3, #2
 800234a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800234c:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <HAL_TIM_MspPostInit+0xf4>)
 800234e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002358:	2320      	movs	r3, #32
 800235a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002368:	2302      	movs	r3, #2
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	4805      	ldr	r0, [pc, #20]	@ (8002388 <HAL_TIM_MspPostInit+0xf8>)
 8002374:	f001 fe5e 	bl	8004034 <HAL_GPIO_Init>
}
 8002378:	bf00      	nop
 800237a:	3728      	adds	r7, #40	@ 0x28
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40012c00 	.word	0x40012c00
 8002384:	40021000 	.word	0x40021000
 8002388:	48000400 	.word	0x48000400
 800238c:	40000400 	.word	0x40000400

08002390 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002394:	4b14      	ldr	r3, [pc, #80]	@ (80023e8 <MX_USART2_UART_Init+0x58>)
 8002396:	4a15      	ldr	r2, [pc, #84]	@ (80023ec <MX_USART2_UART_Init+0x5c>)
 8002398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800239a:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <MX_USART2_UART_Init+0x58>)
 800239c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023a2:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <MX_USART2_UART_Init+0x58>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <MX_USART2_UART_Init+0x58>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <MX_USART2_UART_Init+0x58>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023b4:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <MX_USART2_UART_Init+0x58>)
 80023b6:	220c      	movs	r2, #12
 80023b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ba:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <MX_USART2_UART_Init+0x58>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023c0:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <MX_USART2_UART_Init+0x58>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023c6:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <MX_USART2_UART_Init+0x58>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023cc:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <MX_USART2_UART_Init+0x58>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023d2:	4805      	ldr	r0, [pc, #20]	@ (80023e8 <MX_USART2_UART_Init+0x58>)
 80023d4:	f006 fe5e 	bl	8009094 <HAL_UART_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023de:	f7ff fa55 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200015b0 	.word	0x200015b0
 80023ec:	40004400 	.word	0x40004400

080023f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b0ac      	sub	sp, #176	@ 0xb0
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	2288      	movs	r2, #136	@ 0x88
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f00f f945 	bl	80116a0 <memset>
  if(uartHandle->Instance==USART2)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a25      	ldr	r2, [pc, #148]	@ (80024b0 <HAL_UART_MspInit+0xc0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d143      	bne.n	80024a8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002420:	2302      	movs	r3, #2
 8002422:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002424:	2300      	movs	r3, #0
 8002426:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4618      	mov	r0, r3
 800242e:	f003 fc2d 	bl	8005c8c <HAL_RCCEx_PeriphCLKConfig>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002438:	f7ff fa28 	bl	800188c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800243c:	4b1d      	ldr	r3, [pc, #116]	@ (80024b4 <HAL_UART_MspInit+0xc4>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002440:	4a1c      	ldr	r2, [pc, #112]	@ (80024b4 <HAL_UART_MspInit+0xc4>)
 8002442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002446:	6593      	str	r3, [r2, #88]	@ 0x58
 8002448:	4b1a      	ldr	r3, [pc, #104]	@ (80024b4 <HAL_UART_MspInit+0xc4>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002454:	4b17      	ldr	r3, [pc, #92]	@ (80024b4 <HAL_UART_MspInit+0xc4>)
 8002456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002458:	4a16      	ldr	r2, [pc, #88]	@ (80024b4 <HAL_UART_MspInit+0xc4>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002460:	4b14      	ldr	r3, [pc, #80]	@ (80024b4 <HAL_UART_MspInit+0xc4>)
 8002462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800246c:	230c      	movs	r3, #12
 800246e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002484:	2307      	movs	r3, #7
 8002486:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800248e:	4619      	mov	r1, r3
 8002490:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002494:	f001 fdce 	bl	8004034 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2105      	movs	r1, #5
 800249c:	2026      	movs	r0, #38	@ 0x26
 800249e:	f001 fb29 	bl	8003af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024a2:	2026      	movs	r0, #38	@ 0x26
 80024a4:	f001 fb42 	bl	8003b2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80024a8:	bf00      	nop
 80024aa:	37b0      	adds	r7, #176	@ 0xb0
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40004400 	.word	0x40004400
 80024b4:	40021000 	.word	0x40021000

080024b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024bc:	f7ff fbf4 	bl	8001ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c0:	480c      	ldr	r0, [pc, #48]	@ (80024f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80024c2:	490d      	ldr	r1, [pc, #52]	@ (80024f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024c4:	4a0d      	ldr	r2, [pc, #52]	@ (80024fc <LoopForever+0xe>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c8:	e002      	b.n	80024d0 <LoopCopyDataInit>

080024ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ce:	3304      	adds	r3, #4

080024d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d4:	d3f9      	bcc.n	80024ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002504 <LoopForever+0x16>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024dc:	e001      	b.n	80024e2 <LoopFillZerobss>

080024de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e0:	3204      	adds	r2, #4

080024e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e4:	d3fb      	bcc.n	80024de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024e6:	f00f f9cd 	bl	8011884 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ea:	f7ff f8cf 	bl	800168c <main>

080024ee <LoopForever>:

LoopForever:
    b LoopForever
 80024ee:	e7fe      	b.n	80024ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f8:	200011e0 	.word	0x200011e0
  ldr r2, =_sidata
 80024fc:	080131dc 	.word	0x080131dc
  ldr r2, =_sbss
 8002500:	200011e0 	.word	0x200011e0
  ldr r4, =_ebss
 8002504:	20003b64 	.word	0x20003b64

08002508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002508:	e7fe      	b.n	8002508 <ADC1_2_IRQHandler>
	...

0800250c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002516:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <HAL_Init+0x3c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a0b      	ldr	r2, [pc, #44]	@ (8002548 <HAL_Init+0x3c>)
 800251c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002520:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002522:	2003      	movs	r0, #3
 8002524:	f001 fadb 	bl	8003ade <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002528:	200f      	movs	r0, #15
 800252a:	f7ff fa5f 	bl	80019ec <HAL_InitTick>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	71fb      	strb	r3, [r7, #7]
 8002538:	e001      	b.n	800253e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800253a:	f7ff fa2f 	bl	800199c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800253e:	79fb      	ldrb	r3, [r7, #7]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40022000 	.word	0x40022000

0800254c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002550:	4b06      	ldr	r3, [pc, #24]	@ (800256c <HAL_IncTick+0x20>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <HAL_IncTick+0x24>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4413      	add	r3, r2
 800255c:	4a04      	ldr	r2, [pc, #16]	@ (8002570 <HAL_IncTick+0x24>)
 800255e:	6013      	str	r3, [r2, #0]
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000008 	.word	0x20000008
 8002570:	20001638 	.word	0x20001638

08002574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return uwTick;
 8002578:	4b03      	ldr	r3, [pc, #12]	@ (8002588 <HAL_GetTick+0x14>)
 800257a:	681b      	ldr	r3, [r3, #0]
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	20001638 	.word	0x20001638

0800258c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002594:	f7ff ffee 	bl	8002574 <HAL_GetTick>
 8002598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d005      	beq.n	80025b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025a6:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <HAL_Delay+0x44>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025b2:	bf00      	nop
 80025b4:	f7ff ffde 	bl	8002574 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d8f7      	bhi.n	80025b4 <HAL_Delay+0x28>
  {
  }
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000008 	.word	0x20000008

080025d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	609a      	str	r2, [r3, #8]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	609a      	str	r2, [r3, #8]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3360      	adds	r3, #96	@ 0x60
 800264e:	461a      	mov	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b08      	ldr	r3, [pc, #32]	@ (8002680 <LL_ADC_SetOffset+0x44>)
 800265e:	4013      	ands	r3, r2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	4313      	orrs	r3, r2
 800266c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002674:	bf00      	nop
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	03fff000 	.word	0x03fff000

08002684 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3360      	adds	r3, #96	@ 0x60
 8002692:	461a      	mov	r2, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3360      	adds	r3, #96	@ 0x60
 80026c0:	461a      	mov	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3330      	adds	r3, #48	@ 0x30
 800271c:	461a      	mov	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	f003 030c 	and.w	r3, r3, #12
 8002728:	4413      	add	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	211f      	movs	r1, #31
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	401a      	ands	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	0e9b      	lsrs	r3, r3, #26
 8002744:	f003 011f 	and.w	r1, r3, #31
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	431a      	orrs	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002758:	bf00      	nop
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3314      	adds	r3, #20
 8002774:	461a      	mov	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	0e5b      	lsrs	r3, r3, #25
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	4413      	add	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	0d1b      	lsrs	r3, r3, #20
 800278c:	f003 031f 	and.w	r3, r3, #31
 8002790:	2107      	movs	r1, #7
 8002792:	fa01 f303 	lsl.w	r3, r1, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	401a      	ands	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	0d1b      	lsrs	r3, r3, #20
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	431a      	orrs	r2, r3
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027ae:	bf00      	nop
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d4:	43db      	mvns	r3, r3
 80027d6:	401a      	ands	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0318 	and.w	r3, r3, #24
 80027de:	4908      	ldr	r1, [pc, #32]	@ (8002800 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027e0:	40d9      	lsrs	r1, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	400b      	ands	r3, r1
 80027e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ea:	431a      	orrs	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	0007ffff 	.word	0x0007ffff

08002804 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 031f 	and.w	r3, r3, #31
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002830:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6093      	str	r3, [r2, #8]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002858:	d101      	bne.n	800285e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800287c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002880:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028a8:	d101      	bne.n	80028ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028d0:	f043 0201 	orr.w	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <LL_ADC_IsEnabled+0x18>
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <LL_ADC_IsEnabled+0x1a>
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800291a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800291e:	f043 0204 	orr.w	r2, r3, #4
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b04      	cmp	r3, #4
 8002944:	d101      	bne.n	800294a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b08      	cmp	r3, #8
 800296a:	d101      	bne.n	8002970 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b089      	sub	sp, #36	@ 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e130      	b.n	8002bfc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d109      	bne.n	80029bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7fe fb65 	bl	8001078 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff3f 	bl	8002844 <LL_ADC_IsDeepPowerDownEnabled>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff25 	bl	8002820 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ff5a 	bl	8002894 <LL_ADC_IsInternalRegulatorEnabled>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d115      	bne.n	8002a12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ff3e 	bl	800286c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029f0:	4b84      	ldr	r3, [pc, #528]	@ (8002c04 <HAL_ADC_Init+0x284>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	099b      	lsrs	r3, r3, #6
 80029f6:	4a84      	ldr	r2, [pc, #528]	@ (8002c08 <HAL_ADC_Init+0x288>)
 80029f8:	fba2 2303 	umull	r2, r3, r2, r3
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	3301      	adds	r3, #1
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a04:	e002      	b.n	8002a0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f9      	bne.n	8002a06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ff3c 	bl	8002894 <LL_ADC_IsInternalRegulatorEnabled>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10d      	bne.n	8002a3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a26:	f043 0210 	orr.w	r2, r3, #16
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a32:	f043 0201 	orr.w	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ff75 	bl	8002932 <LL_ADC_REG_IsConversionOngoing>
 8002a48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f040 80c9 	bne.w	8002bea <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f040 80c5 	bne.w	8002bea <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a64:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a68:	f043 0202 	orr.w	r2, r3, #2
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff ff35 	bl	80028e4 <LL_ADC_IsEnabled>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d115      	bne.n	8002aac <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a80:	4862      	ldr	r0, [pc, #392]	@ (8002c0c <HAL_ADC_Init+0x28c>)
 8002a82:	f7ff ff2f 	bl	80028e4 <LL_ADC_IsEnabled>
 8002a86:	4604      	mov	r4, r0
 8002a88:	4861      	ldr	r0, [pc, #388]	@ (8002c10 <HAL_ADC_Init+0x290>)
 8002a8a:	f7ff ff2b 	bl	80028e4 <LL_ADC_IsEnabled>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	431c      	orrs	r4, r3
 8002a92:	4860      	ldr	r0, [pc, #384]	@ (8002c14 <HAL_ADC_Init+0x294>)
 8002a94:	f7ff ff26 	bl	80028e4 <LL_ADC_IsEnabled>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4323      	orrs	r3, r4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	485c      	ldr	r0, [pc, #368]	@ (8002c18 <HAL_ADC_Init+0x298>)
 8002aa8:	f7ff fd94 	bl	80025d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	7e5b      	ldrb	r3, [r3, #25]
 8002ab0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ab6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002abc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ac2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d106      	bne.n	8002ae8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	045b      	lsls	r3, r3, #17
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	4b44      	ldr	r3, [pc, #272]	@ (8002c1c <HAL_ADC_Init+0x29c>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6812      	ldr	r2, [r2, #0]
 8002b12:	69b9      	ldr	r1, [r7, #24]
 8002b14:	430b      	orrs	r3, r1
 8002b16:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff1b 	bl	8002958 <LL_ADC_INJ_IsConversionOngoing>
 8002b22:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d13d      	bne.n	8002ba6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d13a      	bne.n	8002ba6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b34:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b3c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b4c:	f023 0302 	bic.w	r3, r3, #2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	69b9      	ldr	r1, [r7, #24]
 8002b56:	430b      	orrs	r3, r1
 8002b58:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d118      	bne.n	8002b96 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b6e:	f023 0304 	bic.w	r3, r3, #4
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b7a:	4311      	orrs	r1, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b80:	4311      	orrs	r1, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b86:	430a      	orrs	r2, r1
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	611a      	str	r2, [r3, #16]
 8002b94:	e007      	b.n	8002ba6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0201 	bic.w	r2, r2, #1
 8002ba4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d10c      	bne.n	8002bc8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb4:	f023 010f 	bic.w	r1, r3, #15
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	1e5a      	subs	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bc6:	e007      	b.n	8002bd8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 020f 	bic.w	r2, r2, #15
 8002bd6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bdc:	f023 0303 	bic.w	r3, r3, #3
 8002be0:	f043 0201 	orr.w	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	655a      	str	r2, [r3, #84]	@ 0x54
 8002be8:	e007      	b.n	8002bfa <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bee:	f043 0210 	orr.w	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3724      	adds	r7, #36	@ 0x24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd90      	pop	{r4, r7, pc}
 8002c04:	20000000 	.word	0x20000000
 8002c08:	053e2d63 	.word	0x053e2d63
 8002c0c:	50040000 	.word	0x50040000
 8002c10:	50040100 	.word	0x50040100
 8002c14:	50040200 	.word	0x50040200
 8002c18:	50040300 	.word	0x50040300
 8002c1c:	fff0c007 	.word	0xfff0c007

08002c20 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c2c:	4853      	ldr	r0, [pc, #332]	@ (8002d7c <HAL_ADC_Start_DMA+0x15c>)
 8002c2e:	f7ff fde9 	bl	8002804 <LL_ADC_GetMultimode>
 8002c32:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fe7a 	bl	8002932 <LL_ADC_REG_IsConversionOngoing>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f040 8093 	bne.w	8002d6c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_Start_DMA+0x34>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e08e      	b.n	8002d72 <HAL_ADC_Start_DMA+0x152>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a47      	ldr	r2, [pc, #284]	@ (8002d80 <HAL_ADC_Start_DMA+0x160>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d008      	beq.n	8002c78 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2b05      	cmp	r3, #5
 8002c70:	d002      	beq.n	8002c78 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b09      	cmp	r3, #9
 8002c76:	d172      	bne.n	8002d5e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 fc93 	bl	80035a4 <ADC_Enable>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d165      	bne.n	8002d54 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a38      	ldr	r2, [pc, #224]	@ (8002d84 <HAL_ADC_Start_DMA+0x164>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d002      	beq.n	8002cac <HAL_ADC_Start_DMA+0x8c>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	e000      	b.n	8002cae <HAL_ADC_Start_DMA+0x8e>
 8002cac:	4b36      	ldr	r3, [pc, #216]	@ (8002d88 <HAL_ADC_Start_DMA+0x168>)
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d002      	beq.n	8002cbc <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d105      	bne.n	8002cc8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ccc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d006      	beq.n	8002ce2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd8:	f023 0206 	bic.w	r2, r3, #6
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ce0:	e002      	b.n	8002ce8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cec:	4a27      	ldr	r2, [pc, #156]	@ (8002d8c <HAL_ADC_Start_DMA+0x16c>)
 8002cee:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf4:	4a26      	ldr	r2, [pc, #152]	@ (8002d90 <HAL_ADC_Start_DMA+0x170>)
 8002cf6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cfc:	4a25      	ldr	r2, [pc, #148]	@ (8002d94 <HAL_ADC_Start_DMA+0x174>)
 8002cfe:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	221c      	movs	r2, #28
 8002d06:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0210 	orr.w	r2, r2, #16
 8002d1e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3340      	adds	r3, #64	@ 0x40
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f000 ffba 	bl	8003cb8 <HAL_DMA_Start_IT>
 8002d44:	4603      	mov	r3, r0
 8002d46:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fddc 	bl	800290a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002d52:	e00d      	b.n	8002d70 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002d5c:	e008      	b.n	8002d70 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002d6a:	e001      	b.n	8002d70 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	50040300 	.word	0x50040300
 8002d80:	50040200 	.word	0x50040200
 8002d84:	50040100 	.word	0x50040100
 8002d88:	50040000 	.word	0x50040000
 8002d8c:	080036b1 	.word	0x080036b1
 8002d90:	08003789 	.word	0x08003789
 8002d94:	080037a5 	.word	0x080037a5

08002d98 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b0b6      	sub	sp, #216	@ 0xd8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x22>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e3c9      	b.n	8003576 <HAL_ADC_ConfigChannel+0x7b6>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fd9f 	bl	8002932 <LL_ADC_REG_IsConversionOngoing>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 83aa 	bne.w	8003550 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b05      	cmp	r3, #5
 8002e0a:	d824      	bhi.n	8002e56 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	3b02      	subs	r3, #2
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d81b      	bhi.n	8002e4e <HAL_ADC_ConfigChannel+0x8e>
 8002e16:	a201      	add	r2, pc, #4	@ (adr r2, 8002e1c <HAL_ADC_ConfigChannel+0x5c>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002e2d 	.word	0x08002e2d
 8002e20:	08002e35 	.word	0x08002e35
 8002e24:	08002e3d 	.word	0x08002e3d
 8002e28:	08002e45 	.word	0x08002e45
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002e2c:	230c      	movs	r3, #12
 8002e2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e32:	e010      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002e34:	2312      	movs	r3, #18
 8002e36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e3a:	e00c      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002e3c:	2318      	movs	r3, #24
 8002e3e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e42:	e008      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002e44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e4c:	e003      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002e4e:	2306      	movs	r3, #6
 8002e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e54:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002e64:	f7ff fc52 	bl	800270c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fd60 	bl	8002932 <LL_ADC_REG_IsConversionOngoing>
 8002e72:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fd6c 	bl	8002958 <LL_ADC_INJ_IsConversionOngoing>
 8002e80:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f040 81a4 	bne.w	80031d6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f040 819f 	bne.w	80031d6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	f7ff fc5d 	bl	8002764 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	08db      	lsrs	r3, r3, #3
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d00a      	beq.n	8002ee2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6919      	ldr	r1, [r3, #16]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002edc:	f7ff fbae 	bl	800263c <LL_ADC_SetOffset>
 8002ee0:	e179      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fbcb 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x14e>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2100      	movs	r1, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fbc0 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8002f04:	4603      	mov	r3, r0
 8002f06:	0e9b      	lsrs	r3, r3, #26
 8002f08:	f003 021f 	and.w	r2, r3, #31
 8002f0c:	e01e      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x18c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fbb5 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f24:	fa93 f3a3 	rbit	r3, r3
 8002f28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002f3c:	2320      	movs	r3, #32
 8002f3e:	e004      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002f40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d105      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x1a4>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	0e9b      	lsrs	r3, r3, #26
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	e018      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x1d6>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f70:	fa93 f3a3 	rbit	r3, r3
 8002f74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002f78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002f80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002f88:	2320      	movs	r3, #32
 8002f8a:	e004      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002f8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d106      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fb84 	bl	80026b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2101      	movs	r1, #1
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fb68 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x214>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fb5d 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	0e9b      	lsrs	r3, r3, #26
 8002fce:	f003 021f 	and.w	r2, r3, #31
 8002fd2:	e01e      	b.n	8003012 <HAL_ADC_ConfigChannel+0x252>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2101      	movs	r1, #1
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fb52 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002ff2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002ffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003002:	2320      	movs	r3, #32
 8003004:	e004      	b.n	8003010 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003006:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301a:	2b00      	cmp	r3, #0
 800301c:	d105      	bne.n	800302a <HAL_ADC_ConfigChannel+0x26a>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	0e9b      	lsrs	r3, r3, #26
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	e018      	b.n	800305c <HAL_ADC_ConfigChannel+0x29c>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800303e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003042:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003046:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800304e:	2320      	movs	r3, #32
 8003050:	e004      	b.n	800305c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003052:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800305c:	429a      	cmp	r2, r3
 800305e:	d106      	bne.n	800306e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2200      	movs	r2, #0
 8003066:	2101      	movs	r1, #1
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fb21 	bl	80026b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2102      	movs	r1, #2
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fb05 	bl	8002684 <LL_ADC_GetOffsetChannel>
 800307a:	4603      	mov	r3, r0
 800307c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <HAL_ADC_ConfigChannel+0x2da>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2102      	movs	r1, #2
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fafa 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8003090:	4603      	mov	r3, r0
 8003092:	0e9b      	lsrs	r3, r3, #26
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	e01e      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x318>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2102      	movs	r1, #2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff faef 	bl	8002684 <LL_ADC_GetOffsetChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80030b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80030c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80030c8:	2320      	movs	r3, #32
 80030ca:	e004      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80030cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030d0:	fab3 f383 	clz	r3, r3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d105      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x330>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	0e9b      	lsrs	r3, r3, #26
 80030ea:	f003 031f 	and.w	r3, r3, #31
 80030ee:	e014      	b.n	800311a <HAL_ADC_ConfigChannel+0x35a>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030f8:	fa93 f3a3 	rbit	r3, r3
 80030fc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80030fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003100:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003104:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800310c:	2320      	movs	r3, #32
 800310e:	e004      	b.n	800311a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003110:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003114:	fab3 f383 	clz	r3, r3
 8003118:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800311a:	429a      	cmp	r2, r3
 800311c:	d106      	bne.n	800312c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2200      	movs	r2, #0
 8003124:	2102      	movs	r1, #2
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff fac2 	bl	80026b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2103      	movs	r1, #3
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff faa6 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8003138:	4603      	mov	r3, r0
 800313a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x398>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2103      	movs	r1, #3
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fa9b 	bl	8002684 <LL_ADC_GetOffsetChannel>
 800314e:	4603      	mov	r3, r0
 8003150:	0e9b      	lsrs	r3, r3, #26
 8003152:	f003 021f 	and.w	r2, r3, #31
 8003156:	e017      	b.n	8003188 <HAL_ADC_ConfigChannel+0x3c8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2103      	movs	r1, #3
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fa90 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8003164:	4603      	mov	r3, r0
 8003166:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003172:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003174:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800317a:	2320      	movs	r3, #32
 800317c:	e003      	b.n	8003186 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800317e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003190:	2b00      	cmp	r3, #0
 8003192:	d105      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x3e0>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	0e9b      	lsrs	r3, r3, #26
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	e011      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x404>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031a8:	fa93 f3a3 	rbit	r3, r3
 80031ac:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80031ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031b0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80031b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80031b8:	2320      	movs	r3, #32
 80031ba:	e003      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80031bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d106      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2200      	movs	r2, #0
 80031ce:	2103      	movs	r1, #3
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fa6d 	bl	80026b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fb82 	bl	80028e4 <LL_ADC_IsEnabled>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f040 8140 	bne.w	8003468 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6819      	ldr	r1, [r3, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	461a      	mov	r2, r3
 80031f6:	f7ff fae1 	bl	80027bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	4a8f      	ldr	r2, [pc, #572]	@ (800343c <HAL_ADC_ConfigChannel+0x67c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	f040 8131 	bne.w	8003468 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10b      	bne.n	800322e <HAL_ADC_ConfigChannel+0x46e>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	0e9b      	lsrs	r3, r3, #26
 800321c:	3301      	adds	r3, #1
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	2b09      	cmp	r3, #9
 8003224:	bf94      	ite	ls
 8003226:	2301      	movls	r3, #1
 8003228:	2300      	movhi	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	e019      	b.n	8003262 <HAL_ADC_ConfigChannel+0x4a2>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003236:	fa93 f3a3 	rbit	r3, r3
 800323a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800323c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800323e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003240:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003246:	2320      	movs	r3, #32
 8003248:	e003      	b.n	8003252 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800324a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2b09      	cmp	r3, #9
 800325a:	bf94      	ite	ls
 800325c:	2301      	movls	r3, #1
 800325e:	2300      	movhi	r3, #0
 8003260:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003262:	2b00      	cmp	r3, #0
 8003264:	d079      	beq.n	800335a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x4c2>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	0e9b      	lsrs	r3, r3, #26
 8003278:	3301      	adds	r3, #1
 800327a:	069b      	lsls	r3, r3, #26
 800327c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003280:	e015      	b.n	80032ae <HAL_ADC_ConfigChannel+0x4ee>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003290:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003292:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800329a:	2320      	movs	r3, #32
 800329c:	e003      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800329e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	3301      	adds	r3, #1
 80032a8:	069b      	lsls	r3, r3, #26
 80032aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x50e>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	0e9b      	lsrs	r3, r3, #26
 80032c0:	3301      	adds	r3, #1
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	2101      	movs	r1, #1
 80032c8:	fa01 f303 	lsl.w	r3, r1, r3
 80032cc:	e017      	b.n	80032fe <HAL_ADC_ConfigChannel+0x53e>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80032dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032de:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80032e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80032e6:	2320      	movs	r3, #32
 80032e8:	e003      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80032ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	2101      	movs	r1, #1
 80032fa:	fa01 f303 	lsl.w	r3, r1, r3
 80032fe:	ea42 0103 	orr.w	r1, r2, r3
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10a      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x564>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	0e9b      	lsrs	r3, r3, #26
 8003314:	3301      	adds	r3, #1
 8003316:	f003 021f 	and.w	r2, r3, #31
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	051b      	lsls	r3, r3, #20
 8003322:	e018      	b.n	8003356 <HAL_ADC_ConfigChannel+0x596>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332c:	fa93 f3a3 	rbit	r3, r3
 8003330:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003334:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800333c:	2320      	movs	r3, #32
 800333e:	e003      	b.n	8003348 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	3301      	adds	r3, #1
 800334a:	f003 021f 	and.w	r2, r3, #31
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003356:	430b      	orrs	r3, r1
 8003358:	e081      	b.n	800345e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003362:	2b00      	cmp	r3, #0
 8003364:	d107      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x5b6>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	0e9b      	lsrs	r3, r3, #26
 800336c:	3301      	adds	r3, #1
 800336e:	069b      	lsls	r3, r3, #26
 8003370:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003374:	e015      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x5e2>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003386:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800338e:	2320      	movs	r3, #32
 8003390:	e003      	b.n	800339a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003394:	fab3 f383 	clz	r3, r3
 8003398:	b2db      	uxtb	r3, r3
 800339a:	3301      	adds	r3, #1
 800339c:	069b      	lsls	r3, r3, #26
 800339e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d109      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x602>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	0e9b      	lsrs	r3, r3, #26
 80033b4:	3301      	adds	r3, #1
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	2101      	movs	r1, #1
 80033bc:	fa01 f303 	lsl.w	r3, r1, r3
 80033c0:	e017      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x632>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	61bb      	str	r3, [r7, #24]
  return result;
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80033da:	2320      	movs	r3, #32
 80033dc:	e003      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	fab3 f383 	clz	r3, r3
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	3301      	adds	r3, #1
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	2101      	movs	r1, #1
 80033ee:	fa01 f303 	lsl.w	r3, r1, r3
 80033f2:	ea42 0103 	orr.w	r1, r2, r3
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10d      	bne.n	800341e <HAL_ADC_ConfigChannel+0x65e>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	0e9b      	lsrs	r3, r3, #26
 8003408:	3301      	adds	r3, #1
 800340a:	f003 021f 	and.w	r2, r3, #31
 800340e:	4613      	mov	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	3b1e      	subs	r3, #30
 8003416:	051b      	lsls	r3, r3, #20
 8003418:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800341c:	e01e      	b.n	800345c <HAL_ADC_ConfigChannel+0x69c>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	fa93 f3a3 	rbit	r3, r3
 800342a:	60fb      	str	r3, [r7, #12]
  return result;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d104      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003436:	2320      	movs	r3, #32
 8003438:	e006      	b.n	8003448 <HAL_ADC_ConfigChannel+0x688>
 800343a:	bf00      	nop
 800343c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	3301      	adds	r3, #1
 800344a:	f003 021f 	and.w	r2, r3, #31
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	3b1e      	subs	r3, #30
 8003456:	051b      	lsls	r3, r3, #20
 8003458:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800345c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003462:	4619      	mov	r1, r3
 8003464:	f7ff f97e 	bl	8002764 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b44      	ldr	r3, [pc, #272]	@ (8003580 <HAL_ADC_ConfigChannel+0x7c0>)
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d07a      	beq.n	800356a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003474:	4843      	ldr	r0, [pc, #268]	@ (8003584 <HAL_ADC_ConfigChannel+0x7c4>)
 8003476:	f7ff f8d3 	bl	8002620 <LL_ADC_GetCommonPathInternalCh>
 800347a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a41      	ldr	r2, [pc, #260]	@ (8003588 <HAL_ADC_ConfigChannel+0x7c8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d12c      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003488:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800348c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d126      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a3c      	ldr	r2, [pc, #240]	@ (800358c <HAL_ADC_ConfigChannel+0x7cc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d004      	beq.n	80034a8 <HAL_ADC_ConfigChannel+0x6e8>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003590 <HAL_ADC_ConfigChannel+0x7d0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d15d      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034b0:	4619      	mov	r1, r3
 80034b2:	4834      	ldr	r0, [pc, #208]	@ (8003584 <HAL_ADC_ConfigChannel+0x7c4>)
 80034b4:	f7ff f8a1 	bl	80025fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034b8:	4b36      	ldr	r3, [pc, #216]	@ (8003594 <HAL_ADC_ConfigChannel+0x7d4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	099b      	lsrs	r3, r3, #6
 80034be:	4a36      	ldr	r2, [pc, #216]	@ (8003598 <HAL_ADC_ConfigChannel+0x7d8>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	099b      	lsrs	r3, r3, #6
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80034d2:	e002      	b.n	80034da <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f9      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034e0:	e040      	b.n	8003564 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2d      	ldr	r2, [pc, #180]	@ (800359c <HAL_ADC_ConfigChannel+0x7dc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d118      	bne.n	800351e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d112      	bne.n	800351e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a23      	ldr	r2, [pc, #140]	@ (800358c <HAL_ADC_ConfigChannel+0x7cc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_ADC_ConfigChannel+0x74c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a22      	ldr	r2, [pc, #136]	@ (8003590 <HAL_ADC_ConfigChannel+0x7d0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d12d      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800350c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003510:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003514:	4619      	mov	r1, r3
 8003516:	481b      	ldr	r0, [pc, #108]	@ (8003584 <HAL_ADC_ConfigChannel+0x7c4>)
 8003518:	f7ff f86f 	bl	80025fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800351c:	e024      	b.n	8003568 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1f      	ldr	r2, [pc, #124]	@ (80035a0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d120      	bne.n	800356a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003528:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800352c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d11a      	bne.n	800356a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a14      	ldr	r2, [pc, #80]	@ (800358c <HAL_ADC_ConfigChannel+0x7cc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d115      	bne.n	800356a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800353e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003542:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003546:	4619      	mov	r1, r3
 8003548:	480e      	ldr	r0, [pc, #56]	@ (8003584 <HAL_ADC_ConfigChannel+0x7c4>)
 800354a:	f7ff f856 	bl	80025fa <LL_ADC_SetCommonPathInternalCh>
 800354e:	e00c      	b.n	800356a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003562:	e002      	b.n	800356a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003564:	bf00      	nop
 8003566:	e000      	b.n	800356a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003568:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003572:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003576:	4618      	mov	r0, r3
 8003578:	37d8      	adds	r7, #216	@ 0xd8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	80080000 	.word	0x80080000
 8003584:	50040300 	.word	0x50040300
 8003588:	c7520000 	.word	0xc7520000
 800358c:	50040000 	.word	0x50040000
 8003590:	50040200 	.word	0x50040200
 8003594:	20000000 	.word	0x20000000
 8003598:	053e2d63 	.word	0x053e2d63
 800359c:	cb840000 	.word	0xcb840000
 80035a0:	80000001 	.word	0x80000001

080035a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff f995 	bl	80028e4 <LL_ADC_IsEnabled>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d169      	bne.n	8003694 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	4b36      	ldr	r3, [pc, #216]	@ (80036a0 <ADC_Enable+0xfc>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d2:	f043 0210 	orr.w	r2, r3, #16
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035de:	f043 0201 	orr.w	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e055      	b.n	8003696 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff f964 	bl	80028bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035f4:	482b      	ldr	r0, [pc, #172]	@ (80036a4 <ADC_Enable+0x100>)
 80035f6:	f7ff f813 	bl	8002620 <LL_ADC_GetCommonPathInternalCh>
 80035fa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80035fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003600:	2b00      	cmp	r3, #0
 8003602:	d013      	beq.n	800362c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003604:	4b28      	ldr	r3, [pc, #160]	@ (80036a8 <ADC_Enable+0x104>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	099b      	lsrs	r3, r3, #6
 800360a:	4a28      	ldr	r2, [pc, #160]	@ (80036ac <ADC_Enable+0x108>)
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	099b      	lsrs	r3, r3, #6
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	4613      	mov	r3, r2
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800361e:	e002      	b.n	8003626 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	3b01      	subs	r3, #1
 8003624:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f9      	bne.n	8003620 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800362c:	f7fe ffa2 	bl	8002574 <HAL_GetTick>
 8003630:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003632:	e028      	b.n	8003686 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff f953 	bl	80028e4 <LL_ADC_IsEnabled>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d104      	bne.n	800364e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff f937 	bl	80028bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800364e:	f7fe ff91 	bl	8002574 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d914      	bls.n	8003686 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b01      	cmp	r3, #1
 8003668:	d00d      	beq.n	8003686 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800366e:	f043 0210 	orr.w	r2, r3, #16
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367a:	f043 0201 	orr.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e007      	b.n	8003696 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b01      	cmp	r3, #1
 8003692:	d1cf      	bne.n	8003634 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	8000003f 	.word	0x8000003f
 80036a4:	50040300 	.word	0x50040300
 80036a8:	20000000 	.word	0x20000000
 80036ac:	053e2d63 	.word	0x053e2d63

080036b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d14b      	bne.n	8003762 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d021      	beq.n	8003728 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe fffc 	bl	80026e6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d032      	beq.n	800375a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d12b      	bne.n	800375a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003706:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003712:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d11f      	bne.n	800375a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371e:	f043 0201 	orr.w	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	655a      	str	r2, [r3, #84]	@ 0x54
 8003726:	e018      	b.n	800375a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d111      	bne.n	800375a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003746:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d105      	bne.n	800375a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003752:	f043 0201 	orr.w	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f00a ff9c 	bl	800e698 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003760:	e00e      	b.n	8003780 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f7ff fb1c 	bl	8002dac <HAL_ADC_ErrorCallback>
}
 8003774:	e004      	b.n	8003780 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800377a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
}
 8003780:	bf00      	nop
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003794:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f7ff fafe 	bl	8002d98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c2:	f043 0204 	orr.w	r2, r3, #4
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f7ff faee 	bl	8002dac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <LL_ADC_IsEnabled>:
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <LL_ADC_IsEnabled+0x18>
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <LL_ADC_IsEnabled+0x1a>
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <LL_ADC_REG_IsConversionOngoing>:
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b04      	cmp	r3, #4
 8003810:	d101      	bne.n	8003816 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003824:	b590      	push	{r4, r7, lr}
 8003826:	b09f      	sub	sp, #124	@ 0x7c
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800383e:	2302      	movs	r3, #2
 8003840:	e093      	b.n	800396a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800384a:	2300      	movs	r3, #0
 800384c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800384e:	2300      	movs	r3, #0
 8003850:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a47      	ldr	r2, [pc, #284]	@ (8003974 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d102      	bne.n	8003862 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800385c:	4b46      	ldr	r3, [pc, #280]	@ (8003978 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	e001      	b.n	8003866 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003862:	2300      	movs	r3, #0
 8003864:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10b      	bne.n	8003884 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003870:	f043 0220 	orr.w	r2, r3, #32
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e072      	b.n	800396a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff ffb9 	bl	80037fe <LL_ADC_REG_IsConversionOngoing>
 800388c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff ffb3 	bl	80037fe <LL_ADC_REG_IsConversionOngoing>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d154      	bne.n	8003948 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800389e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d151      	bne.n	8003948 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038a4:	4b35      	ldr	r3, [pc, #212]	@ (800397c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80038a6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d02c      	beq.n	800390a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80038b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038c2:	035b      	lsls	r3, r3, #13
 80038c4:	430b      	orrs	r3, r1
 80038c6:	431a      	orrs	r2, r3
 80038c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038cc:	4829      	ldr	r0, [pc, #164]	@ (8003974 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80038ce:	f7ff ff83 	bl	80037d8 <LL_ADC_IsEnabled>
 80038d2:	4604      	mov	r4, r0
 80038d4:	4828      	ldr	r0, [pc, #160]	@ (8003978 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80038d6:	f7ff ff7f 	bl	80037d8 <LL_ADC_IsEnabled>
 80038da:	4603      	mov	r3, r0
 80038dc:	431c      	orrs	r4, r3
 80038de:	4828      	ldr	r0, [pc, #160]	@ (8003980 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80038e0:	f7ff ff7a 	bl	80037d8 <LL_ADC_IsEnabled>
 80038e4:	4603      	mov	r3, r0
 80038e6:	4323      	orrs	r3, r4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d137      	bne.n	800395c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80038f4:	f023 030f 	bic.w	r3, r3, #15
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	6811      	ldr	r1, [r2, #0]
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	6892      	ldr	r2, [r2, #8]
 8003900:	430a      	orrs	r2, r1
 8003902:	431a      	orrs	r2, r3
 8003904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003906:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003908:	e028      	b.n	800395c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800390a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003912:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003914:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003916:	4817      	ldr	r0, [pc, #92]	@ (8003974 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003918:	f7ff ff5e 	bl	80037d8 <LL_ADC_IsEnabled>
 800391c:	4604      	mov	r4, r0
 800391e:	4816      	ldr	r0, [pc, #88]	@ (8003978 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003920:	f7ff ff5a 	bl	80037d8 <LL_ADC_IsEnabled>
 8003924:	4603      	mov	r3, r0
 8003926:	431c      	orrs	r4, r3
 8003928:	4815      	ldr	r0, [pc, #84]	@ (8003980 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800392a:	f7ff ff55 	bl	80037d8 <LL_ADC_IsEnabled>
 800392e:	4603      	mov	r3, r0
 8003930:	4323      	orrs	r3, r4
 8003932:	2b00      	cmp	r3, #0
 8003934:	d112      	bne.n	800395c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800393e:	f023 030f 	bic.w	r3, r3, #15
 8003942:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003944:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003946:	e009      	b.n	800395c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800394c:	f043 0220 	orr.w	r2, r3, #32
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800395a:	e000      	b.n	800395e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800395c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003966:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800396a:	4618      	mov	r0, r3
 800396c:	377c      	adds	r7, #124	@ 0x7c
 800396e:	46bd      	mov	sp, r7
 8003970:	bd90      	pop	{r4, r7, pc}
 8003972:	bf00      	nop
 8003974:	50040000 	.word	0x50040000
 8003978:	50040100 	.word	0x50040100
 800397c:	50040300 	.word	0x50040300
 8003980:	50040200 	.word	0x50040200

08003984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003994:	4b0c      	ldr	r3, [pc, #48]	@ (80039c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039a0:	4013      	ands	r3, r2
 80039a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039b6:	4a04      	ldr	r2, [pc, #16]	@ (80039c8 <__NVIC_SetPriorityGrouping+0x44>)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	60d3      	str	r3, [r2, #12]
}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	e000ed00 	.word	0xe000ed00

080039cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039d0:	4b04      	ldr	r3, [pc, #16]	@ (80039e4 <__NVIC_GetPriorityGrouping+0x18>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	f003 0307 	and.w	r3, r3, #7
}
 80039da:	4618      	mov	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	db0b      	blt.n	8003a12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	f003 021f 	and.w	r2, r3, #31
 8003a00:	4907      	ldr	r1, [pc, #28]	@ (8003a20 <__NVIC_EnableIRQ+0x38>)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	2001      	movs	r0, #1
 8003a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	e000e100 	.word	0xe000e100

08003a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	6039      	str	r1, [r7, #0]
 8003a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	db0a      	blt.n	8003a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	490c      	ldr	r1, [pc, #48]	@ (8003a70 <__NVIC_SetPriority+0x4c>)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	0112      	lsls	r2, r2, #4
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	440b      	add	r3, r1
 8003a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a4c:	e00a      	b.n	8003a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	4908      	ldr	r1, [pc, #32]	@ (8003a74 <__NVIC_SetPriority+0x50>)
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	3b04      	subs	r3, #4
 8003a5c:	0112      	lsls	r2, r2, #4
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	440b      	add	r3, r1
 8003a62:	761a      	strb	r2, [r3, #24]
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	e000e100 	.word	0xe000e100
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b089      	sub	sp, #36	@ 0x24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f1c3 0307 	rsb	r3, r3, #7
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	bf28      	it	cs
 8003a96:	2304      	movcs	r3, #4
 8003a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	2b06      	cmp	r3, #6
 8003aa0:	d902      	bls.n	8003aa8 <NVIC_EncodePriority+0x30>
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3b03      	subs	r3, #3
 8003aa6:	e000      	b.n	8003aaa <NVIC_EncodePriority+0x32>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aac:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43da      	mvns	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	401a      	ands	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aca:	43d9      	mvns	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad0:	4313      	orrs	r3, r2
         );
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3724      	adds	r7, #36	@ 0x24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff ff4c 	bl	8003984 <__NVIC_SetPriorityGrouping>
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b06:	f7ff ff61 	bl	80039cc <__NVIC_GetPriorityGrouping>
 8003b0a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	6978      	ldr	r0, [r7, #20]
 8003b12:	f7ff ffb1 	bl	8003a78 <NVIC_EncodePriority>
 8003b16:	4602      	mov	r2, r0
 8003b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff ff80 	bl	8003a24 <__NVIC_SetPriority>
}
 8003b24:	bf00      	nop
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff ff54 	bl	80039e8 <__NVIC_EnableIRQ>
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e098      	b.n	8003c8c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	4b4d      	ldr	r3, [pc, #308]	@ (8003c98 <HAL_DMA_Init+0x150>)
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d80f      	bhi.n	8003b86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8003c9c <HAL_DMA_Init+0x154>)
 8003b6e:	4413      	add	r3, r2
 8003b70:	4a4b      	ldr	r2, [pc, #300]	@ (8003ca0 <HAL_DMA_Init+0x158>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	009a      	lsls	r2, r3, #2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a48      	ldr	r2, [pc, #288]	@ (8003ca4 <HAL_DMA_Init+0x15c>)
 8003b82:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b84:	e00e      	b.n	8003ba4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4b46      	ldr	r3, [pc, #280]	@ (8003ca8 <HAL_DMA_Init+0x160>)
 8003b8e:	4413      	add	r3, r2
 8003b90:	4a43      	ldr	r2, [pc, #268]	@ (8003ca0 <HAL_DMA_Init+0x158>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	091b      	lsrs	r3, r3, #4
 8003b98:	009a      	lsls	r2, r3, #2
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a42      	ldr	r2, [pc, #264]	@ (8003cac <HAL_DMA_Init+0x164>)
 8003ba2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bfe:	d039      	beq.n	8003c74 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c04:	4a27      	ldr	r2, [pc, #156]	@ (8003ca4 <HAL_DMA_Init+0x15c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d11a      	bne.n	8003c40 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c0a:	4b29      	ldr	r3, [pc, #164]	@ (8003cb0 <HAL_DMA_Init+0x168>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c12:	f003 031c 	and.w	r3, r3, #28
 8003c16:	210f      	movs	r1, #15
 8003c18:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	4924      	ldr	r1, [pc, #144]	@ (8003cb0 <HAL_DMA_Init+0x168>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c24:	4b22      	ldr	r3, [pc, #136]	@ (8003cb0 <HAL_DMA_Init+0x168>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c30:	f003 031c 	and.w	r3, r3, #28
 8003c34:	fa01 f303 	lsl.w	r3, r1, r3
 8003c38:	491d      	ldr	r1, [pc, #116]	@ (8003cb0 <HAL_DMA_Init+0x168>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]
 8003c3e:	e019      	b.n	8003c74 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c40:	4b1c      	ldr	r3, [pc, #112]	@ (8003cb4 <HAL_DMA_Init+0x16c>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c48:	f003 031c 	and.w	r3, r3, #28
 8003c4c:	210f      	movs	r1, #15
 8003c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	4917      	ldr	r1, [pc, #92]	@ (8003cb4 <HAL_DMA_Init+0x16c>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c5a:	4b16      	ldr	r3, [pc, #88]	@ (8003cb4 <HAL_DMA_Init+0x16c>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6859      	ldr	r1, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c66:	f003 031c 	and.w	r3, r3, #28
 8003c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6e:	4911      	ldr	r1, [pc, #68]	@ (8003cb4 <HAL_DMA_Init+0x16c>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	40020407 	.word	0x40020407
 8003c9c:	bffdfff8 	.word	0xbffdfff8
 8003ca0:	cccccccd 	.word	0xcccccccd
 8003ca4:	40020000 	.word	0x40020000
 8003ca8:	bffdfbf8 	.word	0xbffdfbf8
 8003cac:	40020400 	.word	0x40020400
 8003cb0:	400200a8 	.word	0x400200a8
 8003cb4:	400204a8 	.word	0x400204a8

08003cb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_DMA_Start_IT+0x20>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e04b      	b.n	8003d70 <HAL_DMA_Start_IT+0xb8>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d13a      	bne.n	8003d62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0201 	bic.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f95f 	bl	8003fd4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 020e 	orr.w	r2, r2, #14
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	e00f      	b.n	8003d50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0204 	bic.w	r2, r2, #4
 8003d3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 020a 	orr.w	r2, r2, #10
 8003d4e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	e005      	b.n	8003d6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d008      	beq.n	8003da2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2204      	movs	r2, #4
 8003d94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e022      	b.n	8003de8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 020e 	bic.w	r2, r2, #14
 8003db0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc6:	f003 021c 	and.w	r2, r3, #28
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	2101      	movs	r1, #1
 8003dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d005      	beq.n	8003e18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2204      	movs	r2, #4
 8003e10:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
 8003e16:	e029      	b.n	8003e6c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 020e 	bic.w	r2, r2, #14
 8003e26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3c:	f003 021c 	and.w	r2, r3, #28
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e44:	2101      	movs	r1, #1
 8003e46:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	4798      	blx	r3
    }
  }
  return status;
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	f003 031c 	and.w	r3, r3, #28
 8003e96:	2204      	movs	r2, #4
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d026      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x7a>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d021      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d107      	bne.n	8003eca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0204 	bic.w	r2, r2, #4
 8003ec8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	f003 021c 	and.w	r2, r3, #28
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	2104      	movs	r1, #4
 8003ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8003edc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d071      	beq.n	8003fca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003eee:	e06c      	b.n	8003fca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef4:	f003 031c 	and.w	r3, r3, #28
 8003ef8:	2202      	movs	r2, #2
 8003efa:	409a      	lsls	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d02e      	beq.n	8003f62 <HAL_DMA_IRQHandler+0xec>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d029      	beq.n	8003f62 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10b      	bne.n	8003f34 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 020a 	bic.w	r2, r2, #10
 8003f2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f38:	f003 021c 	and.w	r2, r3, #28
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f40:	2102      	movs	r1, #2
 8003f42:	fa01 f202 	lsl.w	r2, r1, r2
 8003f46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d038      	beq.n	8003fca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f60:	e033      	b.n	8003fca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f66:	f003 031c 	and.w	r3, r3, #28
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	409a      	lsls	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d02a      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x156>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d025      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 020e 	bic.w	r2, r2, #14
 8003f8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f94:	f003 021c 	and.w	r2, r3, #28
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d004      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003fca:	bf00      	nop
 8003fcc:	bf00      	nop
}
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe6:	f003 021c 	and.w	r2, r3, #28
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	2101      	movs	r1, #1
 8003ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b10      	cmp	r3, #16
 8004004:	d108      	bne.n	8004018 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004016:	e007      	b.n	8004028 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	60da      	str	r2, [r3, #12]
}
 8004028:	bf00      	nop
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004042:	e17f      	b.n	8004344 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	2101      	movs	r1, #1
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	fa01 f303 	lsl.w	r3, r1, r3
 8004050:	4013      	ands	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8171 	beq.w	800433e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d005      	beq.n	8004074 <HAL_GPIO_Init+0x40>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d130      	bne.n	80040d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	2203      	movs	r2, #3
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4013      	ands	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040aa:	2201      	movs	r2, #1
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	43db      	mvns	r3, r3
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4013      	ands	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	f003 0201 	and.w	r2, r3, #1
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d118      	bne.n	8004114 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80040e8:	2201      	movs	r2, #1
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	43db      	mvns	r3, r3
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	08db      	lsrs	r3, r3, #3
 80040fe:	f003 0201 	and.w	r2, r3, #1
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	2b03      	cmp	r3, #3
 800411e:	d017      	beq.n	8004150 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	2203      	movs	r2, #3
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4013      	ands	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d123      	bne.n	80041a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	08da      	lsrs	r2, r3, #3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3208      	adds	r2, #8
 8004164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004168:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	220f      	movs	r2, #15
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4013      	ands	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	08da      	lsrs	r2, r3, #3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3208      	adds	r2, #8
 800419e:	6939      	ldr	r1, [r7, #16]
 80041a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	2203      	movs	r2, #3
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	43db      	mvns	r3, r3
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4013      	ands	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 0203 	and.w	r2, r3, #3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80ac 	beq.w	800433e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041e6:	4b5f      	ldr	r3, [pc, #380]	@ (8004364 <HAL_GPIO_Init+0x330>)
 80041e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ea:	4a5e      	ldr	r2, [pc, #376]	@ (8004364 <HAL_GPIO_Init+0x330>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80041f2:	4b5c      	ldr	r3, [pc, #368]	@ (8004364 <HAL_GPIO_Init+0x330>)
 80041f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041fe:	4a5a      	ldr	r2, [pc, #360]	@ (8004368 <HAL_GPIO_Init+0x334>)
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	089b      	lsrs	r3, r3, #2
 8004204:	3302      	adds	r3, #2
 8004206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	220f      	movs	r2, #15
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43db      	mvns	r3, r3
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4013      	ands	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004228:	d025      	beq.n	8004276 <HAL_GPIO_Init+0x242>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a4f      	ldr	r2, [pc, #316]	@ (800436c <HAL_GPIO_Init+0x338>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01f      	beq.n	8004272 <HAL_GPIO_Init+0x23e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a4e      	ldr	r2, [pc, #312]	@ (8004370 <HAL_GPIO_Init+0x33c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d019      	beq.n	800426e <HAL_GPIO_Init+0x23a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a4d      	ldr	r2, [pc, #308]	@ (8004374 <HAL_GPIO_Init+0x340>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d013      	beq.n	800426a <HAL_GPIO_Init+0x236>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a4c      	ldr	r2, [pc, #304]	@ (8004378 <HAL_GPIO_Init+0x344>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00d      	beq.n	8004266 <HAL_GPIO_Init+0x232>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a4b      	ldr	r2, [pc, #300]	@ (800437c <HAL_GPIO_Init+0x348>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d007      	beq.n	8004262 <HAL_GPIO_Init+0x22e>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a4a      	ldr	r2, [pc, #296]	@ (8004380 <HAL_GPIO_Init+0x34c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d101      	bne.n	800425e <HAL_GPIO_Init+0x22a>
 800425a:	2306      	movs	r3, #6
 800425c:	e00c      	b.n	8004278 <HAL_GPIO_Init+0x244>
 800425e:	2307      	movs	r3, #7
 8004260:	e00a      	b.n	8004278 <HAL_GPIO_Init+0x244>
 8004262:	2305      	movs	r3, #5
 8004264:	e008      	b.n	8004278 <HAL_GPIO_Init+0x244>
 8004266:	2304      	movs	r3, #4
 8004268:	e006      	b.n	8004278 <HAL_GPIO_Init+0x244>
 800426a:	2303      	movs	r3, #3
 800426c:	e004      	b.n	8004278 <HAL_GPIO_Init+0x244>
 800426e:	2302      	movs	r3, #2
 8004270:	e002      	b.n	8004278 <HAL_GPIO_Init+0x244>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <HAL_GPIO_Init+0x244>
 8004276:	2300      	movs	r3, #0
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	f002 0203 	and.w	r2, r2, #3
 800427e:	0092      	lsls	r2, r2, #2
 8004280:	4093      	lsls	r3, r2
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004288:	4937      	ldr	r1, [pc, #220]	@ (8004368 <HAL_GPIO_Init+0x334>)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	089b      	lsrs	r3, r3, #2
 800428e:	3302      	adds	r3, #2
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004296:	4b3b      	ldr	r3, [pc, #236]	@ (8004384 <HAL_GPIO_Init+0x350>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	43db      	mvns	r3, r3
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4013      	ands	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042ba:	4a32      	ldr	r2, [pc, #200]	@ (8004384 <HAL_GPIO_Init+0x350>)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042c0:	4b30      	ldr	r3, [pc, #192]	@ (8004384 <HAL_GPIO_Init+0x350>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4013      	ands	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042e4:	4a27      	ldr	r2, [pc, #156]	@ (8004384 <HAL_GPIO_Init+0x350>)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80042ea:	4b26      	ldr	r3, [pc, #152]	@ (8004384 <HAL_GPIO_Init+0x350>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	43db      	mvns	r3, r3
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4013      	ands	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800430e:	4a1d      	ldr	r2, [pc, #116]	@ (8004384 <HAL_GPIO_Init+0x350>)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004314:	4b1b      	ldr	r3, [pc, #108]	@ (8004384 <HAL_GPIO_Init+0x350>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	43db      	mvns	r3, r3
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4013      	ands	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004338:	4a12      	ldr	r2, [pc, #72]	@ (8004384 <HAL_GPIO_Init+0x350>)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	3301      	adds	r3, #1
 8004342:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	fa22 f303 	lsr.w	r3, r2, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	f47f ae78 	bne.w	8004044 <HAL_GPIO_Init+0x10>
  }
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40021000 	.word	0x40021000
 8004368:	40010000 	.word	0x40010000
 800436c:	48000400 	.word	0x48000400
 8004370:	48000800 	.word	0x48000800
 8004374:	48000c00 	.word	0x48000c00
 8004378:	48001000 	.word	0x48001000
 800437c:	48001400 	.word	0x48001400
 8004380:	48001800 	.word	0x48001800
 8004384:	40010400 	.word	0x40010400

08004388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	807b      	strh	r3, [r7, #2]
 8004394:	4613      	mov	r3, r2
 8004396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004398:	787b      	ldrb	r3, [r7, #1]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800439e:	887a      	ldrh	r2, [r7, #2]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043a4:	e002      	b.n	80043ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043a6:	887a      	ldrh	r2, [r7, #2]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e08d      	b.n	80044e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fd f8ea 	bl	80015b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2224      	movs	r2, #36	@ 0x24
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0201 	bic.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004408:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004418:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d107      	bne.n	8004432 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	e006      	b.n	8004440 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800443e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d108      	bne.n	800445a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	e007      	b.n	800446a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004468:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004478:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800447c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800448c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691a      	ldr	r2, [r3, #16]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69d9      	ldr	r1, [r3, #28]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1a      	ldr	r2, [r3, #32]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	607a      	str	r2, [r7, #4]
 80044fa:	461a      	mov	r2, r3
 80044fc:	460b      	mov	r3, r1
 80044fe:	817b      	strh	r3, [r7, #10]
 8004500:	4613      	mov	r3, r2
 8004502:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b20      	cmp	r3, #32
 800450e:	f040 80fd 	bne.w	800470c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_I2C_Master_Transmit+0x30>
 800451c:	2302      	movs	r3, #2
 800451e:	e0f6      	b.n	800470e <HAL_I2C_Master_Transmit+0x21e>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004528:	f7fe f824 	bl	8002574 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	2319      	movs	r3, #25
 8004534:	2201      	movs	r2, #1
 8004536:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fa0a 	bl	8004954 <I2C_WaitOnFlagUntilTimeout>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e0e1      	b.n	800470e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2221      	movs	r2, #33	@ 0x21
 800454e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2210      	movs	r2, #16
 8004556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	893a      	ldrh	r2, [r7, #8]
 800456a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	2bff      	cmp	r3, #255	@ 0xff
 800457a:	d906      	bls.n	800458a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	22ff      	movs	r2, #255	@ 0xff
 8004580:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004582:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	e007      	b.n	800459a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004594:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004598:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d024      	beq.n	80045ec <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	781a      	ldrb	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	3301      	adds	r3, #1
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	8979      	ldrh	r1, [r7, #10]
 80045de:	4b4e      	ldr	r3, [pc, #312]	@ (8004718 <HAL_I2C_Master_Transmit+0x228>)
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 fbf1 	bl	8004dcc <I2C_TransferConfig>
 80045ea:	e066      	b.n	80046ba <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	8979      	ldrh	r1, [r7, #10]
 80045f4:	4b48      	ldr	r3, [pc, #288]	@ (8004718 <HAL_I2C_Master_Transmit+0x228>)
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 fbe6 	bl	8004dcc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004600:	e05b      	b.n	80046ba <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	6a39      	ldr	r1, [r7, #32]
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f9f3 	bl	80049f2 <I2C_WaitOnTXISFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e07b      	b.n	800470e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	781a      	ldrb	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d034      	beq.n	80046ba <HAL_I2C_Master_Transmit+0x1ca>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004654:	2b00      	cmp	r3, #0
 8004656:	d130      	bne.n	80046ba <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	2200      	movs	r2, #0
 8004660:	2180      	movs	r1, #128	@ 0x80
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 f976 	bl	8004954 <I2C_WaitOnFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e04d      	b.n	800470e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004676:	b29b      	uxth	r3, r3
 8004678:	2bff      	cmp	r3, #255	@ 0xff
 800467a:	d90e      	bls.n	800469a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	22ff      	movs	r2, #255	@ 0xff
 8004680:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004686:	b2da      	uxtb	r2, r3
 8004688:	8979      	ldrh	r1, [r7, #10]
 800468a:	2300      	movs	r3, #0
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fb9a 	bl	8004dcc <I2C_TransferConfig>
 8004698:	e00f      	b.n	80046ba <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	8979      	ldrh	r1, [r7, #10]
 80046ac:	2300      	movs	r3, #0
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 fb89 	bl	8004dcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d19e      	bne.n	8004602 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	6a39      	ldr	r1, [r7, #32]
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 f9d9 	bl	8004a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e01a      	b.n	800470e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2220      	movs	r2, #32
 80046de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6859      	ldr	r1, [r3, #4]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b0c      	ldr	r3, [pc, #48]	@ (800471c <HAL_I2C_Master_Transmit+0x22c>)
 80046ec:	400b      	ands	r3, r1
 80046ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	e000      	b.n	800470e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800470c:	2302      	movs	r3, #2
  }
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	80002000 	.word	0x80002000
 800471c:	fe00e800 	.word	0xfe00e800

08004720 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	461a      	mov	r2, r3
 800472c:	460b      	mov	r3, r1
 800472e:	817b      	strh	r3, [r7, #10]
 8004730:	4613      	mov	r3, r2
 8004732:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b20      	cmp	r3, #32
 800473e:	f040 80db 	bne.w	80048f8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_I2C_Master_Receive+0x30>
 800474c:	2302      	movs	r3, #2
 800474e:	e0d4      	b.n	80048fa <HAL_I2C_Master_Receive+0x1da>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004758:	f7fd ff0c 	bl	8002574 <HAL_GetTick>
 800475c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	2319      	movs	r3, #25
 8004764:	2201      	movs	r2, #1
 8004766:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f8f2 	bl	8004954 <I2C_WaitOnFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e0bf      	b.n	80048fa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2222      	movs	r2, #34	@ 0x22
 800477e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2210      	movs	r2, #16
 8004786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	893a      	ldrh	r2, [r7, #8]
 800479a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2bff      	cmp	r3, #255	@ 0xff
 80047aa:	d90e      	bls.n	80047ca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	22ff      	movs	r2, #255	@ 0xff
 80047b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	8979      	ldrh	r1, [r7, #10]
 80047ba:	4b52      	ldr	r3, [pc, #328]	@ (8004904 <HAL_I2C_Master_Receive+0x1e4>)
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 fb02 	bl	8004dcc <I2C_TransferConfig>
 80047c8:	e06d      	b.n	80048a6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	8979      	ldrh	r1, [r7, #10]
 80047dc:	4b49      	ldr	r3, [pc, #292]	@ (8004904 <HAL_I2C_Master_Receive+0x1e4>)
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 faf1 	bl	8004dcc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80047ea:	e05c      	b.n	80048a6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	6a39      	ldr	r1, [r7, #32]
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 f989 	bl	8004b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e07c      	b.n	80048fa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d034      	beq.n	80048a6 <HAL_I2C_Master_Receive+0x186>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004840:	2b00      	cmp	r3, #0
 8004842:	d130      	bne.n	80048a6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	2200      	movs	r2, #0
 800484c:	2180      	movs	r1, #128	@ 0x80
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 f880 	bl	8004954 <I2C_WaitOnFlagUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e04d      	b.n	80048fa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004862:	b29b      	uxth	r3, r3
 8004864:	2bff      	cmp	r3, #255	@ 0xff
 8004866:	d90e      	bls.n	8004886 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	22ff      	movs	r2, #255	@ 0xff
 800486c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004872:	b2da      	uxtb	r2, r3
 8004874:	8979      	ldrh	r1, [r7, #10]
 8004876:	2300      	movs	r3, #0
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 faa4 	bl	8004dcc <I2C_TransferConfig>
 8004884:	e00f      	b.n	80048a6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004894:	b2da      	uxtb	r2, r3
 8004896:	8979      	ldrh	r1, [r7, #10]
 8004898:	2300      	movs	r3, #0
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 fa93 	bl	8004dcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d19d      	bne.n	80047ec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	6a39      	ldr	r1, [r7, #32]
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f8e3 	bl	8004a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e01a      	b.n	80048fa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2220      	movs	r2, #32
 80048ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6859      	ldr	r1, [r3, #4]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <HAL_I2C_Master_Receive+0x1e8>)
 80048d8:	400b      	ands	r3, r1
 80048da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2220      	movs	r2, #32
 80048e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	e000      	b.n	80048fa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80048f8:	2302      	movs	r3, #2
  }
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	80002400 	.word	0x80002400
 8004908:	fe00e800 	.word	0xfe00e800

0800490c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b02      	cmp	r3, #2
 8004920:	d103      	bne.n	800492a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2200      	movs	r2, #0
 8004928:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b01      	cmp	r3, #1
 8004936:	d007      	beq.n	8004948 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	619a      	str	r2, [r3, #24]
  }
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	603b      	str	r3, [r7, #0]
 8004960:	4613      	mov	r3, r2
 8004962:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004964:	e031      	b.n	80049ca <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d02d      	beq.n	80049ca <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496e:	f7fd fe01 	bl	8002574 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d302      	bcc.n	8004984 <I2C_WaitOnFlagUntilTimeout+0x30>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d122      	bne.n	80049ca <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	4013      	ands	r3, r2
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	429a      	cmp	r2, r3
 8004992:	bf0c      	ite	eq
 8004994:	2301      	moveq	r3, #1
 8004996:	2300      	movne	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d113      	bne.n	80049ca <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a6:	f043 0220 	orr.w	r2, r3, #32
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e00f      	b.n	80049ea <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699a      	ldr	r2, [r3, #24]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	4013      	ands	r3, r2
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	bf0c      	ite	eq
 80049da:	2301      	moveq	r3, #1
 80049dc:	2300      	movne	r3, #0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	461a      	mov	r2, r3
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d0be      	beq.n	8004966 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049fe:	e033      	b.n	8004a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	68b9      	ldr	r1, [r7, #8]
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f901 	bl	8004c0c <I2C_IsErrorOccurred>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e031      	b.n	8004a78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1a:	d025      	beq.n	8004a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1c:	f7fd fdaa 	bl	8002574 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d302      	bcc.n	8004a32 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d11a      	bne.n	8004a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d013      	beq.n	8004a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a44:	f043 0220 	orr.w	r2, r3, #32
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e007      	b.n	8004a78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d1c4      	bne.n	8004a00 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a8c:	e02f      	b.n	8004aee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f8ba 	bl	8004c0c <I2C_IsErrorOccurred>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e02d      	b.n	8004afe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa2:	f7fd fd67 	bl	8002574 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d11a      	bne.n	8004aee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f003 0320 	and.w	r3, r3, #32
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	d013      	beq.n	8004aee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aca:	f043 0220 	orr.w	r2, r3, #32
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e007      	b.n	8004afe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d1c8      	bne.n	8004a8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b14:	e06b      	b.n	8004bee <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 f876 	bl	8004c0c <I2C_IsErrorOccurred>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e069      	b.n	8004bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d138      	bne.n	8004baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d105      	bne.n	8004b52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e055      	b.n	8004bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d107      	bne.n	8004b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2210      	movs	r2, #16
 8004b66:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	645a      	str	r2, [r3, #68]	@ 0x44
 8004b6e:	e002      	b.n	8004b76 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6859      	ldr	r1, [r3, #4]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4b1f      	ldr	r3, [pc, #124]	@ (8004c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004b8a:	400b      	ands	r3, r1
 8004b8c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e029      	b.n	8004bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004baa:	f7fd fce3 	bl	8002574 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d302      	bcc.n	8004bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d116      	bne.n	8004bee <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d00f      	beq.n	8004bee <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd2:	f043 0220 	orr.w	r2, r3, #32
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e007      	b.n	8004bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d18c      	bne.n	8004b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	fe00e800 	.word	0xfe00e800

08004c0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	@ 0x28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c26:	2300      	movs	r3, #0
 8004c28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	f003 0310 	and.w	r3, r3, #16
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d068      	beq.n	8004d0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2210      	movs	r2, #16
 8004c3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c40:	e049      	b.n	8004cd6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c48:	d045      	beq.n	8004cd6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c4a:	f7fd fc93 	bl	8002574 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d302      	bcc.n	8004c60 <I2C_IsErrorOccurred+0x54>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d13a      	bne.n	8004cd6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c82:	d121      	bne.n	8004cc8 <I2C_IsErrorOccurred+0xbc>
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c8a:	d01d      	beq.n	8004cc8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004c8c:	7cfb      	ldrb	r3, [r7, #19]
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	d01a      	beq.n	8004cc8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ca0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ca2:	f7fd fc67 	bl	8002574 <HAL_GetTick>
 8004ca6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ca8:	e00e      	b.n	8004cc8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004caa:	f7fd fc63 	bl	8002574 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b19      	cmp	r3, #25
 8004cb6:	d907      	bls.n	8004cc8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	f043 0320 	orr.w	r3, r3, #32
 8004cbe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004cc6:	e006      	b.n	8004cd6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d1e9      	bne.n	8004caa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d003      	beq.n	8004cec <I2C_IsErrorOccurred+0xe0>
 8004ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0aa      	beq.n	8004c42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004cec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d103      	bne.n	8004cfc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	f043 0304 	orr.w	r3, r3, #4
 8004d02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00b      	beq.n	8004d34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00b      	beq.n	8004d56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	f043 0308 	orr.w	r3, r3, #8
 8004d44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00b      	beq.n	8004d78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	f043 0302 	orr.w	r3, r3, #2
 8004d66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004d78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01c      	beq.n	8004dba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f7ff fdc3 	bl	800490c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6859      	ldr	r1, [r3, #4]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc8 <I2C_IsErrorOccurred+0x1bc>)
 8004d92:	400b      	ands	r3, r1
 8004d94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004dba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3728      	adds	r7, #40	@ 0x28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	fe00e800 	.word	0xfe00e800

08004dcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	607b      	str	r3, [r7, #4]
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	817b      	strh	r3, [r7, #10]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dde:	897b      	ldrh	r3, [r7, #10]
 8004de0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004de4:	7a7b      	ldrb	r3, [r7, #9]
 8004de6:	041b      	lsls	r3, r3, #16
 8004de8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dfa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	0d5b      	lsrs	r3, r3, #21
 8004e06:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004e0a:	4b08      	ldr	r3, [pc, #32]	@ (8004e2c <I2C_TransferConfig+0x60>)
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	ea02 0103 	and.w	r1, r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e1e:	bf00      	nop
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	03ff63ff 	.word	0x03ff63ff

08004e30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d138      	bne.n	8004eb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e032      	b.n	8004eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2224      	movs	r2, #36	@ 0x24
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0201 	bic.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6819      	ldr	r1, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e000      	b.n	8004eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004eb8:	2302      	movs	r3, #2
  }
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	d139      	bne.n	8004f50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e033      	b.n	8004f52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2224      	movs	r2, #36	@ 0x24
 8004ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0201 	bic.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004f18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	e000      	b.n	8004f52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f50:	2302      	movs	r3, #2
  }
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
	...

08004f60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004f64:	4b04      	ldr	r3, [pc, #16]	@ (8004f78 <HAL_PWREx_GetVoltageRange+0x18>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40007000 	.word	0x40007000

08004f7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f8a:	d130      	bne.n	8004fee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f8c:	4b23      	ldr	r3, [pc, #140]	@ (800501c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f98:	d038      	beq.n	800500c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f9a:	4b20      	ldr	r3, [pc, #128]	@ (800501c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800501c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fa4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004faa:	4b1d      	ldr	r3, [pc, #116]	@ (8005020 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2232      	movs	r2, #50	@ 0x32
 8004fb0:	fb02 f303 	mul.w	r3, r2, r3
 8004fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8005024 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fba:	0c9b      	lsrs	r3, r3, #18
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fc0:	e002      	b.n	8004fc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fc8:	4b14      	ldr	r3, [pc, #80]	@ (800501c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd4:	d102      	bne.n	8004fdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1f2      	bne.n	8004fc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800501c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fe8:	d110      	bne.n	800500c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e00f      	b.n	800500e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fee:	4b0b      	ldr	r3, [pc, #44]	@ (800501c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ffa:	d007      	beq.n	800500c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ffc:	4b07      	ldr	r3, [pc, #28]	@ (800501c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005004:	4a05      	ldr	r2, [pc, #20]	@ (800501c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005006:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800500a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40007000 	.word	0x40007000
 8005020:	20000000 	.word	0x20000000
 8005024:	431bde83 	.word	0x431bde83

08005028 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e3ca      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800503a:	4b97      	ldr	r3, [pc, #604]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 030c 	and.w	r3, r3, #12
 8005042:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005044:	4b94      	ldr	r3, [pc, #592]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 80e4 	beq.w	8005224 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <HAL_RCC_OscConfig+0x4a>
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b0c      	cmp	r3, #12
 8005066:	f040 808b 	bne.w	8005180 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b01      	cmp	r3, #1
 800506e:	f040 8087 	bne.w	8005180 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005072:	4b89      	ldr	r3, [pc, #548]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d005      	beq.n	800508a <HAL_RCC_OscConfig+0x62>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e3a2      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1a      	ldr	r2, [r3, #32]
 800508e:	4b82      	ldr	r3, [pc, #520]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d004      	beq.n	80050a4 <HAL_RCC_OscConfig+0x7c>
 800509a:	4b7f      	ldr	r3, [pc, #508]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050a2:	e005      	b.n	80050b0 <HAL_RCC_OscConfig+0x88>
 80050a4:	4b7c      	ldr	r3, [pc, #496]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80050a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050aa:	091b      	lsrs	r3, r3, #4
 80050ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d223      	bcs.n	80050fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 fd87 	bl	8005bcc <RCC_SetFlashLatencyFromMSIRange>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e383      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050c8:	4b73      	ldr	r3, [pc, #460]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a72      	ldr	r2, [pc, #456]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80050ce:	f043 0308 	orr.w	r3, r3, #8
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	4b70      	ldr	r3, [pc, #448]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	496d      	ldr	r1, [pc, #436]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050e6:	4b6c      	ldr	r3, [pc, #432]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	4968      	ldr	r1, [pc, #416]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	604b      	str	r3, [r1, #4]
 80050fa:	e025      	b.n	8005148 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050fc:	4b66      	ldr	r3, [pc, #408]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a65      	ldr	r2, [pc, #404]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 8005102:	f043 0308 	orr.w	r3, r3, #8
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	4b63      	ldr	r3, [pc, #396]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	4960      	ldr	r1, [pc, #384]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 8005116:	4313      	orrs	r3, r2
 8005118:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800511a:	4b5f      	ldr	r3, [pc, #380]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	495b      	ldr	r1, [pc, #364]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 800512a:	4313      	orrs	r3, r2
 800512c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d109      	bne.n	8005148 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fd47 	bl	8005bcc <RCC_SetFlashLatencyFromMSIRange>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e343      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005148:	f000 fc4a 	bl	80059e0 <HAL_RCC_GetSysClockFreq>
 800514c:	4602      	mov	r2, r0
 800514e:	4b52      	ldr	r3, [pc, #328]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	4950      	ldr	r1, [pc, #320]	@ (800529c <HAL_RCC_OscConfig+0x274>)
 800515a:	5ccb      	ldrb	r3, [r1, r3]
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	fa22 f303 	lsr.w	r3, r2, r3
 8005164:	4a4e      	ldr	r2, [pc, #312]	@ (80052a0 <HAL_RCC_OscConfig+0x278>)
 8005166:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005168:	4b4e      	ldr	r3, [pc, #312]	@ (80052a4 <HAL_RCC_OscConfig+0x27c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4618      	mov	r0, r3
 800516e:	f7fc fc3d 	bl	80019ec <HAL_InitTick>
 8005172:	4603      	mov	r3, r0
 8005174:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d052      	beq.n	8005222 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	e327      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d032      	beq.n	80051ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005188:	4b43      	ldr	r3, [pc, #268]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a42      	ldr	r2, [pc, #264]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 800518e:	f043 0301 	orr.w	r3, r3, #1
 8005192:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005194:	f7fd f9ee 	bl	8002574 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800519c:	f7fd f9ea 	bl	8002574 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e310      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051ae:	4b3a      	ldr	r3, [pc, #232]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0f0      	beq.n	800519c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051ba:	4b37      	ldr	r3, [pc, #220]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a36      	ldr	r2, [pc, #216]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80051c0:	f043 0308 	orr.w	r3, r3, #8
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	4b34      	ldr	r3, [pc, #208]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	4931      	ldr	r1, [pc, #196]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051d8:	4b2f      	ldr	r3, [pc, #188]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	021b      	lsls	r3, r3, #8
 80051e6:	492c      	ldr	r1, [pc, #176]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	604b      	str	r3, [r1, #4]
 80051ec:	e01a      	b.n	8005224 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a29      	ldr	r2, [pc, #164]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 80051f4:	f023 0301 	bic.w	r3, r3, #1
 80051f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051fa:	f7fd f9bb 	bl	8002574 <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005202:	f7fd f9b7 	bl	8002574 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e2dd      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005214:	4b20      	ldr	r3, [pc, #128]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1f0      	bne.n	8005202 <HAL_RCC_OscConfig+0x1da>
 8005220:	e000      	b.n	8005224 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005222:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b00      	cmp	r3, #0
 800522e:	d074      	beq.n	800531a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b08      	cmp	r3, #8
 8005234:	d005      	beq.n	8005242 <HAL_RCC_OscConfig+0x21a>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	2b0c      	cmp	r3, #12
 800523a:	d10e      	bne.n	800525a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2b03      	cmp	r3, #3
 8005240:	d10b      	bne.n	800525a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005242:	4b15      	ldr	r3, [pc, #84]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d064      	beq.n	8005318 <HAL_RCC_OscConfig+0x2f0>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d160      	bne.n	8005318 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e2ba      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005262:	d106      	bne.n	8005272 <HAL_RCC_OscConfig+0x24a>
 8005264:	4b0c      	ldr	r3, [pc, #48]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a0b      	ldr	r2, [pc, #44]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 800526a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	e026      	b.n	80052c0 <HAL_RCC_OscConfig+0x298>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800527a:	d115      	bne.n	80052a8 <HAL_RCC_OscConfig+0x280>
 800527c:	4b06      	ldr	r3, [pc, #24]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a05      	ldr	r2, [pc, #20]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 8005282:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	4b03      	ldr	r3, [pc, #12]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a02      	ldr	r2, [pc, #8]	@ (8005298 <HAL_RCC_OscConfig+0x270>)
 800528e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	e014      	b.n	80052c0 <HAL_RCC_OscConfig+0x298>
 8005296:	bf00      	nop
 8005298:	40021000 	.word	0x40021000
 800529c:	08012fc8 	.word	0x08012fc8
 80052a0:	20000000 	.word	0x20000000
 80052a4:	20000004 	.word	0x20000004
 80052a8:	4ba0      	ldr	r3, [pc, #640]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a9f      	ldr	r2, [pc, #636]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 80052ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	4b9d      	ldr	r3, [pc, #628]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a9c      	ldr	r2, [pc, #624]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 80052ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d013      	beq.n	80052f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c8:	f7fd f954 	bl	8002574 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d0:	f7fd f950 	bl	8002574 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b64      	cmp	r3, #100	@ 0x64
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e276      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052e2:	4b92      	ldr	r3, [pc, #584]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0f0      	beq.n	80052d0 <HAL_RCC_OscConfig+0x2a8>
 80052ee:	e014      	b.n	800531a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f0:	f7fd f940 	bl	8002574 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052f8:	f7fd f93c 	bl	8002574 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b64      	cmp	r3, #100	@ 0x64
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e262      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800530a:	4b88      	ldr	r3, [pc, #544]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1f0      	bne.n	80052f8 <HAL_RCC_OscConfig+0x2d0>
 8005316:	e000      	b.n	800531a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d060      	beq.n	80053e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	2b04      	cmp	r3, #4
 800532a:	d005      	beq.n	8005338 <HAL_RCC_OscConfig+0x310>
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b0c      	cmp	r3, #12
 8005330:	d119      	bne.n	8005366 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b02      	cmp	r3, #2
 8005336:	d116      	bne.n	8005366 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005338:	4b7c      	ldr	r3, [pc, #496]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005340:	2b00      	cmp	r3, #0
 8005342:	d005      	beq.n	8005350 <HAL_RCC_OscConfig+0x328>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e23f      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005350:	4b76      	ldr	r3, [pc, #472]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	061b      	lsls	r3, r3, #24
 800535e:	4973      	ldr	r1, [pc, #460]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 8005360:	4313      	orrs	r3, r2
 8005362:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005364:	e040      	b.n	80053e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d023      	beq.n	80053b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800536e:	4b6f      	ldr	r3, [pc, #444]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a6e      	ldr	r2, [pc, #440]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 8005374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537a:	f7fd f8fb 	bl	8002574 <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005382:	f7fd f8f7 	bl	8002574 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e21d      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005394:	4b65      	ldr	r3, [pc, #404]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0f0      	beq.n	8005382 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a0:	4b62      	ldr	r3, [pc, #392]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	061b      	lsls	r3, r3, #24
 80053ae:	495f      	ldr	r1, [pc, #380]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	604b      	str	r3, [r1, #4]
 80053b4:	e018      	b.n	80053e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053b6:	4b5d      	ldr	r3, [pc, #372]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a5c      	ldr	r2, [pc, #368]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 80053bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c2:	f7fd f8d7 	bl	8002574 <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053c8:	e008      	b.n	80053dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ca:	f7fd f8d3 	bl	8002574 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d901      	bls.n	80053dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e1f9      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053dc:	4b53      	ldr	r3, [pc, #332]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1f0      	bne.n	80053ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d03c      	beq.n	800546e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01c      	beq.n	8005436 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053fc:	4b4b      	ldr	r3, [pc, #300]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 80053fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005402:	4a4a      	ldr	r2, [pc, #296]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 8005404:	f043 0301 	orr.w	r3, r3, #1
 8005408:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540c:	f7fd f8b2 	bl	8002574 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005414:	f7fd f8ae 	bl	8002574 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e1d4      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005426:	4b41      	ldr	r3, [pc, #260]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 8005428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0ef      	beq.n	8005414 <HAL_RCC_OscConfig+0x3ec>
 8005434:	e01b      	b.n	800546e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005436:	4b3d      	ldr	r3, [pc, #244]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 8005438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800543c:	4a3b      	ldr	r2, [pc, #236]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 800543e:	f023 0301 	bic.w	r3, r3, #1
 8005442:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005446:	f7fd f895 	bl	8002574 <HAL_GetTick>
 800544a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800544e:	f7fd f891 	bl	8002574 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e1b7      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005460:	4b32      	ldr	r3, [pc, #200]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 8005462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1ef      	bne.n	800544e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 80a6 	beq.w	80055c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800547c:	2300      	movs	r3, #0
 800547e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005480:	4b2a      	ldr	r3, [pc, #168]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 8005482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10d      	bne.n	80054a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800548c:	4b27      	ldr	r3, [pc, #156]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 800548e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005490:	4a26      	ldr	r2, [pc, #152]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 8005492:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005496:	6593      	str	r3, [r2, #88]	@ 0x58
 8005498:	4b24      	ldr	r3, [pc, #144]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 800549a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a0:	60bb      	str	r3, [r7, #8]
 80054a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054a4:	2301      	movs	r3, #1
 80054a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054a8:	4b21      	ldr	r3, [pc, #132]	@ (8005530 <HAL_RCC_OscConfig+0x508>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d118      	bne.n	80054e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005530 <HAL_RCC_OscConfig+0x508>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005530 <HAL_RCC_OscConfig+0x508>)
 80054ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c0:	f7fd f858 	bl	8002574 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c8:	f7fd f854 	bl	8002574 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e17a      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054da:	4b15      	ldr	r3, [pc, #84]	@ (8005530 <HAL_RCC_OscConfig+0x508>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f0      	beq.n	80054c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d108      	bne.n	8005500 <HAL_RCC_OscConfig+0x4d8>
 80054ee:	4b0f      	ldr	r3, [pc, #60]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 80054f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f4:	4a0d      	ldr	r2, [pc, #52]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 80054f6:	f043 0301 	orr.w	r3, r3, #1
 80054fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054fe:	e029      	b.n	8005554 <HAL_RCC_OscConfig+0x52c>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b05      	cmp	r3, #5
 8005506:	d115      	bne.n	8005534 <HAL_RCC_OscConfig+0x50c>
 8005508:	4b08      	ldr	r3, [pc, #32]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800550e:	4a07      	ldr	r2, [pc, #28]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 8005510:	f043 0304 	orr.w	r3, r3, #4
 8005514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005518:	4b04      	ldr	r3, [pc, #16]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 800551a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800551e:	4a03      	ldr	r2, [pc, #12]	@ (800552c <HAL_RCC_OscConfig+0x504>)
 8005520:	f043 0301 	orr.w	r3, r3, #1
 8005524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005528:	e014      	b.n	8005554 <HAL_RCC_OscConfig+0x52c>
 800552a:	bf00      	nop
 800552c:	40021000 	.word	0x40021000
 8005530:	40007000 	.word	0x40007000
 8005534:	4b9c      	ldr	r3, [pc, #624]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 8005536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800553a:	4a9b      	ldr	r2, [pc, #620]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 800553c:	f023 0301 	bic.w	r3, r3, #1
 8005540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005544:	4b98      	ldr	r3, [pc, #608]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 8005546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800554a:	4a97      	ldr	r2, [pc, #604]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 800554c:	f023 0304 	bic.w	r3, r3, #4
 8005550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d016      	beq.n	800558a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555c:	f7fd f80a 	bl	8002574 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005562:	e00a      	b.n	800557a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005564:	f7fd f806 	bl	8002574 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e12a      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800557a:	4b8b      	ldr	r3, [pc, #556]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 800557c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0ed      	beq.n	8005564 <HAL_RCC_OscConfig+0x53c>
 8005588:	e015      	b.n	80055b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558a:	f7fc fff3 	bl	8002574 <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005590:	e00a      	b.n	80055a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005592:	f7fc ffef 	bl	8002574 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e113      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055a8:	4b7f      	ldr	r3, [pc, #508]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 80055aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1ed      	bne.n	8005592 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055b6:	7ffb      	ldrb	r3, [r7, #31]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d105      	bne.n	80055c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055bc:	4b7a      	ldr	r3, [pc, #488]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 80055be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c0:	4a79      	ldr	r2, [pc, #484]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 80055c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055c6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80fe 	beq.w	80057ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	f040 80d0 	bne.w	800577c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80055dc:	4b72      	ldr	r3, [pc, #456]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f003 0203 	and.w	r2, r3, #3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d130      	bne.n	8005652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fa:	3b01      	subs	r3, #1
 80055fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055fe:	429a      	cmp	r2, r3
 8005600:	d127      	bne.n	8005652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800560c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800560e:	429a      	cmp	r2, r3
 8005610:	d11f      	bne.n	8005652 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800561c:	2a07      	cmp	r2, #7
 800561e:	bf14      	ite	ne
 8005620:	2201      	movne	r2, #1
 8005622:	2200      	moveq	r2, #0
 8005624:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005626:	4293      	cmp	r3, r2
 8005628:	d113      	bne.n	8005652 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005634:	085b      	lsrs	r3, r3, #1
 8005636:	3b01      	subs	r3, #1
 8005638:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800563a:	429a      	cmp	r2, r3
 800563c:	d109      	bne.n	8005652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005648:	085b      	lsrs	r3, r3, #1
 800564a:	3b01      	subs	r3, #1
 800564c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800564e:	429a      	cmp	r2, r3
 8005650:	d06e      	beq.n	8005730 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	2b0c      	cmp	r3, #12
 8005656:	d069      	beq.n	800572c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005658:	4b53      	ldr	r3, [pc, #332]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d105      	bne.n	8005670 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005664:	4b50      	ldr	r3, [pc, #320]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e0ad      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005674:	4b4c      	ldr	r3, [pc, #304]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a4b      	ldr	r2, [pc, #300]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 800567a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800567e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005680:	f7fc ff78 	bl	8002574 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005688:	f7fc ff74 	bl	8002574 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e09a      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800569a:	4b43      	ldr	r3, [pc, #268]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056a6:	4b40      	ldr	r3, [pc, #256]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	4b40      	ldr	r3, [pc, #256]	@ (80057ac <HAL_RCC_OscConfig+0x784>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80056b6:	3a01      	subs	r2, #1
 80056b8:	0112      	lsls	r2, r2, #4
 80056ba:	4311      	orrs	r1, r2
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80056c0:	0212      	lsls	r2, r2, #8
 80056c2:	4311      	orrs	r1, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056c8:	0852      	lsrs	r2, r2, #1
 80056ca:	3a01      	subs	r2, #1
 80056cc:	0552      	lsls	r2, r2, #21
 80056ce:	4311      	orrs	r1, r2
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80056d4:	0852      	lsrs	r2, r2, #1
 80056d6:	3a01      	subs	r2, #1
 80056d8:	0652      	lsls	r2, r2, #25
 80056da:	4311      	orrs	r1, r2
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80056e0:	0912      	lsrs	r2, r2, #4
 80056e2:	0452      	lsls	r2, r2, #17
 80056e4:	430a      	orrs	r2, r1
 80056e6:	4930      	ldr	r1, [pc, #192]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80056ec:	4b2e      	ldr	r3, [pc, #184]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a2d      	ldr	r2, [pc, #180]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 80056f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056f8:	4b2b      	ldr	r3, [pc, #172]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	4a2a      	ldr	r2, [pc, #168]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 80056fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005702:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005704:	f7fc ff36 	bl	8002574 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800570c:	f7fc ff32 	bl	8002574 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e058      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800571e:	4b22      	ldr	r3, [pc, #136]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f0      	beq.n	800570c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800572a:	e050      	b.n	80057ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e04f      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005730:	4b1d      	ldr	r3, [pc, #116]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d148      	bne.n	80057ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800573c:	4b1a      	ldr	r3, [pc, #104]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a19      	ldr	r2, [pc, #100]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 8005742:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005746:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005748:	4b17      	ldr	r3, [pc, #92]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	4a16      	ldr	r2, [pc, #88]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 800574e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005752:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005754:	f7fc ff0e 	bl	8002574 <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575c:	f7fc ff0a 	bl	8002574 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e030      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800576e:	4b0e      	ldr	r3, [pc, #56]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0f0      	beq.n	800575c <HAL_RCC_OscConfig+0x734>
 800577a:	e028      	b.n	80057ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2b0c      	cmp	r3, #12
 8005780:	d023      	beq.n	80057ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005782:	4b09      	ldr	r3, [pc, #36]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a08      	ldr	r2, [pc, #32]	@ (80057a8 <HAL_RCC_OscConfig+0x780>)
 8005788:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800578c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800578e:	f7fc fef1 	bl	8002574 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005794:	e00c      	b.n	80057b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005796:	f7fc feed 	bl	8002574 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d905      	bls.n	80057b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e013      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
 80057a8:	40021000 	.word	0x40021000
 80057ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057b0:	4b09      	ldr	r3, [pc, #36]	@ (80057d8 <HAL_RCC_OscConfig+0x7b0>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1ec      	bne.n	8005796 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80057bc:	4b06      	ldr	r3, [pc, #24]	@ (80057d8 <HAL_RCC_OscConfig+0x7b0>)
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	4905      	ldr	r1, [pc, #20]	@ (80057d8 <HAL_RCC_OscConfig+0x7b0>)
 80057c2:	4b06      	ldr	r3, [pc, #24]	@ (80057dc <HAL_RCC_OscConfig+0x7b4>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	60cb      	str	r3, [r1, #12]
 80057c8:	e001      	b.n	80057ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3720      	adds	r7, #32
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40021000 	.word	0x40021000
 80057dc:	feeefffc 	.word	0xfeeefffc

080057e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e0e7      	b.n	80059c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057f4:	4b75      	ldr	r3, [pc, #468]	@ (80059cc <HAL_RCC_ClockConfig+0x1ec>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d910      	bls.n	8005824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005802:	4b72      	ldr	r3, [pc, #456]	@ (80059cc <HAL_RCC_ClockConfig+0x1ec>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f023 0207 	bic.w	r2, r3, #7
 800580a:	4970      	ldr	r1, [pc, #448]	@ (80059cc <HAL_RCC_ClockConfig+0x1ec>)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	4313      	orrs	r3, r2
 8005810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005812:	4b6e      	ldr	r3, [pc, #440]	@ (80059cc <HAL_RCC_ClockConfig+0x1ec>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	429a      	cmp	r2, r3
 800581e:	d001      	beq.n	8005824 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0cf      	b.n	80059c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d010      	beq.n	8005852 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	4b66      	ldr	r3, [pc, #408]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800583c:	429a      	cmp	r2, r3
 800583e:	d908      	bls.n	8005852 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005840:	4b63      	ldr	r3, [pc, #396]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	4960      	ldr	r1, [pc, #384]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 800584e:	4313      	orrs	r3, r2
 8005850:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d04c      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b03      	cmp	r3, #3
 8005864:	d107      	bne.n	8005876 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005866:	4b5a      	ldr	r3, [pc, #360]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d121      	bne.n	80058b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e0a6      	b.n	80059c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d107      	bne.n	800588e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800587e:	4b54      	ldr	r3, [pc, #336]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d115      	bne.n	80058b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e09a      	b.n	80059c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d107      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005896:	4b4e      	ldr	r3, [pc, #312]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d109      	bne.n	80058b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e08e      	b.n	80059c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058a6:	4b4a      	ldr	r3, [pc, #296]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e086      	b.n	80059c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058b6:	4b46      	ldr	r3, [pc, #280]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f023 0203 	bic.w	r2, r3, #3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	4943      	ldr	r1, [pc, #268]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c8:	f7fc fe54 	bl	8002574 <HAL_GetTick>
 80058cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ce:	e00a      	b.n	80058e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058d0:	f7fc fe50 	bl	8002574 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058de:	4293      	cmp	r3, r2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e06e      	b.n	80059c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058e6:	4b3a      	ldr	r3, [pc, #232]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 020c 	and.w	r2, r3, #12
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d1eb      	bne.n	80058d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d010      	beq.n	8005926 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	4b31      	ldr	r3, [pc, #196]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005910:	429a      	cmp	r2, r3
 8005912:	d208      	bcs.n	8005926 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005914:	4b2e      	ldr	r3, [pc, #184]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	492b      	ldr	r1, [pc, #172]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005922:	4313      	orrs	r3, r2
 8005924:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005926:	4b29      	ldr	r3, [pc, #164]	@ (80059cc <HAL_RCC_ClockConfig+0x1ec>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0307 	and.w	r3, r3, #7
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d210      	bcs.n	8005956 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005934:	4b25      	ldr	r3, [pc, #148]	@ (80059cc <HAL_RCC_ClockConfig+0x1ec>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f023 0207 	bic.w	r2, r3, #7
 800593c:	4923      	ldr	r1, [pc, #140]	@ (80059cc <HAL_RCC_ClockConfig+0x1ec>)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	4313      	orrs	r3, r2
 8005942:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005944:	4b21      	ldr	r3, [pc, #132]	@ (80059cc <HAL_RCC_ClockConfig+0x1ec>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d001      	beq.n	8005956 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e036      	b.n	80059c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d008      	beq.n	8005974 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005962:	4b1b      	ldr	r3, [pc, #108]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	4918      	ldr	r1, [pc, #96]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005970:	4313      	orrs	r3, r2
 8005972:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b00      	cmp	r3, #0
 800597e:	d009      	beq.n	8005994 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005980:	4b13      	ldr	r3, [pc, #76]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	4910      	ldr	r1, [pc, #64]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005990:	4313      	orrs	r3, r2
 8005992:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005994:	f000 f824 	bl	80059e0 <HAL_RCC_GetSysClockFreq>
 8005998:	4602      	mov	r2, r0
 800599a:	4b0d      	ldr	r3, [pc, #52]	@ (80059d0 <HAL_RCC_ClockConfig+0x1f0>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	091b      	lsrs	r3, r3, #4
 80059a0:	f003 030f 	and.w	r3, r3, #15
 80059a4:	490b      	ldr	r1, [pc, #44]	@ (80059d4 <HAL_RCC_ClockConfig+0x1f4>)
 80059a6:	5ccb      	ldrb	r3, [r1, r3]
 80059a8:	f003 031f 	and.w	r3, r3, #31
 80059ac:	fa22 f303 	lsr.w	r3, r2, r3
 80059b0:	4a09      	ldr	r2, [pc, #36]	@ (80059d8 <HAL_RCC_ClockConfig+0x1f8>)
 80059b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059b4:	4b09      	ldr	r3, [pc, #36]	@ (80059dc <HAL_RCC_ClockConfig+0x1fc>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fc f817 	bl	80019ec <HAL_InitTick>
 80059be:	4603      	mov	r3, r0
 80059c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80059c2:	7afb      	ldrb	r3, [r7, #11]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	40022000 	.word	0x40022000
 80059d0:	40021000 	.word	0x40021000
 80059d4:	08012fc8 	.word	0x08012fc8
 80059d8:	20000000 	.word	0x20000000
 80059dc:	20000004 	.word	0x20000004

080059e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b089      	sub	sp, #36	@ 0x24
 80059e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	2300      	movs	r3, #0
 80059ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ee:	4b3e      	ldr	r3, [pc, #248]	@ (8005ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 030c 	and.w	r3, r3, #12
 80059f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059f8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0303 	and.w	r3, r3, #3
 8005a00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d005      	beq.n	8005a14 <HAL_RCC_GetSysClockFreq+0x34>
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2b0c      	cmp	r3, #12
 8005a0c:	d121      	bne.n	8005a52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d11e      	bne.n	8005a52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a14:	4b34      	ldr	r3, [pc, #208]	@ (8005ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d107      	bne.n	8005a30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a20:	4b31      	ldr	r3, [pc, #196]	@ (8005ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a26:	0a1b      	lsrs	r3, r3, #8
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	61fb      	str	r3, [r7, #28]
 8005a2e:	e005      	b.n	8005a3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a30:	4b2d      	ldr	r3, [pc, #180]	@ (8005ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	091b      	lsrs	r3, r3, #4
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a3c:	4a2b      	ldr	r2, [pc, #172]	@ (8005aec <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10d      	bne.n	8005a68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a50:	e00a      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d102      	bne.n	8005a5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a58:	4b25      	ldr	r3, [pc, #148]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a5a:	61bb      	str	r3, [r7, #24]
 8005a5c:	e004      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d101      	bne.n	8005a68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a64:	4b23      	ldr	r3, [pc, #140]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	2b0c      	cmp	r3, #12
 8005a6c:	d134      	bne.n	8005ad8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d003      	beq.n	8005a86 <HAL_RCC_GetSysClockFreq+0xa6>
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	d003      	beq.n	8005a8c <HAL_RCC_GetSysClockFreq+0xac>
 8005a84:	e005      	b.n	8005a92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005a86:	4b1a      	ldr	r3, [pc, #104]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a88:	617b      	str	r3, [r7, #20]
      break;
 8005a8a:	e005      	b.n	8005a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a8c:	4b19      	ldr	r3, [pc, #100]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a8e:	617b      	str	r3, [r7, #20]
      break;
 8005a90:	e002      	b.n	8005a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	617b      	str	r3, [r7, #20]
      break;
 8005a96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a98:	4b13      	ldr	r3, [pc, #76]	@ (8005ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	091b      	lsrs	r3, r3, #4
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005aa6:	4b10      	ldr	r3, [pc, #64]	@ (8005ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	0a1b      	lsrs	r3, r3, #8
 8005aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	fb03 f202 	mul.w	r2, r3, r2
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005abe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	0e5b      	lsrs	r3, r3, #25
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	3301      	adds	r3, #1
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ad8:	69bb      	ldr	r3, [r7, #24]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3724      	adds	r7, #36	@ 0x24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	08012fe0 	.word	0x08012fe0
 8005af0:	00f42400 	.word	0x00f42400
 8005af4:	007a1200 	.word	0x007a1200

08005af8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005afc:	4b03      	ldr	r3, [pc, #12]	@ (8005b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005afe:	681b      	ldr	r3, [r3, #0]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20000000 	.word	0x20000000

08005b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b14:	f7ff fff0 	bl	8005af8 <HAL_RCC_GetHCLKFreq>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	4b06      	ldr	r3, [pc, #24]	@ (8005b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	0a1b      	lsrs	r3, r3, #8
 8005b20:	f003 0307 	and.w	r3, r3, #7
 8005b24:	4904      	ldr	r1, [pc, #16]	@ (8005b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b26:	5ccb      	ldrb	r3, [r1, r3]
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40021000 	.word	0x40021000
 8005b38:	08012fd8 	.word	0x08012fd8

08005b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b40:	f7ff ffda 	bl	8005af8 <HAL_RCC_GetHCLKFreq>
 8005b44:	4602      	mov	r2, r0
 8005b46:	4b06      	ldr	r3, [pc, #24]	@ (8005b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	0adb      	lsrs	r3, r3, #11
 8005b4c:	f003 0307 	and.w	r3, r3, #7
 8005b50:	4904      	ldr	r1, [pc, #16]	@ (8005b64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b52:	5ccb      	ldrb	r3, [r1, r3]
 8005b54:	f003 031f 	and.w	r3, r3, #31
 8005b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	40021000 	.word	0x40021000
 8005b64:	08012fd8 	.word	0x08012fd8

08005b68 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	220f      	movs	r2, #15
 8005b76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005b78:	4b12      	ldr	r3, [pc, #72]	@ (8005bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f003 0203 	and.w	r2, r3, #3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005b84:	4b0f      	ldr	r3, [pc, #60]	@ (8005bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005b90:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005b9c:	4b09      	ldr	r3, [pc, #36]	@ (8005bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	08db      	lsrs	r3, r3, #3
 8005ba2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005baa:	4b07      	ldr	r3, [pc, #28]	@ (8005bc8 <HAL_RCC_GetClockConfig+0x60>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0207 	and.w	r2, r3, #7
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	601a      	str	r2, [r3, #0]
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	40022000 	.word	0x40022000

08005bcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8005c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005be4:	f7ff f9bc 	bl	8004f60 <HAL_PWREx_GetVoltageRange>
 8005be8:	6178      	str	r0, [r7, #20]
 8005bea:	e014      	b.n	8005c16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bec:	4b25      	ldr	r3, [pc, #148]	@ (8005c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf0:	4a24      	ldr	r2, [pc, #144]	@ (8005c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bf8:	4b22      	ldr	r3, [pc, #136]	@ (8005c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c04:	f7ff f9ac 	bl	8004f60 <HAL_PWREx_GetVoltageRange>
 8005c08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8005c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c0e:	4a1d      	ldr	r2, [pc, #116]	@ (8005c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c14:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c1c:	d10b      	bne.n	8005c36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b80      	cmp	r3, #128	@ 0x80
 8005c22:	d919      	bls.n	8005c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2ba0      	cmp	r3, #160	@ 0xa0
 8005c28:	d902      	bls.n	8005c30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	e013      	b.n	8005c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c30:	2301      	movs	r3, #1
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	e010      	b.n	8005c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b80      	cmp	r3, #128	@ 0x80
 8005c3a:	d902      	bls.n	8005c42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	e00a      	b.n	8005c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b80      	cmp	r3, #128	@ 0x80
 8005c46:	d102      	bne.n	8005c4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c48:	2302      	movs	r3, #2
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	e004      	b.n	8005c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b70      	cmp	r3, #112	@ 0x70
 8005c52:	d101      	bne.n	8005c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c54:	2301      	movs	r3, #1
 8005c56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c58:	4b0b      	ldr	r3, [pc, #44]	@ (8005c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f023 0207 	bic.w	r2, r3, #7
 8005c60:	4909      	ldr	r1, [pc, #36]	@ (8005c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c68:	4b07      	ldr	r3, [pc, #28]	@ (8005c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d001      	beq.n	8005c7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e000      	b.n	8005c7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40021000 	.word	0x40021000
 8005c88:	40022000 	.word	0x40022000

08005c8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c94:	2300      	movs	r3, #0
 8005c96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c98:	2300      	movs	r3, #0
 8005c9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d041      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005cb0:	d02a      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005cb2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005cb6:	d824      	bhi.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005cb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cbc:	d008      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005cbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cc2:	d81e      	bhi.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005cc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ccc:	d010      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cce:	e018      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005cd0:	4b86      	ldr	r3, [pc, #536]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	4a85      	ldr	r2, [pc, #532]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cdc:	e015      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 fabb 	bl	8006260 <RCCEx_PLLSAI1_Config>
 8005cea:	4603      	mov	r3, r0
 8005cec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cee:	e00c      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3320      	adds	r3, #32
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 fba6 	bl	8006448 <RCCEx_PLLSAI2_Config>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d00:	e003      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	74fb      	strb	r3, [r7, #19]
      break;
 8005d06:	e000      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005d08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d0a:	7cfb      	ldrb	r3, [r7, #19]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10b      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d10:	4b76      	ldr	r3, [pc, #472]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d16:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d1e:	4973      	ldr	r1, [pc, #460]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005d26:	e001      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d28:	7cfb      	ldrb	r3, [r7, #19]
 8005d2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d041      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d40:	d02a      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005d42:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d46:	d824      	bhi.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d4c:	d008      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d52:	d81e      	bhi.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005d58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d5c:	d010      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d5e:	e018      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d60:	4b62      	ldr	r3, [pc, #392]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	4a61      	ldr	r2, [pc, #388]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d6c:	e015      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3304      	adds	r3, #4
 8005d72:	2100      	movs	r1, #0
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 fa73 	bl	8006260 <RCCEx_PLLSAI1_Config>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d7e:	e00c      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3320      	adds	r3, #32
 8005d84:	2100      	movs	r1, #0
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fb5e 	bl	8006448 <RCCEx_PLLSAI2_Config>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d90:	e003      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	74fb      	strb	r3, [r7, #19]
      break;
 8005d96:	e000      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d9a:	7cfb      	ldrb	r3, [r7, #19]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10b      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005da0:	4b52      	ldr	r3, [pc, #328]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dae:	494f      	ldr	r1, [pc, #316]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005db6:	e001      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db8:	7cfb      	ldrb	r3, [r7, #19]
 8005dba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 80a0 	beq.w	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005dce:	4b47      	ldr	r3, [pc, #284]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e000      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005dde:	2300      	movs	r3, #0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00d      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005de4:	4b41      	ldr	r3, [pc, #260]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005de8:	4a40      	ldr	r2, [pc, #256]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dee:	6593      	str	r3, [r2, #88]	@ 0x58
 8005df0:	4b3e      	ldr	r3, [pc, #248]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005df8:	60bb      	str	r3, [r7, #8]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e00:	4b3b      	ldr	r3, [pc, #236]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a3a      	ldr	r2, [pc, #232]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e0c:	f7fc fbb2 	bl	8002574 <HAL_GetTick>
 8005e10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e12:	e009      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e14:	f7fc fbae 	bl	8002574 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d902      	bls.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	74fb      	strb	r3, [r7, #19]
        break;
 8005e26:	e005      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e28:	4b31      	ldr	r3, [pc, #196]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0ef      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005e34:	7cfb      	ldrb	r3, [r7, #19]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d15c      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01f      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d019      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e58:	4b24      	ldr	r3, [pc, #144]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e64:	4b21      	ldr	r3, [pc, #132]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e6a:	4a20      	ldr	r2, [pc, #128]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e74:	4b1d      	ldr	r3, [pc, #116]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e84:	4a19      	ldr	r2, [pc, #100]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d016      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e96:	f7fc fb6d 	bl	8002574 <HAL_GetTick>
 8005e9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e9c:	e00b      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e9e:	f7fc fb69 	bl	8002574 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d902      	bls.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	74fb      	strb	r3, [r7, #19]
            break;
 8005eb4:	e006      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0ec      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005ec4:	7cfb      	ldrb	r3, [r7, #19]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10c      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eca:	4b08      	ldr	r3, [pc, #32]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eda:	4904      	ldr	r1, [pc, #16]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ee2:	e009      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ee4:	7cfb      	ldrb	r3, [r7, #19]
 8005ee6:	74bb      	strb	r3, [r7, #18]
 8005ee8:	e006      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005eea:	bf00      	nop
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef4:	7cfb      	ldrb	r3, [r7, #19]
 8005ef6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ef8:	7c7b      	ldrb	r3, [r7, #17]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d105      	bne.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005efe:	4b9e      	ldr	r3, [pc, #632]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f02:	4a9d      	ldr	r2, [pc, #628]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f16:	4b98      	ldr	r3, [pc, #608]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f1c:	f023 0203 	bic.w	r2, r3, #3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f24:	4994      	ldr	r1, [pc, #592]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f38:	4b8f      	ldr	r3, [pc, #572]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f3e:	f023 020c 	bic.w	r2, r3, #12
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f46:	498c      	ldr	r1, [pc, #560]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f5a:	4b87      	ldr	r3, [pc, #540]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f68:	4983      	ldr	r1, [pc, #524]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00a      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f7c:	4b7e      	ldr	r3, [pc, #504]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f8a:	497b      	ldr	r1, [pc, #492]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0310 	and.w	r3, r3, #16
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00a      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f9e:	4b76      	ldr	r3, [pc, #472]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fac:	4972      	ldr	r1, [pc, #456]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00a      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fc0:	4b6d      	ldr	r3, [pc, #436]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fce:	496a      	ldr	r1, [pc, #424]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fe2:	4b65      	ldr	r3, [pc, #404]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff0:	4961      	ldr	r1, [pc, #388]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00a      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006004:	4b5c      	ldr	r3, [pc, #368]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800600a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006012:	4959      	ldr	r1, [pc, #356]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006014:	4313      	orrs	r3, r2
 8006016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006026:	4b54      	ldr	r3, [pc, #336]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006034:	4950      	ldr	r1, [pc, #320]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006036:	4313      	orrs	r3, r2
 8006038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00a      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006048:	4b4b      	ldr	r3, [pc, #300]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800604a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800604e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006056:	4948      	ldr	r1, [pc, #288]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006058:	4313      	orrs	r3, r2
 800605a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800606a:	4b43      	ldr	r3, [pc, #268]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800606c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006070:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006078:	493f      	ldr	r1, [pc, #252]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800607a:	4313      	orrs	r3, r2
 800607c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d028      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800608c:	4b3a      	ldr	r3, [pc, #232]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800608e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006092:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800609a:	4937      	ldr	r1, [pc, #220]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800609c:	4313      	orrs	r3, r2
 800609e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060aa:	d106      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060ac:	4b32      	ldr	r3, [pc, #200]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	4a31      	ldr	r2, [pc, #196]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060b6:	60d3      	str	r3, [r2, #12]
 80060b8:	e011      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060c2:	d10c      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3304      	adds	r3, #4
 80060c8:	2101      	movs	r1, #1
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 f8c8 	bl	8006260 <RCCEx_PLLSAI1_Config>
 80060d0:	4603      	mov	r3, r0
 80060d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80060d4:	7cfb      	ldrb	r3, [r7, #19]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80060da:	7cfb      	ldrb	r3, [r7, #19]
 80060dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d028      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060ea:	4b23      	ldr	r3, [pc, #140]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f8:	491f      	ldr	r1, [pc, #124]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006104:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006108:	d106      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800610a:	4b1b      	ldr	r3, [pc, #108]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	4a1a      	ldr	r2, [pc, #104]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006110:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006114:	60d3      	str	r3, [r2, #12]
 8006116:	e011      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800611c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006120:	d10c      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	3304      	adds	r3, #4
 8006126:	2101      	movs	r1, #1
 8006128:	4618      	mov	r0, r3
 800612a:	f000 f899 	bl	8006260 <RCCEx_PLLSAI1_Config>
 800612e:	4603      	mov	r3, r0
 8006130:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006132:	7cfb      	ldrb	r3, [r7, #19]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006138:	7cfb      	ldrb	r3, [r7, #19]
 800613a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d02b      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006148:	4b0b      	ldr	r3, [pc, #44]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800614e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006156:	4908      	ldr	r1, [pc, #32]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006158:	4313      	orrs	r3, r2
 800615a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006162:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006166:	d109      	bne.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006168:	4b03      	ldr	r3, [pc, #12]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	4a02      	ldr	r2, [pc, #8]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800616e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006172:	60d3      	str	r3, [r2, #12]
 8006174:	e014      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006176:	bf00      	nop
 8006178:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006180:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006184:	d10c      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	3304      	adds	r3, #4
 800618a:	2101      	movs	r1, #1
 800618c:	4618      	mov	r0, r3
 800618e:	f000 f867 	bl	8006260 <RCCEx_PLLSAI1_Config>
 8006192:	4603      	mov	r3, r0
 8006194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006196:	7cfb      	ldrb	r3, [r7, #19]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800619c:	7cfb      	ldrb	r3, [r7, #19]
 800619e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d02f      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061ac:	4b2b      	ldr	r3, [pc, #172]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061ba:	4928      	ldr	r1, [pc, #160]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061ca:	d10d      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	3304      	adds	r3, #4
 80061d0:	2102      	movs	r1, #2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 f844 	bl	8006260 <RCCEx_PLLSAI1_Config>
 80061d8:	4603      	mov	r3, r0
 80061da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061dc:	7cfb      	ldrb	r3, [r7, #19]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d014      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80061e2:	7cfb      	ldrb	r3, [r7, #19]
 80061e4:	74bb      	strb	r3, [r7, #18]
 80061e6:	e011      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061f0:	d10c      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3320      	adds	r3, #32
 80061f6:	2102      	movs	r1, #2
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 f925 	bl	8006448 <RCCEx_PLLSAI2_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006202:	7cfb      	ldrb	r3, [r7, #19]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006208:	7cfb      	ldrb	r3, [r7, #19]
 800620a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006218:	4b10      	ldr	r3, [pc, #64]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006226:	490d      	ldr	r1, [pc, #52]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00b      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800623a:	4b08      	ldr	r3, [pc, #32]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800623c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006240:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800624a:	4904      	ldr	r1, [pc, #16]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800624c:	4313      	orrs	r3, r2
 800624e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006252:	7cbb      	ldrb	r3, [r7, #18]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40021000 	.word	0x40021000

08006260 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800626e:	4b75      	ldr	r3, [pc, #468]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d018      	beq.n	80062ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800627a:	4b72      	ldr	r3, [pc, #456]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0203 	and.w	r2, r3, #3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d10d      	bne.n	80062a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
       ||
 800628e:	2b00      	cmp	r3, #0
 8006290:	d009      	beq.n	80062a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006292:	4b6c      	ldr	r3, [pc, #432]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	091b      	lsrs	r3, r3, #4
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
       ||
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d047      	beq.n	8006336 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	73fb      	strb	r3, [r7, #15]
 80062aa:	e044      	b.n	8006336 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d018      	beq.n	80062e6 <RCCEx_PLLSAI1_Config+0x86>
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d825      	bhi.n	8006304 <RCCEx_PLLSAI1_Config+0xa4>
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d002      	beq.n	80062c2 <RCCEx_PLLSAI1_Config+0x62>
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d009      	beq.n	80062d4 <RCCEx_PLLSAI1_Config+0x74>
 80062c0:	e020      	b.n	8006304 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062c2:	4b60      	ldr	r3, [pc, #384]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d11d      	bne.n	800630a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062d2:	e01a      	b.n	800630a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062d4:	4b5b      	ldr	r3, [pc, #364]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d116      	bne.n	800630e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062e4:	e013      	b.n	800630e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062e6:	4b57      	ldr	r3, [pc, #348]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10f      	bne.n	8006312 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062f2:	4b54      	ldr	r3, [pc, #336]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d109      	bne.n	8006312 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006302:	e006      	b.n	8006312 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
      break;
 8006308:	e004      	b.n	8006314 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800630a:	bf00      	nop
 800630c:	e002      	b.n	8006314 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800630e:	bf00      	nop
 8006310:	e000      	b.n	8006314 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006312:	bf00      	nop
    }

    if(status == HAL_OK)
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10d      	bne.n	8006336 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800631a:	4b4a      	ldr	r3, [pc, #296]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6819      	ldr	r1, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	3b01      	subs	r3, #1
 800632c:	011b      	lsls	r3, r3, #4
 800632e:	430b      	orrs	r3, r1
 8006330:	4944      	ldr	r1, [pc, #272]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006332:	4313      	orrs	r3, r2
 8006334:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d17d      	bne.n	8006438 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800633c:	4b41      	ldr	r3, [pc, #260]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a40      	ldr	r2, [pc, #256]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006342:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006348:	f7fc f914 	bl	8002574 <HAL_GetTick>
 800634c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800634e:	e009      	b.n	8006364 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006350:	f7fc f910 	bl	8002574 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d902      	bls.n	8006364 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	73fb      	strb	r3, [r7, #15]
        break;
 8006362:	e005      	b.n	8006370 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006364:	4b37      	ldr	r3, [pc, #220]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1ef      	bne.n	8006350 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d160      	bne.n	8006438 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d111      	bne.n	80063a0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800637c:	4b31      	ldr	r3, [pc, #196]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006384:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6892      	ldr	r2, [r2, #8]
 800638c:	0211      	lsls	r1, r2, #8
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	68d2      	ldr	r2, [r2, #12]
 8006392:	0912      	lsrs	r2, r2, #4
 8006394:	0452      	lsls	r2, r2, #17
 8006396:	430a      	orrs	r2, r1
 8006398:	492a      	ldr	r1, [pc, #168]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800639a:	4313      	orrs	r3, r2
 800639c:	610b      	str	r3, [r1, #16]
 800639e:	e027      	b.n	80063f0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d112      	bne.n	80063cc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063a6:	4b27      	ldr	r3, [pc, #156]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80063ae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6892      	ldr	r2, [r2, #8]
 80063b6:	0211      	lsls	r1, r2, #8
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	6912      	ldr	r2, [r2, #16]
 80063bc:	0852      	lsrs	r2, r2, #1
 80063be:	3a01      	subs	r2, #1
 80063c0:	0552      	lsls	r2, r2, #21
 80063c2:	430a      	orrs	r2, r1
 80063c4:	491f      	ldr	r1, [pc, #124]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	610b      	str	r3, [r1, #16]
 80063ca:	e011      	b.n	80063f0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063cc:	4b1d      	ldr	r3, [pc, #116]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80063d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6892      	ldr	r2, [r2, #8]
 80063dc:	0211      	lsls	r1, r2, #8
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	6952      	ldr	r2, [r2, #20]
 80063e2:	0852      	lsrs	r2, r2, #1
 80063e4:	3a01      	subs	r2, #1
 80063e6:	0652      	lsls	r2, r2, #25
 80063e8:	430a      	orrs	r2, r1
 80063ea:	4916      	ldr	r1, [pc, #88]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80063f0:	4b14      	ldr	r3, [pc, #80]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a13      	ldr	r2, [pc, #76]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fc:	f7fc f8ba 	bl	8002574 <HAL_GetTick>
 8006400:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006402:	e009      	b.n	8006418 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006404:	f7fc f8b6 	bl	8002574 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d902      	bls.n	8006418 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	73fb      	strb	r3, [r7, #15]
          break;
 8006416:	e005      	b.n	8006424 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006418:	4b0a      	ldr	r3, [pc, #40]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d0ef      	beq.n	8006404 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006424:	7bfb      	ldrb	r3, [r7, #15]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800642a:	4b06      	ldr	r3, [pc, #24]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 800642c:	691a      	ldr	r2, [r3, #16]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	4904      	ldr	r1, [pc, #16]	@ (8006444 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006434:	4313      	orrs	r3, r2
 8006436:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006438:	7bfb      	ldrb	r3, [r7, #15]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40021000 	.word	0x40021000

08006448 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006456:	4b6a      	ldr	r3, [pc, #424]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d018      	beq.n	8006494 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006462:	4b67      	ldr	r3, [pc, #412]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f003 0203 	and.w	r2, r3, #3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d10d      	bne.n	800648e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
       ||
 8006476:	2b00      	cmp	r3, #0
 8006478:	d009      	beq.n	800648e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800647a:	4b61      	ldr	r3, [pc, #388]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	091b      	lsrs	r3, r3, #4
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
       ||
 800648a:	429a      	cmp	r2, r3
 800648c:	d047      	beq.n	800651e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	73fb      	strb	r3, [r7, #15]
 8006492:	e044      	b.n	800651e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b03      	cmp	r3, #3
 800649a:	d018      	beq.n	80064ce <RCCEx_PLLSAI2_Config+0x86>
 800649c:	2b03      	cmp	r3, #3
 800649e:	d825      	bhi.n	80064ec <RCCEx_PLLSAI2_Config+0xa4>
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d002      	beq.n	80064aa <RCCEx_PLLSAI2_Config+0x62>
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d009      	beq.n	80064bc <RCCEx_PLLSAI2_Config+0x74>
 80064a8:	e020      	b.n	80064ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064aa:	4b55      	ldr	r3, [pc, #340]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d11d      	bne.n	80064f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064ba:	e01a      	b.n	80064f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064bc:	4b50      	ldr	r3, [pc, #320]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d116      	bne.n	80064f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064cc:	e013      	b.n	80064f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064ce:	4b4c      	ldr	r3, [pc, #304]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10f      	bne.n	80064fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064da:	4b49      	ldr	r3, [pc, #292]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d109      	bne.n	80064fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064ea:	e006      	b.n	80064fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	73fb      	strb	r3, [r7, #15]
      break;
 80064f0:	e004      	b.n	80064fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064f2:	bf00      	nop
 80064f4:	e002      	b.n	80064fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064f6:	bf00      	nop
 80064f8:	e000      	b.n	80064fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10d      	bne.n	800651e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006502:	4b3f      	ldr	r3, [pc, #252]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6819      	ldr	r1, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	3b01      	subs	r3, #1
 8006514:	011b      	lsls	r3, r3, #4
 8006516:	430b      	orrs	r3, r1
 8006518:	4939      	ldr	r1, [pc, #228]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 800651a:	4313      	orrs	r3, r2
 800651c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d167      	bne.n	80065f4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006524:	4b36      	ldr	r3, [pc, #216]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a35      	ldr	r2, [pc, #212]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 800652a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800652e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006530:	f7fc f820 	bl	8002574 <HAL_GetTick>
 8006534:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006536:	e009      	b.n	800654c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006538:	f7fc f81c 	bl	8002574 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d902      	bls.n	800654c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	73fb      	strb	r3, [r7, #15]
        break;
 800654a:	e005      	b.n	8006558 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800654c:	4b2c      	ldr	r3, [pc, #176]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1ef      	bne.n	8006538 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006558:	7bfb      	ldrb	r3, [r7, #15]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d14a      	bne.n	80065f4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d111      	bne.n	8006588 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006564:	4b26      	ldr	r3, [pc, #152]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800656c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6892      	ldr	r2, [r2, #8]
 8006574:	0211      	lsls	r1, r2, #8
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	68d2      	ldr	r2, [r2, #12]
 800657a:	0912      	lsrs	r2, r2, #4
 800657c:	0452      	lsls	r2, r2, #17
 800657e:	430a      	orrs	r2, r1
 8006580:	491f      	ldr	r1, [pc, #124]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006582:	4313      	orrs	r3, r2
 8006584:	614b      	str	r3, [r1, #20]
 8006586:	e011      	b.n	80065ac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006588:	4b1d      	ldr	r3, [pc, #116]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006590:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6892      	ldr	r2, [r2, #8]
 8006598:	0211      	lsls	r1, r2, #8
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6912      	ldr	r2, [r2, #16]
 800659e:	0852      	lsrs	r2, r2, #1
 80065a0:	3a01      	subs	r2, #1
 80065a2:	0652      	lsls	r2, r2, #25
 80065a4:	430a      	orrs	r2, r1
 80065a6:	4916      	ldr	r1, [pc, #88]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80065ac:	4b14      	ldr	r3, [pc, #80]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a13      	ldr	r2, [pc, #76]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b8:	f7fb ffdc 	bl	8002574 <HAL_GetTick>
 80065bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065be:	e009      	b.n	80065d4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065c0:	f7fb ffd8 	bl	8002574 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d902      	bls.n	80065d4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	73fb      	strb	r3, [r7, #15]
          break;
 80065d2:	e005      	b.n	80065e0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0ef      	beq.n	80065c0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d106      	bne.n	80065f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80065e6:	4b06      	ldr	r3, [pc, #24]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065e8:	695a      	ldr	r2, [r3, #20]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	4904      	ldr	r1, [pc, #16]	@ (8006600 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	40021000 	.word	0x40021000

08006604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e095      	b.n	8006742 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661a:	2b00      	cmp	r3, #0
 800661c:	d108      	bne.n	8006630 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006626:	d009      	beq.n	800663c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	61da      	str	r2, [r3, #28]
 800662e:	e005      	b.n	800663c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fb f95c 	bl	8001914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006672:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800667c:	d902      	bls.n	8006684 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800667e:	2300      	movs	r3, #0
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	e002      	b.n	800668a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006688:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006692:	d007      	beq.n	80066a4 <HAL_SPI_Init+0xa0>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800669c:	d002      	beq.n	80066a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	431a      	orrs	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066dc:	431a      	orrs	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066e6:	ea42 0103 	orr.w	r1, r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	0c1b      	lsrs	r3, r3, #16
 8006700:	f003 0204 	and.w	r2, r3, #4
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006708:	f003 0310 	and.w	r3, r3, #16
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006712:	f003 0308 	and.w	r3, r3, #8
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006720:	ea42 0103 	orr.w	r1, r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b088      	sub	sp, #32
 800674e:	af00      	add	r7, sp, #0
 8006750:	60f8      	str	r0, [r7, #12]
 8006752:	60b9      	str	r1, [r7, #8]
 8006754:	603b      	str	r3, [r7, #0]
 8006756:	4613      	mov	r3, r2
 8006758:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006764:	2b01      	cmp	r3, #1
 8006766:	d101      	bne.n	800676c <HAL_SPI_Transmit+0x22>
 8006768:	2302      	movs	r3, #2
 800676a:	e15f      	b.n	8006a2c <HAL_SPI_Transmit+0x2e2>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006774:	f7fb fefe 	bl	8002574 <HAL_GetTick>
 8006778:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800677a:	88fb      	ldrh	r3, [r7, #6]
 800677c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b01      	cmp	r3, #1
 8006788:	d002      	beq.n	8006790 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800678a:	2302      	movs	r3, #2
 800678c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800678e:	e148      	b.n	8006a22 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d002      	beq.n	800679c <HAL_SPI_Transmit+0x52>
 8006796:	88fb      	ldrh	r3, [r7, #6]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d102      	bne.n	80067a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067a0:	e13f      	b.n	8006a22 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2203      	movs	r2, #3
 80067a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	88fa      	ldrh	r2, [r7, #6]
 80067ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	88fa      	ldrh	r2, [r7, #6]
 80067c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ec:	d10f      	bne.n	800680e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800680c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006818:	2b40      	cmp	r3, #64	@ 0x40
 800681a:	d007      	beq.n	800682c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800682a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006834:	d94f      	bls.n	80068d6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <HAL_SPI_Transmit+0xfa>
 800683e:	8afb      	ldrh	r3, [r7, #22]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d142      	bne.n	80068ca <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006848:	881a      	ldrh	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006854:	1c9a      	adds	r2, r3, #2
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800685e:	b29b      	uxth	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	b29a      	uxth	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006868:	e02f      	b.n	80068ca <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b02      	cmp	r3, #2
 8006876:	d112      	bne.n	800689e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687c:	881a      	ldrh	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006888:	1c9a      	adds	r2, r3, #2
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006892:	b29b      	uxth	r3, r3
 8006894:	3b01      	subs	r3, #1
 8006896:	b29a      	uxth	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800689c:	e015      	b.n	80068ca <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800689e:	f7fb fe69 	bl	8002574 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d803      	bhi.n	80068b6 <HAL_SPI_Transmit+0x16c>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b4:	d102      	bne.n	80068bc <HAL_SPI_Transmit+0x172>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d106      	bne.n	80068ca <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80068c8:	e0ab      	b.n	8006a22 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1ca      	bne.n	800686a <HAL_SPI_Transmit+0x120>
 80068d4:	e080      	b.n	80069d8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_SPI_Transmit+0x19a>
 80068de:	8afb      	ldrh	r3, [r7, #22]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d174      	bne.n	80069ce <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d912      	bls.n	8006914 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f2:	881a      	ldrh	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fe:	1c9a      	adds	r2, r3, #2
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006908:	b29b      	uxth	r3, r3
 800690a:	3b02      	subs	r3, #2
 800690c:	b29a      	uxth	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006912:	e05c      	b.n	80069ce <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	330c      	adds	r3, #12
 800691e:	7812      	ldrb	r2, [r2, #0]
 8006920:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800693a:	e048      	b.n	80069ce <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b02      	cmp	r3, #2
 8006948:	d12b      	bne.n	80069a2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b01      	cmp	r3, #1
 8006952:	d912      	bls.n	800697a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006958:	881a      	ldrh	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006964:	1c9a      	adds	r2, r3, #2
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800696e:	b29b      	uxth	r3, r3
 8006970:	3b02      	subs	r3, #2
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006978:	e029      	b.n	80069ce <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	330c      	adds	r3, #12
 8006984:	7812      	ldrb	r2, [r2, #0]
 8006986:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006996:	b29b      	uxth	r3, r3
 8006998:	3b01      	subs	r3, #1
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069a0:	e015      	b.n	80069ce <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069a2:	f7fb fde7 	bl	8002574 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d803      	bhi.n	80069ba <HAL_SPI_Transmit+0x270>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b8:	d102      	bne.n	80069c0 <HAL_SPI_Transmit+0x276>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d106      	bne.n	80069ce <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80069cc:	e029      	b.n	8006a22 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1b1      	bne.n	800693c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 fb69 	bl	80070b4 <SPI_EndRxTxTransaction>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2220      	movs	r2, #32
 80069ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069f6:	2300      	movs	r3, #0
 80069f8:	613b      	str	r3, [r7, #16]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	613b      	str	r3, [r7, #16]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	613b      	str	r3, [r7, #16]
 8006a0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	77fb      	strb	r3, [r7, #31]
 8006a18:	e003      	b.n	8006a22 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006a2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3720      	adds	r7, #32
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08a      	sub	sp, #40	@ 0x28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a42:	2301      	movs	r3, #1
 8006a44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d101      	bne.n	8006a5a <HAL_SPI_TransmitReceive+0x26>
 8006a56:	2302      	movs	r3, #2
 8006a58:	e20a      	b.n	8006e70 <HAL_SPI_TransmitReceive+0x43c>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a62:	f7fb fd87 	bl	8002574 <HAL_GetTick>
 8006a66:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006a6e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006a76:	887b      	ldrh	r3, [r7, #2]
 8006a78:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006a7a:	887b      	ldrh	r3, [r7, #2]
 8006a7c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a7e:	7efb      	ldrb	r3, [r7, #27]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d00e      	beq.n	8006aa2 <HAL_SPI_TransmitReceive+0x6e>
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a8a:	d106      	bne.n	8006a9a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d102      	bne.n	8006a9a <HAL_SPI_TransmitReceive+0x66>
 8006a94:	7efb      	ldrb	r3, [r7, #27]
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	d003      	beq.n	8006aa2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006aa0:	e1e0      	b.n	8006e64 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d005      	beq.n	8006ab4 <HAL_SPI_TransmitReceive+0x80>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_SPI_TransmitReceive+0x80>
 8006aae:	887b      	ldrh	r3, [r7, #2]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d103      	bne.n	8006abc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006aba:	e1d3      	b.n	8006e64 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	d003      	beq.n	8006ad0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2205      	movs	r2, #5
 8006acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	887a      	ldrh	r2, [r7, #2]
 8006ae0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	887a      	ldrh	r2, [r7, #2]
 8006ae8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	887a      	ldrh	r2, [r7, #2]
 8006af6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	887a      	ldrh	r2, [r7, #2]
 8006afc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b12:	d802      	bhi.n	8006b1a <HAL_SPI_TransmitReceive+0xe6>
 8006b14:	8a3b      	ldrh	r3, [r7, #16]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d908      	bls.n	8006b2c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b28:	605a      	str	r2, [r3, #4]
 8006b2a:	e007      	b.n	8006b3c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b3a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b46:	2b40      	cmp	r3, #64	@ 0x40
 8006b48:	d007      	beq.n	8006b5a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b62:	f240 8081 	bls.w	8006c68 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <HAL_SPI_TransmitReceive+0x140>
 8006b6e:	8a7b      	ldrh	r3, [r7, #18]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d16d      	bne.n	8006c50 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b78:	881a      	ldrh	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b84:	1c9a      	adds	r2, r3, #2
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b98:	e05a      	b.n	8006c50 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d11b      	bne.n	8006be0 <HAL_SPI_TransmitReceive+0x1ac>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d016      	beq.n	8006be0 <HAL_SPI_TransmitReceive+0x1ac>
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d113      	bne.n	8006be0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbc:	881a      	ldrh	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc8:	1c9a      	adds	r2, r3, #2
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d11c      	bne.n	8006c28 <HAL_SPI_TransmitReceive+0x1f4>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d016      	beq.n	8006c28 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68da      	ldr	r2, [r3, #12]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c04:	b292      	uxth	r2, r2
 8006c06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c0c:	1c9a      	adds	r2, r3, #2
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c24:	2301      	movs	r3, #1
 8006c26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c28:	f7fb fca4 	bl	8002574 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d80b      	bhi.n	8006c50 <HAL_SPI_TransmitReceive+0x21c>
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3e:	d007      	beq.n	8006c50 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006c4e:	e109      	b.n	8006e64 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d19f      	bne.n	8006b9a <HAL_SPI_TransmitReceive+0x166>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d199      	bne.n	8006b9a <HAL_SPI_TransmitReceive+0x166>
 8006c66:	e0e3      	b.n	8006e30 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <HAL_SPI_TransmitReceive+0x244>
 8006c70:	8a7b      	ldrh	r3, [r7, #18]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	f040 80cf 	bne.w	8006e16 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d912      	bls.n	8006ca8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c86:	881a      	ldrh	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c92:	1c9a      	adds	r2, r3, #2
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	3b02      	subs	r3, #2
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ca6:	e0b6      	b.n	8006e16 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	330c      	adds	r3, #12
 8006cb2:	7812      	ldrb	r2, [r2, #0]
 8006cb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cce:	e0a2      	b.n	8006e16 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d134      	bne.n	8006d48 <HAL_SPI_TransmitReceive+0x314>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d02f      	beq.n	8006d48 <HAL_SPI_TransmitReceive+0x314>
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d12c      	bne.n	8006d48 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d912      	bls.n	8006d1e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfc:	881a      	ldrh	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d08:	1c9a      	adds	r2, r3, #2
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	3b02      	subs	r3, #2
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d1c:	e012      	b.n	8006d44 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	330c      	adds	r3, #12
 8006d28:	7812      	ldrb	r2, [r2, #0]
 8006d2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d148      	bne.n	8006de8 <HAL_SPI_TransmitReceive+0x3b4>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d042      	beq.n	8006de8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d923      	bls.n	8006db6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d78:	b292      	uxth	r2, r2
 8006d7a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d80:	1c9a      	adds	r2, r3, #2
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	3b02      	subs	r3, #2
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d81f      	bhi.n	8006de4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006db2:	605a      	str	r2, [r3, #4]
 8006db4:	e016      	b.n	8006de4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f103 020c 	add.w	r2, r3, #12
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc2:	7812      	ldrb	r2, [r2, #0]
 8006dc4:	b2d2      	uxtb	r2, r2
 8006dc6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006de4:	2301      	movs	r3, #1
 8006de6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006de8:	f7fb fbc4 	bl	8002574 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d803      	bhi.n	8006e00 <HAL_SPI_TransmitReceive+0x3cc>
 8006df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfe:	d102      	bne.n	8006e06 <HAL_SPI_TransmitReceive+0x3d2>
 8006e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d107      	bne.n	8006e16 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006e14:	e026      	b.n	8006e64 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f47f af57 	bne.w	8006cd0 <HAL_SPI_TransmitReceive+0x29c>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f47f af50 	bne.w	8006cd0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 f93d 	bl	80070b4 <SPI_EndRxTxTransaction>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d005      	beq.n	8006e4c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e5a:	e003      	b.n	8006e64 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3728      	adds	r7, #40	@ 0x28
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	4613      	mov	r3, r2
 8006e86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e88:	f7fb fb74 	bl	8002574 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e90:	1a9b      	subs	r3, r3, r2
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	4413      	add	r3, r2
 8006e96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e98:	f7fb fb6c 	bl	8002574 <HAL_GetTick>
 8006e9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e9e:	4b39      	ldr	r3, [pc, #228]	@ (8006f84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	015b      	lsls	r3, r3, #5
 8006ea4:	0d1b      	lsrs	r3, r3, #20
 8006ea6:	69fa      	ldr	r2, [r7, #28]
 8006ea8:	fb02 f303 	mul.w	r3, r2, r3
 8006eac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eae:	e054      	b.n	8006f5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb6:	d050      	beq.n	8006f5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eb8:	f7fb fb5c 	bl	8002574 <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d902      	bls.n	8006ece <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d13d      	bne.n	8006f4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006edc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ee6:	d111      	bne.n	8006f0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ef0:	d004      	beq.n	8006efc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006efa:	d107      	bne.n	8006f0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f14:	d10f      	bne.n	8006f36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e017      	b.n	8006f7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	4013      	ands	r3, r2
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	bf0c      	ite	eq
 8006f6a:	2301      	moveq	r3, #1
 8006f6c:	2300      	movne	r3, #0
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d19b      	bne.n	8006eb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3720      	adds	r7, #32
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20000000 	.word	0x20000000

08006f88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08a      	sub	sp, #40	@ 0x28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f9a:	f7fb faeb 	bl	8002574 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa2:	1a9b      	subs	r3, r3, r2
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006faa:	f7fb fae3 	bl	8002574 <HAL_GetTick>
 8006fae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80070b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	00da      	lsls	r2, r3, #3
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	0d1b      	lsrs	r3, r3, #20
 8006fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fca:	fb02 f303 	mul.w	r3, r2, r3
 8006fce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006fd0:	e060      	b.n	8007094 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006fd8:	d107      	bne.n	8006fea <SPI_WaitFifoStateUntilTimeout+0x62>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d104      	bne.n	8006fea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff0:	d050      	beq.n	8007094 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ff2:	f7fb fabf 	bl	8002574 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d902      	bls.n	8007008 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	d13d      	bne.n	8007084 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007016:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007020:	d111      	bne.n	8007046 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800702a:	d004      	beq.n	8007036 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007034:	d107      	bne.n	8007046 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007044:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800704a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800704e:	d10f      	bne.n	8007070 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800706e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e010      	b.n	80070a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	3b01      	subs	r3, #1
 8007092:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689a      	ldr	r2, [r3, #8]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	4013      	ands	r3, r2
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d196      	bne.n	8006fd2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3728      	adds	r7, #40	@ 0x28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	20000000 	.word	0x20000000

080070b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af02      	add	r7, sp, #8
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7ff ff5b 	bl	8006f88 <SPI_WaitFifoStateUntilTimeout>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d007      	beq.n	80070e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070dc:	f043 0220 	orr.w	r2, r3, #32
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e027      	b.n	8007138 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2200      	movs	r2, #0
 80070f0:	2180      	movs	r1, #128	@ 0x80
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f7ff fec0 	bl	8006e78 <SPI_WaitFlagStateUntilTimeout>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d007      	beq.n	800710e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007102:	f043 0220 	orr.w	r2, r3, #32
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e014      	b.n	8007138 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2200      	movs	r2, #0
 8007116:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f7ff ff34 	bl	8006f88 <SPI_WaitFifoStateUntilTimeout>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d007      	beq.n	8007136 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800712a:	f043 0220 	orr.w	r2, r3, #32
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e000      	b.n	8007138 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e049      	b.n	80071e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fa ffee 	bl	8002148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3304      	adds	r3, #4
 800717c:	4619      	mov	r1, r3
 800717e:	4610      	mov	r0, r2
 8007180:	f001 fa34 	bl	80085ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
	...

080071f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b01      	cmp	r3, #1
 8007202:	d001      	beq.n	8007208 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e047      	b.n	8007298 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a23      	ldr	r2, [pc, #140]	@ (80072a4 <HAL_TIM_Base_Start+0xb4>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d01d      	beq.n	8007256 <HAL_TIM_Base_Start+0x66>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007222:	d018      	beq.n	8007256 <HAL_TIM_Base_Start+0x66>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a1f      	ldr	r2, [pc, #124]	@ (80072a8 <HAL_TIM_Base_Start+0xb8>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d013      	beq.n	8007256 <HAL_TIM_Base_Start+0x66>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a1e      	ldr	r2, [pc, #120]	@ (80072ac <HAL_TIM_Base_Start+0xbc>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d00e      	beq.n	8007256 <HAL_TIM_Base_Start+0x66>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a1c      	ldr	r2, [pc, #112]	@ (80072b0 <HAL_TIM_Base_Start+0xc0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d009      	beq.n	8007256 <HAL_TIM_Base_Start+0x66>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a1b      	ldr	r2, [pc, #108]	@ (80072b4 <HAL_TIM_Base_Start+0xc4>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d004      	beq.n	8007256 <HAL_TIM_Base_Start+0x66>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a19      	ldr	r2, [pc, #100]	@ (80072b8 <HAL_TIM_Base_Start+0xc8>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d115      	bne.n	8007282 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	4b17      	ldr	r3, [pc, #92]	@ (80072bc <HAL_TIM_Base_Start+0xcc>)
 800725e:	4013      	ands	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b06      	cmp	r3, #6
 8007266:	d015      	beq.n	8007294 <HAL_TIM_Base_Start+0xa4>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800726e:	d011      	beq.n	8007294 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 0201 	orr.w	r2, r2, #1
 800727e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007280:	e008      	b.n	8007294 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0201 	orr.w	r2, r2, #1
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	e000      	b.n	8007296 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007294:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	40012c00 	.word	0x40012c00
 80072a8:	40000400 	.word	0x40000400
 80072ac:	40000800 	.word	0x40000800
 80072b0:	40000c00 	.word	0x40000c00
 80072b4:	40013400 	.word	0x40013400
 80072b8:	40014000 	.word	0x40014000
 80072bc:	00010007 	.word	0x00010007

080072c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d001      	beq.n	80072d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e04f      	b.n	8007378 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f042 0201 	orr.w	r2, r2, #1
 80072ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a23      	ldr	r2, [pc, #140]	@ (8007384 <HAL_TIM_Base_Start_IT+0xc4>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d01d      	beq.n	8007336 <HAL_TIM_Base_Start_IT+0x76>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007302:	d018      	beq.n	8007336 <HAL_TIM_Base_Start_IT+0x76>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a1f      	ldr	r2, [pc, #124]	@ (8007388 <HAL_TIM_Base_Start_IT+0xc8>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d013      	beq.n	8007336 <HAL_TIM_Base_Start_IT+0x76>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a1e      	ldr	r2, [pc, #120]	@ (800738c <HAL_TIM_Base_Start_IT+0xcc>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d00e      	beq.n	8007336 <HAL_TIM_Base_Start_IT+0x76>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a1c      	ldr	r2, [pc, #112]	@ (8007390 <HAL_TIM_Base_Start_IT+0xd0>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d009      	beq.n	8007336 <HAL_TIM_Base_Start_IT+0x76>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a1b      	ldr	r2, [pc, #108]	@ (8007394 <HAL_TIM_Base_Start_IT+0xd4>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d004      	beq.n	8007336 <HAL_TIM_Base_Start_IT+0x76>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a19      	ldr	r2, [pc, #100]	@ (8007398 <HAL_TIM_Base_Start_IT+0xd8>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d115      	bne.n	8007362 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	4b17      	ldr	r3, [pc, #92]	@ (800739c <HAL_TIM_Base_Start_IT+0xdc>)
 800733e:	4013      	ands	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b06      	cmp	r3, #6
 8007346:	d015      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0xb4>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800734e:	d011      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f042 0201 	orr.w	r2, r2, #1
 800735e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007360:	e008      	b.n	8007374 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f042 0201 	orr.w	r2, r2, #1
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	e000      	b.n	8007376 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007374:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	40012c00 	.word	0x40012c00
 8007388:	40000400 	.word	0x40000400
 800738c:	40000800 	.word	0x40000800
 8007390:	40000c00 	.word	0x40000c00
 8007394:	40013400 	.word	0x40013400
 8007398:	40014000 	.word	0x40014000
 800739c:	00010007 	.word	0x00010007

080073a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68da      	ldr	r2, [r3, #12]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f022 0201 	bic.w	r2, r2, #1
 80073b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6a1a      	ldr	r2, [r3, #32]
 80073be:	f241 1311 	movw	r3, #4369	@ 0x1111
 80073c2:	4013      	ands	r3, r2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10f      	bne.n	80073e8 <HAL_TIM_Base_Stop_IT+0x48>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6a1a      	ldr	r2, [r3, #32]
 80073ce:	f240 4344 	movw	r3, #1092	@ 0x444
 80073d2:	4013      	ands	r3, r2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d107      	bne.n	80073e8 <HAL_TIM_Base_Stop_IT+0x48>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0201 	bic.w	r2, r2, #1
 80073e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e049      	b.n	80074a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	d106      	bne.n	800742a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f841 	bl	80074ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2202      	movs	r2, #2
 800742e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	3304      	adds	r3, #4
 800743a:	4619      	mov	r1, r3
 800743c:	4610      	mov	r0, r2
 800743e:	f001 f8d5 	bl	80085ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d109      	bne.n	80074e4 <HAL_TIM_PWM_Start+0x24>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b01      	cmp	r3, #1
 80074da:	bf14      	ite	ne
 80074dc:	2301      	movne	r3, #1
 80074de:	2300      	moveq	r3, #0
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	e03c      	b.n	800755e <HAL_TIM_PWM_Start+0x9e>
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d109      	bne.n	80074fe <HAL_TIM_PWM_Start+0x3e>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	bf14      	ite	ne
 80074f6:	2301      	movne	r3, #1
 80074f8:	2300      	moveq	r3, #0
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	e02f      	b.n	800755e <HAL_TIM_PWM_Start+0x9e>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b08      	cmp	r3, #8
 8007502:	d109      	bne.n	8007518 <HAL_TIM_PWM_Start+0x58>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b01      	cmp	r3, #1
 800750e:	bf14      	ite	ne
 8007510:	2301      	movne	r3, #1
 8007512:	2300      	moveq	r3, #0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	e022      	b.n	800755e <HAL_TIM_PWM_Start+0x9e>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2b0c      	cmp	r3, #12
 800751c:	d109      	bne.n	8007532 <HAL_TIM_PWM_Start+0x72>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b01      	cmp	r3, #1
 8007528:	bf14      	ite	ne
 800752a:	2301      	movne	r3, #1
 800752c:	2300      	moveq	r3, #0
 800752e:	b2db      	uxtb	r3, r3
 8007530:	e015      	b.n	800755e <HAL_TIM_PWM_Start+0x9e>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b10      	cmp	r3, #16
 8007536:	d109      	bne.n	800754c <HAL_TIM_PWM_Start+0x8c>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b01      	cmp	r3, #1
 8007542:	bf14      	ite	ne
 8007544:	2301      	movne	r3, #1
 8007546:	2300      	moveq	r3, #0
 8007548:	b2db      	uxtb	r3, r3
 800754a:	e008      	b.n	800755e <HAL_TIM_PWM_Start+0x9e>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b01      	cmp	r3, #1
 8007556:	bf14      	ite	ne
 8007558:	2301      	movne	r3, #1
 800755a:	2300      	moveq	r3, #0
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d001      	beq.n	8007566 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e09c      	b.n	80076a0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d104      	bne.n	8007576 <HAL_TIM_PWM_Start+0xb6>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007574:	e023      	b.n	80075be <HAL_TIM_PWM_Start+0xfe>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b04      	cmp	r3, #4
 800757a:	d104      	bne.n	8007586 <HAL_TIM_PWM_Start+0xc6>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007584:	e01b      	b.n	80075be <HAL_TIM_PWM_Start+0xfe>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b08      	cmp	r3, #8
 800758a:	d104      	bne.n	8007596 <HAL_TIM_PWM_Start+0xd6>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007594:	e013      	b.n	80075be <HAL_TIM_PWM_Start+0xfe>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b0c      	cmp	r3, #12
 800759a:	d104      	bne.n	80075a6 <HAL_TIM_PWM_Start+0xe6>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075a4:	e00b      	b.n	80075be <HAL_TIM_PWM_Start+0xfe>
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b10      	cmp	r3, #16
 80075aa:	d104      	bne.n	80075b6 <HAL_TIM_PWM_Start+0xf6>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075b4:	e003      	b.n	80075be <HAL_TIM_PWM_Start+0xfe>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2202      	movs	r2, #2
 80075ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2201      	movs	r2, #1
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f001 fc1a 	bl	8008e00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a35      	ldr	r2, [pc, #212]	@ (80076a8 <HAL_TIM_PWM_Start+0x1e8>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d013      	beq.n	80075fe <HAL_TIM_PWM_Start+0x13e>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a34      	ldr	r2, [pc, #208]	@ (80076ac <HAL_TIM_PWM_Start+0x1ec>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d00e      	beq.n	80075fe <HAL_TIM_PWM_Start+0x13e>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a32      	ldr	r2, [pc, #200]	@ (80076b0 <HAL_TIM_PWM_Start+0x1f0>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d009      	beq.n	80075fe <HAL_TIM_PWM_Start+0x13e>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a31      	ldr	r2, [pc, #196]	@ (80076b4 <HAL_TIM_PWM_Start+0x1f4>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d004      	beq.n	80075fe <HAL_TIM_PWM_Start+0x13e>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a2f      	ldr	r2, [pc, #188]	@ (80076b8 <HAL_TIM_PWM_Start+0x1f8>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d101      	bne.n	8007602 <HAL_TIM_PWM_Start+0x142>
 80075fe:	2301      	movs	r3, #1
 8007600:	e000      	b.n	8007604 <HAL_TIM_PWM_Start+0x144>
 8007602:	2300      	movs	r3, #0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d007      	beq.n	8007618 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007616:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a22      	ldr	r2, [pc, #136]	@ (80076a8 <HAL_TIM_PWM_Start+0x1e8>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d01d      	beq.n	800765e <HAL_TIM_PWM_Start+0x19e>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800762a:	d018      	beq.n	800765e <HAL_TIM_PWM_Start+0x19e>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a22      	ldr	r2, [pc, #136]	@ (80076bc <HAL_TIM_PWM_Start+0x1fc>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d013      	beq.n	800765e <HAL_TIM_PWM_Start+0x19e>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a21      	ldr	r2, [pc, #132]	@ (80076c0 <HAL_TIM_PWM_Start+0x200>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00e      	beq.n	800765e <HAL_TIM_PWM_Start+0x19e>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a1f      	ldr	r2, [pc, #124]	@ (80076c4 <HAL_TIM_PWM_Start+0x204>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d009      	beq.n	800765e <HAL_TIM_PWM_Start+0x19e>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a17      	ldr	r2, [pc, #92]	@ (80076ac <HAL_TIM_PWM_Start+0x1ec>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d004      	beq.n	800765e <HAL_TIM_PWM_Start+0x19e>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a15      	ldr	r2, [pc, #84]	@ (80076b0 <HAL_TIM_PWM_Start+0x1f0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d115      	bne.n	800768a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689a      	ldr	r2, [r3, #8]
 8007664:	4b18      	ldr	r3, [pc, #96]	@ (80076c8 <HAL_TIM_PWM_Start+0x208>)
 8007666:	4013      	ands	r3, r2
 8007668:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b06      	cmp	r3, #6
 800766e:	d015      	beq.n	800769c <HAL_TIM_PWM_Start+0x1dc>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007676:	d011      	beq.n	800769c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0201 	orr.w	r2, r2, #1
 8007686:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007688:	e008      	b.n	800769c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f042 0201 	orr.w	r2, r2, #1
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	e000      	b.n	800769e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800769c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	40012c00 	.word	0x40012c00
 80076ac:	40013400 	.word	0x40013400
 80076b0:	40014000 	.word	0x40014000
 80076b4:	40014400 	.word	0x40014400
 80076b8:	40014800 	.word	0x40014800
 80076bc:	40000400 	.word	0x40000400
 80076c0:	40000800 	.word	0x40000800
 80076c4:	40000c00 	.word	0x40000c00
 80076c8:	00010007 	.word	0x00010007

080076cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2200      	movs	r2, #0
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	4618      	mov	r0, r3
 80076e0:	f001 fb8e 	bl	8008e00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a3e      	ldr	r2, [pc, #248]	@ (80077e4 <HAL_TIM_PWM_Stop+0x118>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d013      	beq.n	8007716 <HAL_TIM_PWM_Stop+0x4a>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a3d      	ldr	r2, [pc, #244]	@ (80077e8 <HAL_TIM_PWM_Stop+0x11c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00e      	beq.n	8007716 <HAL_TIM_PWM_Stop+0x4a>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a3b      	ldr	r2, [pc, #236]	@ (80077ec <HAL_TIM_PWM_Stop+0x120>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d009      	beq.n	8007716 <HAL_TIM_PWM_Stop+0x4a>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a3a      	ldr	r2, [pc, #232]	@ (80077f0 <HAL_TIM_PWM_Stop+0x124>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d004      	beq.n	8007716 <HAL_TIM_PWM_Stop+0x4a>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a38      	ldr	r2, [pc, #224]	@ (80077f4 <HAL_TIM_PWM_Stop+0x128>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d101      	bne.n	800771a <HAL_TIM_PWM_Stop+0x4e>
 8007716:	2301      	movs	r3, #1
 8007718:	e000      	b.n	800771c <HAL_TIM_PWM_Stop+0x50>
 800771a:	2300      	movs	r3, #0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d017      	beq.n	8007750 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6a1a      	ldr	r2, [r3, #32]
 8007726:	f241 1311 	movw	r3, #4369	@ 0x1111
 800772a:	4013      	ands	r3, r2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10f      	bne.n	8007750 <HAL_TIM_PWM_Stop+0x84>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6a1a      	ldr	r2, [r3, #32]
 8007736:	f240 4344 	movw	r3, #1092	@ 0x444
 800773a:	4013      	ands	r3, r2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d107      	bne.n	8007750 <HAL_TIM_PWM_Stop+0x84>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800774e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6a1a      	ldr	r2, [r3, #32]
 8007756:	f241 1311 	movw	r3, #4369	@ 0x1111
 800775a:	4013      	ands	r3, r2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10f      	bne.n	8007780 <HAL_TIM_PWM_Stop+0xb4>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6a1a      	ldr	r2, [r3, #32]
 8007766:	f240 4344 	movw	r3, #1092	@ 0x444
 800776a:	4013      	ands	r3, r2
 800776c:	2b00      	cmp	r3, #0
 800776e:	d107      	bne.n	8007780 <HAL_TIM_PWM_Stop+0xb4>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0201 	bic.w	r2, r2, #1
 800777e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d104      	bne.n	8007790 <HAL_TIM_PWM_Stop+0xc4>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800778e:	e023      	b.n	80077d8 <HAL_TIM_PWM_Stop+0x10c>
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b04      	cmp	r3, #4
 8007794:	d104      	bne.n	80077a0 <HAL_TIM_PWM_Stop+0xd4>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800779e:	e01b      	b.n	80077d8 <HAL_TIM_PWM_Stop+0x10c>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2b08      	cmp	r3, #8
 80077a4:	d104      	bne.n	80077b0 <HAL_TIM_PWM_Stop+0xe4>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077ae:	e013      	b.n	80077d8 <HAL_TIM_PWM_Stop+0x10c>
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2b0c      	cmp	r3, #12
 80077b4:	d104      	bne.n	80077c0 <HAL_TIM_PWM_Stop+0xf4>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077be:	e00b      	b.n	80077d8 <HAL_TIM_PWM_Stop+0x10c>
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2b10      	cmp	r3, #16
 80077c4:	d104      	bne.n	80077d0 <HAL_TIM_PWM_Stop+0x104>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077ce:	e003      	b.n	80077d8 <HAL_TIM_PWM_Stop+0x10c>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	40012c00 	.word	0x40012c00
 80077e8:	40013400 	.word	0x40013400
 80077ec:	40014000 	.word	0x40014000
 80077f0:	40014400 	.word	0x40014400
 80077f4:	40014800 	.word	0x40014800

080077f8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
 8007804:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d109      	bne.n	8007824 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b02      	cmp	r3, #2
 800781a:	bf0c      	ite	eq
 800781c:	2301      	moveq	r3, #1
 800781e:	2300      	movne	r3, #0
 8007820:	b2db      	uxtb	r3, r3
 8007822:	e03c      	b.n	800789e <HAL_TIM_PWM_Start_DMA+0xa6>
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2b04      	cmp	r3, #4
 8007828:	d109      	bne.n	800783e <HAL_TIM_PWM_Start_DMA+0x46>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	bf0c      	ite	eq
 8007836:	2301      	moveq	r3, #1
 8007838:	2300      	movne	r3, #0
 800783a:	b2db      	uxtb	r3, r3
 800783c:	e02f      	b.n	800789e <HAL_TIM_PWM_Start_DMA+0xa6>
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2b08      	cmp	r3, #8
 8007842:	d109      	bne.n	8007858 <HAL_TIM_PWM_Start_DMA+0x60>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	bf0c      	ite	eq
 8007850:	2301      	moveq	r3, #1
 8007852:	2300      	movne	r3, #0
 8007854:	b2db      	uxtb	r3, r3
 8007856:	e022      	b.n	800789e <HAL_TIM_PWM_Start_DMA+0xa6>
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b0c      	cmp	r3, #12
 800785c:	d109      	bne.n	8007872 <HAL_TIM_PWM_Start_DMA+0x7a>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b02      	cmp	r3, #2
 8007868:	bf0c      	ite	eq
 800786a:	2301      	moveq	r3, #1
 800786c:	2300      	movne	r3, #0
 800786e:	b2db      	uxtb	r3, r3
 8007870:	e015      	b.n	800789e <HAL_TIM_PWM_Start_DMA+0xa6>
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b10      	cmp	r3, #16
 8007876:	d109      	bne.n	800788c <HAL_TIM_PWM_Start_DMA+0x94>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b02      	cmp	r3, #2
 8007882:	bf0c      	ite	eq
 8007884:	2301      	moveq	r3, #1
 8007886:	2300      	movne	r3, #0
 8007888:	b2db      	uxtb	r3, r3
 800788a:	e008      	b.n	800789e <HAL_TIM_PWM_Start_DMA+0xa6>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b02      	cmp	r3, #2
 8007896:	bf0c      	ite	eq
 8007898:	2301      	moveq	r3, #1
 800789a:	2300      	movne	r3, #0
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80078a2:	2302      	movs	r3, #2
 80078a4:	e1ab      	b.n	8007bfe <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d109      	bne.n	80078c0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	bf0c      	ite	eq
 80078b8:	2301      	moveq	r3, #1
 80078ba:	2300      	movne	r3, #0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	e03c      	b.n	800793a <HAL_TIM_PWM_Start_DMA+0x142>
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b04      	cmp	r3, #4
 80078c4:	d109      	bne.n	80078da <HAL_TIM_PWM_Start_DMA+0xe2>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	bf0c      	ite	eq
 80078d2:	2301      	moveq	r3, #1
 80078d4:	2300      	movne	r3, #0
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	e02f      	b.n	800793a <HAL_TIM_PWM_Start_DMA+0x142>
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2b08      	cmp	r3, #8
 80078de:	d109      	bne.n	80078f4 <HAL_TIM_PWM_Start_DMA+0xfc>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	bf0c      	ite	eq
 80078ec:	2301      	moveq	r3, #1
 80078ee:	2300      	movne	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	e022      	b.n	800793a <HAL_TIM_PWM_Start_DMA+0x142>
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b0c      	cmp	r3, #12
 80078f8:	d109      	bne.n	800790e <HAL_TIM_PWM_Start_DMA+0x116>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b01      	cmp	r3, #1
 8007904:	bf0c      	ite	eq
 8007906:	2301      	moveq	r3, #1
 8007908:	2300      	movne	r3, #0
 800790a:	b2db      	uxtb	r3, r3
 800790c:	e015      	b.n	800793a <HAL_TIM_PWM_Start_DMA+0x142>
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	2b10      	cmp	r3, #16
 8007912:	d109      	bne.n	8007928 <HAL_TIM_PWM_Start_DMA+0x130>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b01      	cmp	r3, #1
 800791e:	bf0c      	ite	eq
 8007920:	2301      	moveq	r3, #1
 8007922:	2300      	movne	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	e008      	b.n	800793a <HAL_TIM_PWM_Start_DMA+0x142>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b01      	cmp	r3, #1
 8007932:	bf0c      	ite	eq
 8007934:	2301      	moveq	r3, #1
 8007936:	2300      	movne	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d034      	beq.n	80079a8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <HAL_TIM_PWM_Start_DMA+0x152>
 8007944:	887b      	ldrh	r3, [r7, #2]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e157      	b.n	8007bfe <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d104      	bne.n	800795e <HAL_TIM_PWM_Start_DMA+0x166>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2202      	movs	r2, #2
 8007958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800795c:	e026      	b.n	80079ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2b04      	cmp	r3, #4
 8007962:	d104      	bne.n	800796e <HAL_TIM_PWM_Start_DMA+0x176>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2202      	movs	r2, #2
 8007968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800796c:	e01e      	b.n	80079ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2b08      	cmp	r3, #8
 8007972:	d104      	bne.n	800797e <HAL_TIM_PWM_Start_DMA+0x186>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800797c:	e016      	b.n	80079ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2b0c      	cmp	r3, #12
 8007982:	d104      	bne.n	800798e <HAL_TIM_PWM_Start_DMA+0x196>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2202      	movs	r2, #2
 8007988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800798c:	e00e      	b.n	80079ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2b10      	cmp	r3, #16
 8007992:	d104      	bne.n	800799e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800799c:	e006      	b.n	80079ac <HAL_TIM_PWM_Start_DMA+0x1b4>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2202      	movs	r2, #2
 80079a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079a6:	e001      	b.n	80079ac <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e128      	b.n	8007bfe <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b0c      	cmp	r3, #12
 80079b0:	f200 80ae 	bhi.w	8007b10 <HAL_TIM_PWM_Start_DMA+0x318>
 80079b4:	a201      	add	r2, pc, #4	@ (adr r2, 80079bc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80079b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ba:	bf00      	nop
 80079bc:	080079f1 	.word	0x080079f1
 80079c0:	08007b11 	.word	0x08007b11
 80079c4:	08007b11 	.word	0x08007b11
 80079c8:	08007b11 	.word	0x08007b11
 80079cc:	08007a39 	.word	0x08007a39
 80079d0:	08007b11 	.word	0x08007b11
 80079d4:	08007b11 	.word	0x08007b11
 80079d8:	08007b11 	.word	0x08007b11
 80079dc:	08007a81 	.word	0x08007a81
 80079e0:	08007b11 	.word	0x08007b11
 80079e4:	08007b11 	.word	0x08007b11
 80079e8:	08007b11 	.word	0x08007b11
 80079ec:	08007ac9 	.word	0x08007ac9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f4:	4a84      	ldr	r2, [pc, #528]	@ (8007c08 <HAL_TIM_PWM_Start_DMA+0x410>)
 80079f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079fc:	4a83      	ldr	r2, [pc, #524]	@ (8007c0c <HAL_TIM_PWM_Start_DMA+0x414>)
 80079fe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a04:	4a82      	ldr	r2, [pc, #520]	@ (8007c10 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007a06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3334      	adds	r3, #52	@ 0x34
 8007a14:	461a      	mov	r2, r3
 8007a16:	887b      	ldrh	r3, [r7, #2]
 8007a18:	f7fc f94e 	bl	8003cb8 <HAL_DMA_Start_IT>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e0eb      	b.n	8007bfe <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a34:	60da      	str	r2, [r3, #12]
      break;
 8007a36:	e06e      	b.n	8007b16 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3c:	4a72      	ldr	r2, [pc, #456]	@ (8007c08 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a44:	4a71      	ldr	r2, [pc, #452]	@ (8007c0c <HAL_TIM_PWM_Start_DMA+0x414>)
 8007a46:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4c:	4a70      	ldr	r2, [pc, #448]	@ (8007c10 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007a4e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007a54:	6879      	ldr	r1, [r7, #4]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	3338      	adds	r3, #56	@ 0x38
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	887b      	ldrh	r3, [r7, #2]
 8007a60:	f7fc f92a 	bl	8003cb8 <HAL_DMA_Start_IT>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e0c7      	b.n	8007bfe <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68da      	ldr	r2, [r3, #12]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007a7c:	60da      	str	r2, [r3, #12]
      break;
 8007a7e:	e04a      	b.n	8007b16 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a84:	4a60      	ldr	r2, [pc, #384]	@ (8007c08 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007a86:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8c:	4a5f      	ldr	r2, [pc, #380]	@ (8007c0c <HAL_TIM_PWM_Start_DMA+0x414>)
 8007a8e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a94:	4a5e      	ldr	r2, [pc, #376]	@ (8007c10 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007a96:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007a9c:	6879      	ldr	r1, [r7, #4]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	333c      	adds	r3, #60	@ 0x3c
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	887b      	ldrh	r3, [r7, #2]
 8007aa8:	f7fc f906 	bl	8003cb8 <HAL_DMA_Start_IT>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e0a3      	b.n	8007bfe <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ac4:	60da      	str	r2, [r3, #12]
      break;
 8007ac6:	e026      	b.n	8007b16 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007acc:	4a4e      	ldr	r2, [pc, #312]	@ (8007c08 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007ace:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad4:	4a4d      	ldr	r2, [pc, #308]	@ (8007c0c <HAL_TIM_PWM_Start_DMA+0x414>)
 8007ad6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007adc:	4a4c      	ldr	r2, [pc, #304]	@ (8007c10 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007ade:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3340      	adds	r3, #64	@ 0x40
 8007aec:	461a      	mov	r2, r3
 8007aee:	887b      	ldrh	r3, [r7, #2]
 8007af0:	f7fc f8e2 	bl	8003cb8 <HAL_DMA_Start_IT>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e07f      	b.n	8007bfe <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68da      	ldr	r2, [r3, #12]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b0c:	60da      	str	r2, [r3, #12]
      break;
 8007b0e:	e002      	b.n	8007b16 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	75fb      	strb	r3, [r7, #23]
      break;
 8007b14:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d16f      	bne.n	8007bfc <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2201      	movs	r2, #1
 8007b22:	68b9      	ldr	r1, [r7, #8]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f001 f96b 	bl	8008e00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a39      	ldr	r2, [pc, #228]	@ (8007c14 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d013      	beq.n	8007b5c <HAL_TIM_PWM_Start_DMA+0x364>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a37      	ldr	r2, [pc, #220]	@ (8007c18 <HAL_TIM_PWM_Start_DMA+0x420>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d00e      	beq.n	8007b5c <HAL_TIM_PWM_Start_DMA+0x364>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a36      	ldr	r2, [pc, #216]	@ (8007c1c <HAL_TIM_PWM_Start_DMA+0x424>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d009      	beq.n	8007b5c <HAL_TIM_PWM_Start_DMA+0x364>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a34      	ldr	r2, [pc, #208]	@ (8007c20 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d004      	beq.n	8007b5c <HAL_TIM_PWM_Start_DMA+0x364>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a33      	ldr	r2, [pc, #204]	@ (8007c24 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d101      	bne.n	8007b60 <HAL_TIM_PWM_Start_DMA+0x368>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e000      	b.n	8007b62 <HAL_TIM_PWM_Start_DMA+0x36a>
 8007b60:	2300      	movs	r3, #0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d007      	beq.n	8007b76 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a26      	ldr	r2, [pc, #152]	@ (8007c14 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d01d      	beq.n	8007bbc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b88:	d018      	beq.n	8007bbc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a26      	ldr	r2, [pc, #152]	@ (8007c28 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d013      	beq.n	8007bbc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a24      	ldr	r2, [pc, #144]	@ (8007c2c <HAL_TIM_PWM_Start_DMA+0x434>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d00e      	beq.n	8007bbc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a23      	ldr	r2, [pc, #140]	@ (8007c30 <HAL_TIM_PWM_Start_DMA+0x438>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d009      	beq.n	8007bbc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a1a      	ldr	r2, [pc, #104]	@ (8007c18 <HAL_TIM_PWM_Start_DMA+0x420>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d004      	beq.n	8007bbc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a19      	ldr	r2, [pc, #100]	@ (8007c1c <HAL_TIM_PWM_Start_DMA+0x424>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d115      	bne.n	8007be8 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689a      	ldr	r2, [r3, #8]
 8007bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8007c34 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	2b06      	cmp	r3, #6
 8007bcc:	d015      	beq.n	8007bfa <HAL_TIM_PWM_Start_DMA+0x402>
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bd4:	d011      	beq.n	8007bfa <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f042 0201 	orr.w	r2, r2, #1
 8007be4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be6:	e008      	b.n	8007bfa <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f042 0201 	orr.w	r2, r2, #1
 8007bf6:	601a      	str	r2, [r3, #0]
 8007bf8:	e000      	b.n	8007bfc <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bfa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	080084dd 	.word	0x080084dd
 8007c0c:	08008585 	.word	0x08008585
 8007c10:	0800844b 	.word	0x0800844b
 8007c14:	40012c00 	.word	0x40012c00
 8007c18:	40013400 	.word	0x40013400
 8007c1c:	40014000 	.word	0x40014000
 8007c20:	40014400 	.word	0x40014400
 8007c24:	40014800 	.word	0x40014800
 8007c28:	40000400 	.word	0x40000400
 8007c2c:	40000800 	.word	0x40000800
 8007c30:	40000c00 	.word	0x40000c00
 8007c34:	00010007 	.word	0x00010007

08007c38 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2b0c      	cmp	r3, #12
 8007c4a:	d855      	bhi.n	8007cf8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c54 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007c89 	.word	0x08007c89
 8007c58:	08007cf9 	.word	0x08007cf9
 8007c5c:	08007cf9 	.word	0x08007cf9
 8007c60:	08007cf9 	.word	0x08007cf9
 8007c64:	08007ca5 	.word	0x08007ca5
 8007c68:	08007cf9 	.word	0x08007cf9
 8007c6c:	08007cf9 	.word	0x08007cf9
 8007c70:	08007cf9 	.word	0x08007cf9
 8007c74:	08007cc1 	.word	0x08007cc1
 8007c78:	08007cf9 	.word	0x08007cf9
 8007c7c:	08007cf9 	.word	0x08007cf9
 8007c80:	08007cf9 	.word	0x08007cf9
 8007c84:	08007cdd 	.word	0x08007cdd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68da      	ldr	r2, [r3, #12]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007c96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fc f8a9 	bl	8003df4 <HAL_DMA_Abort_IT>
      break;
 8007ca2:	e02c      	b.n	8007cfe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cb2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fc f89b 	bl	8003df4 <HAL_DMA_Abort_IT>
      break;
 8007cbe:	e01e      	b.n	8007cfe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007cce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fc f88d 	bl	8003df4 <HAL_DMA_Abort_IT>
      break;
 8007cda:	e010      	b.n	8007cfe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007cea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fc f87f 	bl	8003df4 <HAL_DMA_Abort_IT>
      break;
 8007cf6:	e002      	b.n	8007cfe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8007cfc:	bf00      	nop
  }

  if (status == HAL_OK)
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f040 8081 	bne.w	8007e08 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f001 f876 	bl	8008e00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a3e      	ldr	r2, [pc, #248]	@ (8007e14 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d013      	beq.n	8007d46 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a3d      	ldr	r2, [pc, #244]	@ (8007e18 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d00e      	beq.n	8007d46 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a3b      	ldr	r2, [pc, #236]	@ (8007e1c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d009      	beq.n	8007d46 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a3a      	ldr	r2, [pc, #232]	@ (8007e20 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d004      	beq.n	8007d46 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a38      	ldr	r2, [pc, #224]	@ (8007e24 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d101      	bne.n	8007d4a <HAL_TIM_PWM_Stop_DMA+0x112>
 8007d46:	2301      	movs	r3, #1
 8007d48:	e000      	b.n	8007d4c <HAL_TIM_PWM_Stop_DMA+0x114>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d017      	beq.n	8007d80 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6a1a      	ldr	r2, [r3, #32]
 8007d56:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10f      	bne.n	8007d80 <HAL_TIM_PWM_Stop_DMA+0x148>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6a1a      	ldr	r2, [r3, #32]
 8007d66:	f240 4344 	movw	r3, #1092	@ 0x444
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d107      	bne.n	8007d80 <HAL_TIM_PWM_Stop_DMA+0x148>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d7e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6a1a      	ldr	r2, [r3, #32]
 8007d86:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10f      	bne.n	8007db0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6a1a      	ldr	r2, [r3, #32]
 8007d96:	f240 4344 	movw	r3, #1092	@ 0x444
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d107      	bne.n	8007db0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 0201 	bic.w	r2, r2, #1
 8007dae:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d104      	bne.n	8007dc0 <HAL_TIM_PWM_Stop_DMA+0x188>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dbe:	e023      	b.n	8007e08 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d104      	bne.n	8007dd0 <HAL_TIM_PWM_Stop_DMA+0x198>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007dce:	e01b      	b.n	8007e08 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	2b08      	cmp	r3, #8
 8007dd4:	d104      	bne.n	8007de0 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dde:	e013      	b.n	8007e08 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2b0c      	cmp	r3, #12
 8007de4:	d104      	bne.n	8007df0 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007dee:	e00b      	b.n	8007e08 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	2b10      	cmp	r3, #16
 8007df4:	d104      	bne.n	8007e00 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dfe:	e003      	b.n	8007e08 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	40012c00 	.word	0x40012c00
 8007e18:	40013400 	.word	0x40013400
 8007e1c:	40014000 	.word	0x40014000
 8007e20:	40014400 	.word	0x40014400
 8007e24:	40014800 	.word	0x40014800

08007e28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f003 0302 	and.w	r3, r3, #2
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d020      	beq.n	8007e8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f003 0302 	and.w	r3, r3, #2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d01b      	beq.n	8007e8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f06f 0202 	mvn.w	r2, #2
 8007e5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	f003 0303 	and.w	r3, r3, #3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fac1 	bl	80083fa <HAL_TIM_IC_CaptureCallback>
 8007e78:	e005      	b.n	8007e86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fab3 	bl	80083e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7f9 fbf7 	bl	8001674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	f003 0304 	and.w	r3, r3, #4
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d020      	beq.n	8007ed8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f003 0304 	and.w	r3, r3, #4
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d01b      	beq.n	8007ed8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f06f 0204 	mvn.w	r2, #4
 8007ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2202      	movs	r2, #2
 8007eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fa9b 	bl	80083fa <HAL_TIM_IC_CaptureCallback>
 8007ec4:	e005      	b.n	8007ed2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fa8d 	bl	80083e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7f9 fbd1 	bl	8001674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f003 0308 	and.w	r3, r3, #8
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d020      	beq.n	8007f24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f003 0308 	and.w	r3, r3, #8
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d01b      	beq.n	8007f24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f06f 0208 	mvn.w	r2, #8
 8007ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2204      	movs	r2, #4
 8007efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	f003 0303 	and.w	r3, r3, #3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fa75 	bl	80083fa <HAL_TIM_IC_CaptureCallback>
 8007f10:	e005      	b.n	8007f1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fa67 	bl	80083e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7f9 fbab 	bl	8001674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f003 0310 	and.w	r3, r3, #16
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d020      	beq.n	8007f70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d01b      	beq.n	8007f70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f06f 0210 	mvn.w	r2, #16
 8007f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2208      	movs	r2, #8
 8007f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fa4f 	bl	80083fa <HAL_TIM_IC_CaptureCallback>
 8007f5c:	e005      	b.n	8007f6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fa41 	bl	80083e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7f9 fb85 	bl	8001674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00c      	beq.n	8007f94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d007      	beq.n	8007f94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f06f 0201 	mvn.w	r2, #1
 8007f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7f9 fc60 	bl	8001854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00c      	beq.n	8007fb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d007      	beq.n	8007fb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 f85a 	bl	800906c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00c      	beq.n	8007fdc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d007      	beq.n	8007fdc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f001 f852 	bl	8009080 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00c      	beq.n	8008000 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d007      	beq.n	8008000 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fa11 	bl	8008422 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f003 0320 	and.w	r3, r3, #32
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00c      	beq.n	8008024 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f003 0320 	and.w	r3, r3, #32
 8008010:	2b00      	cmp	r3, #0
 8008012:	d007      	beq.n	8008024 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f06f 0220 	mvn.w	r2, #32
 800801c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f001 f81a 	bl	8009058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008024:	bf00      	nop
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008042:	2b01      	cmp	r3, #1
 8008044:	d101      	bne.n	800804a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008046:	2302      	movs	r3, #2
 8008048:	e0ff      	b.n	800824a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b14      	cmp	r3, #20
 8008056:	f200 80f0 	bhi.w	800823a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800805a:	a201      	add	r2, pc, #4	@ (adr r2, 8008060 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800805c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008060:	080080b5 	.word	0x080080b5
 8008064:	0800823b 	.word	0x0800823b
 8008068:	0800823b 	.word	0x0800823b
 800806c:	0800823b 	.word	0x0800823b
 8008070:	080080f5 	.word	0x080080f5
 8008074:	0800823b 	.word	0x0800823b
 8008078:	0800823b 	.word	0x0800823b
 800807c:	0800823b 	.word	0x0800823b
 8008080:	08008137 	.word	0x08008137
 8008084:	0800823b 	.word	0x0800823b
 8008088:	0800823b 	.word	0x0800823b
 800808c:	0800823b 	.word	0x0800823b
 8008090:	08008177 	.word	0x08008177
 8008094:	0800823b 	.word	0x0800823b
 8008098:	0800823b 	.word	0x0800823b
 800809c:	0800823b 	.word	0x0800823b
 80080a0:	080081b9 	.word	0x080081b9
 80080a4:	0800823b 	.word	0x0800823b
 80080a8:	0800823b 	.word	0x0800823b
 80080ac:	0800823b 	.word	0x0800823b
 80080b0:	080081f9 	.word	0x080081f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68b9      	ldr	r1, [r7, #8]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 fb30 	bl	8008720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699a      	ldr	r2, [r3, #24]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f042 0208 	orr.w	r2, r2, #8
 80080ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	699a      	ldr	r2, [r3, #24]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0204 	bic.w	r2, r2, #4
 80080de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6999      	ldr	r1, [r3, #24]
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	691a      	ldr	r2, [r3, #16]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	619a      	str	r2, [r3, #24]
      break;
 80080f2:	e0a5      	b.n	8008240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68b9      	ldr	r1, [r7, #8]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 fba0 	bl	8008840 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	699a      	ldr	r2, [r3, #24]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800810e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	699a      	ldr	r2, [r3, #24]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800811e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6999      	ldr	r1, [r3, #24]
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	021a      	lsls	r2, r3, #8
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	430a      	orrs	r2, r1
 8008132:	619a      	str	r2, [r3, #24]
      break;
 8008134:	e084      	b.n	8008240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68b9      	ldr	r1, [r7, #8]
 800813c:	4618      	mov	r0, r3
 800813e:	f000 fc09 	bl	8008954 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	69da      	ldr	r2, [r3, #28]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f042 0208 	orr.w	r2, r2, #8
 8008150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	69da      	ldr	r2, [r3, #28]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f022 0204 	bic.w	r2, r2, #4
 8008160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	69d9      	ldr	r1, [r3, #28]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	691a      	ldr	r2, [r3, #16]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	430a      	orrs	r2, r1
 8008172:	61da      	str	r2, [r3, #28]
      break;
 8008174:	e064      	b.n	8008240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68b9      	ldr	r1, [r7, #8]
 800817c:	4618      	mov	r0, r3
 800817e:	f000 fc71 	bl	8008a64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	69da      	ldr	r2, [r3, #28]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	69da      	ldr	r2, [r3, #28]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	69d9      	ldr	r1, [r3, #28]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	021a      	lsls	r2, r3, #8
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	61da      	str	r2, [r3, #28]
      break;
 80081b6:	e043      	b.n	8008240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68b9      	ldr	r1, [r7, #8]
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fcba 	bl	8008b38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f042 0208 	orr.w	r2, r2, #8
 80081d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f022 0204 	bic.w	r2, r2, #4
 80081e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	691a      	ldr	r2, [r3, #16]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80081f6:	e023      	b.n	8008240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68b9      	ldr	r1, [r7, #8]
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 fcfe 	bl	8008c00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008212:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008222:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	021a      	lsls	r2, r3, #8
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008238:	e002      	b.n	8008240 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	75fb      	strb	r3, [r7, #23]
      break;
 800823e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008248:	7dfb      	ldrb	r3, [r7, #23]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop

08008254 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008268:	2b01      	cmp	r3, #1
 800826a:	d101      	bne.n	8008270 <HAL_TIM_ConfigClockSource+0x1c>
 800826c:	2302      	movs	r3, #2
 800826e:	e0b6      	b.n	80083de <HAL_TIM_ConfigClockSource+0x18a>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800828e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800829a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082ac:	d03e      	beq.n	800832c <HAL_TIM_ConfigClockSource+0xd8>
 80082ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082b2:	f200 8087 	bhi.w	80083c4 <HAL_TIM_ConfigClockSource+0x170>
 80082b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082ba:	f000 8086 	beq.w	80083ca <HAL_TIM_ConfigClockSource+0x176>
 80082be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082c2:	d87f      	bhi.n	80083c4 <HAL_TIM_ConfigClockSource+0x170>
 80082c4:	2b70      	cmp	r3, #112	@ 0x70
 80082c6:	d01a      	beq.n	80082fe <HAL_TIM_ConfigClockSource+0xaa>
 80082c8:	2b70      	cmp	r3, #112	@ 0x70
 80082ca:	d87b      	bhi.n	80083c4 <HAL_TIM_ConfigClockSource+0x170>
 80082cc:	2b60      	cmp	r3, #96	@ 0x60
 80082ce:	d050      	beq.n	8008372 <HAL_TIM_ConfigClockSource+0x11e>
 80082d0:	2b60      	cmp	r3, #96	@ 0x60
 80082d2:	d877      	bhi.n	80083c4 <HAL_TIM_ConfigClockSource+0x170>
 80082d4:	2b50      	cmp	r3, #80	@ 0x50
 80082d6:	d03c      	beq.n	8008352 <HAL_TIM_ConfigClockSource+0xfe>
 80082d8:	2b50      	cmp	r3, #80	@ 0x50
 80082da:	d873      	bhi.n	80083c4 <HAL_TIM_ConfigClockSource+0x170>
 80082dc:	2b40      	cmp	r3, #64	@ 0x40
 80082de:	d058      	beq.n	8008392 <HAL_TIM_ConfigClockSource+0x13e>
 80082e0:	2b40      	cmp	r3, #64	@ 0x40
 80082e2:	d86f      	bhi.n	80083c4 <HAL_TIM_ConfigClockSource+0x170>
 80082e4:	2b30      	cmp	r3, #48	@ 0x30
 80082e6:	d064      	beq.n	80083b2 <HAL_TIM_ConfigClockSource+0x15e>
 80082e8:	2b30      	cmp	r3, #48	@ 0x30
 80082ea:	d86b      	bhi.n	80083c4 <HAL_TIM_ConfigClockSource+0x170>
 80082ec:	2b20      	cmp	r3, #32
 80082ee:	d060      	beq.n	80083b2 <HAL_TIM_ConfigClockSource+0x15e>
 80082f0:	2b20      	cmp	r3, #32
 80082f2:	d867      	bhi.n	80083c4 <HAL_TIM_ConfigClockSource+0x170>
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d05c      	beq.n	80083b2 <HAL_TIM_ConfigClockSource+0x15e>
 80082f8:	2b10      	cmp	r3, #16
 80082fa:	d05a      	beq.n	80083b2 <HAL_TIM_ConfigClockSource+0x15e>
 80082fc:	e062      	b.n	80083c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800830e:	f000 fd57 	bl	8008dc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008320:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	609a      	str	r2, [r3, #8]
      break;
 800832a:	e04f      	b.n	80083cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800833c:	f000 fd40 	bl	8008dc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800834e:	609a      	str	r2, [r3, #8]
      break;
 8008350:	e03c      	b.n	80083cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800835e:	461a      	mov	r2, r3
 8008360:	f000 fcb4 	bl	8008ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2150      	movs	r1, #80	@ 0x50
 800836a:	4618      	mov	r0, r3
 800836c:	f000 fd0d 	bl	8008d8a <TIM_ITRx_SetConfig>
      break;
 8008370:	e02c      	b.n	80083cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800837e:	461a      	mov	r2, r3
 8008380:	f000 fcd3 	bl	8008d2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2160      	movs	r1, #96	@ 0x60
 800838a:	4618      	mov	r0, r3
 800838c:	f000 fcfd 	bl	8008d8a <TIM_ITRx_SetConfig>
      break;
 8008390:	e01c      	b.n	80083cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800839e:	461a      	mov	r2, r3
 80083a0:	f000 fc94 	bl	8008ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2140      	movs	r1, #64	@ 0x40
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 fced 	bl	8008d8a <TIM_ITRx_SetConfig>
      break;
 80083b0:	e00c      	b.n	80083cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4619      	mov	r1, r3
 80083bc:	4610      	mov	r0, r2
 80083be:	f000 fce4 	bl	8008d8a <TIM_ITRx_SetConfig>
      break;
 80083c2:	e003      	b.n	80083cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	73fb      	strb	r3, [r7, #15]
      break;
 80083c8:	e000      	b.n	80083cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80083ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008416:	bf00      	nop
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800842a:	bf00      	nop
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008456:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	429a      	cmp	r2, r3
 8008460:	d107      	bne.n	8008472 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2201      	movs	r2, #1
 8008466:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008470:	e02a      	b.n	80084c8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	429a      	cmp	r2, r3
 800847a:	d107      	bne.n	800848c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2202      	movs	r2, #2
 8008480:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800848a:	e01d      	b.n	80084c8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	429a      	cmp	r2, r3
 8008494:	d107      	bne.n	80084a6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2204      	movs	r2, #4
 800849a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084a4:	e010      	b.n	80084c8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d107      	bne.n	80084c0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2208      	movs	r2, #8
 80084b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084be:	e003      	b.n	80084c8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f7ff ffb4 	bl	8008436 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	771a      	strb	r2, [r3, #28]
}
 80084d4:	bf00      	nop
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d10b      	bne.n	800850c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2201      	movs	r2, #1
 80084f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d136      	bne.n	8008570 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800850a:	e031      	b.n	8008570 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	429a      	cmp	r2, r3
 8008514:	d10b      	bne.n	800852e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2202      	movs	r2, #2
 800851a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d125      	bne.n	8008570 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800852c:	e020      	b.n	8008570 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	429a      	cmp	r2, r3
 8008536:	d10b      	bne.n	8008550 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2204      	movs	r2, #4
 800853c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	69db      	ldr	r3, [r3, #28]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d114      	bne.n	8008570 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800854e:	e00f      	b.n	8008570 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	429a      	cmp	r2, r3
 8008558:	d10a      	bne.n	8008570 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2208      	movs	r2, #8
 800855e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	69db      	ldr	r3, [r3, #28]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d103      	bne.n	8008570 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f7f9 f87f 	bl	8001674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	771a      	strb	r2, [r3, #28]
}
 800857c:	bf00      	nop
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008590:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	429a      	cmp	r2, r3
 800859a:	d103      	bne.n	80085a4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2201      	movs	r2, #1
 80085a0:	771a      	strb	r2, [r3, #28]
 80085a2:	e019      	b.n	80085d8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d103      	bne.n	80085b6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2202      	movs	r2, #2
 80085b2:	771a      	strb	r2, [r3, #28]
 80085b4:	e010      	b.n	80085d8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d103      	bne.n	80085c8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2204      	movs	r2, #4
 80085c4:	771a      	strb	r2, [r3, #28]
 80085c6:	e007      	b.n	80085d8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d102      	bne.n	80085d8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2208      	movs	r2, #8
 80085d6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f7ff ff18 	bl	800840e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	771a      	strb	r2, [r3, #28]
}
 80085e4:	bf00      	nop
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a40      	ldr	r2, [pc, #256]	@ (8008700 <TIM_Base_SetConfig+0x114>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d013      	beq.n	800862c <TIM_Base_SetConfig+0x40>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800860a:	d00f      	beq.n	800862c <TIM_Base_SetConfig+0x40>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a3d      	ldr	r2, [pc, #244]	@ (8008704 <TIM_Base_SetConfig+0x118>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d00b      	beq.n	800862c <TIM_Base_SetConfig+0x40>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a3c      	ldr	r2, [pc, #240]	@ (8008708 <TIM_Base_SetConfig+0x11c>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d007      	beq.n	800862c <TIM_Base_SetConfig+0x40>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a3b      	ldr	r2, [pc, #236]	@ (800870c <TIM_Base_SetConfig+0x120>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d003      	beq.n	800862c <TIM_Base_SetConfig+0x40>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a3a      	ldr	r2, [pc, #232]	@ (8008710 <TIM_Base_SetConfig+0x124>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d108      	bne.n	800863e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	4313      	orrs	r3, r2
 800863c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a2f      	ldr	r2, [pc, #188]	@ (8008700 <TIM_Base_SetConfig+0x114>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d01f      	beq.n	8008686 <TIM_Base_SetConfig+0x9a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800864c:	d01b      	beq.n	8008686 <TIM_Base_SetConfig+0x9a>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a2c      	ldr	r2, [pc, #176]	@ (8008704 <TIM_Base_SetConfig+0x118>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d017      	beq.n	8008686 <TIM_Base_SetConfig+0x9a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a2b      	ldr	r2, [pc, #172]	@ (8008708 <TIM_Base_SetConfig+0x11c>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d013      	beq.n	8008686 <TIM_Base_SetConfig+0x9a>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a2a      	ldr	r2, [pc, #168]	@ (800870c <TIM_Base_SetConfig+0x120>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d00f      	beq.n	8008686 <TIM_Base_SetConfig+0x9a>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a29      	ldr	r2, [pc, #164]	@ (8008710 <TIM_Base_SetConfig+0x124>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d00b      	beq.n	8008686 <TIM_Base_SetConfig+0x9a>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a28      	ldr	r2, [pc, #160]	@ (8008714 <TIM_Base_SetConfig+0x128>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d007      	beq.n	8008686 <TIM_Base_SetConfig+0x9a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a27      	ldr	r2, [pc, #156]	@ (8008718 <TIM_Base_SetConfig+0x12c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d003      	beq.n	8008686 <TIM_Base_SetConfig+0x9a>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a26      	ldr	r2, [pc, #152]	@ (800871c <TIM_Base_SetConfig+0x130>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d108      	bne.n	8008698 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800868c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	4313      	orrs	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a10      	ldr	r2, [pc, #64]	@ (8008700 <TIM_Base_SetConfig+0x114>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d00f      	beq.n	80086e4 <TIM_Base_SetConfig+0xf8>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a12      	ldr	r2, [pc, #72]	@ (8008710 <TIM_Base_SetConfig+0x124>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d00b      	beq.n	80086e4 <TIM_Base_SetConfig+0xf8>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a11      	ldr	r2, [pc, #68]	@ (8008714 <TIM_Base_SetConfig+0x128>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d007      	beq.n	80086e4 <TIM_Base_SetConfig+0xf8>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a10      	ldr	r2, [pc, #64]	@ (8008718 <TIM_Base_SetConfig+0x12c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d003      	beq.n	80086e4 <TIM_Base_SetConfig+0xf8>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a0f      	ldr	r2, [pc, #60]	@ (800871c <TIM_Base_SetConfig+0x130>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d103      	bne.n	80086ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	691a      	ldr	r2, [r3, #16]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	615a      	str	r2, [r3, #20]
}
 80086f2:	bf00      	nop
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	40012c00 	.word	0x40012c00
 8008704:	40000400 	.word	0x40000400
 8008708:	40000800 	.word	0x40000800
 800870c:	40000c00 	.word	0x40000c00
 8008710:	40013400 	.word	0x40013400
 8008714:	40014000 	.word	0x40014000
 8008718:	40014400 	.word	0x40014400
 800871c:	40014800 	.word	0x40014800

08008720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008720:	b480      	push	{r7}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	f023 0201 	bic.w	r2, r3, #1
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800874e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 0303 	bic.w	r3, r3, #3
 800875a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	4313      	orrs	r3, r2
 8008764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f023 0302 	bic.w	r3, r3, #2
 800876c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	697a      	ldr	r2, [r7, #20]
 8008774:	4313      	orrs	r3, r2
 8008776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a2c      	ldr	r2, [pc, #176]	@ (800882c <TIM_OC1_SetConfig+0x10c>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d00f      	beq.n	80087a0 <TIM_OC1_SetConfig+0x80>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a2b      	ldr	r2, [pc, #172]	@ (8008830 <TIM_OC1_SetConfig+0x110>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d00b      	beq.n	80087a0 <TIM_OC1_SetConfig+0x80>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a2a      	ldr	r2, [pc, #168]	@ (8008834 <TIM_OC1_SetConfig+0x114>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d007      	beq.n	80087a0 <TIM_OC1_SetConfig+0x80>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a29      	ldr	r2, [pc, #164]	@ (8008838 <TIM_OC1_SetConfig+0x118>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d003      	beq.n	80087a0 <TIM_OC1_SetConfig+0x80>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a28      	ldr	r2, [pc, #160]	@ (800883c <TIM_OC1_SetConfig+0x11c>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d10c      	bne.n	80087ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f023 0308 	bic.w	r3, r3, #8
 80087a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f023 0304 	bic.w	r3, r3, #4
 80087b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a1b      	ldr	r2, [pc, #108]	@ (800882c <TIM_OC1_SetConfig+0x10c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d00f      	beq.n	80087e2 <TIM_OC1_SetConfig+0xc2>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a1a      	ldr	r2, [pc, #104]	@ (8008830 <TIM_OC1_SetConfig+0x110>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d00b      	beq.n	80087e2 <TIM_OC1_SetConfig+0xc2>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a19      	ldr	r2, [pc, #100]	@ (8008834 <TIM_OC1_SetConfig+0x114>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d007      	beq.n	80087e2 <TIM_OC1_SetConfig+0xc2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a18      	ldr	r2, [pc, #96]	@ (8008838 <TIM_OC1_SetConfig+0x118>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d003      	beq.n	80087e2 <TIM_OC1_SetConfig+0xc2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a17      	ldr	r2, [pc, #92]	@ (800883c <TIM_OC1_SetConfig+0x11c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d111      	bne.n	8008806 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	4313      	orrs	r3, r2
 8008804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	621a      	str	r2, [r3, #32]
}
 8008820:	bf00      	nop
 8008822:	371c      	adds	r7, #28
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	40012c00 	.word	0x40012c00
 8008830:	40013400 	.word	0x40013400
 8008834:	40014000 	.word	0x40014000
 8008838:	40014400 	.word	0x40014400
 800883c:	40014800 	.word	0x40014800

08008840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008840:	b480      	push	{r7}
 8008842:	b087      	sub	sp, #28
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a1b      	ldr	r3, [r3, #32]
 800884e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a1b      	ldr	r3, [r3, #32]
 8008854:	f023 0210 	bic.w	r2, r3, #16
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800886e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800887a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	021b      	lsls	r3, r3, #8
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	4313      	orrs	r3, r2
 8008886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f023 0320 	bic.w	r3, r3, #32
 800888e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	011b      	lsls	r3, r3, #4
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	4313      	orrs	r3, r2
 800889a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a28      	ldr	r2, [pc, #160]	@ (8008940 <TIM_OC2_SetConfig+0x100>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d003      	beq.n	80088ac <TIM_OC2_SetConfig+0x6c>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a27      	ldr	r2, [pc, #156]	@ (8008944 <TIM_OC2_SetConfig+0x104>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d10d      	bne.n	80088c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	011b      	lsls	r3, r3, #4
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	4313      	orrs	r3, r2
 80088be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a1d      	ldr	r2, [pc, #116]	@ (8008940 <TIM_OC2_SetConfig+0x100>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d00f      	beq.n	80088f0 <TIM_OC2_SetConfig+0xb0>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a1c      	ldr	r2, [pc, #112]	@ (8008944 <TIM_OC2_SetConfig+0x104>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d00b      	beq.n	80088f0 <TIM_OC2_SetConfig+0xb0>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a1b      	ldr	r2, [pc, #108]	@ (8008948 <TIM_OC2_SetConfig+0x108>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d007      	beq.n	80088f0 <TIM_OC2_SetConfig+0xb0>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a1a      	ldr	r2, [pc, #104]	@ (800894c <TIM_OC2_SetConfig+0x10c>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d003      	beq.n	80088f0 <TIM_OC2_SetConfig+0xb0>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a19      	ldr	r2, [pc, #100]	@ (8008950 <TIM_OC2_SetConfig+0x110>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d113      	bne.n	8008918 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80088f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80088fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	4313      	orrs	r3, r2
 800890a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	4313      	orrs	r3, r2
 8008916:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	685a      	ldr	r2, [r3, #4]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	621a      	str	r2, [r3, #32]
}
 8008932:	bf00      	nop
 8008934:	371c      	adds	r7, #28
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	40012c00 	.word	0x40012c00
 8008944:	40013400 	.word	0x40013400
 8008948:	40014000 	.word	0x40014000
 800894c:	40014400 	.word	0x40014400
 8008950:	40014800 	.word	0x40014800

08008954 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a1b      	ldr	r3, [r3, #32]
 8008968:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f023 0303 	bic.w	r3, r3, #3
 800898e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	4313      	orrs	r3, r2
 8008998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80089a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	021b      	lsls	r3, r3, #8
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a27      	ldr	r2, [pc, #156]	@ (8008a50 <TIM_OC3_SetConfig+0xfc>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d003      	beq.n	80089be <TIM_OC3_SetConfig+0x6a>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a26      	ldr	r2, [pc, #152]	@ (8008a54 <TIM_OC3_SetConfig+0x100>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d10d      	bne.n	80089da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	021b      	lsls	r3, r3, #8
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80089d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a1c      	ldr	r2, [pc, #112]	@ (8008a50 <TIM_OC3_SetConfig+0xfc>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d00f      	beq.n	8008a02 <TIM_OC3_SetConfig+0xae>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008a54 <TIM_OC3_SetConfig+0x100>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d00b      	beq.n	8008a02 <TIM_OC3_SetConfig+0xae>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a1a      	ldr	r2, [pc, #104]	@ (8008a58 <TIM_OC3_SetConfig+0x104>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d007      	beq.n	8008a02 <TIM_OC3_SetConfig+0xae>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a19      	ldr	r2, [pc, #100]	@ (8008a5c <TIM_OC3_SetConfig+0x108>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d003      	beq.n	8008a02 <TIM_OC3_SetConfig+0xae>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a18      	ldr	r2, [pc, #96]	@ (8008a60 <TIM_OC3_SetConfig+0x10c>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d113      	bne.n	8008a2a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	011b      	lsls	r3, r3, #4
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	011b      	lsls	r3, r3, #4
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	621a      	str	r2, [r3, #32]
}
 8008a44:	bf00      	nop
 8008a46:	371c      	adds	r7, #28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	40012c00 	.word	0x40012c00
 8008a54:	40013400 	.word	0x40013400
 8008a58:	40014000 	.word	0x40014000
 8008a5c:	40014400 	.word	0x40014400
 8008a60:	40014800 	.word	0x40014800

08008a64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b087      	sub	sp, #28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	021b      	lsls	r3, r3, #8
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	031b      	lsls	r3, r3, #12
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a18      	ldr	r2, [pc, #96]	@ (8008b24 <TIM_OC4_SetConfig+0xc0>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d00f      	beq.n	8008ae8 <TIM_OC4_SetConfig+0x84>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a17      	ldr	r2, [pc, #92]	@ (8008b28 <TIM_OC4_SetConfig+0xc4>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d00b      	beq.n	8008ae8 <TIM_OC4_SetConfig+0x84>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a16      	ldr	r2, [pc, #88]	@ (8008b2c <TIM_OC4_SetConfig+0xc8>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d007      	beq.n	8008ae8 <TIM_OC4_SetConfig+0x84>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a15      	ldr	r2, [pc, #84]	@ (8008b30 <TIM_OC4_SetConfig+0xcc>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d003      	beq.n	8008ae8 <TIM_OC4_SetConfig+0x84>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a14      	ldr	r2, [pc, #80]	@ (8008b34 <TIM_OC4_SetConfig+0xd0>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d109      	bne.n	8008afc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008aee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	019b      	lsls	r3, r3, #6
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	621a      	str	r2, [r3, #32]
}
 8008b16:	bf00      	nop
 8008b18:	371c      	adds	r7, #28
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	40012c00 	.word	0x40012c00
 8008b28:	40013400 	.word	0x40013400
 8008b2c:	40014000 	.word	0x40014000
 8008b30:	40014400 	.word	0x40014400
 8008b34:	40014800 	.word	0x40014800

08008b38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a1b      	ldr	r3, [r3, #32]
 8008b4c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008b7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	041b      	lsls	r3, r3, #16
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a17      	ldr	r2, [pc, #92]	@ (8008bec <TIM_OC5_SetConfig+0xb4>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00f      	beq.n	8008bb2 <TIM_OC5_SetConfig+0x7a>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a16      	ldr	r2, [pc, #88]	@ (8008bf0 <TIM_OC5_SetConfig+0xb8>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d00b      	beq.n	8008bb2 <TIM_OC5_SetConfig+0x7a>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a15      	ldr	r2, [pc, #84]	@ (8008bf4 <TIM_OC5_SetConfig+0xbc>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d007      	beq.n	8008bb2 <TIM_OC5_SetConfig+0x7a>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a14      	ldr	r2, [pc, #80]	@ (8008bf8 <TIM_OC5_SetConfig+0xc0>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d003      	beq.n	8008bb2 <TIM_OC5_SetConfig+0x7a>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a13      	ldr	r2, [pc, #76]	@ (8008bfc <TIM_OC5_SetConfig+0xc4>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d109      	bne.n	8008bc6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	021b      	lsls	r3, r3, #8
 8008bc0:	697a      	ldr	r2, [r7, #20]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	697a      	ldr	r2, [r7, #20]
 8008bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	621a      	str	r2, [r3, #32]
}
 8008be0:	bf00      	nop
 8008be2:	371c      	adds	r7, #28
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	40012c00 	.word	0x40012c00
 8008bf0:	40013400 	.word	0x40013400
 8008bf4:	40014000 	.word	0x40014000
 8008bf8:	40014400 	.word	0x40014400
 8008bfc:	40014800 	.word	0x40014800

08008c00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b087      	sub	sp, #28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008c46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	051b      	lsls	r3, r3, #20
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a18      	ldr	r2, [pc, #96]	@ (8008cb8 <TIM_OC6_SetConfig+0xb8>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d00f      	beq.n	8008c7c <TIM_OC6_SetConfig+0x7c>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a17      	ldr	r2, [pc, #92]	@ (8008cbc <TIM_OC6_SetConfig+0xbc>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d00b      	beq.n	8008c7c <TIM_OC6_SetConfig+0x7c>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a16      	ldr	r2, [pc, #88]	@ (8008cc0 <TIM_OC6_SetConfig+0xc0>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d007      	beq.n	8008c7c <TIM_OC6_SetConfig+0x7c>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a15      	ldr	r2, [pc, #84]	@ (8008cc4 <TIM_OC6_SetConfig+0xc4>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d003      	beq.n	8008c7c <TIM_OC6_SetConfig+0x7c>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a14      	ldr	r2, [pc, #80]	@ (8008cc8 <TIM_OC6_SetConfig+0xc8>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d109      	bne.n	8008c90 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	029b      	lsls	r3, r3, #10
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	621a      	str	r2, [r3, #32]
}
 8008caa:	bf00      	nop
 8008cac:	371c      	adds	r7, #28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	40012c00 	.word	0x40012c00
 8008cbc:	40013400 	.word	0x40013400
 8008cc0:	40014000 	.word	0x40014000
 8008cc4:	40014400 	.word	0x40014400
 8008cc8:	40014800 	.word	0x40014800

08008ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b087      	sub	sp, #28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	f023 0201 	bic.w	r2, r3, #1
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	011b      	lsls	r3, r3, #4
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f023 030a 	bic.w	r3, r3, #10
 8008d08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	621a      	str	r2, [r3, #32]
}
 8008d1e:	bf00      	nop
 8008d20:	371c      	adds	r7, #28
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b087      	sub	sp, #28
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	60f8      	str	r0, [r7, #12]
 8008d32:	60b9      	str	r1, [r7, #8]
 8008d34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6a1b      	ldr	r3, [r3, #32]
 8008d40:	f023 0210 	bic.w	r2, r3, #16
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	031b      	lsls	r3, r3, #12
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	011b      	lsls	r3, r3, #4
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	621a      	str	r2, [r3, #32]
}
 8008d7e:	bf00      	nop
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b085      	sub	sp, #20
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008da0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	f043 0307 	orr.w	r3, r3, #7
 8008dac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	609a      	str	r2, [r3, #8]
}
 8008db4:	bf00      	nop
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b087      	sub	sp, #28
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008dda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	021a      	lsls	r2, r3, #8
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	431a      	orrs	r2, r3
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	609a      	str	r2, [r3, #8]
}
 8008df4:	bf00      	nop
 8008df6:	371c      	adds	r7, #28
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	f003 031f 	and.w	r3, r3, #31
 8008e12:	2201      	movs	r2, #1
 8008e14:	fa02 f303 	lsl.w	r3, r2, r3
 8008e18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6a1a      	ldr	r2, [r3, #32]
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	43db      	mvns	r3, r3
 8008e22:	401a      	ands	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6a1a      	ldr	r2, [r3, #32]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f003 031f 	and.w	r3, r3, #31
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	fa01 f303 	lsl.w	r3, r1, r3
 8008e38:	431a      	orrs	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	621a      	str	r2, [r3, #32]
}
 8008e3e:	bf00      	nop
 8008e40:	371c      	adds	r7, #28
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
	...

08008e4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d101      	bne.n	8008e64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e60:	2302      	movs	r3, #2
 8008e62:	e068      	b.n	8008f36 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a2e      	ldr	r2, [pc, #184]	@ (8008f44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d004      	beq.n	8008e98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a2d      	ldr	r2, [pc, #180]	@ (8008f48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d108      	bne.n	8008eaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008e9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8008f44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d01d      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ed6:	d018      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a1b      	ldr	r2, [pc, #108]	@ (8008f4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d013      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d00e      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a18      	ldr	r2, [pc, #96]	@ (8008f54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d009      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a13      	ldr	r2, [pc, #76]	@ (8008f48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d004      	beq.n	8008f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a14      	ldr	r2, [pc, #80]	@ (8008f58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d10c      	bne.n	8008f24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	40012c00 	.word	0x40012c00
 8008f48:	40013400 	.word	0x40013400
 8008f4c:	40000400 	.word	0x40000400
 8008f50:	40000800 	.word	0x40000800
 8008f54:	40000c00 	.word	0x40000c00
 8008f58:	40014000 	.word	0x40014000

08008f5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d101      	bne.n	8008f78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f74:	2302      	movs	r3, #2
 8008f76:	e065      	b.n	8009044 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	041b      	lsls	r3, r3, #16
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a16      	ldr	r2, [pc, #88]	@ (8009050 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d004      	beq.n	8009006 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a14      	ldr	r2, [pc, #80]	@ (8009054 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d115      	bne.n	8009032 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009010:	051b      	lsls	r3, r3, #20
 8009012:	4313      	orrs	r3, r2
 8009014:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	69db      	ldr	r3, [r3, #28]
 8009020:	4313      	orrs	r3, r2
 8009022:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	4313      	orrs	r3, r2
 8009030:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	40012c00 	.word	0x40012c00
 8009054:	40013400 	.word	0x40013400

08009058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e040      	b.n	8009128 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d106      	bne.n	80090bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7f9 f99a 	bl	80023f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2224      	movs	r2, #36	@ 0x24
 80090c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f022 0201 	bic.w	r2, r2, #1
 80090d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d002      	beq.n	80090e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fec0 	bl	8009e60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fc05 	bl	80098f0 <UART_SetConfig>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d101      	bne.n	80090f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e01b      	b.n	8009128 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800910e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f042 0201 	orr.w	r2, r2, #1
 800911e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 ff3f 	bl	8009fa4 <UART_CheckIdleState>
 8009126:	4603      	mov	r3, r0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b08a      	sub	sp, #40	@ 0x28
 8009134:	af02      	add	r7, sp, #8
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	603b      	str	r3, [r7, #0]
 800913c:	4613      	mov	r3, r2
 800913e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009144:	2b20      	cmp	r3, #32
 8009146:	d177      	bne.n	8009238 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d002      	beq.n	8009154 <HAL_UART_Transmit+0x24>
 800914e:	88fb      	ldrh	r3, [r7, #6]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d101      	bne.n	8009158 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e070      	b.n	800923a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2221      	movs	r2, #33	@ 0x21
 8009164:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009166:	f7f9 fa05 	bl	8002574 <HAL_GetTick>
 800916a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	88fa      	ldrh	r2, [r7, #6]
 8009170:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	88fa      	ldrh	r2, [r7, #6]
 8009178:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009184:	d108      	bne.n	8009198 <HAL_UART_Transmit+0x68>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d104      	bne.n	8009198 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800918e:	2300      	movs	r3, #0
 8009190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	61bb      	str	r3, [r7, #24]
 8009196:	e003      	b.n	80091a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800919c:	2300      	movs	r3, #0
 800919e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80091a0:	e02f      	b.n	8009202 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	2200      	movs	r2, #0
 80091aa:	2180      	movs	r1, #128	@ 0x80
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f000 ffa1 	bl	800a0f4 <UART_WaitOnFlagUntilTimeout>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d004      	beq.n	80091c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2220      	movs	r2, #32
 80091bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e03b      	b.n	800923a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10b      	bne.n	80091e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	881a      	ldrh	r2, [r3, #0]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091d4:	b292      	uxth	r2, r2
 80091d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	3302      	adds	r3, #2
 80091dc:	61bb      	str	r3, [r7, #24]
 80091de:	e007      	b.n	80091f0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	781a      	ldrb	r2, [r3, #0]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	3301      	adds	r3, #1
 80091ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009208:	b29b      	uxth	r3, r3
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1c9      	bne.n	80091a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2200      	movs	r2, #0
 8009216:	2140      	movs	r1, #64	@ 0x40
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f000 ff6b 	bl	800a0f4 <UART_WaitOnFlagUntilTimeout>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d004      	beq.n	800922e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2220      	movs	r2, #32
 8009228:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e005      	b.n	800923a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2220      	movs	r2, #32
 8009232:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	e000      	b.n	800923a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009238:	2302      	movs	r3, #2
  }
}
 800923a:	4618      	mov	r0, r3
 800923c:	3720      	adds	r7, #32
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b08a      	sub	sp, #40	@ 0x28
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	4613      	mov	r3, r2
 8009250:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009258:	2b20      	cmp	r3, #32
 800925a:	d137      	bne.n	80092cc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d002      	beq.n	8009268 <HAL_UART_Receive_IT+0x24>
 8009262:	88fb      	ldrh	r3, [r7, #6]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e030      	b.n	80092ce <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a18      	ldr	r2, [pc, #96]	@ (80092d8 <HAL_UART_Receive_IT+0x94>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d01f      	beq.n	80092bc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009286:	2b00      	cmp	r3, #0
 8009288:	d018      	beq.n	80092bc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	e853 3f00 	ldrex	r3, [r3]
 8009296:	613b      	str	r3, [r7, #16]
   return(result);
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800929e:	627b      	str	r3, [r7, #36]	@ 0x24
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	461a      	mov	r2, r3
 80092a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a8:	623b      	str	r3, [r7, #32]
 80092aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ac:	69f9      	ldr	r1, [r7, #28]
 80092ae:	6a3a      	ldr	r2, [r7, #32]
 80092b0:	e841 2300 	strex	r3, r2, [r1]
 80092b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1e6      	bne.n	800928a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80092bc:	88fb      	ldrh	r3, [r7, #6]
 80092be:	461a      	mov	r2, r3
 80092c0:	68b9      	ldr	r1, [r7, #8]
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f000 ff7e 	bl	800a1c4 <UART_Start_Receive_IT>
 80092c8:	4603      	mov	r3, r0
 80092ca:	e000      	b.n	80092ce <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80092cc:	2302      	movs	r3, #2
  }
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3728      	adds	r7, #40	@ 0x28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	40008000 	.word	0x40008000

080092dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b0ba      	sub	sp, #232	@ 0xe8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009302:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009306:	f640 030f 	movw	r3, #2063	@ 0x80f
 800930a:	4013      	ands	r3, r2
 800930c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009314:	2b00      	cmp	r3, #0
 8009316:	d115      	bne.n	8009344 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800931c:	f003 0320 	and.w	r3, r3, #32
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00f      	beq.n	8009344 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009328:	f003 0320 	and.w	r3, r3, #32
 800932c:	2b00      	cmp	r3, #0
 800932e:	d009      	beq.n	8009344 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009334:	2b00      	cmp	r3, #0
 8009336:	f000 82ae 	beq.w	8009896 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	4798      	blx	r3
      }
      return;
 8009342:	e2a8      	b.n	8009896 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 8117 	beq.w	800957c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800934e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009352:	f003 0301 	and.w	r3, r3, #1
 8009356:	2b00      	cmp	r3, #0
 8009358:	d106      	bne.n	8009368 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800935a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800935e:	4b85      	ldr	r3, [pc, #532]	@ (8009574 <HAL_UART_IRQHandler+0x298>)
 8009360:	4013      	ands	r3, r2
 8009362:	2b00      	cmp	r3, #0
 8009364:	f000 810a 	beq.w	800957c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800936c:	f003 0301 	and.w	r3, r3, #1
 8009370:	2b00      	cmp	r3, #0
 8009372:	d011      	beq.n	8009398 <HAL_UART_IRQHandler+0xbc>
 8009374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00b      	beq.n	8009398 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2201      	movs	r2, #1
 8009386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800938e:	f043 0201 	orr.w	r2, r3, #1
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800939c:	f003 0302 	and.w	r3, r3, #2
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d011      	beq.n	80093c8 <HAL_UART_IRQHandler+0xec>
 80093a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00b      	beq.n	80093c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2202      	movs	r2, #2
 80093b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093be:	f043 0204 	orr.w	r2, r3, #4
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093cc:	f003 0304 	and.w	r3, r3, #4
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d011      	beq.n	80093f8 <HAL_UART_IRQHandler+0x11c>
 80093d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00b      	beq.n	80093f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2204      	movs	r2, #4
 80093e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093ee:	f043 0202 	orr.w	r2, r3, #2
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80093f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093fc:	f003 0308 	and.w	r3, r3, #8
 8009400:	2b00      	cmp	r3, #0
 8009402:	d017      	beq.n	8009434 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009408:	f003 0320 	and.w	r3, r3, #32
 800940c:	2b00      	cmp	r3, #0
 800940e:	d105      	bne.n	800941c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009414:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00b      	beq.n	8009434 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2208      	movs	r2, #8
 8009422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800942a:	f043 0208 	orr.w	r2, r3, #8
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009438:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800943c:	2b00      	cmp	r3, #0
 800943e:	d012      	beq.n	8009466 <HAL_UART_IRQHandler+0x18a>
 8009440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009444:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00c      	beq.n	8009466 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009454:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800945c:	f043 0220 	orr.w	r2, r3, #32
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 8214 	beq.w	800989a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009476:	f003 0320 	and.w	r3, r3, #32
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00d      	beq.n	800949a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800947e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009482:	f003 0320 	and.w	r3, r3, #32
 8009486:	2b00      	cmp	r3, #0
 8009488:	d007      	beq.n	800949a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ae:	2b40      	cmp	r3, #64	@ 0x40
 80094b0:	d005      	beq.n	80094be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80094b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d04f      	beq.n	800955e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 ff46 	bl	800a350 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ce:	2b40      	cmp	r3, #64	@ 0x40
 80094d0:	d141      	bne.n	8009556 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3308      	adds	r3, #8
 80094d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80094e0:	e853 3f00 	ldrex	r3, [r3]
 80094e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80094e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	3308      	adds	r3, #8
 80094fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80094fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009502:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009506:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800950a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800950e:	e841 2300 	strex	r3, r2, [r1]
 8009512:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1d9      	bne.n	80094d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009522:	2b00      	cmp	r3, #0
 8009524:	d013      	beq.n	800954e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800952a:	4a13      	ldr	r2, [pc, #76]	@ (8009578 <HAL_UART_IRQHandler+0x29c>)
 800952c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009532:	4618      	mov	r0, r3
 8009534:	f7fa fc5e 	bl	8003df4 <HAL_DMA_Abort_IT>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d017      	beq.n	800956e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009548:	4610      	mov	r0, r2
 800954a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800954c:	e00f      	b.n	800956e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f9b8 	bl	80098c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009554:	e00b      	b.n	800956e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f9b4 	bl	80098c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800955c:	e007      	b.n	800956e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f9b0 	bl	80098c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800956c:	e195      	b.n	800989a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800956e:	bf00      	nop
    return;
 8009570:	e193      	b.n	800989a <HAL_UART_IRQHandler+0x5be>
 8009572:	bf00      	nop
 8009574:	04000120 	.word	0x04000120
 8009578:	0800a419 	.word	0x0800a419

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009580:	2b01      	cmp	r3, #1
 8009582:	f040 814e 	bne.w	8009822 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800958a:	f003 0310 	and.w	r3, r3, #16
 800958e:	2b00      	cmp	r3, #0
 8009590:	f000 8147 	beq.w	8009822 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009598:	f003 0310 	and.w	r3, r3, #16
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 8140 	beq.w	8009822 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2210      	movs	r2, #16
 80095a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095b4:	2b40      	cmp	r3, #64	@ 0x40
 80095b6:	f040 80b8 	bne.w	800972a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 8167 	beq.w	800989e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80095d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095da:	429a      	cmp	r2, r3
 80095dc:	f080 815f 	bcs.w	800989e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 0320 	and.w	r3, r3, #32
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f040 8086 	bne.w	8009708 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009604:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009608:	e853 3f00 	ldrex	r3, [r3]
 800960c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009610:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009618:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	461a      	mov	r2, r3
 8009622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009626:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800962a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009632:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009636:	e841 2300 	strex	r3, r2, [r1]
 800963a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800963e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1da      	bne.n	80095fc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3308      	adds	r3, #8
 800964c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009650:	e853 3f00 	ldrex	r3, [r3]
 8009654:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009656:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009658:	f023 0301 	bic.w	r3, r3, #1
 800965c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	3308      	adds	r3, #8
 8009666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800966a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800966e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009670:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009672:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009676:	e841 2300 	strex	r3, r2, [r1]
 800967a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800967c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1e1      	bne.n	8009646 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3308      	adds	r3, #8
 8009688:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800968c:	e853 3f00 	ldrex	r3, [r3]
 8009690:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009694:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009698:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	3308      	adds	r3, #8
 80096a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80096a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80096a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80096ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80096ae:	e841 2300 	strex	r3, r2, [r1]
 80096b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80096b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1e3      	bne.n	8009682 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2220      	movs	r2, #32
 80096be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096d0:	e853 3f00 	ldrex	r3, [r3]
 80096d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80096d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096d8:	f023 0310 	bic.w	r3, r3, #16
 80096dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	461a      	mov	r2, r3
 80096e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096f2:	e841 2300 	strex	r3, r2, [r1]
 80096f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80096f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1e4      	bne.n	80096c8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009702:	4618      	mov	r0, r3
 8009704:	f7fa fb38 	bl	8003d78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2202      	movs	r2, #2
 800970c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800971a:	b29b      	uxth	r3, r3
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	b29b      	uxth	r3, r3
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f8d8 	bl	80098d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009728:	e0b9      	b.n	800989e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009736:	b29b      	uxth	r3, r3
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009744:	b29b      	uxth	r3, r3
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 80ab 	beq.w	80098a2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800974c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009750:	2b00      	cmp	r3, #0
 8009752:	f000 80a6 	beq.w	80098a2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800975e:	e853 3f00 	ldrex	r3, [r3]
 8009762:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009766:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800976a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009778:	647b      	str	r3, [r7, #68]	@ 0x44
 800977a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800977e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009780:	e841 2300 	strex	r3, r2, [r1]
 8009784:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1e4      	bne.n	8009756 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	3308      	adds	r3, #8
 8009792:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009796:	e853 3f00 	ldrex	r3, [r3]
 800979a:	623b      	str	r3, [r7, #32]
   return(result);
 800979c:	6a3b      	ldr	r3, [r7, #32]
 800979e:	f023 0301 	bic.w	r3, r3, #1
 80097a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3308      	adds	r3, #8
 80097ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80097b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80097b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097b8:	e841 2300 	strex	r3, r2, [r1]
 80097bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1e3      	bne.n	800978c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2220      	movs	r2, #32
 80097c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	e853 3f00 	ldrex	r3, [r3]
 80097e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f023 0310 	bic.w	r3, r3, #16
 80097ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	461a      	mov	r2, r3
 80097f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80097fa:	61fb      	str	r3, [r7, #28]
 80097fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fe:	69b9      	ldr	r1, [r7, #24]
 8009800:	69fa      	ldr	r2, [r7, #28]
 8009802:	e841 2300 	strex	r3, r2, [r1]
 8009806:	617b      	str	r3, [r7, #20]
   return(result);
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d1e4      	bne.n	80097d8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2202      	movs	r2, #2
 8009812:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f85c 	bl	80098d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009820:	e03f      	b.n	80098a2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009826:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00e      	beq.n	800984c <HAL_UART_IRQHandler+0x570>
 800982e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d008      	beq.n	800984c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009842:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 ffe3 	bl	800a810 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800984a:	e02d      	b.n	80098a8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800984c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00e      	beq.n	8009876 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800985c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009860:	2b00      	cmp	r3, #0
 8009862:	d008      	beq.n	8009876 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009868:	2b00      	cmp	r3, #0
 800986a:	d01c      	beq.n	80098a6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	4798      	blx	r3
    }
    return;
 8009874:	e017      	b.n	80098a6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800987a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800987e:	2b00      	cmp	r3, #0
 8009880:	d012      	beq.n	80098a8 <HAL_UART_IRQHandler+0x5cc>
 8009882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00c      	beq.n	80098a8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fdd8 	bl	800a444 <UART_EndTransmit_IT>
    return;
 8009894:	e008      	b.n	80098a8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8009896:	bf00      	nop
 8009898:	e006      	b.n	80098a8 <HAL_UART_IRQHandler+0x5cc>
    return;
 800989a:	bf00      	nop
 800989c:	e004      	b.n	80098a8 <HAL_UART_IRQHandler+0x5cc>
      return;
 800989e:	bf00      	nop
 80098a0:	e002      	b.n	80098a8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80098a2:	bf00      	nop
 80098a4:	e000      	b.n	80098a8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80098a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80098a8:	37e8      	adds	r7, #232	@ 0xe8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop

080098b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	460b      	mov	r3, r1
 80098e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098f4:	b08a      	sub	sp, #40	@ 0x28
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098fa:	2300      	movs	r3, #0
 80098fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	689a      	ldr	r2, [r3, #8]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	431a      	orrs	r2, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	431a      	orrs	r2, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	69db      	ldr	r3, [r3, #28]
 8009914:	4313      	orrs	r3, r2
 8009916:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	4ba4      	ldr	r3, [pc, #656]	@ (8009bb0 <UART_SetConfig+0x2c0>)
 8009920:	4013      	ands	r3, r2
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	6812      	ldr	r2, [r2, #0]
 8009926:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009928:	430b      	orrs	r3, r1
 800992a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	430a      	orrs	r2, r1
 8009940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a99      	ldr	r2, [pc, #612]	@ (8009bb4 <UART_SetConfig+0x2c4>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d004      	beq.n	800995c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009958:	4313      	orrs	r3, r2
 800995a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800996c:	430a      	orrs	r2, r1
 800996e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a90      	ldr	r2, [pc, #576]	@ (8009bb8 <UART_SetConfig+0x2c8>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d126      	bne.n	80099c8 <UART_SetConfig+0xd8>
 800997a:	4b90      	ldr	r3, [pc, #576]	@ (8009bbc <UART_SetConfig+0x2cc>)
 800997c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009980:	f003 0303 	and.w	r3, r3, #3
 8009984:	2b03      	cmp	r3, #3
 8009986:	d81b      	bhi.n	80099c0 <UART_SetConfig+0xd0>
 8009988:	a201      	add	r2, pc, #4	@ (adr r2, 8009990 <UART_SetConfig+0xa0>)
 800998a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998e:	bf00      	nop
 8009990:	080099a1 	.word	0x080099a1
 8009994:	080099b1 	.word	0x080099b1
 8009998:	080099a9 	.word	0x080099a9
 800999c:	080099b9 	.word	0x080099b9
 80099a0:	2301      	movs	r3, #1
 80099a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099a6:	e116      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 80099a8:	2302      	movs	r3, #2
 80099aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099ae:	e112      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 80099b0:	2304      	movs	r3, #4
 80099b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099b6:	e10e      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 80099b8:	2308      	movs	r3, #8
 80099ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099be:	e10a      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 80099c0:	2310      	movs	r3, #16
 80099c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80099c6:	e106      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a7c      	ldr	r2, [pc, #496]	@ (8009bc0 <UART_SetConfig+0x2d0>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d138      	bne.n	8009a44 <UART_SetConfig+0x154>
 80099d2:	4b7a      	ldr	r3, [pc, #488]	@ (8009bbc <UART_SetConfig+0x2cc>)
 80099d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099d8:	f003 030c 	and.w	r3, r3, #12
 80099dc:	2b0c      	cmp	r3, #12
 80099de:	d82d      	bhi.n	8009a3c <UART_SetConfig+0x14c>
 80099e0:	a201      	add	r2, pc, #4	@ (adr r2, 80099e8 <UART_SetConfig+0xf8>)
 80099e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e6:	bf00      	nop
 80099e8:	08009a1d 	.word	0x08009a1d
 80099ec:	08009a3d 	.word	0x08009a3d
 80099f0:	08009a3d 	.word	0x08009a3d
 80099f4:	08009a3d 	.word	0x08009a3d
 80099f8:	08009a2d 	.word	0x08009a2d
 80099fc:	08009a3d 	.word	0x08009a3d
 8009a00:	08009a3d 	.word	0x08009a3d
 8009a04:	08009a3d 	.word	0x08009a3d
 8009a08:	08009a25 	.word	0x08009a25
 8009a0c:	08009a3d 	.word	0x08009a3d
 8009a10:	08009a3d 	.word	0x08009a3d
 8009a14:	08009a3d 	.word	0x08009a3d
 8009a18:	08009a35 	.word	0x08009a35
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a22:	e0d8      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009a24:	2302      	movs	r3, #2
 8009a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a2a:	e0d4      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009a2c:	2304      	movs	r3, #4
 8009a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a32:	e0d0      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009a34:	2308      	movs	r3, #8
 8009a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a3a:	e0cc      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009a3c:	2310      	movs	r3, #16
 8009a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a42:	e0c8      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a5e      	ldr	r2, [pc, #376]	@ (8009bc4 <UART_SetConfig+0x2d4>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d125      	bne.n	8009a9a <UART_SetConfig+0x1aa>
 8009a4e:	4b5b      	ldr	r3, [pc, #364]	@ (8009bbc <UART_SetConfig+0x2cc>)
 8009a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009a58:	2b30      	cmp	r3, #48	@ 0x30
 8009a5a:	d016      	beq.n	8009a8a <UART_SetConfig+0x19a>
 8009a5c:	2b30      	cmp	r3, #48	@ 0x30
 8009a5e:	d818      	bhi.n	8009a92 <UART_SetConfig+0x1a2>
 8009a60:	2b20      	cmp	r3, #32
 8009a62:	d00a      	beq.n	8009a7a <UART_SetConfig+0x18a>
 8009a64:	2b20      	cmp	r3, #32
 8009a66:	d814      	bhi.n	8009a92 <UART_SetConfig+0x1a2>
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d002      	beq.n	8009a72 <UART_SetConfig+0x182>
 8009a6c:	2b10      	cmp	r3, #16
 8009a6e:	d008      	beq.n	8009a82 <UART_SetConfig+0x192>
 8009a70:	e00f      	b.n	8009a92 <UART_SetConfig+0x1a2>
 8009a72:	2300      	movs	r3, #0
 8009a74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a78:	e0ad      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a80:	e0a9      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009a82:	2304      	movs	r3, #4
 8009a84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a88:	e0a5      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009a8a:	2308      	movs	r3, #8
 8009a8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a90:	e0a1      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009a92:	2310      	movs	r3, #16
 8009a94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009a98:	e09d      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a4a      	ldr	r2, [pc, #296]	@ (8009bc8 <UART_SetConfig+0x2d8>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d125      	bne.n	8009af0 <UART_SetConfig+0x200>
 8009aa4:	4b45      	ldr	r3, [pc, #276]	@ (8009bbc <UART_SetConfig+0x2cc>)
 8009aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aaa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009aae:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ab0:	d016      	beq.n	8009ae0 <UART_SetConfig+0x1f0>
 8009ab2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ab4:	d818      	bhi.n	8009ae8 <UART_SetConfig+0x1f8>
 8009ab6:	2b80      	cmp	r3, #128	@ 0x80
 8009ab8:	d00a      	beq.n	8009ad0 <UART_SetConfig+0x1e0>
 8009aba:	2b80      	cmp	r3, #128	@ 0x80
 8009abc:	d814      	bhi.n	8009ae8 <UART_SetConfig+0x1f8>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d002      	beq.n	8009ac8 <UART_SetConfig+0x1d8>
 8009ac2:	2b40      	cmp	r3, #64	@ 0x40
 8009ac4:	d008      	beq.n	8009ad8 <UART_SetConfig+0x1e8>
 8009ac6:	e00f      	b.n	8009ae8 <UART_SetConfig+0x1f8>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ace:	e082      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009ad0:	2302      	movs	r3, #2
 8009ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ad6:	e07e      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009ad8:	2304      	movs	r3, #4
 8009ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ade:	e07a      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009ae0:	2308      	movs	r3, #8
 8009ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ae6:	e076      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009ae8:	2310      	movs	r3, #16
 8009aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009aee:	e072      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a35      	ldr	r2, [pc, #212]	@ (8009bcc <UART_SetConfig+0x2dc>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d12a      	bne.n	8009b50 <UART_SetConfig+0x260>
 8009afa:	4b30      	ldr	r3, [pc, #192]	@ (8009bbc <UART_SetConfig+0x2cc>)
 8009afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b08:	d01a      	beq.n	8009b40 <UART_SetConfig+0x250>
 8009b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b0e:	d81b      	bhi.n	8009b48 <UART_SetConfig+0x258>
 8009b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b14:	d00c      	beq.n	8009b30 <UART_SetConfig+0x240>
 8009b16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b1a:	d815      	bhi.n	8009b48 <UART_SetConfig+0x258>
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d003      	beq.n	8009b28 <UART_SetConfig+0x238>
 8009b20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b24:	d008      	beq.n	8009b38 <UART_SetConfig+0x248>
 8009b26:	e00f      	b.n	8009b48 <UART_SetConfig+0x258>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b2e:	e052      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009b30:	2302      	movs	r3, #2
 8009b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b36:	e04e      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009b38:	2304      	movs	r3, #4
 8009b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b3e:	e04a      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009b40:	2308      	movs	r3, #8
 8009b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b46:	e046      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009b48:	2310      	movs	r3, #16
 8009b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b4e:	e042      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a17      	ldr	r2, [pc, #92]	@ (8009bb4 <UART_SetConfig+0x2c4>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d13a      	bne.n	8009bd0 <UART_SetConfig+0x2e0>
 8009b5a:	4b18      	ldr	r3, [pc, #96]	@ (8009bbc <UART_SetConfig+0x2cc>)
 8009b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009b64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b68:	d01a      	beq.n	8009ba0 <UART_SetConfig+0x2b0>
 8009b6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b6e:	d81b      	bhi.n	8009ba8 <UART_SetConfig+0x2b8>
 8009b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b74:	d00c      	beq.n	8009b90 <UART_SetConfig+0x2a0>
 8009b76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b7a:	d815      	bhi.n	8009ba8 <UART_SetConfig+0x2b8>
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d003      	beq.n	8009b88 <UART_SetConfig+0x298>
 8009b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b84:	d008      	beq.n	8009b98 <UART_SetConfig+0x2a8>
 8009b86:	e00f      	b.n	8009ba8 <UART_SetConfig+0x2b8>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b8e:	e022      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009b90:	2302      	movs	r3, #2
 8009b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b96:	e01e      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009b98:	2304      	movs	r3, #4
 8009b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b9e:	e01a      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009ba0:	2308      	movs	r3, #8
 8009ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ba6:	e016      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009ba8:	2310      	movs	r3, #16
 8009baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009bae:	e012      	b.n	8009bd6 <UART_SetConfig+0x2e6>
 8009bb0:	efff69f3 	.word	0xefff69f3
 8009bb4:	40008000 	.word	0x40008000
 8009bb8:	40013800 	.word	0x40013800
 8009bbc:	40021000 	.word	0x40021000
 8009bc0:	40004400 	.word	0x40004400
 8009bc4:	40004800 	.word	0x40004800
 8009bc8:	40004c00 	.word	0x40004c00
 8009bcc:	40005000 	.word	0x40005000
 8009bd0:	2310      	movs	r3, #16
 8009bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a9f      	ldr	r2, [pc, #636]	@ (8009e58 <UART_SetConfig+0x568>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d17a      	bne.n	8009cd6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009be0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009be4:	2b08      	cmp	r3, #8
 8009be6:	d824      	bhi.n	8009c32 <UART_SetConfig+0x342>
 8009be8:	a201      	add	r2, pc, #4	@ (adr r2, 8009bf0 <UART_SetConfig+0x300>)
 8009bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bee:	bf00      	nop
 8009bf0:	08009c15 	.word	0x08009c15
 8009bf4:	08009c33 	.word	0x08009c33
 8009bf8:	08009c1d 	.word	0x08009c1d
 8009bfc:	08009c33 	.word	0x08009c33
 8009c00:	08009c23 	.word	0x08009c23
 8009c04:	08009c33 	.word	0x08009c33
 8009c08:	08009c33 	.word	0x08009c33
 8009c0c:	08009c33 	.word	0x08009c33
 8009c10:	08009c2b 	.word	0x08009c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c14:	f7fb ff7c 	bl	8005b10 <HAL_RCC_GetPCLK1Freq>
 8009c18:	61f8      	str	r0, [r7, #28]
        break;
 8009c1a:	e010      	b.n	8009c3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c1c:	4b8f      	ldr	r3, [pc, #572]	@ (8009e5c <UART_SetConfig+0x56c>)
 8009c1e:	61fb      	str	r3, [r7, #28]
        break;
 8009c20:	e00d      	b.n	8009c3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c22:	f7fb fedd 	bl	80059e0 <HAL_RCC_GetSysClockFreq>
 8009c26:	61f8      	str	r0, [r7, #28]
        break;
 8009c28:	e009      	b.n	8009c3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c2e:	61fb      	str	r3, [r7, #28]
        break;
 8009c30:	e005      	b.n	8009c3e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009c32:	2300      	movs	r3, #0
 8009c34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009c3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f000 80fb 	beq.w	8009e3c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	685a      	ldr	r2, [r3, #4]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	005b      	lsls	r3, r3, #1
 8009c4e:	4413      	add	r3, r2
 8009c50:	69fa      	ldr	r2, [r7, #28]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d305      	bcc.n	8009c62 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009c5c:	69fa      	ldr	r2, [r7, #28]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d903      	bls.n	8009c6a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009c68:	e0e8      	b.n	8009e3c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	461c      	mov	r4, r3
 8009c70:	4615      	mov	r5, r2
 8009c72:	f04f 0200 	mov.w	r2, #0
 8009c76:	f04f 0300 	mov.w	r3, #0
 8009c7a:	022b      	lsls	r3, r5, #8
 8009c7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009c80:	0222      	lsls	r2, r4, #8
 8009c82:	68f9      	ldr	r1, [r7, #12]
 8009c84:	6849      	ldr	r1, [r1, #4]
 8009c86:	0849      	lsrs	r1, r1, #1
 8009c88:	2000      	movs	r0, #0
 8009c8a:	4688      	mov	r8, r1
 8009c8c:	4681      	mov	r9, r0
 8009c8e:	eb12 0a08 	adds.w	sl, r2, r8
 8009c92:	eb43 0b09 	adc.w	fp, r3, r9
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	603b      	str	r3, [r7, #0]
 8009c9e:	607a      	str	r2, [r7, #4]
 8009ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ca4:	4650      	mov	r0, sl
 8009ca6:	4659      	mov	r1, fp
 8009ca8:	f7f6 ffd6 	bl	8000c58 <__aeabi_uldivmod>
 8009cac:	4602      	mov	r2, r0
 8009cae:	460b      	mov	r3, r1
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cba:	d308      	bcc.n	8009cce <UART_SetConfig+0x3de>
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cc2:	d204      	bcs.n	8009cce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	69ba      	ldr	r2, [r7, #24]
 8009cca:	60da      	str	r2, [r3, #12]
 8009ccc:	e0b6      	b.n	8009e3c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009cd4:	e0b2      	b.n	8009e3c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cde:	d15e      	bne.n	8009d9e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009ce0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009ce4:	2b08      	cmp	r3, #8
 8009ce6:	d828      	bhi.n	8009d3a <UART_SetConfig+0x44a>
 8009ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf0 <UART_SetConfig+0x400>)
 8009cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cee:	bf00      	nop
 8009cf0:	08009d15 	.word	0x08009d15
 8009cf4:	08009d1d 	.word	0x08009d1d
 8009cf8:	08009d25 	.word	0x08009d25
 8009cfc:	08009d3b 	.word	0x08009d3b
 8009d00:	08009d2b 	.word	0x08009d2b
 8009d04:	08009d3b 	.word	0x08009d3b
 8009d08:	08009d3b 	.word	0x08009d3b
 8009d0c:	08009d3b 	.word	0x08009d3b
 8009d10:	08009d33 	.word	0x08009d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d14:	f7fb fefc 	bl	8005b10 <HAL_RCC_GetPCLK1Freq>
 8009d18:	61f8      	str	r0, [r7, #28]
        break;
 8009d1a:	e014      	b.n	8009d46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d1c:	f7fb ff0e 	bl	8005b3c <HAL_RCC_GetPCLK2Freq>
 8009d20:	61f8      	str	r0, [r7, #28]
        break;
 8009d22:	e010      	b.n	8009d46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d24:	4b4d      	ldr	r3, [pc, #308]	@ (8009e5c <UART_SetConfig+0x56c>)
 8009d26:	61fb      	str	r3, [r7, #28]
        break;
 8009d28:	e00d      	b.n	8009d46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d2a:	f7fb fe59 	bl	80059e0 <HAL_RCC_GetSysClockFreq>
 8009d2e:	61f8      	str	r0, [r7, #28]
        break;
 8009d30:	e009      	b.n	8009d46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d36:	61fb      	str	r3, [r7, #28]
        break;
 8009d38:	e005      	b.n	8009d46 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009d44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d077      	beq.n	8009e3c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	005a      	lsls	r2, r3, #1
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	085b      	lsrs	r3, r3, #1
 8009d56:	441a      	add	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	2b0f      	cmp	r3, #15
 8009d66:	d916      	bls.n	8009d96 <UART_SetConfig+0x4a6>
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d6e:	d212      	bcs.n	8009d96 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	f023 030f 	bic.w	r3, r3, #15
 8009d78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	085b      	lsrs	r3, r3, #1
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	f003 0307 	and.w	r3, r3, #7
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	8afb      	ldrh	r3, [r7, #22]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	8afa      	ldrh	r2, [r7, #22]
 8009d92:	60da      	str	r2, [r3, #12]
 8009d94:	e052      	b.n	8009e3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009d9c:	e04e      	b.n	8009e3c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009da2:	2b08      	cmp	r3, #8
 8009da4:	d827      	bhi.n	8009df6 <UART_SetConfig+0x506>
 8009da6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dac <UART_SetConfig+0x4bc>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009dd1 	.word	0x08009dd1
 8009db0:	08009dd9 	.word	0x08009dd9
 8009db4:	08009de1 	.word	0x08009de1
 8009db8:	08009df7 	.word	0x08009df7
 8009dbc:	08009de7 	.word	0x08009de7
 8009dc0:	08009df7 	.word	0x08009df7
 8009dc4:	08009df7 	.word	0x08009df7
 8009dc8:	08009df7 	.word	0x08009df7
 8009dcc:	08009def 	.word	0x08009def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dd0:	f7fb fe9e 	bl	8005b10 <HAL_RCC_GetPCLK1Freq>
 8009dd4:	61f8      	str	r0, [r7, #28]
        break;
 8009dd6:	e014      	b.n	8009e02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dd8:	f7fb feb0 	bl	8005b3c <HAL_RCC_GetPCLK2Freq>
 8009ddc:	61f8      	str	r0, [r7, #28]
        break;
 8009dde:	e010      	b.n	8009e02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009de0:	4b1e      	ldr	r3, [pc, #120]	@ (8009e5c <UART_SetConfig+0x56c>)
 8009de2:	61fb      	str	r3, [r7, #28]
        break;
 8009de4:	e00d      	b.n	8009e02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009de6:	f7fb fdfb 	bl	80059e0 <HAL_RCC_GetSysClockFreq>
 8009dea:	61f8      	str	r0, [r7, #28]
        break;
 8009dec:	e009      	b.n	8009e02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009df2:	61fb      	str	r3, [r7, #28]
        break;
 8009df4:	e005      	b.n	8009e02 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009df6:	2300      	movs	r3, #0
 8009df8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009e00:	bf00      	nop
    }

    if (pclk != 0U)
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d019      	beq.n	8009e3c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	085a      	lsrs	r2, r3, #1
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	441a      	add	r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	2b0f      	cmp	r3, #15
 8009e20:	d909      	bls.n	8009e36 <UART_SetConfig+0x546>
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e28:	d205      	bcs.n	8009e36 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	60da      	str	r2, [r3, #12]
 8009e34:	e002      	b.n	8009e3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009e48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3728      	adds	r7, #40	@ 0x28
 8009e50:	46bd      	mov	sp, r7
 8009e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e56:	bf00      	nop
 8009e58:	40008000 	.word	0x40008000
 8009e5c:	00f42400 	.word	0x00f42400

08009e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e6c:	f003 0308 	and.w	r3, r3, #8
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00a      	beq.n	8009e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	430a      	orrs	r2, r1
 8009e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00a      	beq.n	8009eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	430a      	orrs	r2, r1
 8009eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb0:	f003 0302 	and.w	r3, r3, #2
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00a      	beq.n	8009ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed2:	f003 0304 	and.w	r3, r3, #4
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00a      	beq.n	8009ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	430a      	orrs	r2, r1
 8009eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ef4:	f003 0310 	and.w	r3, r3, #16
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00a      	beq.n	8009f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f16:	f003 0320 	and.w	r3, r3, #32
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00a      	beq.n	8009f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	430a      	orrs	r2, r1
 8009f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d01a      	beq.n	8009f76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	430a      	orrs	r2, r1
 8009f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f5e:	d10a      	bne.n	8009f76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	430a      	orrs	r2, r1
 8009f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00a      	beq.n	8009f98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	430a      	orrs	r2, r1
 8009f96:	605a      	str	r2, [r3, #4]
  }
}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b098      	sub	sp, #96	@ 0x60
 8009fa8:	af02      	add	r7, sp, #8
 8009faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fb4:	f7f8 fade 	bl	8002574 <HAL_GetTick>
 8009fb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f003 0308 	and.w	r3, r3, #8
 8009fc4:	2b08      	cmp	r3, #8
 8009fc6:	d12e      	bne.n	800a026 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f88c 	bl	800a0f4 <UART_WaitOnFlagUntilTimeout>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d021      	beq.n	800a026 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fea:	e853 3f00 	ldrex	r3, [r3]
 8009fee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ff2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ff6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a000:	647b      	str	r3, [r7, #68]	@ 0x44
 800a002:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a004:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a006:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a008:	e841 2300 	strex	r3, r2, [r1]
 800a00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a00e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1e6      	bne.n	8009fe2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2220      	movs	r2, #32
 800a018:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a022:	2303      	movs	r3, #3
 800a024:	e062      	b.n	800a0ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 0304 	and.w	r3, r3, #4
 800a030:	2b04      	cmp	r3, #4
 800a032:	d149      	bne.n	800a0c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a034:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a03c:	2200      	movs	r2, #0
 800a03e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f856 	bl	800a0f4 <UART_WaitOnFlagUntilTimeout>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d03c      	beq.n	800a0c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a056:	e853 3f00 	ldrex	r3, [r3]
 800a05a:	623b      	str	r3, [r7, #32]
   return(result);
 800a05c:	6a3b      	ldr	r3, [r7, #32]
 800a05e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a062:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	461a      	mov	r2, r3
 800a06a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a06c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a06e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a070:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a074:	e841 2300 	strex	r3, r2, [r1]
 800a078:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1e6      	bne.n	800a04e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	3308      	adds	r3, #8
 800a086:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	e853 3f00 	ldrex	r3, [r3]
 800a08e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f023 0301 	bic.w	r3, r3, #1
 800a096:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3308      	adds	r3, #8
 800a09e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0a0:	61fa      	str	r2, [r7, #28]
 800a0a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a4:	69b9      	ldr	r1, [r7, #24]
 800a0a6:	69fa      	ldr	r2, [r7, #28]
 800a0a8:	e841 2300 	strex	r3, r2, [r1]
 800a0ac:	617b      	str	r3, [r7, #20]
   return(result);
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1e5      	bne.n	800a080 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	e011      	b.n	800a0ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2220      	movs	r2, #32
 800a0cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2220      	movs	r2, #32
 800a0d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3758      	adds	r7, #88	@ 0x58
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	603b      	str	r3, [r7, #0]
 800a100:	4613      	mov	r3, r2
 800a102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a104:	e049      	b.n	800a19a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a10c:	d045      	beq.n	800a19a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a10e:	f7f8 fa31 	bl	8002574 <HAL_GetTick>
 800a112:	4602      	mov	r2, r0
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	69ba      	ldr	r2, [r7, #24]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d302      	bcc.n	800a124 <UART_WaitOnFlagUntilTimeout+0x30>
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d101      	bne.n	800a128 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a124:	2303      	movs	r3, #3
 800a126:	e048      	b.n	800a1ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f003 0304 	and.w	r3, r3, #4
 800a132:	2b00      	cmp	r3, #0
 800a134:	d031      	beq.n	800a19a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	69db      	ldr	r3, [r3, #28]
 800a13c:	f003 0308 	and.w	r3, r3, #8
 800a140:	2b08      	cmp	r3, #8
 800a142:	d110      	bne.n	800a166 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2208      	movs	r2, #8
 800a14a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f000 f8ff 	bl	800a350 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2208      	movs	r2, #8
 800a156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e029      	b.n	800a1ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	69db      	ldr	r3, [r3, #28]
 800a16c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a174:	d111      	bne.n	800a19a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a17e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f000 f8e5 	bl	800a350 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2220      	movs	r2, #32
 800a18a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2200      	movs	r2, #0
 800a192:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a196:	2303      	movs	r3, #3
 800a198:	e00f      	b.n	800a1ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	69da      	ldr	r2, [r3, #28]
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	4013      	ands	r3, r2
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	bf0c      	ite	eq
 800a1aa:	2301      	moveq	r3, #1
 800a1ac:	2300      	movne	r3, #0
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	79fb      	ldrb	r3, [r7, #7]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d0a6      	beq.n	800a106 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
	...

0800a1c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b097      	sub	sp, #92	@ 0x5c
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	88fa      	ldrh	r2, [r7, #6]
 800a1dc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	88fa      	ldrh	r2, [r7, #6]
 800a1e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1f6:	d10e      	bne.n	800a216 <UART_Start_Receive_IT+0x52>
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d105      	bne.n	800a20c <UART_Start_Receive_IT+0x48>
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a206:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a20a:	e02d      	b.n	800a268 <UART_Start_Receive_IT+0xa4>
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	22ff      	movs	r2, #255	@ 0xff
 800a210:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a214:	e028      	b.n	800a268 <UART_Start_Receive_IT+0xa4>
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10d      	bne.n	800a23a <UART_Start_Receive_IT+0x76>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d104      	bne.n	800a230 <UART_Start_Receive_IT+0x6c>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	22ff      	movs	r2, #255	@ 0xff
 800a22a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a22e:	e01b      	b.n	800a268 <UART_Start_Receive_IT+0xa4>
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	227f      	movs	r2, #127	@ 0x7f
 800a234:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a238:	e016      	b.n	800a268 <UART_Start_Receive_IT+0xa4>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a242:	d10d      	bne.n	800a260 <UART_Start_Receive_IT+0x9c>
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d104      	bne.n	800a256 <UART_Start_Receive_IT+0x92>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	227f      	movs	r2, #127	@ 0x7f
 800a250:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a254:	e008      	b.n	800a268 <UART_Start_Receive_IT+0xa4>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	223f      	movs	r2, #63	@ 0x3f
 800a25a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a25e:	e003      	b.n	800a268 <UART_Start_Receive_IT+0xa4>
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2200      	movs	r2, #0
 800a264:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2222      	movs	r2, #34	@ 0x22
 800a274:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3308      	adds	r3, #8
 800a27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a282:	e853 3f00 	ldrex	r3, [r3]
 800a286:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28a:	f043 0301 	orr.w	r3, r3, #1
 800a28e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3308      	adds	r3, #8
 800a296:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a298:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a29a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a29e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2a0:	e841 2300 	strex	r3, r2, [r1]
 800a2a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a2a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e5      	bne.n	800a278 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2b4:	d107      	bne.n	800a2c6 <UART_Start_Receive_IT+0x102>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d103      	bne.n	800a2c6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	4a21      	ldr	r2, [pc, #132]	@ (800a348 <UART_Start_Receive_IT+0x184>)
 800a2c2:	669a      	str	r2, [r3, #104]	@ 0x68
 800a2c4:	e002      	b.n	800a2cc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	4a20      	ldr	r2, [pc, #128]	@ (800a34c <UART_Start_Receive_IT+0x188>)
 800a2ca:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d019      	beq.n	800a308 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2dc:	e853 3f00 	ldrex	r3, [r3]
 800a2e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a2e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2f4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a2f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2fa:	e841 2300 	strex	r3, r2, [r1]
 800a2fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1e6      	bne.n	800a2d4 <UART_Start_Receive_IT+0x110>
 800a306:	e018      	b.n	800a33a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	e853 3f00 	ldrex	r3, [r3]
 800a314:	613b      	str	r3, [r7, #16]
   return(result);
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	f043 0320 	orr.w	r3, r3, #32
 800a31c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a326:	623b      	str	r3, [r7, #32]
 800a328:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32a:	69f9      	ldr	r1, [r7, #28]
 800a32c:	6a3a      	ldr	r2, [r7, #32]
 800a32e:	e841 2300 	strex	r3, r2, [r1]
 800a332:	61bb      	str	r3, [r7, #24]
   return(result);
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1e6      	bne.n	800a308 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	375c      	adds	r7, #92	@ 0x5c
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr
 800a348:	0800a655 	.word	0x0800a655
 800a34c:	0800a499 	.word	0x0800a499

0800a350 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a350:	b480      	push	{r7}
 800a352:	b095      	sub	sp, #84	@ 0x54
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a360:	e853 3f00 	ldrex	r3, [r3]
 800a364:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a368:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a36c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a376:	643b      	str	r3, [r7, #64]	@ 0x40
 800a378:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a37c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a37e:	e841 2300 	strex	r3, r2, [r1]
 800a382:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1e6      	bne.n	800a358 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3308      	adds	r3, #8
 800a390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	e853 3f00 	ldrex	r3, [r3]
 800a398:	61fb      	str	r3, [r7, #28]
   return(result);
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	f023 0301 	bic.w	r3, r3, #1
 800a3a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	3308      	adds	r3, #8
 800a3a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3b2:	e841 2300 	strex	r3, r2, [r1]
 800a3b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1e5      	bne.n	800a38a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d118      	bne.n	800a3f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	e853 3f00 	ldrex	r3, [r3]
 800a3d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	f023 0310 	bic.w	r3, r3, #16
 800a3da:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3e4:	61bb      	str	r3, [r7, #24]
 800a3e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e8:	6979      	ldr	r1, [r7, #20]
 800a3ea:	69ba      	ldr	r2, [r7, #24]
 800a3ec:	e841 2300 	strex	r3, r2, [r1]
 800a3f0:	613b      	str	r3, [r7, #16]
   return(result);
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1e6      	bne.n	800a3c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2220      	movs	r2, #32
 800a3fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a40c:	bf00      	nop
 800a40e:	3754      	adds	r7, #84	@ 0x54
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a424:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f7ff fa44 	bl	80098c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a43c:	bf00      	nop
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b088      	sub	sp, #32
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	e853 3f00 	ldrex	r3, [r3]
 800a458:	60bb      	str	r3, [r7, #8]
   return(result);
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a460:	61fb      	str	r3, [r7, #28]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	461a      	mov	r2, r3
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	61bb      	str	r3, [r7, #24]
 800a46c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46e:	6979      	ldr	r1, [r7, #20]
 800a470:	69ba      	ldr	r2, [r7, #24]
 800a472:	e841 2300 	strex	r3, r2, [r1]
 800a476:	613b      	str	r3, [r7, #16]
   return(result);
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1e6      	bne.n	800a44c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2220      	movs	r2, #32
 800a482:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7ff fa10 	bl	80098b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a490:	bf00      	nop
 800a492:	3720      	adds	r7, #32
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b09c      	sub	sp, #112	@ 0x70
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4b0:	2b22      	cmp	r3, #34	@ 0x22
 800a4b2:	f040 80be 	bne.w	800a632 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a4bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a4c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a4c4:	b2d9      	uxtb	r1, r3
 800a4c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a4ca:	b2da      	uxtb	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4d0:	400a      	ands	r2, r1
 800a4d2:	b2d2      	uxtb	r2, r2
 800a4d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4da:	1c5a      	adds	r2, r3, #1
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f040 80a3 	bne.w	800a646 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a506:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a508:	e853 3f00 	ldrex	r3, [r3]
 800a50c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a50e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a510:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a514:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	461a      	mov	r2, r3
 800a51c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a51e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a520:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a522:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a524:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a526:	e841 2300 	strex	r3, r2, [r1]
 800a52a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a52c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d1e6      	bne.n	800a500 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	3308      	adds	r3, #8
 800a538:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53c:	e853 3f00 	ldrex	r3, [r3]
 800a540:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a544:	f023 0301 	bic.w	r3, r3, #1
 800a548:	667b      	str	r3, [r7, #100]	@ 0x64
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	3308      	adds	r3, #8
 800a550:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a552:	647a      	str	r2, [r7, #68]	@ 0x44
 800a554:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a556:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a558:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a55a:	e841 2300 	strex	r3, r2, [r1]
 800a55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1e5      	bne.n	800a532 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2220      	movs	r2, #32
 800a56a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a34      	ldr	r2, [pc, #208]	@ (800a650 <UART_RxISR_8BIT+0x1b8>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d01f      	beq.n	800a5c4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d018      	beq.n	800a5c4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59a:	e853 3f00 	ldrex	r3, [r3]
 800a59e:	623b      	str	r3, [r7, #32]
   return(result);
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a5a6:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a5b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5b8:	e841 2300 	strex	r3, r2, [r1]
 800a5bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d1e6      	bne.n	800a592 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d12e      	bne.n	800a62a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	e853 3f00 	ldrex	r3, [r3]
 800a5de:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f023 0310 	bic.w	r3, r3, #16
 800a5e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5f0:	61fb      	str	r3, [r7, #28]
 800a5f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f4:	69b9      	ldr	r1, [r7, #24]
 800a5f6:	69fa      	ldr	r2, [r7, #28]
 800a5f8:	e841 2300 	strex	r3, r2, [r1]
 800a5fc:	617b      	str	r3, [r7, #20]
   return(result);
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1e6      	bne.n	800a5d2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	f003 0310 	and.w	r3, r3, #16
 800a60e:	2b10      	cmp	r3, #16
 800a610:	d103      	bne.n	800a61a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2210      	movs	r2, #16
 800a618:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a620:	4619      	mov	r1, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7ff f958 	bl	80098d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a628:	e00d      	b.n	800a646 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f004 fef4 	bl	800f418 <HAL_UART_RxCpltCallback>
}
 800a630:	e009      	b.n	800a646 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	8b1b      	ldrh	r3, [r3, #24]
 800a638:	b29a      	uxth	r2, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f042 0208 	orr.w	r2, r2, #8
 800a642:	b292      	uxth	r2, r2
 800a644:	831a      	strh	r2, [r3, #24]
}
 800a646:	bf00      	nop
 800a648:	3770      	adds	r7, #112	@ 0x70
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	40008000 	.word	0x40008000

0800a654 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b09c      	sub	sp, #112	@ 0x70
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a662:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a66c:	2b22      	cmp	r3, #34	@ 0x22
 800a66e:	f040 80be 	bne.w	800a7ee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a678:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a680:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a682:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a686:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a68a:	4013      	ands	r3, r2
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a690:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a696:	1c9a      	adds	r2, r3, #2
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f040 80a3 	bne.w	800a802 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6c4:	e853 3f00 	ldrex	r3, [r3]
 800a6c8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a6ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6d0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6da:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6dc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a6e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a6e2:	e841 2300 	strex	r3, r2, [r1]
 800a6e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a6e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1e6      	bne.n	800a6bc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	3308      	adds	r3, #8
 800a6f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f8:	e853 3f00 	ldrex	r3, [r3]
 800a6fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a700:	f023 0301 	bic.w	r3, r3, #1
 800a704:	663b      	str	r3, [r7, #96]	@ 0x60
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	3308      	adds	r3, #8
 800a70c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a70e:	643a      	str	r2, [r7, #64]	@ 0x40
 800a710:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a712:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a714:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a716:	e841 2300 	strex	r3, r2, [r1]
 800a71a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1e5      	bne.n	800a6ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2220      	movs	r2, #32
 800a726:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a34      	ldr	r2, [pc, #208]	@ (800a80c <UART_RxISR_16BIT+0x1b8>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d01f      	beq.n	800a780 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d018      	beq.n	800a780 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a754:	6a3b      	ldr	r3, [r7, #32]
 800a756:	e853 3f00 	ldrex	r3, [r3]
 800a75a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a762:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	461a      	mov	r2, r3
 800a76a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a76c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a76e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a770:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a774:	e841 2300 	strex	r3, r2, [r1]
 800a778:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e6      	bne.n	800a74e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a784:	2b01      	cmp	r3, #1
 800a786:	d12e      	bne.n	800a7e6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	e853 3f00 	ldrex	r3, [r3]
 800a79a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	f023 0310 	bic.w	r3, r3, #16
 800a7a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a7ac:	61bb      	str	r3, [r7, #24]
 800a7ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b0:	6979      	ldr	r1, [r7, #20]
 800a7b2:	69ba      	ldr	r2, [r7, #24]
 800a7b4:	e841 2300 	strex	r3, r2, [r1]
 800a7b8:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1e6      	bne.n	800a78e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	69db      	ldr	r3, [r3, #28]
 800a7c6:	f003 0310 	and.w	r3, r3, #16
 800a7ca:	2b10      	cmp	r3, #16
 800a7cc:	d103      	bne.n	800a7d6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2210      	movs	r2, #16
 800a7d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a7dc:	4619      	mov	r1, r3
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7ff f87a 	bl	80098d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a7e4:	e00d      	b.n	800a802 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f004 fe16 	bl	800f418 <HAL_UART_RxCpltCallback>
}
 800a7ec:	e009      	b.n	800a802 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	8b1b      	ldrh	r3, [r3, #24]
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f042 0208 	orr.w	r2, r2, #8
 800a7fe:	b292      	uxth	r2, r2
 800a800:	831a      	strh	r2, [r3, #24]
}
 800a802:	bf00      	nop
 800a804:	3770      	adds	r7, #112	@ 0x70
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	40008000 	.word	0x40008000

0800a810 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a828:	4904      	ldr	r1, [pc, #16]	@ (800a83c <MX_FATFS_Init+0x18>)
 800a82a:	4805      	ldr	r0, [pc, #20]	@ (800a840 <MX_FATFS_Init+0x1c>)
 800a82c:	f000 fa60 	bl	800acf0 <FATFS_LinkDriver>
 800a830:	4603      	mov	r3, r0
 800a832:	461a      	mov	r2, r3
 800a834:	4b03      	ldr	r3, [pc, #12]	@ (800a844 <MX_FATFS_Init+0x20>)
 800a836:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a838:	bf00      	nop
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	20001640 	.word	0x20001640
 800a840:	2000000c 	.word	0x2000000c
 800a844:	2000163c 	.word	0x2000163c

0800a848 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	4603      	mov	r3, r0
 800a850:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800a852:	79fb      	ldrb	r3, [r7, #7]
 800a854:	4618      	mov	r0, r3
 800a856:	f005 ff47 	bl	80106e8 <USER_SPI_initialize>
 800a85a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	4603      	mov	r3, r0
 800a86c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800a86e:	79fb      	ldrb	r3, [r7, #7]
 800a870:	4618      	mov	r0, r3
 800a872:	f006 f823 	bl	80108bc <USER_SPI_status>
 800a876:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	60b9      	str	r1, [r7, #8]
 800a888:	607a      	str	r2, [r7, #4]
 800a88a:	603b      	str	r3, [r7, #0]
 800a88c:	4603      	mov	r3, r0
 800a88e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800a890:	7bf8      	ldrb	r0, [r7, #15]
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	68b9      	ldr	r1, [r7, #8]
 800a898:	f006 f826 	bl	80108e8 <USER_SPI_read>
 800a89c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b084      	sub	sp, #16
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
 800a8b0:	603b      	str	r3, [r7, #0]
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800a8b6:	7bf8      	ldrb	r0, [r7, #15]
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	68b9      	ldr	r1, [r7, #8]
 800a8be:	f006 f879 	bl	80109b4 <USER_SPI_write>
 800a8c2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	603a      	str	r2, [r7, #0]
 800a8d6:	71fb      	strb	r3, [r7, #7]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800a8dc:	79b9      	ldrb	r1, [r7, #6]
 800a8de:	79fb      	ldrb	r3, [r7, #7]
 800a8e0:	683a      	ldr	r2, [r7, #0]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f006 f8e2 	bl	8010aac <USER_SPI_ioctl>
 800a8e8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <FreeRTOS_CLIRegisterCommand>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
    {
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b086      	sub	sp, #24
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFAIL;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	617b      	str	r3, [r7, #20]
        CLI_Definition_List_Item_t * pxNewListItem;

        /* Check the parameter is not NULL. */
        configASSERT( pxCommandToRegister != NULL );
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10b      	bne.n	800a91c <FreeRTOS_CLIRegisterCommand+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a908:	f383 8811 	msr	BASEPRI, r3
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a916:	bf00      	nop
 800a918:	bf00      	nop
 800a91a:	e7fd      	b.n	800a918 <FreeRTOS_CLIRegisterCommand+0x26>

        /* Create a new list item that will reference the command being registered. */
        pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800a91c:	2008      	movs	r0, #8
 800a91e:	f003 fcbd 	bl	800e29c <pvPortMalloc>
 800a922:	6138      	str	r0, [r7, #16]
        configASSERT( pxNewListItem != NULL );
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10b      	bne.n	800a942 <FreeRTOS_CLIRegisterCommand+0x50>
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	60bb      	str	r3, [r7, #8]
}
 800a93c:	bf00      	nop
 800a93e:	bf00      	nop
 800a940:	e7fd      	b.n	800a93e <FreeRTOS_CLIRegisterCommand+0x4c>

        if( pxNewListItem != NULL )
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d005      	beq.n	800a954 <FreeRTOS_CLIRegisterCommand+0x62>
        {
            prvRegisterCommand( pxCommandToRegister, pxNewListItem );
 800a948:	6939      	ldr	r1, [r7, #16]
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f8e8 	bl	800ab20 <prvRegisterCommand>
            xReturn = pdPASS;
 800a950:	2301      	movs	r3, #1
 800a952:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800a954:	697b      	ldr	r3, [r7, #20]
    }
 800a956:	4618      	mov	r0, r3
 800a958:	3718      	adds	r7, #24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
	...

0800a960 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput,
                                       char * pcWriteBuffer,
                                       size_t xWriteBufferLen )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b088      	sub	sp, #32
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn = pdTRUE;
 800a96c:	2301      	movs	r3, #1
 800a96e:	61fb      	str	r3, [r7, #28]
    size_t xCommandStringLength;

    /* Note:  This function is not re-entrant.  It must not be called from more
     * thank one task. */

    if( pxCommand == NULL )
 800a970:	4b3a      	ldr	r3, [pc, #232]	@ (800aa5c <FreeRTOS_CLIProcessCommand+0xfc>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d141      	bne.n	800a9fc <FreeRTOS_CLIProcessCommand+0x9c>
    {
        /* Search for the command string in the list of registered commands. */
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800a978:	4b38      	ldr	r3, [pc, #224]	@ (800aa5c <FreeRTOS_CLIProcessCommand+0xfc>)
 800a97a:	4a39      	ldr	r2, [pc, #228]	@ (800aa60 <FreeRTOS_CLIProcessCommand+0x100>)
 800a97c:	601a      	str	r2, [r3, #0]
 800a97e:	e037      	b.n	800a9f0 <FreeRTOS_CLIProcessCommand+0x90>
        {
            pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800a980:	4b36      	ldr	r3, [pc, #216]	@ (800aa5c <FreeRTOS_CLIProcessCommand+0xfc>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	61bb      	str	r3, [r7, #24]
            xCommandStringLength = strlen( pcRegisteredCommandString );
 800a98a:	69b8      	ldr	r0, [r7, #24]
 800a98c:	f7f5 fc2a 	bl	80001e4 <strlen>
 800a990:	6178      	str	r0, [r7, #20]

            /* To ensure the string lengths match exactly, so as not to pick up
             * a sub-string of a longer command, check the byte after the expected
             * end of the string is either the end of the string or a space before
             * a parameter. */
            if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	69b9      	ldr	r1, [r7, #24]
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f006 feac 	bl	80116f4 <strncmp>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d121      	bne.n	800a9e6 <FreeRTOS_CLIProcessCommand+0x86>
            {
                if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800a9a2:	68fa      	ldr	r2, [r7, #12]
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	2b20      	cmp	r3, #32
 800a9ac:	d005      	beq.n	800a9ba <FreeRTOS_CLIProcessCommand+0x5a>
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d115      	bne.n	800a9e6 <FreeRTOS_CLIProcessCommand+0x86>
                {
                    /* The command has been found.  Check it has the expected
                     * number of parameters.  If cExpectedNumberOfParameters is -1,
                     * then there could be a variable number of parameters and no
                     * check is made. */
                    if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800a9ba:	4b28      	ldr	r3, [pc, #160]	@ (800aa5c <FreeRTOS_CLIProcessCommand+0xfc>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	db18      	blt.n	800a9fa <FreeRTOS_CLIProcessCommand+0x9a>
                    {
                        if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	f000 f911 	bl	800abf0 <prvGetNumberOfParameters>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	4b22      	ldr	r3, [pc, #136]	@ (800aa5c <FreeRTOS_CLIProcessCommand+0xfc>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d00c      	beq.n	800a9fa <FreeRTOS_CLIProcessCommand+0x9a>
                        {
                            xReturn = pdFALSE;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	61fb      	str	r3, [r7, #28]
                        }
                    }

                    break;
 800a9e4:	e009      	b.n	800a9fa <FreeRTOS_CLIProcessCommand+0x9a>
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800a9e6:	4b1d      	ldr	r3, [pc, #116]	@ (800aa5c <FreeRTOS_CLIProcessCommand+0xfc>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	4a1b      	ldr	r2, [pc, #108]	@ (800aa5c <FreeRTOS_CLIProcessCommand+0xfc>)
 800a9ee:	6013      	str	r3, [r2, #0]
 800a9f0:	4b1a      	ldr	r3, [pc, #104]	@ (800aa5c <FreeRTOS_CLIProcessCommand+0xfc>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d1c3      	bne.n	800a980 <FreeRTOS_CLIProcessCommand+0x20>
 800a9f8:	e000      	b.n	800a9fc <FreeRTOS_CLIProcessCommand+0x9c>
                    break;
 800a9fa:	bf00      	nop
                }
            }
        }
    }

    if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800a9fc:	4b17      	ldr	r3, [pc, #92]	@ (800aa5c <FreeRTOS_CLIProcessCommand+0xfc>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00b      	beq.n	800aa1c <FreeRTOS_CLIProcessCommand+0xbc>
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d108      	bne.n	800aa1c <FreeRTOS_CLIProcessCommand+0xbc>
    {
        /* The command was found, but the number of parameters with the command
         * was incorrect. */
        strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	4915      	ldr	r1, [pc, #84]	@ (800aa64 <FreeRTOS_CLIProcessCommand+0x104>)
 800aa0e:	68b8      	ldr	r0, [r7, #8]
 800aa10:	f006 fe82 	bl	8011718 <strncpy>
        pxCommand = NULL;
 800aa14:	4b11      	ldr	r3, [pc, #68]	@ (800aa5c <FreeRTOS_CLIProcessCommand+0xfc>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	601a      	str	r2, [r3, #0]
 800aa1a:	e01a      	b.n	800aa52 <FreeRTOS_CLIProcessCommand+0xf2>
    }
    else if( pxCommand != NULL )
 800aa1c:	4b0f      	ldr	r3, [pc, #60]	@ (800aa5c <FreeRTOS_CLIProcessCommand+0xfc>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00f      	beq.n	800aa44 <FreeRTOS_CLIProcessCommand+0xe4>
    {
        /* Call the callback function that is registered to this command. */
        xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800aa24:	4b0d      	ldr	r3, [pc, #52]	@ (800aa5c <FreeRTOS_CLIProcessCommand+0xfc>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	6879      	ldr	r1, [r7, #4]
 800aa30:	68b8      	ldr	r0, [r7, #8]
 800aa32:	4798      	blx	r3
 800aa34:	61f8      	str	r0, [r7, #28]

        /* If xReturn is pdFALSE, then no further strings will be returned
         * after this one, and	pxCommand can be reset to NULL ready to search
         * for the next entered command. */
        if( xReturn == pdFALSE )
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10a      	bne.n	800aa52 <FreeRTOS_CLIProcessCommand+0xf2>
        {
            pxCommand = NULL;
 800aa3c:	4b07      	ldr	r3, [pc, #28]	@ (800aa5c <FreeRTOS_CLIProcessCommand+0xfc>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	601a      	str	r2, [r3, #0]
 800aa42:	e006      	b.n	800aa52 <FreeRTOS_CLIProcessCommand+0xf2>
        }
    }
    else
    {
        /* pxCommand was NULL, the command was not found. */
        strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	4908      	ldr	r1, [pc, #32]	@ (800aa68 <FreeRTOS_CLIProcessCommand+0x108>)
 800aa48:	68b8      	ldr	r0, [r7, #8]
 800aa4a:	f006 fe65 	bl	8011718 <strncpy>
        xReturn = pdFALSE;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800aa52:	69fb      	ldr	r3, [r7, #28]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3720      	adds	r7, #32
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	20001644 	.word	0x20001644
 800aa60:	20000020 	.word	0x20000020
 800aa64:	08012a48 	.word	0x08012a48
 800aa68:	08012aa0 	.word	0x08012aa0

0800aa6c <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char * FreeRTOS_CLIGetParameter( const char * pcCommandString,
                                       UBaseType_t uxWantedParameter,
                                       BaseType_t * pxParameterStringLength )
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b087      	sub	sp, #28
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	607a      	str	r2, [r7, #4]
    UBaseType_t uxParametersFound = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	617b      	str	r3, [r7, #20]
    const char * pcReturn = NULL;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	613b      	str	r3, [r7, #16]

    *pxParameterStringLength = 0;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	601a      	str	r2, [r3, #0]

    while( uxParametersFound < uxWantedParameter )
 800aa86:	e03b      	b.n	800ab00 <FreeRTOS_CLIGetParameter+0x94>
    {
        /* Index the character pointer past the current word.  If this is the start
         * of the command string then the first word is the command itself. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
        {
            pcCommandString++;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d007      	beq.n	800aaa6 <FreeRTOS_CLIGetParameter+0x3a>
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	2b20      	cmp	r3, #32
 800aa9c:	d1f4      	bne.n	800aa88 <FreeRTOS_CLIGetParameter+0x1c>
        }

        /* Find the start of the next string. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800aa9e:	e002      	b.n	800aaa6 <FreeRTOS_CLIGetParameter+0x3a>
        {
            pcCommandString++;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d003      	beq.n	800aab6 <FreeRTOS_CLIGetParameter+0x4a>
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	2b20      	cmp	r3, #32
 800aab4:	d0f4      	beq.n	800aaa0 <FreeRTOS_CLIGetParameter+0x34>
        }

        /* Was a string found? */
        if( *pcCommandString != 0x00 )
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d025      	beq.n	800ab0a <FreeRTOS_CLIGetParameter+0x9e>
        {
            /* Is this the start of the required parameter? */
            uxParametersFound++;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	3301      	adds	r3, #1
 800aac2:	617b      	str	r3, [r7, #20]

            if( uxParametersFound == uxWantedParameter )
 800aac4:	697a      	ldr	r2, [r7, #20]
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d119      	bne.n	800ab00 <FreeRTOS_CLIGetParameter+0x94>
            {
                /* How long is the parameter? */
                pcReturn = pcCommandString;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	613b      	str	r3, [r7, #16]

                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800aad0:	e007      	b.n	800aae2 <FreeRTOS_CLIGetParameter+0x76>
                {
                    ( *pxParameterStringLength )++;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	1c5a      	adds	r2, r3, #1
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	601a      	str	r2, [r3, #0]
                    pcCommandString++;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	3301      	adds	r3, #1
 800aae0:	60fb      	str	r3, [r7, #12]
                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d003      	beq.n	800aaf2 <FreeRTOS_CLIGetParameter+0x86>
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	2b20      	cmp	r3, #32
 800aaf0:	d1ef      	bne.n	800aad2 <FreeRTOS_CLIGetParameter+0x66>
                }

                if( *pxParameterStringLength == 0 )
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d109      	bne.n	800ab0e <FreeRTOS_CLIGetParameter+0xa2>
                {
                    pcReturn = NULL;
 800aafa:	2300      	movs	r3, #0
 800aafc:	613b      	str	r3, [r7, #16]
                }

                break;
 800aafe:	e006      	b.n	800ab0e <FreeRTOS_CLIGetParameter+0xa2>
    while( uxParametersFound < uxWantedParameter )
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d3c2      	bcc.n	800aa8e <FreeRTOS_CLIGetParameter+0x22>
 800ab08:	e002      	b.n	800ab10 <FreeRTOS_CLIGetParameter+0xa4>
            }
        }
        else
        {
            break;
 800ab0a:	bf00      	nop
 800ab0c:	e000      	b.n	800ab10 <FreeRTOS_CLIGetParameter+0xa4>
                break;
 800ab0e:	bf00      	nop
        }
    }

    return pcReturn;
 800ab10:	693b      	ldr	r3, [r7, #16]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	371c      	adds	r7, #28
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr
	...

0800ab20 <prvRegisterCommand>:
/*-----------------------------------------------------------*/

static void prvRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister,
                                CLI_Definition_List_Item_t * pxCliDefinitionListItemBuffer )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
    static CLI_Definition_List_Item_t * pxLastCommandInList = &xRegisteredCommands;

    /* Check the parameters are not NULL. */
    configASSERT( pxCommandToRegister != NULL );
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10b      	bne.n	800ab48 <prvRegisterCommand+0x28>
	__asm volatile
 800ab30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	60fb      	str	r3, [r7, #12]
}
 800ab42:	bf00      	nop
 800ab44:	bf00      	nop
 800ab46:	e7fd      	b.n	800ab44 <prvRegisterCommand+0x24>
    configASSERT( pxCliDefinitionListItemBuffer != NULL );
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10b      	bne.n	800ab66 <prvRegisterCommand+0x46>
	__asm volatile
 800ab4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	60bb      	str	r3, [r7, #8]
}
 800ab60:	bf00      	nop
 800ab62:	bf00      	nop
 800ab64:	e7fd      	b.n	800ab62 <prvRegisterCommand+0x42>

    taskENTER_CRITICAL();
 800ab66:	f003 fa77 	bl	800e058 <vPortEnterCritical>
    {
        /* Reference the command being registered from the newly created
         * list item. */
        pxCliDefinitionListItemBuffer->pxCommandLineDefinition = pxCommandToRegister;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	601a      	str	r2, [r3, #0]

        /* The new list item will get added to the end of the list, so
         * pxNext has nowhere to point. */
        pxCliDefinitionListItemBuffer->pxNext = NULL;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	2200      	movs	r2, #0
 800ab74:	605a      	str	r2, [r3, #4]

        /* Add the newly created list item to the end of the already existing
         * list. */
        pxLastCommandInList->pxNext = pxCliDefinitionListItemBuffer;
 800ab76:	4b06      	ldr	r3, [pc, #24]	@ (800ab90 <prvRegisterCommand+0x70>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	683a      	ldr	r2, [r7, #0]
 800ab7c:	605a      	str	r2, [r3, #4]

        /* Set the end of list marker to the new list item. */
        pxLastCommandInList = pxCliDefinitionListItemBuffer;
 800ab7e:	4a04      	ldr	r2, [pc, #16]	@ (800ab90 <prvRegisterCommand+0x70>)
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	6013      	str	r3, [r2, #0]
    }
    taskEXIT_CRITICAL();
 800ab84:	f003 fa9a 	bl	800e0bc <vPortExitCritical>
}
 800ab88:	bf00      	nop
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	20000028 	.word	0x20000028

0800ab94 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char * pcWriteBuffer,
                                  size_t xWriteBufferLen,
                                  const char * pcCommandString )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn;

    ( void ) pcCommandString;

    if( pxCommand == NULL )
 800aba0:	4b11      	ldr	r3, [pc, #68]	@ (800abe8 <prvHelpCommand+0x54>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d102      	bne.n	800abae <prvHelpCommand+0x1a>
    {
        /* Reset the pxCommand pointer back to the start of the list. */
        pxCommand = &xRegisteredCommands;
 800aba8:	4b0f      	ldr	r3, [pc, #60]	@ (800abe8 <prvHelpCommand+0x54>)
 800abaa:	4a10      	ldr	r2, [pc, #64]	@ (800abec <prvHelpCommand+0x58>)
 800abac:	601a      	str	r2, [r3, #0]
    }

    /* Return the next command help string, before moving the pointer on to
     * the next command in the list. */
    strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800abae:	4b0e      	ldr	r3, [pc, #56]	@ (800abe8 <prvHelpCommand+0x54>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	68ba      	ldr	r2, [r7, #8]
 800abb8:	4619      	mov	r1, r3
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f006 fdac 	bl	8011718 <strncpy>
    pxCommand = pxCommand->pxNext;
 800abc0:	4b09      	ldr	r3, [pc, #36]	@ (800abe8 <prvHelpCommand+0x54>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	4a08      	ldr	r2, [pc, #32]	@ (800abe8 <prvHelpCommand+0x54>)
 800abc8:	6013      	str	r3, [r2, #0]

    if( pxCommand == NULL )
 800abca:	4b07      	ldr	r3, [pc, #28]	@ (800abe8 <prvHelpCommand+0x54>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d102      	bne.n	800abd8 <prvHelpCommand+0x44>
    {
        /* There are no more commands in the list, so there will be no more
         *  strings to return after this one and pdFALSE should be returned. */
        xReturn = pdFALSE;
 800abd2:	2300      	movs	r3, #0
 800abd4:	617b      	str	r3, [r7, #20]
 800abd6:	e001      	b.n	800abdc <prvHelpCommand+0x48>
    }
    else
    {
        xReturn = pdTRUE;
 800abd8:	2301      	movs	r3, #1
 800abda:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800abdc:	697b      	ldr	r3, [r7, #20]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	20001648 	.word	0x20001648
 800abec:	20000020 	.word	0x20000020

0800abf0 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char * pcCommandString )
{
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
    int8_t cParameters = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	73fb      	strb	r3, [r7, #15]
    BaseType_t xLastCharacterWasSpace = pdFALSE;
 800abfc:	2300      	movs	r3, #0
 800abfe:	60bb      	str	r3, [r7, #8]

    /* Count the number of space delimited words in pcCommandString. */
    while( *pcCommandString != 0x00 )
 800ac00:	e014      	b.n	800ac2c <prvGetNumberOfParameters+0x3c>
    {
        if( ( *pcCommandString ) == ' ' )
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	2b20      	cmp	r3, #32
 800ac08:	d10b      	bne.n	800ac22 <prvGetNumberOfParameters+0x32>
        {
            if( xLastCharacterWasSpace != pdTRUE )
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d00a      	beq.n	800ac26 <prvGetNumberOfParameters+0x36>
            {
                cParameters++;
 800ac10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	3301      	adds	r3, #1
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	73fb      	strb	r3, [r7, #15]
                xLastCharacterWasSpace = pdTRUE;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	60bb      	str	r3, [r7, #8]
 800ac20:	e001      	b.n	800ac26 <prvGetNumberOfParameters+0x36>
            }
        }
        else
        {
            xLastCharacterWasSpace = pdFALSE;
 800ac22:	2300      	movs	r3, #0
 800ac24:	60bb      	str	r3, [r7, #8]
        }

        pcCommandString++;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	607b      	str	r3, [r7, #4]
    while( *pcCommandString != 0x00 )
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1e6      	bne.n	800ac02 <prvGetNumberOfParameters+0x12>
    }

    /* If the command string ended with spaces, then there will have been too
     * many parameters counted. */
    if( xLastCharacterWasSpace == pdTRUE )
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d105      	bne.n	800ac46 <prvGetNumberOfParameters+0x56>
    {
        cParameters--;
 800ac3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	3b01      	subs	r3, #1
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	73fb      	strb	r3, [r7, #15]
    }

    /* The value returned is one less than the number of space delimited words,
     * as the first word should be the command itself. */
    return cParameters;
 800ac46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3714      	adds	r7, #20
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
	...

0800ac58 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b087      	sub	sp, #28
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	4613      	mov	r3, r2
 800ac64:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ac66:	2301      	movs	r3, #1
 800ac68:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ac6e:	4b1f      	ldr	r3, [pc, #124]	@ (800acec <FATFS_LinkDriverEx+0x94>)
 800ac70:	7a5b      	ldrb	r3, [r3, #9]
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d131      	bne.n	800acdc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ac78:	4b1c      	ldr	r3, [pc, #112]	@ (800acec <FATFS_LinkDriverEx+0x94>)
 800ac7a:	7a5b      	ldrb	r3, [r3, #9]
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	461a      	mov	r2, r3
 800ac80:	4b1a      	ldr	r3, [pc, #104]	@ (800acec <FATFS_LinkDriverEx+0x94>)
 800ac82:	2100      	movs	r1, #0
 800ac84:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ac86:	4b19      	ldr	r3, [pc, #100]	@ (800acec <FATFS_LinkDriverEx+0x94>)
 800ac88:	7a5b      	ldrb	r3, [r3, #9]
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	4a17      	ldr	r2, [pc, #92]	@ (800acec <FATFS_LinkDriverEx+0x94>)
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	4413      	add	r3, r2
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ac96:	4b15      	ldr	r3, [pc, #84]	@ (800acec <FATFS_LinkDriverEx+0x94>)
 800ac98:	7a5b      	ldrb	r3, [r3, #9]
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	4b13      	ldr	r3, [pc, #76]	@ (800acec <FATFS_LinkDriverEx+0x94>)
 800aca0:	4413      	add	r3, r2
 800aca2:	79fa      	ldrb	r2, [r7, #7]
 800aca4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aca6:	4b11      	ldr	r3, [pc, #68]	@ (800acec <FATFS_LinkDriverEx+0x94>)
 800aca8:	7a5b      	ldrb	r3, [r3, #9]
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	1c5a      	adds	r2, r3, #1
 800acae:	b2d1      	uxtb	r1, r2
 800acb0:	4a0e      	ldr	r2, [pc, #56]	@ (800acec <FATFS_LinkDriverEx+0x94>)
 800acb2:	7251      	strb	r1, [r2, #9]
 800acb4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800acb6:	7dbb      	ldrb	r3, [r7, #22]
 800acb8:	3330      	adds	r3, #48	@ 0x30
 800acba:	b2da      	uxtb	r2, r3
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	3301      	adds	r3, #1
 800acc4:	223a      	movs	r2, #58	@ 0x3a
 800acc6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	3302      	adds	r3, #2
 800accc:	222f      	movs	r2, #47	@ 0x2f
 800acce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	3303      	adds	r3, #3
 800acd4:	2200      	movs	r2, #0
 800acd6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800acd8:	2300      	movs	r3, #0
 800acda:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800acdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	371c      	adds	r7, #28
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	2000164c 	.word	0x2000164c

0800acf0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800acfa:	2200      	movs	r2, #0
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7ff ffaa 	bl	800ac58 <FATFS_LinkDriverEx>
 800ad04:	4603      	mov	r3, r0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
	...

0800ad10 <__NVIC_SetPriority>:
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	4603      	mov	r3, r0
 800ad18:	6039      	str	r1, [r7, #0]
 800ad1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	db0a      	blt.n	800ad3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	490c      	ldr	r1, [pc, #48]	@ (800ad5c <__NVIC_SetPriority+0x4c>)
 800ad2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad2e:	0112      	lsls	r2, r2, #4
 800ad30:	b2d2      	uxtb	r2, r2
 800ad32:	440b      	add	r3, r1
 800ad34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ad38:	e00a      	b.n	800ad50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	4908      	ldr	r1, [pc, #32]	@ (800ad60 <__NVIC_SetPriority+0x50>)
 800ad40:	79fb      	ldrb	r3, [r7, #7]
 800ad42:	f003 030f 	and.w	r3, r3, #15
 800ad46:	3b04      	subs	r3, #4
 800ad48:	0112      	lsls	r2, r2, #4
 800ad4a:	b2d2      	uxtb	r2, r2
 800ad4c:	440b      	add	r3, r1
 800ad4e:	761a      	strb	r2, [r3, #24]
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	e000e100 	.word	0xe000e100
 800ad60:	e000ed00 	.word	0xe000ed00

0800ad64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ad64:	b580      	push	{r7, lr}
 800ad66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ad68:	4b05      	ldr	r3, [pc, #20]	@ (800ad80 <SysTick_Handler+0x1c>)
 800ad6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ad6c:	f002 fa4a 	bl	800d204 <xTaskGetSchedulerState>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d001      	beq.n	800ad7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ad76:	f003 f9ff 	bl	800e178 <xPortSysTickHandler>
  }
}
 800ad7a:	bf00      	nop
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	e000e010 	.word	0xe000e010

0800ad84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ad84:	b580      	push	{r7, lr}
 800ad86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ad88:	2100      	movs	r1, #0
 800ad8a:	f06f 0004 	mvn.w	r0, #4
 800ad8e:	f7ff ffbf 	bl	800ad10 <__NVIC_SetPriority>
#endif
}
 800ad92:	bf00      	nop
 800ad94:	bd80      	pop	{r7, pc}
	...

0800ad98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad9e:	f3ef 8305 	mrs	r3, IPSR
 800ada2:	603b      	str	r3, [r7, #0]
  return(result);
 800ada4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d003      	beq.n	800adb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800adaa:	f06f 0305 	mvn.w	r3, #5
 800adae:	607b      	str	r3, [r7, #4]
 800adb0:	e00c      	b.n	800adcc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800adb2:	4b0a      	ldr	r3, [pc, #40]	@ (800addc <osKernelInitialize+0x44>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d105      	bne.n	800adc6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800adba:	4b08      	ldr	r3, [pc, #32]	@ (800addc <osKernelInitialize+0x44>)
 800adbc:	2201      	movs	r2, #1
 800adbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800adc0:	2300      	movs	r3, #0
 800adc2:	607b      	str	r3, [r7, #4]
 800adc4:	e002      	b.n	800adcc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800adc6:	f04f 33ff 	mov.w	r3, #4294967295
 800adca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800adcc:	687b      	ldr	r3, [r7, #4]
}
 800adce:	4618      	mov	r0, r3
 800add0:	370c      	adds	r7, #12
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	20001658 	.word	0x20001658

0800ade0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ade6:	f3ef 8305 	mrs	r3, IPSR
 800adea:	603b      	str	r3, [r7, #0]
  return(result);
 800adec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <osKernelStart+0x1a>
    stat = osErrorISR;
 800adf2:	f06f 0305 	mvn.w	r3, #5
 800adf6:	607b      	str	r3, [r7, #4]
 800adf8:	e010      	b.n	800ae1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800adfa:	4b0b      	ldr	r3, [pc, #44]	@ (800ae28 <osKernelStart+0x48>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d109      	bne.n	800ae16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ae02:	f7ff ffbf 	bl	800ad84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ae06:	4b08      	ldr	r3, [pc, #32]	@ (800ae28 <osKernelStart+0x48>)
 800ae08:	2202      	movs	r2, #2
 800ae0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ae0c:	f001 fc24 	bl	800c658 <vTaskStartScheduler>
      stat = osOK;
 800ae10:	2300      	movs	r3, #0
 800ae12:	607b      	str	r3, [r7, #4]
 800ae14:	e002      	b.n	800ae1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ae16:	f04f 33ff 	mov.w	r3, #4294967295
 800ae1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae1c:	687b      	ldr	r3, [r7, #4]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3708      	adds	r7, #8
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	20001658 	.word	0x20001658

0800ae2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b08e      	sub	sp, #56	@ 0x38
 800ae30:	af04      	add	r7, sp, #16
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae3c:	f3ef 8305 	mrs	r3, IPSR
 800ae40:	617b      	str	r3, [r7, #20]
  return(result);
 800ae42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d17e      	bne.n	800af46 <osThreadNew+0x11a>
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d07b      	beq.n	800af46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ae4e:	2340      	movs	r3, #64	@ 0x40
 800ae50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ae52:	2318      	movs	r3, #24
 800ae54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ae56:	2300      	movs	r3, #0
 800ae58:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ae5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d045      	beq.n	800aef2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d002      	beq.n	800ae74 <osThreadNew+0x48>
        name = attr->name;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	699b      	ldr	r3, [r3, #24]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d002      	beq.n	800ae82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d008      	beq.n	800ae9a <osThreadNew+0x6e>
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	2b38      	cmp	r3, #56	@ 0x38
 800ae8c:	d805      	bhi.n	800ae9a <osThreadNew+0x6e>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	f003 0301 	and.w	r3, r3, #1
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <osThreadNew+0x72>
        return (NULL);
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	e054      	b.n	800af48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	695b      	ldr	r3, [r3, #20]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d003      	beq.n	800aeae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	695b      	ldr	r3, [r3, #20]
 800aeaa:	089b      	lsrs	r3, r3, #2
 800aeac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00e      	beq.n	800aed4 <osThreadNew+0xa8>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	2ba7      	cmp	r3, #167	@ 0xa7
 800aebc:	d90a      	bls.n	800aed4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d006      	beq.n	800aed4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	695b      	ldr	r3, [r3, #20]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d002      	beq.n	800aed4 <osThreadNew+0xa8>
        mem = 1;
 800aece:	2301      	movs	r3, #1
 800aed0:	61bb      	str	r3, [r7, #24]
 800aed2:	e010      	b.n	800aef6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10c      	bne.n	800aef6 <osThreadNew+0xca>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d108      	bne.n	800aef6 <osThreadNew+0xca>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d104      	bne.n	800aef6 <osThreadNew+0xca>
          mem = 0;
 800aeec:	2300      	movs	r3, #0
 800aeee:	61bb      	str	r3, [r7, #24]
 800aef0:	e001      	b.n	800aef6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aef2:	2300      	movs	r3, #0
 800aef4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d110      	bne.n	800af1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af04:	9202      	str	r2, [sp, #8]
 800af06:	9301      	str	r3, [sp, #4]
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	6a3a      	ldr	r2, [r7, #32]
 800af10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f001 f944 	bl	800c1a0 <xTaskCreateStatic>
 800af18:	4603      	mov	r3, r0
 800af1a:	613b      	str	r3, [r7, #16]
 800af1c:	e013      	b.n	800af46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d110      	bne.n	800af46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800af24:	6a3b      	ldr	r3, [r7, #32]
 800af26:	b29a      	uxth	r2, r3
 800af28:	f107 0310 	add.w	r3, r7, #16
 800af2c:	9301      	str	r3, [sp, #4]
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f001 f992 	bl	800c260 <xTaskCreate>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d001      	beq.n	800af46 <osThreadNew+0x11a>
            hTask = NULL;
 800af42:	2300      	movs	r3, #0
 800af44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800af46:	693b      	ldr	r3, [r7, #16]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3728      	adds	r7, #40	@ 0x28
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af58:	f3ef 8305 	mrs	r3, IPSR
 800af5c:	60bb      	str	r3, [r7, #8]
  return(result);
 800af5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af60:	2b00      	cmp	r3, #0
 800af62:	d003      	beq.n	800af6c <osDelay+0x1c>
    stat = osErrorISR;
 800af64:	f06f 0305 	mvn.w	r3, #5
 800af68:	60fb      	str	r3, [r7, #12]
 800af6a:	e007      	b.n	800af7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800af6c:	2300      	movs	r3, #0
 800af6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d002      	beq.n	800af7c <osDelay+0x2c>
      vTaskDelay(ticks);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f001 fad0 	bl	800c51c <vTaskDelay>
    }
  }

  return (stat);
 800af7c:	68fb      	ldr	r3, [r7, #12]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3710      	adds	r7, #16
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800af86:	b580      	push	{r7, lr}
 800af88:	b088      	sub	sp, #32
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800af8e:	2300      	movs	r3, #0
 800af90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af92:	f3ef 8305 	mrs	r3, IPSR
 800af96:	60bb      	str	r3, [r7, #8]
  return(result);
 800af98:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d174      	bne.n	800b088 <osMutexNew+0x102>
    if (attr != NULL) {
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d003      	beq.n	800afac <osMutexNew+0x26>
      type = attr->attr_bits;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	61bb      	str	r3, [r7, #24]
 800afaa:	e001      	b.n	800afb0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800afac:	2300      	movs	r3, #0
 800afae:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	f003 0301 	and.w	r3, r3, #1
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d002      	beq.n	800afc0 <osMutexNew+0x3a>
      rmtx = 1U;
 800afba:	2301      	movs	r3, #1
 800afbc:	617b      	str	r3, [r7, #20]
 800afbe:	e001      	b.n	800afc4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800afc0:	2300      	movs	r3, #0
 800afc2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	f003 0308 	and.w	r3, r3, #8
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d15c      	bne.n	800b088 <osMutexNew+0x102>
      mem = -1;
 800afce:	f04f 33ff 	mov.w	r3, #4294967295
 800afd2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d015      	beq.n	800b006 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d006      	beq.n	800aff0 <osMutexNew+0x6a>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	2b4f      	cmp	r3, #79	@ 0x4f
 800afe8:	d902      	bls.n	800aff0 <osMutexNew+0x6a>
          mem = 1;
 800afea:	2301      	movs	r3, #1
 800afec:	613b      	str	r3, [r7, #16]
 800afee:	e00c      	b.n	800b00a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d108      	bne.n	800b00a <osMutexNew+0x84>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d104      	bne.n	800b00a <osMutexNew+0x84>
            mem = 0;
 800b000:	2300      	movs	r3, #0
 800b002:	613b      	str	r3, [r7, #16]
 800b004:	e001      	b.n	800b00a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b006:	2300      	movs	r3, #0
 800b008:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d112      	bne.n	800b036 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d007      	beq.n	800b026 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	4619      	mov	r1, r3
 800b01c:	2004      	movs	r0, #4
 800b01e:	f000 fb20 	bl	800b662 <xQueueCreateMutexStatic>
 800b022:	61f8      	str	r0, [r7, #28]
 800b024:	e016      	b.n	800b054 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	4619      	mov	r1, r3
 800b02c:	2001      	movs	r0, #1
 800b02e:	f000 fb18 	bl	800b662 <xQueueCreateMutexStatic>
 800b032:	61f8      	str	r0, [r7, #28]
 800b034:	e00e      	b.n	800b054 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d10b      	bne.n	800b054 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d004      	beq.n	800b04c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b042:	2004      	movs	r0, #4
 800b044:	f000 faf5 	bl	800b632 <xQueueCreateMutex>
 800b048:	61f8      	str	r0, [r7, #28]
 800b04a:	e003      	b.n	800b054 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b04c:	2001      	movs	r0, #1
 800b04e:	f000 faf0 	bl	800b632 <xQueueCreateMutex>
 800b052:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00c      	beq.n	800b074 <osMutexNew+0xee>
        if (attr != NULL) {
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d003      	beq.n	800b068 <osMutexNew+0xe2>
          name = attr->name;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	60fb      	str	r3, [r7, #12]
 800b066:	e001      	b.n	800b06c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b068:	2300      	movs	r3, #0
 800b06a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b06c:	68f9      	ldr	r1, [r7, #12]
 800b06e:	69f8      	ldr	r0, [r7, #28]
 800b070:	f001 f838 	bl	800c0e4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d006      	beq.n	800b088 <osMutexNew+0x102>
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d003      	beq.n	800b088 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	f043 0301 	orr.w	r3, r3, #1
 800b086:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b088:	69fb      	ldr	r3, [r7, #28]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3720      	adds	r7, #32
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b092:	b580      	push	{r7, lr}
 800b094:	b086      	sub	sp, #24
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
 800b09a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f023 0301 	bic.w	r3, r3, #1
 800b0a2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f003 0301 	and.w	r3, r3, #1
 800b0aa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0b0:	f3ef 8305 	mrs	r3, IPSR
 800b0b4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b0b6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d003      	beq.n	800b0c4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b0bc:	f06f 0305 	mvn.w	r3, #5
 800b0c0:	617b      	str	r3, [r7, #20]
 800b0c2:	e02c      	b.n	800b11e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d103      	bne.n	800b0d2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b0ca:	f06f 0303 	mvn.w	r3, #3
 800b0ce:	617b      	str	r3, [r7, #20]
 800b0d0:	e025      	b.n	800b11e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d011      	beq.n	800b0fc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b0d8:	6839      	ldr	r1, [r7, #0]
 800b0da:	6938      	ldr	r0, [r7, #16]
 800b0dc:	f000 fb11 	bl	800b702 <xQueueTakeMutexRecursive>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d01b      	beq.n	800b11e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d003      	beq.n	800b0f4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b0ec:	f06f 0301 	mvn.w	r3, #1
 800b0f0:	617b      	str	r3, [r7, #20]
 800b0f2:	e014      	b.n	800b11e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b0f4:	f06f 0302 	mvn.w	r3, #2
 800b0f8:	617b      	str	r3, [r7, #20]
 800b0fa:	e010      	b.n	800b11e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b0fc:	6839      	ldr	r1, [r7, #0]
 800b0fe:	6938      	ldr	r0, [r7, #16]
 800b100:	f000 fdb8 	bl	800bc74 <xQueueSemaphoreTake>
 800b104:	4603      	mov	r3, r0
 800b106:	2b01      	cmp	r3, #1
 800b108:	d009      	beq.n	800b11e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d003      	beq.n	800b118 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b110:	f06f 0301 	mvn.w	r3, #1
 800b114:	617b      	str	r3, [r7, #20]
 800b116:	e002      	b.n	800b11e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b118:	f06f 0302 	mvn.w	r3, #2
 800b11c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b11e:	697b      	ldr	r3, [r7, #20]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f023 0301 	bic.w	r3, r3, #1
 800b136:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f003 0301 	and.w	r3, r3, #1
 800b13e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b140:	2300      	movs	r3, #0
 800b142:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b144:	f3ef 8305 	mrs	r3, IPSR
 800b148:	60bb      	str	r3, [r7, #8]
  return(result);
 800b14a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d003      	beq.n	800b158 <osMutexRelease+0x30>
    stat = osErrorISR;
 800b150:	f06f 0305 	mvn.w	r3, #5
 800b154:	617b      	str	r3, [r7, #20]
 800b156:	e01f      	b.n	800b198 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d103      	bne.n	800b166 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b15e:	f06f 0303 	mvn.w	r3, #3
 800b162:	617b      	str	r3, [r7, #20]
 800b164:	e018      	b.n	800b198 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d009      	beq.n	800b180 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b16c:	6938      	ldr	r0, [r7, #16]
 800b16e:	f000 fa93 	bl	800b698 <xQueueGiveMutexRecursive>
 800b172:	4603      	mov	r3, r0
 800b174:	2b01      	cmp	r3, #1
 800b176:	d00f      	beq.n	800b198 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b178:	f06f 0302 	mvn.w	r3, #2
 800b17c:	617b      	str	r3, [r7, #20]
 800b17e:	e00b      	b.n	800b198 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b180:	2300      	movs	r3, #0
 800b182:	2200      	movs	r2, #0
 800b184:	2100      	movs	r1, #0
 800b186:	6938      	ldr	r0, [r7, #16]
 800b188:	f000 faf2 	bl	800b770 <xQueueGenericSend>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d002      	beq.n	800b198 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b192:	f06f 0302 	mvn.w	r3, #2
 800b196:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b198:	697b      	ldr	r3, [r7, #20]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3718      	adds	r7, #24
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
	...

0800b1a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	4a07      	ldr	r2, [pc, #28]	@ (800b1d0 <vApplicationGetIdleTaskMemory+0x2c>)
 800b1b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	4a06      	ldr	r2, [pc, #24]	@ (800b1d4 <vApplicationGetIdleTaskMemory+0x30>)
 800b1ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2240      	movs	r2, #64	@ 0x40
 800b1c0:	601a      	str	r2, [r3, #0]
}
 800b1c2:	bf00      	nop
 800b1c4:	3714      	adds	r7, #20
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	2000165c 	.word	0x2000165c
 800b1d4:	20001704 	.word	0x20001704

0800b1d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	4a07      	ldr	r2, [pc, #28]	@ (800b204 <vApplicationGetTimerTaskMemory+0x2c>)
 800b1e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	4a06      	ldr	r2, [pc, #24]	@ (800b208 <vApplicationGetTimerTaskMemory+0x30>)
 800b1ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2280      	movs	r2, #128	@ 0x80
 800b1f4:	601a      	str	r2, [r3, #0]
}
 800b1f6:	bf00      	nop
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	20001804 	.word	0x20001804
 800b208:	200018ac 	.word	0x200018ac

0800b20c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f103 0208 	add.w	r2, r3, #8
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f04f 32ff 	mov.w	r2, #4294967295
 800b224:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f103 0208 	add.w	r2, r3, #8
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f103 0208 	add.w	r2, r3, #8
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b240:	bf00      	nop
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b25a:	bf00      	nop
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b266:	b480      	push	{r7}
 800b268:	b085      	sub	sp, #20
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	689a      	ldr	r2, [r3, #8]
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	683a      	ldr	r2, [r7, #0]
 800b28a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	683a      	ldr	r2, [r7, #0]
 800b290:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	1c5a      	adds	r2, r3, #1
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	601a      	str	r2, [r3, #0]
}
 800b2a2:	bf00      	nop
 800b2a4:	3714      	adds	r7, #20
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b085      	sub	sp, #20
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
 800b2b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2c4:	d103      	bne.n	800b2ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	e00c      	b.n	800b2e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	3308      	adds	r3, #8
 800b2d2:	60fb      	str	r3, [r7, #12]
 800b2d4:	e002      	b.n	800b2dc <vListInsert+0x2e>
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	60fb      	str	r3, [r7, #12]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	68ba      	ldr	r2, [r7, #8]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d2f6      	bcs.n	800b2d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	683a      	ldr	r2, [r7, #0]
 800b2f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	683a      	ldr	r2, [r7, #0]
 800b302:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	1c5a      	adds	r2, r3, #1
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	601a      	str	r2, [r3, #0]
}
 800b314:	bf00      	nop
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	691b      	ldr	r3, [r3, #16]
 800b32c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	6892      	ldr	r2, [r2, #8]
 800b336:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	6852      	ldr	r2, [r2, #4]
 800b340:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d103      	bne.n	800b354 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	689a      	ldr	r2, [r3, #8]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	1e5a      	subs	r2, r3, #1
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3714      	adds	r7, #20
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d10b      	bne.n	800b3a0 <xQueueGenericReset+0x2c>
	__asm volatile
 800b388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b38c:	f383 8811 	msr	BASEPRI, r3
 800b390:	f3bf 8f6f 	isb	sy
 800b394:	f3bf 8f4f 	dsb	sy
 800b398:	60bb      	str	r3, [r7, #8]
}
 800b39a:	bf00      	nop
 800b39c:	bf00      	nop
 800b39e:	e7fd      	b.n	800b39c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b3a0:	f002 fe5a 	bl	800e058 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3ac:	68f9      	ldr	r1, [r7, #12]
 800b3ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b3b0:	fb01 f303 	mul.w	r3, r1, r3
 800b3b4:	441a      	add	r2, r3
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	68f9      	ldr	r1, [r7, #12]
 800b3d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b3d6:	fb01 f303 	mul.w	r3, r1, r3
 800b3da:	441a      	add	r2, r3
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	22ff      	movs	r2, #255	@ 0xff
 800b3e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	22ff      	movs	r2, #255	@ 0xff
 800b3ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d114      	bne.n	800b420 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	691b      	ldr	r3, [r3, #16]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d01a      	beq.n	800b434 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	3310      	adds	r3, #16
 800b402:	4618      	mov	r0, r3
 800b404:	f001 fc54 	bl	800ccb0 <xTaskRemoveFromEventList>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d012      	beq.n	800b434 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b40e:	4b0d      	ldr	r3, [pc, #52]	@ (800b444 <xQueueGenericReset+0xd0>)
 800b410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b414:	601a      	str	r2, [r3, #0]
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	f3bf 8f6f 	isb	sy
 800b41e:	e009      	b.n	800b434 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	3310      	adds	r3, #16
 800b424:	4618      	mov	r0, r3
 800b426:	f7ff fef1 	bl	800b20c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	3324      	adds	r3, #36	@ 0x24
 800b42e:	4618      	mov	r0, r3
 800b430:	f7ff feec 	bl	800b20c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b434:	f002 fe42 	bl	800e0bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b438:	2301      	movs	r3, #1
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	e000ed04 	.word	0xe000ed04

0800b448 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b08e      	sub	sp, #56	@ 0x38
 800b44c:	af02      	add	r7, sp, #8
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
 800b454:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d10b      	bne.n	800b474 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b45c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b46e:	bf00      	nop
 800b470:	bf00      	nop
 800b472:	e7fd      	b.n	800b470 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10b      	bne.n	800b492 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b48c:	bf00      	nop
 800b48e:	bf00      	nop
 800b490:	e7fd      	b.n	800b48e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <xQueueGenericCreateStatic+0x56>
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d001      	beq.n	800b4a2 <xQueueGenericCreateStatic+0x5a>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e000      	b.n	800b4a4 <xQueueGenericCreateStatic+0x5c>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10b      	bne.n	800b4c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ac:	f383 8811 	msr	BASEPRI, r3
 800b4b0:	f3bf 8f6f 	isb	sy
 800b4b4:	f3bf 8f4f 	dsb	sy
 800b4b8:	623b      	str	r3, [r7, #32]
}
 800b4ba:	bf00      	nop
 800b4bc:	bf00      	nop
 800b4be:	e7fd      	b.n	800b4bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d102      	bne.n	800b4cc <xQueueGenericCreateStatic+0x84>
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <xQueueGenericCreateStatic+0x88>
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e000      	b.n	800b4d2 <xQueueGenericCreateStatic+0x8a>
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10b      	bne.n	800b4ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4da:	f383 8811 	msr	BASEPRI, r3
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	61fb      	str	r3, [r7, #28]
}
 800b4e8:	bf00      	nop
 800b4ea:	bf00      	nop
 800b4ec:	e7fd      	b.n	800b4ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b4ee:	2350      	movs	r3, #80	@ 0x50
 800b4f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	2b50      	cmp	r3, #80	@ 0x50
 800b4f6:	d00b      	beq.n	800b510 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4fc:	f383 8811 	msr	BASEPRI, r3
 800b500:	f3bf 8f6f 	isb	sy
 800b504:	f3bf 8f4f 	dsb	sy
 800b508:	61bb      	str	r3, [r7, #24]
}
 800b50a:	bf00      	nop
 800b50c:	bf00      	nop
 800b50e:	e7fd      	b.n	800b50c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b510:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00d      	beq.n	800b538 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b51e:	2201      	movs	r2, #1
 800b520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b524:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b52a:	9300      	str	r3, [sp, #0]
 800b52c:	4613      	mov	r3, r2
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	68b9      	ldr	r1, [r7, #8]
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f000 f840 	bl	800b5b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3730      	adds	r7, #48	@ 0x30
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b542:	b580      	push	{r7, lr}
 800b544:	b08a      	sub	sp, #40	@ 0x28
 800b546:	af02      	add	r7, sp, #8
 800b548:	60f8      	str	r0, [r7, #12]
 800b54a:	60b9      	str	r1, [r7, #8]
 800b54c:	4613      	mov	r3, r2
 800b54e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d10b      	bne.n	800b56e <xQueueGenericCreate+0x2c>
	__asm volatile
 800b556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b55a:	f383 8811 	msr	BASEPRI, r3
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f3bf 8f4f 	dsb	sy
 800b566:	613b      	str	r3, [r7, #16]
}
 800b568:	bf00      	nop
 800b56a:	bf00      	nop
 800b56c:	e7fd      	b.n	800b56a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	fb02 f303 	mul.w	r3, r2, r3
 800b576:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	3350      	adds	r3, #80	@ 0x50
 800b57c:	4618      	mov	r0, r3
 800b57e:	f002 fe8d 	bl	800e29c <pvPortMalloc>
 800b582:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d011      	beq.n	800b5ae <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	3350      	adds	r3, #80	@ 0x50
 800b592:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	2200      	movs	r2, #0
 800b598:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b59c:	79fa      	ldrb	r2, [r7, #7]
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	697a      	ldr	r2, [r7, #20]
 800b5a6:	68b9      	ldr	r1, [r7, #8]
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f000 f805 	bl	800b5b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b5ae:	69bb      	ldr	r3, [r7, #24]
	}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3720      	adds	r7, #32
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
 800b5c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d103      	bne.n	800b5d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	69ba      	ldr	r2, [r7, #24]
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	e002      	b.n	800b5da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b5e6:	2101      	movs	r1, #1
 800b5e8:	69b8      	ldr	r0, [r7, #24]
 800b5ea:	f7ff fec3 	bl	800b374 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	78fa      	ldrb	r2, [r7, #3]
 800b5f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b5f6:	bf00      	nop
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b082      	sub	sp, #8
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d00e      	beq.n	800b62a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b61e:	2300      	movs	r3, #0
 800b620:	2200      	movs	r2, #0
 800b622:	2100      	movs	r1, #0
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 f8a3 	bl	800b770 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b62a:	bf00      	nop
 800b62c:	3708      	adds	r7, #8
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}

0800b632 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b632:	b580      	push	{r7, lr}
 800b634:	b086      	sub	sp, #24
 800b636:	af00      	add	r7, sp, #0
 800b638:	4603      	mov	r3, r0
 800b63a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b63c:	2301      	movs	r3, #1
 800b63e:	617b      	str	r3, [r7, #20]
 800b640:	2300      	movs	r3, #0
 800b642:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b644:	79fb      	ldrb	r3, [r7, #7]
 800b646:	461a      	mov	r2, r3
 800b648:	6939      	ldr	r1, [r7, #16]
 800b64a:	6978      	ldr	r0, [r7, #20]
 800b64c:	f7ff ff79 	bl	800b542 <xQueueGenericCreate>
 800b650:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f7ff ffd3 	bl	800b5fe <prvInitialiseMutex>

		return xNewQueue;
 800b658:	68fb      	ldr	r3, [r7, #12]
	}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3718      	adds	r7, #24
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b662:	b580      	push	{r7, lr}
 800b664:	b088      	sub	sp, #32
 800b666:	af02      	add	r7, sp, #8
 800b668:	4603      	mov	r3, r0
 800b66a:	6039      	str	r1, [r7, #0]
 800b66c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b66e:	2301      	movs	r3, #1
 800b670:	617b      	str	r3, [r7, #20]
 800b672:	2300      	movs	r3, #0
 800b674:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b676:	79fb      	ldrb	r3, [r7, #7]
 800b678:	9300      	str	r3, [sp, #0]
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	2200      	movs	r2, #0
 800b67e:	6939      	ldr	r1, [r7, #16]
 800b680:	6978      	ldr	r0, [r7, #20]
 800b682:	f7ff fee1 	bl	800b448 <xQueueGenericCreateStatic>
 800b686:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f7ff ffb8 	bl	800b5fe <prvInitialiseMutex>

		return xNewQueue;
 800b68e:	68fb      	ldr	r3, [r7, #12]
	}
 800b690:	4618      	mov	r0, r3
 800b692:	3718      	adds	r7, #24
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b698:	b590      	push	{r4, r7, lr}
 800b69a:	b087      	sub	sp, #28
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10b      	bne.n	800b6c2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800b6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ae:	f383 8811 	msr	BASEPRI, r3
 800b6b2:	f3bf 8f6f 	isb	sy
 800b6b6:	f3bf 8f4f 	dsb	sy
 800b6ba:	60fb      	str	r3, [r7, #12]
}
 800b6bc:	bf00      	nop
 800b6be:	bf00      	nop
 800b6c0:	e7fd      	b.n	800b6be <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	689c      	ldr	r4, [r3, #8]
 800b6c6:	f001 fd8d 	bl	800d1e4 <xTaskGetCurrentTaskHandle>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	429c      	cmp	r4, r3
 800b6ce:	d111      	bne.n	800b6f4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	1e5a      	subs	r2, r3, #1
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d105      	bne.n	800b6ee <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	6938      	ldr	r0, [r7, #16]
 800b6ea:	f000 f841 	bl	800b770 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	617b      	str	r3, [r7, #20]
 800b6f2:	e001      	b.n	800b6f8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b6f8:	697b      	ldr	r3, [r7, #20]
	}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	371c      	adds	r7, #28
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd90      	pop	{r4, r7, pc}

0800b702 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b702:	b590      	push	{r4, r7, lr}
 800b704:	b087      	sub	sp, #28
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
 800b70a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10b      	bne.n	800b72e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800b716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b71a:	f383 8811 	msr	BASEPRI, r3
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f3bf 8f4f 	dsb	sy
 800b726:	60fb      	str	r3, [r7, #12]
}
 800b728:	bf00      	nop
 800b72a:	bf00      	nop
 800b72c:	e7fd      	b.n	800b72a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	689c      	ldr	r4, [r3, #8]
 800b732:	f001 fd57 	bl	800d1e4 <xTaskGetCurrentTaskHandle>
 800b736:	4603      	mov	r3, r0
 800b738:	429c      	cmp	r4, r3
 800b73a:	d107      	bne.n	800b74c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	1c5a      	adds	r2, r3, #1
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b746:	2301      	movs	r3, #1
 800b748:	617b      	str	r3, [r7, #20]
 800b74a:	e00c      	b.n	800b766 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	6938      	ldr	r0, [r7, #16]
 800b750:	f000 fa90 	bl	800bc74 <xQueueSemaphoreTake>
 800b754:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d004      	beq.n	800b766 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	1c5a      	adds	r2, r3, #1
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b766:	697b      	ldr	r3, [r7, #20]
	}
 800b768:	4618      	mov	r0, r3
 800b76a:	371c      	adds	r7, #28
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd90      	pop	{r4, r7, pc}

0800b770 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b08e      	sub	sp, #56	@ 0x38
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
 800b77c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b77e:	2300      	movs	r3, #0
 800b780:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d10b      	bne.n	800b7a4 <xQueueGenericSend+0x34>
	__asm volatile
 800b78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b790:	f383 8811 	msr	BASEPRI, r3
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b79e:	bf00      	nop
 800b7a0:	bf00      	nop
 800b7a2:	e7fd      	b.n	800b7a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d103      	bne.n	800b7b2 <xQueueGenericSend+0x42>
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d101      	bne.n	800b7b6 <xQueueGenericSend+0x46>
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e000      	b.n	800b7b8 <xQueueGenericSend+0x48>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10b      	bne.n	800b7d4 <xQueueGenericSend+0x64>
	__asm volatile
 800b7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c0:	f383 8811 	msr	BASEPRI, r3
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b7ce:	bf00      	nop
 800b7d0:	bf00      	nop
 800b7d2:	e7fd      	b.n	800b7d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d103      	bne.n	800b7e2 <xQueueGenericSend+0x72>
 800b7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d101      	bne.n	800b7e6 <xQueueGenericSend+0x76>
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e000      	b.n	800b7e8 <xQueueGenericSend+0x78>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10b      	bne.n	800b804 <xQueueGenericSend+0x94>
	__asm volatile
 800b7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f0:	f383 8811 	msr	BASEPRI, r3
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	623b      	str	r3, [r7, #32]
}
 800b7fe:	bf00      	nop
 800b800:	bf00      	nop
 800b802:	e7fd      	b.n	800b800 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b804:	f001 fcfe 	bl	800d204 <xTaskGetSchedulerState>
 800b808:	4603      	mov	r3, r0
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d102      	bne.n	800b814 <xQueueGenericSend+0xa4>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d101      	bne.n	800b818 <xQueueGenericSend+0xa8>
 800b814:	2301      	movs	r3, #1
 800b816:	e000      	b.n	800b81a <xQueueGenericSend+0xaa>
 800b818:	2300      	movs	r3, #0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10b      	bne.n	800b836 <xQueueGenericSend+0xc6>
	__asm volatile
 800b81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b822:	f383 8811 	msr	BASEPRI, r3
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	61fb      	str	r3, [r7, #28]
}
 800b830:	bf00      	nop
 800b832:	bf00      	nop
 800b834:	e7fd      	b.n	800b832 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b836:	f002 fc0f 	bl	800e058 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b83c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b842:	429a      	cmp	r2, r3
 800b844:	d302      	bcc.n	800b84c <xQueueGenericSend+0xdc>
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d129      	bne.n	800b8a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b84c:	683a      	ldr	r2, [r7, #0]
 800b84e:	68b9      	ldr	r1, [r7, #8]
 800b850:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b852:	f000 fb37 	bl	800bec4 <prvCopyDataToQueue>
 800b856:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b85a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d010      	beq.n	800b882 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b862:	3324      	adds	r3, #36	@ 0x24
 800b864:	4618      	mov	r0, r3
 800b866:	f001 fa23 	bl	800ccb0 <xTaskRemoveFromEventList>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d013      	beq.n	800b898 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b870:	4b3f      	ldr	r3, [pc, #252]	@ (800b970 <xQueueGenericSend+0x200>)
 800b872:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b876:	601a      	str	r2, [r3, #0]
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	f3bf 8f6f 	isb	sy
 800b880:	e00a      	b.n	800b898 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b884:	2b00      	cmp	r3, #0
 800b886:	d007      	beq.n	800b898 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b888:	4b39      	ldr	r3, [pc, #228]	@ (800b970 <xQueueGenericSend+0x200>)
 800b88a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b88e:	601a      	str	r2, [r3, #0]
 800b890:	f3bf 8f4f 	dsb	sy
 800b894:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b898:	f002 fc10 	bl	800e0bc <vPortExitCritical>
				return pdPASS;
 800b89c:	2301      	movs	r3, #1
 800b89e:	e063      	b.n	800b968 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d103      	bne.n	800b8ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b8a6:	f002 fc09 	bl	800e0bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	e05c      	b.n	800b968 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d106      	bne.n	800b8c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8b4:	f107 0314 	add.w	r3, r7, #20
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f001 fa5d 	bl	800cd78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b8c2:	f002 fbfb 	bl	800e0bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b8c6:	f000 ff37 	bl	800c738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b8ca:	f002 fbc5 	bl	800e058 <vPortEnterCritical>
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b8d4:	b25b      	sxtb	r3, r3
 800b8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8da:	d103      	bne.n	800b8e4 <xQueueGenericSend+0x174>
 800b8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8ea:	b25b      	sxtb	r3, r3
 800b8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f0:	d103      	bne.n	800b8fa <xQueueGenericSend+0x18a>
 800b8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b8fa:	f002 fbdf 	bl	800e0bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8fe:	1d3a      	adds	r2, r7, #4
 800b900:	f107 0314 	add.w	r3, r7, #20
 800b904:	4611      	mov	r1, r2
 800b906:	4618      	mov	r0, r3
 800b908:	f001 fa4c 	bl	800cda4 <xTaskCheckForTimeOut>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d124      	bne.n	800b95c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b912:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b914:	f000 fbce 	bl	800c0b4 <prvIsQueueFull>
 800b918:	4603      	mov	r3, r0
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d018      	beq.n	800b950 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b920:	3310      	adds	r3, #16
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	4611      	mov	r1, r2
 800b926:	4618      	mov	r0, r3
 800b928:	f001 f970 	bl	800cc0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b92c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b92e:	f000 fb59 	bl	800bfe4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b932:	f000 ff0f 	bl	800c754 <xTaskResumeAll>
 800b936:	4603      	mov	r3, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f47f af7c 	bne.w	800b836 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b93e:	4b0c      	ldr	r3, [pc, #48]	@ (800b970 <xQueueGenericSend+0x200>)
 800b940:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b944:	601a      	str	r2, [r3, #0]
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	f3bf 8f6f 	isb	sy
 800b94e:	e772      	b.n	800b836 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b950:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b952:	f000 fb47 	bl	800bfe4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b956:	f000 fefd 	bl	800c754 <xTaskResumeAll>
 800b95a:	e76c      	b.n	800b836 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b95c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b95e:	f000 fb41 	bl	800bfe4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b962:	f000 fef7 	bl	800c754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b966:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3738      	adds	r7, #56	@ 0x38
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	e000ed04 	.word	0xe000ed04

0800b974 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b090      	sub	sp, #64	@ 0x40
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	607a      	str	r2, [r7, #4]
 800b980:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d10b      	bne.n	800b9a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b99e:	bf00      	nop
 800b9a0:	bf00      	nop
 800b9a2:	e7fd      	b.n	800b9a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d103      	bne.n	800b9b2 <xQueueGenericSendFromISR+0x3e>
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d101      	bne.n	800b9b6 <xQueueGenericSendFromISR+0x42>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e000      	b.n	800b9b8 <xQueueGenericSendFromISR+0x44>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10b      	bne.n	800b9d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b9ce:	bf00      	nop
 800b9d0:	bf00      	nop
 800b9d2:	e7fd      	b.n	800b9d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	2b02      	cmp	r3, #2
 800b9d8:	d103      	bne.n	800b9e2 <xQueueGenericSendFromISR+0x6e>
 800b9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d101      	bne.n	800b9e6 <xQueueGenericSendFromISR+0x72>
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e000      	b.n	800b9e8 <xQueueGenericSendFromISR+0x74>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d10b      	bne.n	800ba04 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f0:	f383 8811 	msr	BASEPRI, r3
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	623b      	str	r3, [r7, #32]
}
 800b9fe:	bf00      	nop
 800ba00:	bf00      	nop
 800ba02:	e7fd      	b.n	800ba00 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba04:	f002 fc08 	bl	800e218 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ba08:	f3ef 8211 	mrs	r2, BASEPRI
 800ba0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba10:	f383 8811 	msr	BASEPRI, r3
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	f3bf 8f4f 	dsb	sy
 800ba1c:	61fa      	str	r2, [r7, #28]
 800ba1e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ba20:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba22:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d302      	bcc.n	800ba36 <xQueueGenericSendFromISR+0xc2>
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	2b02      	cmp	r3, #2
 800ba34:	d12f      	bne.n	800ba96 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba44:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba46:	683a      	ldr	r2, [r7, #0]
 800ba48:	68b9      	ldr	r1, [r7, #8]
 800ba4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ba4c:	f000 fa3a 	bl	800bec4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba50:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ba54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba58:	d112      	bne.n	800ba80 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d016      	beq.n	800ba90 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba64:	3324      	adds	r3, #36	@ 0x24
 800ba66:	4618      	mov	r0, r3
 800ba68:	f001 f922 	bl	800ccb0 <xTaskRemoveFromEventList>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00e      	beq.n	800ba90 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00b      	beq.n	800ba90 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	601a      	str	r2, [r3, #0]
 800ba7e:	e007      	b.n	800ba90 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ba84:	3301      	adds	r3, #1
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	b25a      	sxtb	r2, r3
 800ba8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ba90:	2301      	movs	r3, #1
 800ba92:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ba94:	e001      	b.n	800ba9a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba96:	2300      	movs	r3, #0
 800ba98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba9c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800baa4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800baa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3740      	adds	r7, #64	@ 0x40
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b08c      	sub	sp, #48	@ 0x30
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800babc:	2300      	movs	r3, #0
 800babe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d10b      	bne.n	800bae2 <xQueueReceive+0x32>
	__asm volatile
 800baca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	623b      	str	r3, [r7, #32]
}
 800badc:	bf00      	nop
 800bade:	bf00      	nop
 800bae0:	e7fd      	b.n	800bade <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d103      	bne.n	800baf0 <xQueueReceive+0x40>
 800bae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baec:	2b00      	cmp	r3, #0
 800baee:	d101      	bne.n	800baf4 <xQueueReceive+0x44>
 800baf0:	2301      	movs	r3, #1
 800baf2:	e000      	b.n	800baf6 <xQueueReceive+0x46>
 800baf4:	2300      	movs	r3, #0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10b      	bne.n	800bb12 <xQueueReceive+0x62>
	__asm volatile
 800bafa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bafe:	f383 8811 	msr	BASEPRI, r3
 800bb02:	f3bf 8f6f 	isb	sy
 800bb06:	f3bf 8f4f 	dsb	sy
 800bb0a:	61fb      	str	r3, [r7, #28]
}
 800bb0c:	bf00      	nop
 800bb0e:	bf00      	nop
 800bb10:	e7fd      	b.n	800bb0e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb12:	f001 fb77 	bl	800d204 <xTaskGetSchedulerState>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d102      	bne.n	800bb22 <xQueueReceive+0x72>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d101      	bne.n	800bb26 <xQueueReceive+0x76>
 800bb22:	2301      	movs	r3, #1
 800bb24:	e000      	b.n	800bb28 <xQueueReceive+0x78>
 800bb26:	2300      	movs	r3, #0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d10b      	bne.n	800bb44 <xQueueReceive+0x94>
	__asm volatile
 800bb2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb30:	f383 8811 	msr	BASEPRI, r3
 800bb34:	f3bf 8f6f 	isb	sy
 800bb38:	f3bf 8f4f 	dsb	sy
 800bb3c:	61bb      	str	r3, [r7, #24]
}
 800bb3e:	bf00      	nop
 800bb40:	bf00      	nop
 800bb42:	e7fd      	b.n	800bb40 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb44:	f002 fa88 	bl	800e058 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb4c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d01f      	beq.n	800bb94 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb54:	68b9      	ldr	r1, [r7, #8]
 800bb56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb58:	f000 fa1e 	bl	800bf98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5e:	1e5a      	subs	r2, r3, #1
 800bb60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb62:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb66:	691b      	ldr	r3, [r3, #16]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00f      	beq.n	800bb8c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb6e:	3310      	adds	r3, #16
 800bb70:	4618      	mov	r0, r3
 800bb72:	f001 f89d 	bl	800ccb0 <xTaskRemoveFromEventList>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d007      	beq.n	800bb8c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb7c:	4b3c      	ldr	r3, [pc, #240]	@ (800bc70 <xQueueReceive+0x1c0>)
 800bb7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb82:	601a      	str	r2, [r3, #0]
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb8c:	f002 fa96 	bl	800e0bc <vPortExitCritical>
				return pdPASS;
 800bb90:	2301      	movs	r3, #1
 800bb92:	e069      	b.n	800bc68 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d103      	bne.n	800bba2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb9a:	f002 fa8f 	bl	800e0bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	e062      	b.n	800bc68 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d106      	bne.n	800bbb6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bba8:	f107 0310 	add.w	r3, r7, #16
 800bbac:	4618      	mov	r0, r3
 800bbae:	f001 f8e3 	bl	800cd78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbb6:	f002 fa81 	bl	800e0bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbba:	f000 fdbd 	bl	800c738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbbe:	f002 fa4b 	bl	800e058 <vPortEnterCritical>
 800bbc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bbc8:	b25b      	sxtb	r3, r3
 800bbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbce:	d103      	bne.n	800bbd8 <xQueueReceive+0x128>
 800bbd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bbd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bbde:	b25b      	sxtb	r3, r3
 800bbe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe4:	d103      	bne.n	800bbee <xQueueReceive+0x13e>
 800bbe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bbee:	f002 fa65 	bl	800e0bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbf2:	1d3a      	adds	r2, r7, #4
 800bbf4:	f107 0310 	add.w	r3, r7, #16
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f001 f8d2 	bl	800cda4 <xTaskCheckForTimeOut>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d123      	bne.n	800bc4e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc08:	f000 fa3e 	bl	800c088 <prvIsQueueEmpty>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d017      	beq.n	800bc42 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc14:	3324      	adds	r3, #36	@ 0x24
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	4611      	mov	r1, r2
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f000 fff6 	bl	800cc0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc22:	f000 f9df 	bl	800bfe4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc26:	f000 fd95 	bl	800c754 <xTaskResumeAll>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d189      	bne.n	800bb44 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bc30:	4b0f      	ldr	r3, [pc, #60]	@ (800bc70 <xQueueReceive+0x1c0>)
 800bc32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc36:	601a      	str	r2, [r3, #0]
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	e780      	b.n	800bb44 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bc42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc44:	f000 f9ce 	bl	800bfe4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc48:	f000 fd84 	bl	800c754 <xTaskResumeAll>
 800bc4c:	e77a      	b.n	800bb44 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bc4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc50:	f000 f9c8 	bl	800bfe4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc54:	f000 fd7e 	bl	800c754 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc5a:	f000 fa15 	bl	800c088 <prvIsQueueEmpty>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f43f af6f 	beq.w	800bb44 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3730      	adds	r7, #48	@ 0x30
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	e000ed04 	.word	0xe000ed04

0800bc74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b08e      	sub	sp, #56	@ 0x38
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bc86:	2300      	movs	r3, #0
 800bc88:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10b      	bne.n	800bca8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	623b      	str	r3, [r7, #32]
}
 800bca2:	bf00      	nop
 800bca4:	bf00      	nop
 800bca6:	e7fd      	b.n	800bca4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00b      	beq.n	800bcc8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800bcb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	61fb      	str	r3, [r7, #28]
}
 800bcc2:	bf00      	nop
 800bcc4:	bf00      	nop
 800bcc6:	e7fd      	b.n	800bcc4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcc8:	f001 fa9c 	bl	800d204 <xTaskGetSchedulerState>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d102      	bne.n	800bcd8 <xQueueSemaphoreTake+0x64>
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d101      	bne.n	800bcdc <xQueueSemaphoreTake+0x68>
 800bcd8:	2301      	movs	r3, #1
 800bcda:	e000      	b.n	800bcde <xQueueSemaphoreTake+0x6a>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10b      	bne.n	800bcfa <xQueueSemaphoreTake+0x86>
	__asm volatile
 800bce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce6:	f383 8811 	msr	BASEPRI, r3
 800bcea:	f3bf 8f6f 	isb	sy
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	61bb      	str	r3, [r7, #24]
}
 800bcf4:	bf00      	nop
 800bcf6:	bf00      	nop
 800bcf8:	e7fd      	b.n	800bcf6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcfa:	f002 f9ad 	bl	800e058 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bcfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd02:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bd04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d024      	beq.n	800bd54 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bd0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd0c:	1e5a      	subs	r2, r3, #1
 800bd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd10:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d104      	bne.n	800bd24 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bd1a:	f001 fca9 	bl	800d670 <pvTaskIncrementMutexHeldCount>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd22:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd26:	691b      	ldr	r3, [r3, #16]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00f      	beq.n	800bd4c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd2e:	3310      	adds	r3, #16
 800bd30:	4618      	mov	r0, r3
 800bd32:	f000 ffbd 	bl	800ccb0 <xTaskRemoveFromEventList>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d007      	beq.n	800bd4c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd3c:	4b54      	ldr	r3, [pc, #336]	@ (800be90 <xQueueSemaphoreTake+0x21c>)
 800bd3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd4c:	f002 f9b6 	bl	800e0bc <vPortExitCritical>
				return pdPASS;
 800bd50:	2301      	movs	r3, #1
 800bd52:	e098      	b.n	800be86 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d112      	bne.n	800bd80 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00b      	beq.n	800bd78 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	617b      	str	r3, [r7, #20]
}
 800bd72:	bf00      	nop
 800bd74:	bf00      	nop
 800bd76:	e7fd      	b.n	800bd74 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bd78:	f002 f9a0 	bl	800e0bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	e082      	b.n	800be86 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d106      	bne.n	800bd94 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd86:	f107 030c 	add.w	r3, r7, #12
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 fff4 	bl	800cd78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd90:	2301      	movs	r3, #1
 800bd92:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd94:	f002 f992 	bl	800e0bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd98:	f000 fcce 	bl	800c738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd9c:	f002 f95c 	bl	800e058 <vPortEnterCritical>
 800bda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bda6:	b25b      	sxtb	r3, r3
 800bda8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdac:	d103      	bne.n	800bdb6 <xQueueSemaphoreTake+0x142>
 800bdae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bdb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bdbc:	b25b      	sxtb	r3, r3
 800bdbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdc2:	d103      	bne.n	800bdcc <xQueueSemaphoreTake+0x158>
 800bdc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bdcc:	f002 f976 	bl	800e0bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bdd0:	463a      	mov	r2, r7
 800bdd2:	f107 030c 	add.w	r3, r7, #12
 800bdd6:	4611      	mov	r1, r2
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f000 ffe3 	bl	800cda4 <xTaskCheckForTimeOut>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d132      	bne.n	800be4a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bde4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bde6:	f000 f94f 	bl	800c088 <prvIsQueueEmpty>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d026      	beq.n	800be3e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bdf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d109      	bne.n	800be0c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800bdf8:	f002 f92e 	bl	800e058 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bdfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	4618      	mov	r0, r3
 800be02:	f001 fa1d 	bl	800d240 <xTaskPriorityInherit>
 800be06:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800be08:	f002 f958 	bl	800e0bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be0e:	3324      	adds	r3, #36	@ 0x24
 800be10:	683a      	ldr	r2, [r7, #0]
 800be12:	4611      	mov	r1, r2
 800be14:	4618      	mov	r0, r3
 800be16:	f000 fef9 	bl	800cc0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be1c:	f000 f8e2 	bl	800bfe4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be20:	f000 fc98 	bl	800c754 <xTaskResumeAll>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	f47f af67 	bne.w	800bcfa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800be2c:	4b18      	ldr	r3, [pc, #96]	@ (800be90 <xQueueSemaphoreTake+0x21c>)
 800be2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be32:	601a      	str	r2, [r3, #0]
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	f3bf 8f6f 	isb	sy
 800be3c:	e75d      	b.n	800bcfa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800be3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be40:	f000 f8d0 	bl	800bfe4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be44:	f000 fc86 	bl	800c754 <xTaskResumeAll>
 800be48:	e757      	b.n	800bcfa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800be4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be4c:	f000 f8ca 	bl	800bfe4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be50:	f000 fc80 	bl	800c754 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be56:	f000 f917 	bl	800c088 <prvIsQueueEmpty>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f43f af4c 	beq.w	800bcfa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800be62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be64:	2b00      	cmp	r3, #0
 800be66:	d00d      	beq.n	800be84 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800be68:	f002 f8f6 	bl	800e058 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800be6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be6e:	f000 f811 	bl	800be94 <prvGetDisinheritPriorityAfterTimeout>
 800be72:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800be74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be76:	689b      	ldr	r3, [r3, #8]
 800be78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800be7a:	4618      	mov	r0, r3
 800be7c:	f001 fab8 	bl	800d3f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800be80:	f002 f91c 	bl	800e0bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800be84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800be86:	4618      	mov	r0, r3
 800be88:	3738      	adds	r7, #56	@ 0x38
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	e000ed04 	.word	0xe000ed04

0800be94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d006      	beq.n	800beb2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800beae:	60fb      	str	r3, [r7, #12]
 800beb0:	e001      	b.n	800beb6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800beb2:	2300      	movs	r3, #0
 800beb4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800beb6:	68fb      	ldr	r3, [r7, #12]
	}
 800beb8:	4618      	mov	r0, r3
 800beba:	3714      	adds	r7, #20
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b086      	sub	sp, #24
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bed0:	2300      	movs	r3, #0
 800bed2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bed8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d10d      	bne.n	800befe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d14d      	bne.n	800bf86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	4618      	mov	r0, r3
 800bef0:	f001 fa0e 	bl	800d310 <xTaskPriorityDisinherit>
 800bef4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2200      	movs	r2, #0
 800befa:	609a      	str	r2, [r3, #8]
 800befc:	e043      	b.n	800bf86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d119      	bne.n	800bf38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	6858      	ldr	r0, [r3, #4]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	68b9      	ldr	r1, [r7, #8]
 800bf10:	f005 fce7 	bl	80118e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	685a      	ldr	r2, [r3, #4]
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf1c:	441a      	add	r2, r3
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	685a      	ldr	r2, [r3, #4]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d32b      	bcc.n	800bf86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	605a      	str	r2, [r3, #4]
 800bf36:	e026      	b.n	800bf86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	68d8      	ldr	r0, [r3, #12]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf40:	461a      	mov	r2, r3
 800bf42:	68b9      	ldr	r1, [r7, #8]
 800bf44:	f005 fccd 	bl	80118e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	68da      	ldr	r2, [r3, #12]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf50:	425b      	negs	r3, r3
 800bf52:	441a      	add	r2, r3
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	68da      	ldr	r2, [r3, #12]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d207      	bcs.n	800bf74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	689a      	ldr	r2, [r3, #8]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf6c:	425b      	negs	r3, r3
 800bf6e:	441a      	add	r2, r3
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d105      	bne.n	800bf86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d002      	beq.n	800bf86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	3b01      	subs	r3, #1
 800bf84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	1c5a      	adds	r2, r3, #1
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bf8e:	697b      	ldr	r3, [r7, #20]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3718      	adds	r7, #24
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d018      	beq.n	800bfdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	68da      	ldr	r2, [r3, #12]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfb2:	441a      	add	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	68da      	ldr	r2, [r3, #12]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d303      	bcc.n	800bfcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	68d9      	ldr	r1, [r3, #12]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	6838      	ldr	r0, [r7, #0]
 800bfd8:	f005 fc83 	bl	80118e2 <memcpy>
	}
}
 800bfdc:	bf00      	nop
 800bfde:	3708      	adds	r7, #8
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bfec:	f002 f834 	bl	800e058 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bff6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bff8:	e011      	b.n	800c01e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d012      	beq.n	800c028 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	3324      	adds	r3, #36	@ 0x24
 800c006:	4618      	mov	r0, r3
 800c008:	f000 fe52 	bl	800ccb0 <xTaskRemoveFromEventList>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d001      	beq.n	800c016 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c012:	f000 ff2b 	bl	800ce6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c016:	7bfb      	ldrb	r3, [r7, #15]
 800c018:	3b01      	subs	r3, #1
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c01e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c022:	2b00      	cmp	r3, #0
 800c024:	dce9      	bgt.n	800bffa <prvUnlockQueue+0x16>
 800c026:	e000      	b.n	800c02a <prvUnlockQueue+0x46>
					break;
 800c028:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	22ff      	movs	r2, #255	@ 0xff
 800c02e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c032:	f002 f843 	bl	800e0bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c036:	f002 f80f 	bl	800e058 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c040:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c042:	e011      	b.n	800c068 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	691b      	ldr	r3, [r3, #16]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d012      	beq.n	800c072 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	3310      	adds	r3, #16
 800c050:	4618      	mov	r0, r3
 800c052:	f000 fe2d 	bl	800ccb0 <xTaskRemoveFromEventList>
 800c056:	4603      	mov	r3, r0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d001      	beq.n	800c060 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c05c:	f000 ff06 	bl	800ce6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c060:	7bbb      	ldrb	r3, [r7, #14]
 800c062:	3b01      	subs	r3, #1
 800c064:	b2db      	uxtb	r3, r3
 800c066:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c068:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	dce9      	bgt.n	800c044 <prvUnlockQueue+0x60>
 800c070:	e000      	b.n	800c074 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c072:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	22ff      	movs	r2, #255	@ 0xff
 800c078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c07c:	f002 f81e 	bl	800e0bc <vPortExitCritical>
}
 800c080:	bf00      	nop
 800c082:	3710      	adds	r7, #16
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c090:	f001 ffe2 	bl	800e058 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d102      	bne.n	800c0a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c09c:	2301      	movs	r3, #1
 800c09e:	60fb      	str	r3, [r7, #12]
 800c0a0:	e001      	b.n	800c0a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0a6:	f002 f809 	bl	800e0bc <vPortExitCritical>

	return xReturn;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3710      	adds	r7, #16
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0bc:	f001 ffcc 	bl	800e058 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d102      	bne.n	800c0d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	60fb      	str	r3, [r7, #12]
 800c0d0:	e001      	b.n	800c0d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0d6:	f001 fff1 	bl	800e0bc <vPortExitCritical>

	return xReturn;
 800c0da:	68fb      	ldr	r3, [r7, #12]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3710      	adds	r7, #16
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	60fb      	str	r3, [r7, #12]
 800c0f2:	e014      	b.n	800c11e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c0f4:	4a0f      	ldr	r2, [pc, #60]	@ (800c134 <vQueueAddToRegistry+0x50>)
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d10b      	bne.n	800c118 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c100:	490c      	ldr	r1, [pc, #48]	@ (800c134 <vQueueAddToRegistry+0x50>)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	683a      	ldr	r2, [r7, #0]
 800c106:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c10a:	4a0a      	ldr	r2, [pc, #40]	@ (800c134 <vQueueAddToRegistry+0x50>)
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	00db      	lsls	r3, r3, #3
 800c110:	4413      	add	r3, r2
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c116:	e006      	b.n	800c126 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	3301      	adds	r3, #1
 800c11c:	60fb      	str	r3, [r7, #12]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2b07      	cmp	r3, #7
 800c122:	d9e7      	bls.n	800c0f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c124:	bf00      	nop
 800c126:	bf00      	nop
 800c128:	3714      	adds	r7, #20
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	20001aac 	.word	0x20001aac

0800c138 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c148:	f001 ff86 	bl	800e058 <vPortEnterCritical>
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c152:	b25b      	sxtb	r3, r3
 800c154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c158:	d103      	bne.n	800c162 <vQueueWaitForMessageRestricted+0x2a>
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c168:	b25b      	sxtb	r3, r3
 800c16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c16e:	d103      	bne.n	800c178 <vQueueWaitForMessageRestricted+0x40>
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	2200      	movs	r2, #0
 800c174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c178:	f001 ffa0 	bl	800e0bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c180:	2b00      	cmp	r3, #0
 800c182:	d106      	bne.n	800c192 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	3324      	adds	r3, #36	@ 0x24
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	68b9      	ldr	r1, [r7, #8]
 800c18c:	4618      	mov	r0, r3
 800c18e:	f000 fd63 	bl	800cc58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c192:	6978      	ldr	r0, [r7, #20]
 800c194:	f7ff ff26 	bl	800bfe4 <prvUnlockQueue>
	}
 800c198:	bf00      	nop
 800c19a:	3718      	adds	r7, #24
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b08e      	sub	sp, #56	@ 0x38
 800c1a4:	af04      	add	r7, sp, #16
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
 800c1ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c1ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10b      	bne.n	800c1cc <xTaskCreateStatic+0x2c>
	__asm volatile
 800c1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b8:	f383 8811 	msr	BASEPRI, r3
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f3bf 8f4f 	dsb	sy
 800c1c4:	623b      	str	r3, [r7, #32]
}
 800c1c6:	bf00      	nop
 800c1c8:	bf00      	nop
 800c1ca:	e7fd      	b.n	800c1c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10b      	bne.n	800c1ea <xTaskCreateStatic+0x4a>
	__asm volatile
 800c1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d6:	f383 8811 	msr	BASEPRI, r3
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	61fb      	str	r3, [r7, #28]
}
 800c1e4:	bf00      	nop
 800c1e6:	bf00      	nop
 800c1e8:	e7fd      	b.n	800c1e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c1ea:	23a8      	movs	r3, #168	@ 0xa8
 800c1ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	2ba8      	cmp	r3, #168	@ 0xa8
 800c1f2:	d00b      	beq.n	800c20c <xTaskCreateStatic+0x6c>
	__asm volatile
 800c1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f8:	f383 8811 	msr	BASEPRI, r3
 800c1fc:	f3bf 8f6f 	isb	sy
 800c200:	f3bf 8f4f 	dsb	sy
 800c204:	61bb      	str	r3, [r7, #24]
}
 800c206:	bf00      	nop
 800c208:	bf00      	nop
 800c20a:	e7fd      	b.n	800c208 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c20c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c210:	2b00      	cmp	r3, #0
 800c212:	d01e      	beq.n	800c252 <xTaskCreateStatic+0xb2>
 800c214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c216:	2b00      	cmp	r3, #0
 800c218:	d01b      	beq.n	800c252 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c21c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c220:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c222:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c226:	2202      	movs	r2, #2
 800c228:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c22c:	2300      	movs	r3, #0
 800c22e:	9303      	str	r3, [sp, #12]
 800c230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c232:	9302      	str	r3, [sp, #8]
 800c234:	f107 0314 	add.w	r3, r7, #20
 800c238:	9301      	str	r3, [sp, #4]
 800c23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	68b9      	ldr	r1, [r7, #8]
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f000 f851 	bl	800c2ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c24a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c24c:	f000 f8f6 	bl	800c43c <prvAddNewTaskToReadyList>
 800c250:	e001      	b.n	800c256 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c252:	2300      	movs	r3, #0
 800c254:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c256:	697b      	ldr	r3, [r7, #20]
	}
 800c258:	4618      	mov	r0, r3
 800c25a:	3728      	adds	r7, #40	@ 0x28
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c260:	b580      	push	{r7, lr}
 800c262:	b08c      	sub	sp, #48	@ 0x30
 800c264:	af04      	add	r7, sp, #16
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	603b      	str	r3, [r7, #0]
 800c26c:	4613      	mov	r3, r2
 800c26e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c270:	88fb      	ldrh	r3, [r7, #6]
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4618      	mov	r0, r3
 800c276:	f002 f811 	bl	800e29c <pvPortMalloc>
 800c27a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00e      	beq.n	800c2a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c282:	20a8      	movs	r0, #168	@ 0xa8
 800c284:	f002 f80a 	bl	800e29c <pvPortMalloc>
 800c288:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d003      	beq.n	800c298 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	697a      	ldr	r2, [r7, #20]
 800c294:	631a      	str	r2, [r3, #48]	@ 0x30
 800c296:	e005      	b.n	800c2a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c298:	6978      	ldr	r0, [r7, #20]
 800c29a:	f002 f8cd 	bl	800e438 <vPortFree>
 800c29e:	e001      	b.n	800c2a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d017      	beq.n	800c2da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c2b2:	88fa      	ldrh	r2, [r7, #6]
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	9303      	str	r3, [sp, #12]
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	9302      	str	r3, [sp, #8]
 800c2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2be:	9301      	str	r3, [sp, #4]
 800c2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	68b9      	ldr	r1, [r7, #8]
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	f000 f80f 	bl	800c2ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2ce:	69f8      	ldr	r0, [r7, #28]
 800c2d0:	f000 f8b4 	bl	800c43c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	61bb      	str	r3, [r7, #24]
 800c2d8:	e002      	b.n	800c2e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c2da:	f04f 33ff 	mov.w	r3, #4294967295
 800c2de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c2e0:	69bb      	ldr	r3, [r7, #24]
	}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3720      	adds	r7, #32
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
	...

0800c2ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b088      	sub	sp, #32
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]
 800c2f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	461a      	mov	r2, r3
 800c304:	21a5      	movs	r1, #165	@ 0xa5
 800c306:	f005 f9cb 	bl	80116a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c30c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c314:	3b01      	subs	r3, #1
 800c316:	009b      	lsls	r3, r3, #2
 800c318:	4413      	add	r3, r2
 800c31a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	f023 0307 	bic.w	r3, r3, #7
 800c322:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	f003 0307 	and.w	r3, r3, #7
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d00b      	beq.n	800c346 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c332:	f383 8811 	msr	BASEPRI, r3
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	617b      	str	r3, [r7, #20]
}
 800c340:	bf00      	nop
 800c342:	bf00      	nop
 800c344:	e7fd      	b.n	800c342 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d01f      	beq.n	800c38c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c34c:	2300      	movs	r3, #0
 800c34e:	61fb      	str	r3, [r7, #28]
 800c350:	e012      	b.n	800c378 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	4413      	add	r3, r2
 800c358:	7819      	ldrb	r1, [r3, #0]
 800c35a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	4413      	add	r3, r2
 800c360:	3334      	adds	r3, #52	@ 0x34
 800c362:	460a      	mov	r2, r1
 800c364:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c366:	68ba      	ldr	r2, [r7, #8]
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	4413      	add	r3, r2
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d006      	beq.n	800c380 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	3301      	adds	r3, #1
 800c376:	61fb      	str	r3, [r7, #28]
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	2b0f      	cmp	r3, #15
 800c37c:	d9e9      	bls.n	800c352 <prvInitialiseNewTask+0x66>
 800c37e:	e000      	b.n	800c382 <prvInitialiseNewTask+0x96>
			{
				break;
 800c380:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c384:	2200      	movs	r2, #0
 800c386:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c38a:	e003      	b.n	800c394 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c38e:	2200      	movs	r2, #0
 800c390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c396:	2b37      	cmp	r3, #55	@ 0x37
 800c398:	d901      	bls.n	800c39e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c39a:	2337      	movs	r3, #55	@ 0x37
 800c39c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3a8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b2:	3304      	adds	r3, #4
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7fe ff49 	bl	800b24c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3bc:	3318      	adds	r3, #24
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fe ff44 	bl	800b24c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ec:	3354      	adds	r3, #84	@ 0x54
 800c3ee:	224c      	movs	r2, #76	@ 0x4c
 800c3f0:	2100      	movs	r1, #0
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f005 f954 	bl	80116a0 <memset>
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3fa:	4a0d      	ldr	r2, [pc, #52]	@ (800c430 <prvInitialiseNewTask+0x144>)
 800c3fc:	659a      	str	r2, [r3, #88]	@ 0x58
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c400:	4a0c      	ldr	r2, [pc, #48]	@ (800c434 <prvInitialiseNewTask+0x148>)
 800c402:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c406:	4a0c      	ldr	r2, [pc, #48]	@ (800c438 <prvInitialiseNewTask+0x14c>)
 800c408:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	68f9      	ldr	r1, [r7, #12]
 800c40e:	69b8      	ldr	r0, [r7, #24]
 800c410:	f001 fcf0 	bl	800ddf4 <pxPortInitialiseStack>
 800c414:	4602      	mov	r2, r0
 800c416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c418:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d002      	beq.n	800c426 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c422:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c426:	bf00      	nop
 800c428:	3720      	adds	r7, #32
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	20003a18 	.word	0x20003a18
 800c434:	20003a80 	.word	0x20003a80
 800c438:	20003ae8 	.word	0x20003ae8

0800c43c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c444:	f001 fe08 	bl	800e058 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c448:	4b2d      	ldr	r3, [pc, #180]	@ (800c500 <prvAddNewTaskToReadyList+0xc4>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	3301      	adds	r3, #1
 800c44e:	4a2c      	ldr	r2, [pc, #176]	@ (800c500 <prvAddNewTaskToReadyList+0xc4>)
 800c450:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c452:	4b2c      	ldr	r3, [pc, #176]	@ (800c504 <prvAddNewTaskToReadyList+0xc8>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d109      	bne.n	800c46e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c45a:	4a2a      	ldr	r2, [pc, #168]	@ (800c504 <prvAddNewTaskToReadyList+0xc8>)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c460:	4b27      	ldr	r3, [pc, #156]	@ (800c500 <prvAddNewTaskToReadyList+0xc4>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2b01      	cmp	r3, #1
 800c466:	d110      	bne.n	800c48a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c468:	f000 fd24 	bl	800ceb4 <prvInitialiseTaskLists>
 800c46c:	e00d      	b.n	800c48a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c46e:	4b26      	ldr	r3, [pc, #152]	@ (800c508 <prvAddNewTaskToReadyList+0xcc>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d109      	bne.n	800c48a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c476:	4b23      	ldr	r3, [pc, #140]	@ (800c504 <prvAddNewTaskToReadyList+0xc8>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c480:	429a      	cmp	r2, r3
 800c482:	d802      	bhi.n	800c48a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c484:	4a1f      	ldr	r2, [pc, #124]	@ (800c504 <prvAddNewTaskToReadyList+0xc8>)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c48a:	4b20      	ldr	r3, [pc, #128]	@ (800c50c <prvAddNewTaskToReadyList+0xd0>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	3301      	adds	r3, #1
 800c490:	4a1e      	ldr	r2, [pc, #120]	@ (800c50c <prvAddNewTaskToReadyList+0xd0>)
 800c492:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c494:	4b1d      	ldr	r3, [pc, #116]	@ (800c50c <prvAddNewTaskToReadyList+0xd0>)
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4a0:	4b1b      	ldr	r3, [pc, #108]	@ (800c510 <prvAddNewTaskToReadyList+0xd4>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d903      	bls.n	800c4b0 <prvAddNewTaskToReadyList+0x74>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ac:	4a18      	ldr	r2, [pc, #96]	@ (800c510 <prvAddNewTaskToReadyList+0xd4>)
 800c4ae:	6013      	str	r3, [r2, #0]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	4a15      	ldr	r2, [pc, #84]	@ (800c514 <prvAddNewTaskToReadyList+0xd8>)
 800c4be:	441a      	add	r2, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	3304      	adds	r3, #4
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	4610      	mov	r0, r2
 800c4c8:	f7fe fecd 	bl	800b266 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c4cc:	f001 fdf6 	bl	800e0bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c4d0:	4b0d      	ldr	r3, [pc, #52]	@ (800c508 <prvAddNewTaskToReadyList+0xcc>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00e      	beq.n	800c4f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c4d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c504 <prvAddNewTaskToReadyList+0xc8>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d207      	bcs.n	800c4f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c4e6:	4b0c      	ldr	r3, [pc, #48]	@ (800c518 <prvAddNewTaskToReadyList+0xdc>)
 800c4e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4ec:	601a      	str	r2, [r3, #0]
 800c4ee:	f3bf 8f4f 	dsb	sy
 800c4f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4f6:	bf00      	nop
 800c4f8:	3708      	adds	r7, #8
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	20001fc0 	.word	0x20001fc0
 800c504:	20001aec 	.word	0x20001aec
 800c508:	20001fcc 	.word	0x20001fcc
 800c50c:	20001fdc 	.word	0x20001fdc
 800c510:	20001fc8 	.word	0x20001fc8
 800c514:	20001af0 	.word	0x20001af0
 800c518:	e000ed04 	.word	0xe000ed04

0800c51c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c524:	2300      	movs	r3, #0
 800c526:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d018      	beq.n	800c560 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c52e:	4b14      	ldr	r3, [pc, #80]	@ (800c580 <vTaskDelay+0x64>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d00b      	beq.n	800c54e <vTaskDelay+0x32>
	__asm volatile
 800c536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c53a:	f383 8811 	msr	BASEPRI, r3
 800c53e:	f3bf 8f6f 	isb	sy
 800c542:	f3bf 8f4f 	dsb	sy
 800c546:	60bb      	str	r3, [r7, #8]
}
 800c548:	bf00      	nop
 800c54a:	bf00      	nop
 800c54c:	e7fd      	b.n	800c54a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c54e:	f000 f8f3 	bl	800c738 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c552:	2100      	movs	r1, #0
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f001 f89f 	bl	800d698 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c55a:	f000 f8fb 	bl	800c754 <xTaskResumeAll>
 800c55e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d107      	bne.n	800c576 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c566:	4b07      	ldr	r3, [pc, #28]	@ (800c584 <vTaskDelay+0x68>)
 800c568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c56c:	601a      	str	r2, [r3, #0]
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c576:	bf00      	nop
 800c578:	3710      	adds	r7, #16
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	20001fe8 	.word	0x20001fe8
 800c584:	e000ed04 	.word	0xe000ed04

0800c588 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b088      	sub	sp, #32
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d10b      	bne.n	800c5b2 <eTaskGetState+0x2a>
	__asm volatile
 800c59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c59e:	f383 8811 	msr	BASEPRI, r3
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	60bb      	str	r3, [r7, #8]
}
 800c5ac:	bf00      	nop
 800c5ae:	bf00      	nop
 800c5b0:	e7fd      	b.n	800c5ae <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800c5b2:	4b24      	ldr	r3, [pc, #144]	@ (800c644 <eTaskGetState+0xbc>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	69ba      	ldr	r2, [r7, #24]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d102      	bne.n	800c5c2 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	77fb      	strb	r3, [r7, #31]
 800c5c0:	e03a      	b.n	800c638 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800c5c2:	f001 fd49 	bl	800e058 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	695b      	ldr	r3, [r3, #20]
 800c5ca:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800c5cc:	4b1e      	ldr	r3, [pc, #120]	@ (800c648 <eTaskGetState+0xc0>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800c5d2:	4b1e      	ldr	r3, [pc, #120]	@ (800c64c <eTaskGetState+0xc4>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800c5d8:	f001 fd70 	bl	800e0bc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800c5dc:	697a      	ldr	r2, [r7, #20]
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d003      	beq.n	800c5ec <eTaskGetState+0x64>
 800c5e4:	697a      	ldr	r2, [r7, #20]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d102      	bne.n	800c5f2 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800c5ec:	2302      	movs	r3, #2
 800c5ee:	77fb      	strb	r3, [r7, #31]
 800c5f0:	e022      	b.n	800c638 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	4a16      	ldr	r2, [pc, #88]	@ (800c650 <eTaskGetState+0xc8>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d112      	bne.n	800c620 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d10b      	bne.n	800c61a <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d102      	bne.n	800c614 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800c60e:	2302      	movs	r3, #2
 800c610:	77fb      	strb	r3, [r7, #31]
 800c612:	e011      	b.n	800c638 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800c614:	2303      	movs	r3, #3
 800c616:	77fb      	strb	r3, [r7, #31]
 800c618:	e00e      	b.n	800c638 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800c61a:	2302      	movs	r3, #2
 800c61c:	77fb      	strb	r3, [r7, #31]
 800c61e:	e00b      	b.n	800c638 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	4a0c      	ldr	r2, [pc, #48]	@ (800c654 <eTaskGetState+0xcc>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d002      	beq.n	800c62e <eTaskGetState+0xa6>
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d102      	bne.n	800c634 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800c62e:	2304      	movs	r3, #4
 800c630:	77fb      	strb	r3, [r7, #31]
 800c632:	e001      	b.n	800c638 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800c634:	2301      	movs	r3, #1
 800c636:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800c638:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c63a:	4618      	mov	r0, r3
 800c63c:	3720      	adds	r7, #32
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	20001aec 	.word	0x20001aec
 800c648:	20001f78 	.word	0x20001f78
 800c64c:	20001f7c 	.word	0x20001f7c
 800c650:	20001fac 	.word	0x20001fac
 800c654:	20001f94 	.word	0x20001f94

0800c658 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b08a      	sub	sp, #40	@ 0x28
 800c65c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c65e:	2300      	movs	r3, #0
 800c660:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c662:	2300      	movs	r3, #0
 800c664:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c666:	463a      	mov	r2, r7
 800c668:	1d39      	adds	r1, r7, #4
 800c66a:	f107 0308 	add.w	r3, r7, #8
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fe fd98 	bl	800b1a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c674:	6839      	ldr	r1, [r7, #0]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	68ba      	ldr	r2, [r7, #8]
 800c67a:	9202      	str	r2, [sp, #8]
 800c67c:	9301      	str	r3, [sp, #4]
 800c67e:	2300      	movs	r3, #0
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	2300      	movs	r3, #0
 800c684:	460a      	mov	r2, r1
 800c686:	4924      	ldr	r1, [pc, #144]	@ (800c718 <vTaskStartScheduler+0xc0>)
 800c688:	4824      	ldr	r0, [pc, #144]	@ (800c71c <vTaskStartScheduler+0xc4>)
 800c68a:	f7ff fd89 	bl	800c1a0 <xTaskCreateStatic>
 800c68e:	4603      	mov	r3, r0
 800c690:	4a23      	ldr	r2, [pc, #140]	@ (800c720 <vTaskStartScheduler+0xc8>)
 800c692:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c694:	4b22      	ldr	r3, [pc, #136]	@ (800c720 <vTaskStartScheduler+0xc8>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d002      	beq.n	800c6a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c69c:	2301      	movs	r3, #1
 800c69e:	617b      	str	r3, [r7, #20]
 800c6a0:	e001      	b.n	800c6a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d102      	bne.n	800c6b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c6ac:	f001 f848 	bl	800d740 <xTimerCreateTimerTask>
 800c6b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d11b      	bne.n	800c6f0 <vTaskStartScheduler+0x98>
	__asm volatile
 800c6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6bc:	f383 8811 	msr	BASEPRI, r3
 800c6c0:	f3bf 8f6f 	isb	sy
 800c6c4:	f3bf 8f4f 	dsb	sy
 800c6c8:	613b      	str	r3, [r7, #16]
}
 800c6ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c6cc:	4b15      	ldr	r3, [pc, #84]	@ (800c724 <vTaskStartScheduler+0xcc>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	3354      	adds	r3, #84	@ 0x54
 800c6d2:	4a15      	ldr	r2, [pc, #84]	@ (800c728 <vTaskStartScheduler+0xd0>)
 800c6d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c6d6:	4b15      	ldr	r3, [pc, #84]	@ (800c72c <vTaskStartScheduler+0xd4>)
 800c6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c6dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c6de:	4b14      	ldr	r3, [pc, #80]	@ (800c730 <vTaskStartScheduler+0xd8>)
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c6e4:	4b13      	ldr	r3, [pc, #76]	@ (800c734 <vTaskStartScheduler+0xdc>)
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c6ea:	f001 fc11 	bl	800df10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c6ee:	e00f      	b.n	800c710 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f6:	d10b      	bne.n	800c710 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6fc:	f383 8811 	msr	BASEPRI, r3
 800c700:	f3bf 8f6f 	isb	sy
 800c704:	f3bf 8f4f 	dsb	sy
 800c708:	60fb      	str	r3, [r7, #12]
}
 800c70a:	bf00      	nop
 800c70c:	bf00      	nop
 800c70e:	e7fd      	b.n	800c70c <vTaskStartScheduler+0xb4>
}
 800c710:	bf00      	nop
 800c712:	3718      	adds	r7, #24
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	08012af0 	.word	0x08012af0
 800c71c:	0800ce85 	.word	0x0800ce85
 800c720:	20001fe4 	.word	0x20001fe4
 800c724:	20001aec 	.word	0x20001aec
 800c728:	20001190 	.word	0x20001190
 800c72c:	20001fe0 	.word	0x20001fe0
 800c730:	20001fcc 	.word	0x20001fcc
 800c734:	20001fc4 	.word	0x20001fc4

0800c738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c738:	b480      	push	{r7}
 800c73a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c73c:	4b04      	ldr	r3, [pc, #16]	@ (800c750 <vTaskSuspendAll+0x18>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	3301      	adds	r3, #1
 800c742:	4a03      	ldr	r2, [pc, #12]	@ (800c750 <vTaskSuspendAll+0x18>)
 800c744:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c746:	bf00      	nop
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr
 800c750:	20001fe8 	.word	0x20001fe8

0800c754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c75a:	2300      	movs	r3, #0
 800c75c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c75e:	2300      	movs	r3, #0
 800c760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c762:	4b42      	ldr	r3, [pc, #264]	@ (800c86c <xTaskResumeAll+0x118>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d10b      	bne.n	800c782 <xTaskResumeAll+0x2e>
	__asm volatile
 800c76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c76e:	f383 8811 	msr	BASEPRI, r3
 800c772:	f3bf 8f6f 	isb	sy
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	603b      	str	r3, [r7, #0]
}
 800c77c:	bf00      	nop
 800c77e:	bf00      	nop
 800c780:	e7fd      	b.n	800c77e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c782:	f001 fc69 	bl	800e058 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c786:	4b39      	ldr	r3, [pc, #228]	@ (800c86c <xTaskResumeAll+0x118>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	3b01      	subs	r3, #1
 800c78c:	4a37      	ldr	r2, [pc, #220]	@ (800c86c <xTaskResumeAll+0x118>)
 800c78e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c790:	4b36      	ldr	r3, [pc, #216]	@ (800c86c <xTaskResumeAll+0x118>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d162      	bne.n	800c85e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c798:	4b35      	ldr	r3, [pc, #212]	@ (800c870 <xTaskResumeAll+0x11c>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d05e      	beq.n	800c85e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7a0:	e02f      	b.n	800c802 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7a2:	4b34      	ldr	r3, [pc, #208]	@ (800c874 <xTaskResumeAll+0x120>)
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	3318      	adds	r3, #24
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7fe fdb6 	bl	800b320 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	3304      	adds	r3, #4
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fe fdb1 	bl	800b320 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7c2:	4b2d      	ldr	r3, [pc, #180]	@ (800c878 <xTaskResumeAll+0x124>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d903      	bls.n	800c7d2 <xTaskResumeAll+0x7e>
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ce:	4a2a      	ldr	r2, [pc, #168]	@ (800c878 <xTaskResumeAll+0x124>)
 800c7d0:	6013      	str	r3, [r2, #0]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	4413      	add	r3, r2
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	4a27      	ldr	r2, [pc, #156]	@ (800c87c <xTaskResumeAll+0x128>)
 800c7e0:	441a      	add	r2, r3
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	3304      	adds	r3, #4
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	f7fe fd3c 	bl	800b266 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7f2:	4b23      	ldr	r3, [pc, #140]	@ (800c880 <xTaskResumeAll+0x12c>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d302      	bcc.n	800c802 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c7fc:	4b21      	ldr	r3, [pc, #132]	@ (800c884 <xTaskResumeAll+0x130>)
 800c7fe:	2201      	movs	r2, #1
 800c800:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c802:	4b1c      	ldr	r3, [pc, #112]	@ (800c874 <xTaskResumeAll+0x120>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1cb      	bne.n	800c7a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d001      	beq.n	800c814 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c810:	f000 fcc8 	bl	800d1a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c814:	4b1c      	ldr	r3, [pc, #112]	@ (800c888 <xTaskResumeAll+0x134>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d010      	beq.n	800c842 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c820:	f000 f8d4 	bl	800c9cc <xTaskIncrementTick>
 800c824:	4603      	mov	r3, r0
 800c826:	2b00      	cmp	r3, #0
 800c828:	d002      	beq.n	800c830 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c82a:	4b16      	ldr	r3, [pc, #88]	@ (800c884 <xTaskResumeAll+0x130>)
 800c82c:	2201      	movs	r2, #1
 800c82e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	3b01      	subs	r3, #1
 800c834:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d1f1      	bne.n	800c820 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c83c:	4b12      	ldr	r3, [pc, #72]	@ (800c888 <xTaskResumeAll+0x134>)
 800c83e:	2200      	movs	r2, #0
 800c840:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c842:	4b10      	ldr	r3, [pc, #64]	@ (800c884 <xTaskResumeAll+0x130>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d009      	beq.n	800c85e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c84a:	2301      	movs	r3, #1
 800c84c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c84e:	4b0f      	ldr	r3, [pc, #60]	@ (800c88c <xTaskResumeAll+0x138>)
 800c850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c854:	601a      	str	r2, [r3, #0]
 800c856:	f3bf 8f4f 	dsb	sy
 800c85a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c85e:	f001 fc2d 	bl	800e0bc <vPortExitCritical>

	return xAlreadyYielded;
 800c862:	68bb      	ldr	r3, [r7, #8]
}
 800c864:	4618      	mov	r0, r3
 800c866:	3710      	adds	r7, #16
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	20001fe8 	.word	0x20001fe8
 800c870:	20001fc0 	.word	0x20001fc0
 800c874:	20001f80 	.word	0x20001f80
 800c878:	20001fc8 	.word	0x20001fc8
 800c87c:	20001af0 	.word	0x20001af0
 800c880:	20001aec 	.word	0x20001aec
 800c884:	20001fd4 	.word	0x20001fd4
 800c888:	20001fd0 	.word	0x20001fd0
 800c88c:	e000ed04 	.word	0xe000ed04

0800c890 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c896:	4b05      	ldr	r3, [pc, #20]	@ (800c8ac <xTaskGetTickCount+0x1c>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c89c:	687b      	ldr	r3, [r7, #4]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	370c      	adds	r7, #12
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	20001fc4 	.word	0x20001fc4

0800c8b0 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b086      	sub	sp, #24
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	617b      	str	r3, [r7, #20]
 800c8c0:	2338      	movs	r3, #56	@ 0x38
 800c8c2:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800c8c4:	f7ff ff38 	bl	800c738 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800c8c8:	4b3a      	ldr	r3, [pc, #232]	@ (800c9b4 <uxTaskGetSystemState+0x104>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	68ba      	ldr	r2, [r7, #8]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d368      	bcc.n	800c9a4 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	3b01      	subs	r3, #1
 800c8d6:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800c8d8:	697a      	ldr	r2, [r7, #20]
 800c8da:	4613      	mov	r3, r2
 800c8dc:	00db      	lsls	r3, r3, #3
 800c8de:	4413      	add	r3, r2
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	1898      	adds	r0, r3, r2
 800c8e8:	693a      	ldr	r2, [r7, #16]
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	4413      	add	r3, r2
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	4a31      	ldr	r2, [pc, #196]	@ (800c9b8 <uxTaskGetSystemState+0x108>)
 800c8f4:	4413      	add	r3, r2
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	f000 fbaf 	bl	800d05c <prvListTasksWithinSingleList>
 800c8fe:	4602      	mov	r2, r0
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	4413      	add	r3, r2
 800c904:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d1e2      	bne.n	800c8d2 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800c90c:	697a      	ldr	r2, [r7, #20]
 800c90e:	4613      	mov	r3, r2
 800c910:	00db      	lsls	r3, r3, #3
 800c912:	4413      	add	r3, r2
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	461a      	mov	r2, r3
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	4413      	add	r3, r2
 800c91c:	4a27      	ldr	r2, [pc, #156]	@ (800c9bc <uxTaskGetSystemState+0x10c>)
 800c91e:	6811      	ldr	r1, [r2, #0]
 800c920:	2202      	movs	r2, #2
 800c922:	4618      	mov	r0, r3
 800c924:	f000 fb9a 	bl	800d05c <prvListTasksWithinSingleList>
 800c928:	4602      	mov	r2, r0
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	4413      	add	r3, r2
 800c92e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800c930:	697a      	ldr	r2, [r7, #20]
 800c932:	4613      	mov	r3, r2
 800c934:	00db      	lsls	r3, r3, #3
 800c936:	4413      	add	r3, r2
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	461a      	mov	r2, r3
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	4413      	add	r3, r2
 800c940:	4a1f      	ldr	r2, [pc, #124]	@ (800c9c0 <uxTaskGetSystemState+0x110>)
 800c942:	6811      	ldr	r1, [r2, #0]
 800c944:	2202      	movs	r2, #2
 800c946:	4618      	mov	r0, r3
 800c948:	f000 fb88 	bl	800d05c <prvListTasksWithinSingleList>
 800c94c:	4602      	mov	r2, r0
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	4413      	add	r3, r2
 800c952:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800c954:	697a      	ldr	r2, [r7, #20]
 800c956:	4613      	mov	r3, r2
 800c958:	00db      	lsls	r3, r3, #3
 800c95a:	4413      	add	r3, r2
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	461a      	mov	r2, r3
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	4413      	add	r3, r2
 800c964:	2204      	movs	r2, #4
 800c966:	4917      	ldr	r1, [pc, #92]	@ (800c9c4 <uxTaskGetSystemState+0x114>)
 800c968:	4618      	mov	r0, r3
 800c96a:	f000 fb77 	bl	800d05c <prvListTasksWithinSingleList>
 800c96e:	4602      	mov	r2, r0
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	4413      	add	r3, r2
 800c974:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800c976:	697a      	ldr	r2, [r7, #20]
 800c978:	4613      	mov	r3, r2
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	4413      	add	r3, r2
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	461a      	mov	r2, r3
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	4413      	add	r3, r2
 800c986:	2203      	movs	r2, #3
 800c988:	490f      	ldr	r1, [pc, #60]	@ (800c9c8 <uxTaskGetSystemState+0x118>)
 800c98a:	4618      	mov	r0, r3
 800c98c:	f000 fb66 	bl	800d05c <prvListTasksWithinSingleList>
 800c990:	4602      	mov	r2, r0
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	4413      	add	r3, r2
 800c996:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d002      	beq.n	800c9a4 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800c9a4:	f7ff fed6 	bl	800c754 <xTaskResumeAll>

		return uxTask;
 800c9a8:	697b      	ldr	r3, [r7, #20]
	}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3718      	adds	r7, #24
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	20001fc0 	.word	0x20001fc0
 800c9b8:	20001af0 	.word	0x20001af0
 800c9bc:	20001f78 	.word	0x20001f78
 800c9c0:	20001f7c 	.word	0x20001f7c
 800c9c4:	20001f94 	.word	0x20001f94
 800c9c8:	20001fac 	.word	0x20001fac

0800c9cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b086      	sub	sp, #24
 800c9d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9d6:	4b4f      	ldr	r3, [pc, #316]	@ (800cb14 <xTaskIncrementTick+0x148>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	f040 8090 	bne.w	800cb00 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c9e0:	4b4d      	ldr	r3, [pc, #308]	@ (800cb18 <xTaskIncrementTick+0x14c>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c9e8:	4a4b      	ldr	r2, [pc, #300]	@ (800cb18 <xTaskIncrementTick+0x14c>)
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d121      	bne.n	800ca38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c9f4:	4b49      	ldr	r3, [pc, #292]	@ (800cb1c <xTaskIncrementTick+0x150>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d00b      	beq.n	800ca16 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca02:	f383 8811 	msr	BASEPRI, r3
 800ca06:	f3bf 8f6f 	isb	sy
 800ca0a:	f3bf 8f4f 	dsb	sy
 800ca0e:	603b      	str	r3, [r7, #0]
}
 800ca10:	bf00      	nop
 800ca12:	bf00      	nop
 800ca14:	e7fd      	b.n	800ca12 <xTaskIncrementTick+0x46>
 800ca16:	4b41      	ldr	r3, [pc, #260]	@ (800cb1c <xTaskIncrementTick+0x150>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	60fb      	str	r3, [r7, #12]
 800ca1c:	4b40      	ldr	r3, [pc, #256]	@ (800cb20 <xTaskIncrementTick+0x154>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a3e      	ldr	r2, [pc, #248]	@ (800cb1c <xTaskIncrementTick+0x150>)
 800ca22:	6013      	str	r3, [r2, #0]
 800ca24:	4a3e      	ldr	r2, [pc, #248]	@ (800cb20 <xTaskIncrementTick+0x154>)
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	6013      	str	r3, [r2, #0]
 800ca2a:	4b3e      	ldr	r3, [pc, #248]	@ (800cb24 <xTaskIncrementTick+0x158>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	4a3c      	ldr	r2, [pc, #240]	@ (800cb24 <xTaskIncrementTick+0x158>)
 800ca32:	6013      	str	r3, [r2, #0]
 800ca34:	f000 fbb6 	bl	800d1a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ca38:	4b3b      	ldr	r3, [pc, #236]	@ (800cb28 <xTaskIncrementTick+0x15c>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	693a      	ldr	r2, [r7, #16]
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d349      	bcc.n	800cad6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca42:	4b36      	ldr	r3, [pc, #216]	@ (800cb1c <xTaskIncrementTick+0x150>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d104      	bne.n	800ca56 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca4c:	4b36      	ldr	r3, [pc, #216]	@ (800cb28 <xTaskIncrementTick+0x15c>)
 800ca4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca52:	601a      	str	r2, [r3, #0]
					break;
 800ca54:	e03f      	b.n	800cad6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca56:	4b31      	ldr	r3, [pc, #196]	@ (800cb1c <xTaskIncrementTick+0x150>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ca66:	693a      	ldr	r2, [r7, #16]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d203      	bcs.n	800ca76 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ca6e:	4a2e      	ldr	r2, [pc, #184]	@ (800cb28 <xTaskIncrementTick+0x15c>)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ca74:	e02f      	b.n	800cad6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	3304      	adds	r3, #4
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7fe fc50 	bl	800b320 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d004      	beq.n	800ca92 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	3318      	adds	r3, #24
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7fe fc47 	bl	800b320 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca96:	4b25      	ldr	r3, [pc, #148]	@ (800cb2c <xTaskIncrementTick+0x160>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d903      	bls.n	800caa6 <xTaskIncrementTick+0xda>
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caa2:	4a22      	ldr	r2, [pc, #136]	@ (800cb2c <xTaskIncrementTick+0x160>)
 800caa4:	6013      	str	r3, [r2, #0]
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caaa:	4613      	mov	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	4413      	add	r3, r2
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	4a1f      	ldr	r2, [pc, #124]	@ (800cb30 <xTaskIncrementTick+0x164>)
 800cab4:	441a      	add	r2, r3
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	3304      	adds	r3, #4
 800caba:	4619      	mov	r1, r3
 800cabc:	4610      	mov	r0, r2
 800cabe:	f7fe fbd2 	bl	800b266 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cac6:	4b1b      	ldr	r3, [pc, #108]	@ (800cb34 <xTaskIncrementTick+0x168>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cacc:	429a      	cmp	r2, r3
 800cace:	d3b8      	bcc.n	800ca42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cad0:	2301      	movs	r3, #1
 800cad2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cad4:	e7b5      	b.n	800ca42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cad6:	4b17      	ldr	r3, [pc, #92]	@ (800cb34 <xTaskIncrementTick+0x168>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cadc:	4914      	ldr	r1, [pc, #80]	@ (800cb30 <xTaskIncrementTick+0x164>)
 800cade:	4613      	mov	r3, r2
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4413      	add	r3, r2
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	440b      	add	r3, r1
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2b01      	cmp	r3, #1
 800caec:	d901      	bls.n	800caf2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800caee:	2301      	movs	r3, #1
 800caf0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800caf2:	4b11      	ldr	r3, [pc, #68]	@ (800cb38 <xTaskIncrementTick+0x16c>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d007      	beq.n	800cb0a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800cafa:	2301      	movs	r3, #1
 800cafc:	617b      	str	r3, [r7, #20]
 800cafe:	e004      	b.n	800cb0a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cb00:	4b0e      	ldr	r3, [pc, #56]	@ (800cb3c <xTaskIncrementTick+0x170>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3301      	adds	r3, #1
 800cb06:	4a0d      	ldr	r2, [pc, #52]	@ (800cb3c <xTaskIncrementTick+0x170>)
 800cb08:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cb0a:	697b      	ldr	r3, [r7, #20]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3718      	adds	r7, #24
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	20001fe8 	.word	0x20001fe8
 800cb18:	20001fc4 	.word	0x20001fc4
 800cb1c:	20001f78 	.word	0x20001f78
 800cb20:	20001f7c 	.word	0x20001f7c
 800cb24:	20001fd8 	.word	0x20001fd8
 800cb28:	20001fe0 	.word	0x20001fe0
 800cb2c:	20001fc8 	.word	0x20001fc8
 800cb30:	20001af0 	.word	0x20001af0
 800cb34:	20001aec 	.word	0x20001aec
 800cb38:	20001fd4 	.word	0x20001fd4
 800cb3c:	20001fd0 	.word	0x20001fd0

0800cb40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cb40:	b480      	push	{r7}
 800cb42:	b085      	sub	sp, #20
 800cb44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cb46:	4b2b      	ldr	r3, [pc, #172]	@ (800cbf4 <vTaskSwitchContext+0xb4>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d003      	beq.n	800cb56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cb4e:	4b2a      	ldr	r3, [pc, #168]	@ (800cbf8 <vTaskSwitchContext+0xb8>)
 800cb50:	2201      	movs	r2, #1
 800cb52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cb54:	e047      	b.n	800cbe6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800cb56:	4b28      	ldr	r3, [pc, #160]	@ (800cbf8 <vTaskSwitchContext+0xb8>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb5c:	4b27      	ldr	r3, [pc, #156]	@ (800cbfc <vTaskSwitchContext+0xbc>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	60fb      	str	r3, [r7, #12]
 800cb62:	e011      	b.n	800cb88 <vTaskSwitchContext+0x48>
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d10b      	bne.n	800cb82 <vTaskSwitchContext+0x42>
	__asm volatile
 800cb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6e:	f383 8811 	msr	BASEPRI, r3
 800cb72:	f3bf 8f6f 	isb	sy
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	607b      	str	r3, [r7, #4]
}
 800cb7c:	bf00      	nop
 800cb7e:	bf00      	nop
 800cb80:	e7fd      	b.n	800cb7e <vTaskSwitchContext+0x3e>
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	3b01      	subs	r3, #1
 800cb86:	60fb      	str	r3, [r7, #12]
 800cb88:	491d      	ldr	r1, [pc, #116]	@ (800cc00 <vTaskSwitchContext+0xc0>)
 800cb8a:	68fa      	ldr	r2, [r7, #12]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	4413      	add	r3, r2
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	440b      	add	r3, r1
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d0e3      	beq.n	800cb64 <vTaskSwitchContext+0x24>
 800cb9c:	68fa      	ldr	r2, [r7, #12]
 800cb9e:	4613      	mov	r3, r2
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	4413      	add	r3, r2
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	4a16      	ldr	r2, [pc, #88]	@ (800cc00 <vTaskSwitchContext+0xc0>)
 800cba8:	4413      	add	r3, r2
 800cbaa:	60bb      	str	r3, [r7, #8]
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	685a      	ldr	r2, [r3, #4]
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	605a      	str	r2, [r3, #4]
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	685a      	ldr	r2, [r3, #4]
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	3308      	adds	r3, #8
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d104      	bne.n	800cbcc <vTaskSwitchContext+0x8c>
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	685a      	ldr	r2, [r3, #4]
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	605a      	str	r2, [r3, #4]
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	4a0c      	ldr	r2, [pc, #48]	@ (800cc04 <vTaskSwitchContext+0xc4>)
 800cbd4:	6013      	str	r3, [r2, #0]
 800cbd6:	4a09      	ldr	r2, [pc, #36]	@ (800cbfc <vTaskSwitchContext+0xbc>)
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cbdc:	4b09      	ldr	r3, [pc, #36]	@ (800cc04 <vTaskSwitchContext+0xc4>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	3354      	adds	r3, #84	@ 0x54
 800cbe2:	4a09      	ldr	r2, [pc, #36]	@ (800cc08 <vTaskSwitchContext+0xc8>)
 800cbe4:	6013      	str	r3, [r2, #0]
}
 800cbe6:	bf00      	nop
 800cbe8:	3714      	adds	r7, #20
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	20001fe8 	.word	0x20001fe8
 800cbf8:	20001fd4 	.word	0x20001fd4
 800cbfc:	20001fc8 	.word	0x20001fc8
 800cc00:	20001af0 	.word	0x20001af0
 800cc04:	20001aec 	.word	0x20001aec
 800cc08:	20001190 	.word	0x20001190

0800cc0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d10b      	bne.n	800cc34 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cc1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc20:	f383 8811 	msr	BASEPRI, r3
 800cc24:	f3bf 8f6f 	isb	sy
 800cc28:	f3bf 8f4f 	dsb	sy
 800cc2c:	60fb      	str	r3, [r7, #12]
}
 800cc2e:	bf00      	nop
 800cc30:	bf00      	nop
 800cc32:	e7fd      	b.n	800cc30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc34:	4b07      	ldr	r3, [pc, #28]	@ (800cc54 <vTaskPlaceOnEventList+0x48>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	3318      	adds	r3, #24
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f7fe fb36 	bl	800b2ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cc42:	2101      	movs	r1, #1
 800cc44:	6838      	ldr	r0, [r7, #0]
 800cc46:	f000 fd27 	bl	800d698 <prvAddCurrentTaskToDelayedList>
}
 800cc4a:	bf00      	nop
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	20001aec 	.word	0x20001aec

0800cc58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b086      	sub	sp, #24
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10b      	bne.n	800cc82 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800cc6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	617b      	str	r3, [r7, #20]
}
 800cc7c:	bf00      	nop
 800cc7e:	bf00      	nop
 800cc80:	e7fd      	b.n	800cc7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc82:	4b0a      	ldr	r3, [pc, #40]	@ (800ccac <vTaskPlaceOnEventListRestricted+0x54>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	3318      	adds	r3, #24
 800cc88:	4619      	mov	r1, r3
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f7fe faeb 	bl	800b266 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d002      	beq.n	800cc9c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800cc96:	f04f 33ff 	mov.w	r3, #4294967295
 800cc9a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cc9c:	6879      	ldr	r1, [r7, #4]
 800cc9e:	68b8      	ldr	r0, [r7, #8]
 800cca0:	f000 fcfa 	bl	800d698 <prvAddCurrentTaskToDelayedList>
	}
 800cca4:	bf00      	nop
 800cca6:	3718      	adds	r7, #24
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	20001aec 	.word	0x20001aec

0800ccb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b086      	sub	sp, #24
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d10b      	bne.n	800ccde <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ccc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccca:	f383 8811 	msr	BASEPRI, r3
 800ccce:	f3bf 8f6f 	isb	sy
 800ccd2:	f3bf 8f4f 	dsb	sy
 800ccd6:	60fb      	str	r3, [r7, #12]
}
 800ccd8:	bf00      	nop
 800ccda:	bf00      	nop
 800ccdc:	e7fd      	b.n	800ccda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	3318      	adds	r3, #24
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7fe fb1c 	bl	800b320 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cce8:	4b1d      	ldr	r3, [pc, #116]	@ (800cd60 <xTaskRemoveFromEventList+0xb0>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d11d      	bne.n	800cd2c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	3304      	adds	r3, #4
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7fe fb13 	bl	800b320 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccfe:	4b19      	ldr	r3, [pc, #100]	@ (800cd64 <xTaskRemoveFromEventList+0xb4>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d903      	bls.n	800cd0e <xTaskRemoveFromEventList+0x5e>
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd0a:	4a16      	ldr	r2, [pc, #88]	@ (800cd64 <xTaskRemoveFromEventList+0xb4>)
 800cd0c:	6013      	str	r3, [r2, #0]
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd12:	4613      	mov	r3, r2
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	4413      	add	r3, r2
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	4a13      	ldr	r2, [pc, #76]	@ (800cd68 <xTaskRemoveFromEventList+0xb8>)
 800cd1c:	441a      	add	r2, r3
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	3304      	adds	r3, #4
 800cd22:	4619      	mov	r1, r3
 800cd24:	4610      	mov	r0, r2
 800cd26:	f7fe fa9e 	bl	800b266 <vListInsertEnd>
 800cd2a:	e005      	b.n	800cd38 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	3318      	adds	r3, #24
 800cd30:	4619      	mov	r1, r3
 800cd32:	480e      	ldr	r0, [pc, #56]	@ (800cd6c <xTaskRemoveFromEventList+0xbc>)
 800cd34:	f7fe fa97 	bl	800b266 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd3c:	4b0c      	ldr	r3, [pc, #48]	@ (800cd70 <xTaskRemoveFromEventList+0xc0>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d905      	bls.n	800cd52 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cd46:	2301      	movs	r3, #1
 800cd48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cd4a:	4b0a      	ldr	r3, [pc, #40]	@ (800cd74 <xTaskRemoveFromEventList+0xc4>)
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	601a      	str	r2, [r3, #0]
 800cd50:	e001      	b.n	800cd56 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800cd52:	2300      	movs	r3, #0
 800cd54:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cd56:	697b      	ldr	r3, [r7, #20]
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3718      	adds	r7, #24
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	20001fe8 	.word	0x20001fe8
 800cd64:	20001fc8 	.word	0x20001fc8
 800cd68:	20001af0 	.word	0x20001af0
 800cd6c:	20001f80 	.word	0x20001f80
 800cd70:	20001aec 	.word	0x20001aec
 800cd74:	20001fd4 	.word	0x20001fd4

0800cd78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b083      	sub	sp, #12
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cd80:	4b06      	ldr	r3, [pc, #24]	@ (800cd9c <vTaskInternalSetTimeOutState+0x24>)
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cd88:	4b05      	ldr	r3, [pc, #20]	@ (800cda0 <vTaskInternalSetTimeOutState+0x28>)
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	605a      	str	r2, [r3, #4]
}
 800cd90:	bf00      	nop
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr
 800cd9c:	20001fd8 	.word	0x20001fd8
 800cda0:	20001fc4 	.word	0x20001fc4

0800cda4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b088      	sub	sp, #32
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d10b      	bne.n	800cdcc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800cdb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdb8:	f383 8811 	msr	BASEPRI, r3
 800cdbc:	f3bf 8f6f 	isb	sy
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	613b      	str	r3, [r7, #16]
}
 800cdc6:	bf00      	nop
 800cdc8:	bf00      	nop
 800cdca:	e7fd      	b.n	800cdc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10b      	bne.n	800cdea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800cdd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	60fb      	str	r3, [r7, #12]
}
 800cde4:	bf00      	nop
 800cde6:	bf00      	nop
 800cde8:	e7fd      	b.n	800cde6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800cdea:	f001 f935 	bl	800e058 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cdee:	4b1d      	ldr	r3, [pc, #116]	@ (800ce64 <xTaskCheckForTimeOut+0xc0>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	69ba      	ldr	r2, [r7, #24]
 800cdfa:	1ad3      	subs	r3, r2, r3
 800cdfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce06:	d102      	bne.n	800ce0e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	61fb      	str	r3, [r7, #28]
 800ce0c:	e023      	b.n	800ce56 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	4b15      	ldr	r3, [pc, #84]	@ (800ce68 <xTaskCheckForTimeOut+0xc4>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d007      	beq.n	800ce2a <xTaskCheckForTimeOut+0x86>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	69ba      	ldr	r2, [r7, #24]
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d302      	bcc.n	800ce2a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ce24:	2301      	movs	r3, #1
 800ce26:	61fb      	str	r3, [r7, #28]
 800ce28:	e015      	b.n	800ce56 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	697a      	ldr	r2, [r7, #20]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d20b      	bcs.n	800ce4c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	1ad2      	subs	r2, r2, r3
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f7ff ff99 	bl	800cd78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ce46:	2300      	movs	r3, #0
 800ce48:	61fb      	str	r3, [r7, #28]
 800ce4a:	e004      	b.n	800ce56 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ce52:	2301      	movs	r3, #1
 800ce54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ce56:	f001 f931 	bl	800e0bc <vPortExitCritical>

	return xReturn;
 800ce5a:	69fb      	ldr	r3, [r7, #28]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3720      	adds	r7, #32
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	20001fc4 	.word	0x20001fc4
 800ce68:	20001fd8 	.word	0x20001fd8

0800ce6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ce70:	4b03      	ldr	r3, [pc, #12]	@ (800ce80 <vTaskMissedYield+0x14>)
 800ce72:	2201      	movs	r2, #1
 800ce74:	601a      	str	r2, [r3, #0]
}
 800ce76:	bf00      	nop
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr
 800ce80:	20001fd4 	.word	0x20001fd4

0800ce84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ce8c:	f000 f852 	bl	800cf34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ce90:	4b06      	ldr	r3, [pc, #24]	@ (800ceac <prvIdleTask+0x28>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d9f9      	bls.n	800ce8c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ce98:	4b05      	ldr	r3, [pc, #20]	@ (800ceb0 <prvIdleTask+0x2c>)
 800ce9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce9e:	601a      	str	r2, [r3, #0]
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cea8:	e7f0      	b.n	800ce8c <prvIdleTask+0x8>
 800ceaa:	bf00      	nop
 800ceac:	20001af0 	.word	0x20001af0
 800ceb0:	e000ed04 	.word	0xe000ed04

0800ceb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ceba:	2300      	movs	r3, #0
 800cebc:	607b      	str	r3, [r7, #4]
 800cebe:	e00c      	b.n	800ceda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	4613      	mov	r3, r2
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	4413      	add	r3, r2
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	4a12      	ldr	r2, [pc, #72]	@ (800cf14 <prvInitialiseTaskLists+0x60>)
 800cecc:	4413      	add	r3, r2
 800cece:	4618      	mov	r0, r3
 800ced0:	f7fe f99c 	bl	800b20c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	3301      	adds	r3, #1
 800ced8:	607b      	str	r3, [r7, #4]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2b37      	cmp	r3, #55	@ 0x37
 800cede:	d9ef      	bls.n	800cec0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cee0:	480d      	ldr	r0, [pc, #52]	@ (800cf18 <prvInitialiseTaskLists+0x64>)
 800cee2:	f7fe f993 	bl	800b20c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cee6:	480d      	ldr	r0, [pc, #52]	@ (800cf1c <prvInitialiseTaskLists+0x68>)
 800cee8:	f7fe f990 	bl	800b20c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ceec:	480c      	ldr	r0, [pc, #48]	@ (800cf20 <prvInitialiseTaskLists+0x6c>)
 800ceee:	f7fe f98d 	bl	800b20c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cef2:	480c      	ldr	r0, [pc, #48]	@ (800cf24 <prvInitialiseTaskLists+0x70>)
 800cef4:	f7fe f98a 	bl	800b20c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cef8:	480b      	ldr	r0, [pc, #44]	@ (800cf28 <prvInitialiseTaskLists+0x74>)
 800cefa:	f7fe f987 	bl	800b20c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cefe:	4b0b      	ldr	r3, [pc, #44]	@ (800cf2c <prvInitialiseTaskLists+0x78>)
 800cf00:	4a05      	ldr	r2, [pc, #20]	@ (800cf18 <prvInitialiseTaskLists+0x64>)
 800cf02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cf04:	4b0a      	ldr	r3, [pc, #40]	@ (800cf30 <prvInitialiseTaskLists+0x7c>)
 800cf06:	4a05      	ldr	r2, [pc, #20]	@ (800cf1c <prvInitialiseTaskLists+0x68>)
 800cf08:	601a      	str	r2, [r3, #0]
}
 800cf0a:	bf00      	nop
 800cf0c:	3708      	adds	r7, #8
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	20001af0 	.word	0x20001af0
 800cf18:	20001f50 	.word	0x20001f50
 800cf1c:	20001f64 	.word	0x20001f64
 800cf20:	20001f80 	.word	0x20001f80
 800cf24:	20001f94 	.word	0x20001f94
 800cf28:	20001fac 	.word	0x20001fac
 800cf2c:	20001f78 	.word	0x20001f78
 800cf30:	20001f7c 	.word	0x20001f7c

0800cf34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf3a:	e019      	b.n	800cf70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cf3c:	f001 f88c 	bl	800e058 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf40:	4b10      	ldr	r3, [pc, #64]	@ (800cf84 <prvCheckTasksWaitingTermination+0x50>)
 800cf42:	68db      	ldr	r3, [r3, #12]
 800cf44:	68db      	ldr	r3, [r3, #12]
 800cf46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	3304      	adds	r3, #4
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f7fe f9e7 	bl	800b320 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cf52:	4b0d      	ldr	r3, [pc, #52]	@ (800cf88 <prvCheckTasksWaitingTermination+0x54>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	3b01      	subs	r3, #1
 800cf58:	4a0b      	ldr	r2, [pc, #44]	@ (800cf88 <prvCheckTasksWaitingTermination+0x54>)
 800cf5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cf5c:	4b0b      	ldr	r3, [pc, #44]	@ (800cf8c <prvCheckTasksWaitingTermination+0x58>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	3b01      	subs	r3, #1
 800cf62:	4a0a      	ldr	r2, [pc, #40]	@ (800cf8c <prvCheckTasksWaitingTermination+0x58>)
 800cf64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cf66:	f001 f8a9 	bl	800e0bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 f8e4 	bl	800d138 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf70:	4b06      	ldr	r3, [pc, #24]	@ (800cf8c <prvCheckTasksWaitingTermination+0x58>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d1e1      	bne.n	800cf3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cf78:	bf00      	nop
 800cf7a:	bf00      	nop
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	20001f94 	.word	0x20001f94
 800cf88:	20001fc0 	.word	0x20001fc0
 800cf8c:	20001fa8 	.word	0x20001fa8

0800cf90 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b086      	sub	sp, #24
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
 800cf9c:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d102      	bne.n	800cfaa <vTaskGetInfo+0x1a>
 800cfa4:	4b2c      	ldr	r3, [pc, #176]	@ (800d058 <vTaskGetInfo+0xc8>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	e000      	b.n	800cfac <vTaskGetInfo+0x1c>
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	697a      	ldr	r2, [r7, #20]
 800cfb2:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800cfe4:	78fb      	ldrb	r3, [r7, #3]
 800cfe6:	2b05      	cmp	r3, #5
 800cfe8:	d01a      	beq.n	800d020 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800cfea:	4b1b      	ldr	r3, [pc, #108]	@ (800d058 <vTaskGetInfo+0xc8>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	697a      	ldr	r2, [r7, #20]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d103      	bne.n	800cffc <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	2200      	movs	r2, #0
 800cff8:	731a      	strb	r2, [r3, #12]
 800cffa:	e018      	b.n	800d02e <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	78fa      	ldrb	r2, [r7, #3]
 800d000:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800d002:	78fb      	ldrb	r3, [r7, #3]
 800d004:	2b03      	cmp	r3, #3
 800d006:	d112      	bne.n	800d02e <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800d008:	f7ff fb96 	bl	800c738 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d010:	2b00      	cmp	r3, #0
 800d012:	d002      	beq.n	800d01a <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	2202      	movs	r2, #2
 800d018:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800d01a:	f7ff fb9b 	bl	800c754 <xTaskResumeAll>
 800d01e:	e006      	b.n	800d02e <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800d020:	6978      	ldr	r0, [r7, #20]
 800d022:	f7ff fab1 	bl	800c588 <eTaskGetState>
 800d026:	4603      	mov	r3, r0
 800d028:	461a      	mov	r2, r3
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d009      	beq.n	800d048 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d038:	4618      	mov	r0, r3
 800d03a:	f000 f861 	bl	800d100 <prvTaskCheckFreeStackSpace>
 800d03e:	4603      	mov	r3, r0
 800d040:	461a      	mov	r2, r3
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800d046:	e002      	b.n	800d04e <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	2200      	movs	r2, #0
 800d04c:	841a      	strh	r2, [r3, #32]
	}
 800d04e:	bf00      	nop
 800d050:	3718      	adds	r7, #24
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	20001aec 	.word	0x20001aec

0800d05c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b08a      	sub	sp, #40	@ 0x28
 800d060:	af00      	add	r7, sp, #0
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	4613      	mov	r3, r2
 800d068:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800d06a:	2300      	movs	r3, #0
 800d06c:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d03f      	beq.n	800d0f6 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	623b      	str	r3, [r7, #32]
 800d07a:	6a3b      	ldr	r3, [r7, #32]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	685a      	ldr	r2, [r3, #4]
 800d080:	6a3b      	ldr	r3, [r7, #32]
 800d082:	605a      	str	r2, [r3, #4]
 800d084:	6a3b      	ldr	r3, [r7, #32]
 800d086:	685a      	ldr	r2, [r3, #4]
 800d088:	6a3b      	ldr	r3, [r7, #32]
 800d08a:	3308      	adds	r3, #8
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d104      	bne.n	800d09a <prvListTasksWithinSingleList+0x3e>
 800d090:	6a3b      	ldr	r3, [r7, #32]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	685a      	ldr	r2, [r3, #4]
 800d096:	6a3b      	ldr	r3, [r7, #32]
 800d098:	605a      	str	r2, [r3, #4]
 800d09a:	6a3b      	ldr	r3, [r7, #32]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	68db      	ldr	r3, [r3, #12]
 800d0a0:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	61bb      	str	r3, [r7, #24]
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	685a      	ldr	r2, [r3, #4]
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	605a      	str	r2, [r3, #4]
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	685a      	ldr	r2, [r3, #4]
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	3308      	adds	r3, #8
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d104      	bne.n	800d0c6 <prvListTasksWithinSingleList+0x6a>
 800d0bc:	69bb      	ldr	r3, [r7, #24]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	685a      	ldr	r2, [r3, #4]
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	605a      	str	r2, [r3, #4]
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	68db      	ldr	r3, [r3, #12]
 800d0cc:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800d0ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	00db      	lsls	r3, r3, #3
 800d0d4:	4413      	add	r3, r2
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	461a      	mov	r2, r3
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	1899      	adds	r1, r3, r2
 800d0de:	79fb      	ldrb	r3, [r7, #7]
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	6978      	ldr	r0, [r7, #20]
 800d0e4:	f7ff ff54 	bl	800cf90 <vTaskGetInfo>
				uxTask++;
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 800d0ee:	697a      	ldr	r2, [r7, #20]
 800d0f0:	69fb      	ldr	r3, [r7, #28]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d1d5      	bne.n	800d0a2 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800d0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3728      	adds	r7, #40	@ 0x28
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800d100:	b480      	push	{r7}
 800d102:	b085      	sub	sp, #20
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800d108:	2300      	movs	r3, #0
 800d10a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d10c:	e005      	b.n	800d11a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	3301      	adds	r3, #1
 800d112:	607b      	str	r3, [r7, #4]
			ulCount++;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	3301      	adds	r3, #1
 800d118:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	2ba5      	cmp	r3, #165	@ 0xa5
 800d120:	d0f5      	beq.n	800d10e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	089b      	lsrs	r3, r3, #2
 800d126:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	b29b      	uxth	r3, r3
	}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3714      	adds	r7, #20
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	3354      	adds	r3, #84	@ 0x54
 800d144:	4618      	mov	r0, r3
 800d146:	f004 fb0b 	bl	8011760 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d150:	2b00      	cmp	r3, #0
 800d152:	d108      	bne.n	800d166 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d158:	4618      	mov	r0, r3
 800d15a:	f001 f96d 	bl	800e438 <vPortFree>
				vPortFree( pxTCB );
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f001 f96a 	bl	800e438 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d164:	e019      	b.n	800d19a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d103      	bne.n	800d178 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f001 f961 	bl	800e438 <vPortFree>
	}
 800d176:	e010      	b.n	800d19a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d17e:	2b02      	cmp	r3, #2
 800d180:	d00b      	beq.n	800d19a <prvDeleteTCB+0x62>
	__asm volatile
 800d182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d186:	f383 8811 	msr	BASEPRI, r3
 800d18a:	f3bf 8f6f 	isb	sy
 800d18e:	f3bf 8f4f 	dsb	sy
 800d192:	60fb      	str	r3, [r7, #12]
}
 800d194:	bf00      	nop
 800d196:	bf00      	nop
 800d198:	e7fd      	b.n	800d196 <prvDeleteTCB+0x5e>
	}
 800d19a:	bf00      	nop
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
	...

0800d1a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1aa:	4b0c      	ldr	r3, [pc, #48]	@ (800d1dc <prvResetNextTaskUnblockTime+0x38>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d104      	bne.n	800d1be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1b4:	4b0a      	ldr	r3, [pc, #40]	@ (800d1e0 <prvResetNextTaskUnblockTime+0x3c>)
 800d1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1bc:	e008      	b.n	800d1d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1be:	4b07      	ldr	r3, [pc, #28]	@ (800d1dc <prvResetNextTaskUnblockTime+0x38>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	4a04      	ldr	r2, [pc, #16]	@ (800d1e0 <prvResetNextTaskUnblockTime+0x3c>)
 800d1ce:	6013      	str	r3, [r2, #0]
}
 800d1d0:	bf00      	nop
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr
 800d1dc:	20001f78 	.word	0x20001f78
 800d1e0:	20001fe0 	.word	0x20001fe0

0800d1e4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d1ea:	4b05      	ldr	r3, [pc, #20]	@ (800d200 <xTaskGetCurrentTaskHandle+0x1c>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d1f0:	687b      	ldr	r3, [r7, #4]
	}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	370c      	adds	r7, #12
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	20001aec 	.word	0x20001aec

0800d204 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d20a:	4b0b      	ldr	r3, [pc, #44]	@ (800d238 <xTaskGetSchedulerState+0x34>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d102      	bne.n	800d218 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d212:	2301      	movs	r3, #1
 800d214:	607b      	str	r3, [r7, #4]
 800d216:	e008      	b.n	800d22a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d218:	4b08      	ldr	r3, [pc, #32]	@ (800d23c <xTaskGetSchedulerState+0x38>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d102      	bne.n	800d226 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d220:	2302      	movs	r3, #2
 800d222:	607b      	str	r3, [r7, #4]
 800d224:	e001      	b.n	800d22a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d226:	2300      	movs	r3, #0
 800d228:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d22a:	687b      	ldr	r3, [r7, #4]
	}
 800d22c:	4618      	mov	r0, r3
 800d22e:	370c      	adds	r7, #12
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr
 800d238:	20001fcc 	.word	0x20001fcc
 800d23c:	20001fe8 	.word	0x20001fe8

0800d240 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d24c:	2300      	movs	r3, #0
 800d24e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d051      	beq.n	800d2fa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d25a:	4b2a      	ldr	r3, [pc, #168]	@ (800d304 <xTaskPriorityInherit+0xc4>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d260:	429a      	cmp	r2, r3
 800d262:	d241      	bcs.n	800d2e8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	699b      	ldr	r3, [r3, #24]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	db06      	blt.n	800d27a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d26c:	4b25      	ldr	r3, [pc, #148]	@ (800d304 <xTaskPriorityInherit+0xc4>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d272:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	6959      	ldr	r1, [r3, #20]
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d282:	4613      	mov	r3, r2
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	4413      	add	r3, r2
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	4a1f      	ldr	r2, [pc, #124]	@ (800d308 <xTaskPriorityInherit+0xc8>)
 800d28c:	4413      	add	r3, r2
 800d28e:	4299      	cmp	r1, r3
 800d290:	d122      	bne.n	800d2d8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	3304      	adds	r3, #4
 800d296:	4618      	mov	r0, r3
 800d298:	f7fe f842 	bl	800b320 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d29c:	4b19      	ldr	r3, [pc, #100]	@ (800d304 <xTaskPriorityInherit+0xc4>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2aa:	4b18      	ldr	r3, [pc, #96]	@ (800d30c <xTaskPriorityInherit+0xcc>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d903      	bls.n	800d2ba <xTaskPriorityInherit+0x7a>
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2b6:	4a15      	ldr	r2, [pc, #84]	@ (800d30c <xTaskPriorityInherit+0xcc>)
 800d2b8:	6013      	str	r3, [r2, #0]
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2be:	4613      	mov	r3, r2
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	4413      	add	r3, r2
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	4a10      	ldr	r2, [pc, #64]	@ (800d308 <xTaskPriorityInherit+0xc8>)
 800d2c8:	441a      	add	r2, r3
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	3304      	adds	r3, #4
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	4610      	mov	r0, r2
 800d2d2:	f7fd ffc8 	bl	800b266 <vListInsertEnd>
 800d2d6:	e004      	b.n	800d2e2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d304 <xTaskPriorityInherit+0xc4>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	60fb      	str	r3, [r7, #12]
 800d2e6:	e008      	b.n	800d2fa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d2ec:	4b05      	ldr	r3, [pc, #20]	@ (800d304 <xTaskPriorityInherit+0xc4>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d201      	bcs.n	800d2fa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
	}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3710      	adds	r7, #16
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	20001aec 	.word	0x20001aec
 800d308:	20001af0 	.word	0x20001af0
 800d30c:	20001fc8 	.word	0x20001fc8

0800d310 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d310:	b580      	push	{r7, lr}
 800d312:	b086      	sub	sp, #24
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d31c:	2300      	movs	r3, #0
 800d31e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d058      	beq.n	800d3d8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d326:	4b2f      	ldr	r3, [pc, #188]	@ (800d3e4 <xTaskPriorityDisinherit+0xd4>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	693a      	ldr	r2, [r7, #16]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d00b      	beq.n	800d348 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d334:	f383 8811 	msr	BASEPRI, r3
 800d338:	f3bf 8f6f 	isb	sy
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	60fb      	str	r3, [r7, #12]
}
 800d342:	bf00      	nop
 800d344:	bf00      	nop
 800d346:	e7fd      	b.n	800d344 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d10b      	bne.n	800d368 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d354:	f383 8811 	msr	BASEPRI, r3
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	60bb      	str	r3, [r7, #8]
}
 800d362:	bf00      	nop
 800d364:	bf00      	nop
 800d366:	e7fd      	b.n	800d364 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d36c:	1e5a      	subs	r2, r3, #1
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d02c      	beq.n	800d3d8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d382:	2b00      	cmp	r3, #0
 800d384:	d128      	bne.n	800d3d8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	3304      	adds	r3, #4
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7fd ffc8 	bl	800b320 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d39c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3a8:	4b0f      	ldr	r3, [pc, #60]	@ (800d3e8 <xTaskPriorityDisinherit+0xd8>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d903      	bls.n	800d3b8 <xTaskPriorityDisinherit+0xa8>
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3b4:	4a0c      	ldr	r2, [pc, #48]	@ (800d3e8 <xTaskPriorityDisinherit+0xd8>)
 800d3b6:	6013      	str	r3, [r2, #0]
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3bc:	4613      	mov	r3, r2
 800d3be:	009b      	lsls	r3, r3, #2
 800d3c0:	4413      	add	r3, r2
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	4a09      	ldr	r2, [pc, #36]	@ (800d3ec <xTaskPriorityDisinherit+0xdc>)
 800d3c6:	441a      	add	r2, r3
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	3304      	adds	r3, #4
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	4610      	mov	r0, r2
 800d3d0:	f7fd ff49 	bl	800b266 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3d8:	697b      	ldr	r3, [r7, #20]
	}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3718      	adds	r7, #24
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	20001aec 	.word	0x20001aec
 800d3e8:	20001fc8 	.word	0x20001fc8
 800d3ec:	20001af0 	.word	0x20001af0

0800d3f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b088      	sub	sp, #32
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d3fe:	2301      	movs	r3, #1
 800d400:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d06c      	beq.n	800d4e2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d10b      	bne.n	800d428 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d414:	f383 8811 	msr	BASEPRI, r3
 800d418:	f3bf 8f6f 	isb	sy
 800d41c:	f3bf 8f4f 	dsb	sy
 800d420:	60fb      	str	r3, [r7, #12]
}
 800d422:	bf00      	nop
 800d424:	bf00      	nop
 800d426:	e7fd      	b.n	800d424 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d428:	69bb      	ldr	r3, [r7, #24]
 800d42a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d42c:	683a      	ldr	r2, [r7, #0]
 800d42e:	429a      	cmp	r2, r3
 800d430:	d902      	bls.n	800d438 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	61fb      	str	r3, [r7, #28]
 800d436:	e002      	b.n	800d43e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d438:	69bb      	ldr	r3, [r7, #24]
 800d43a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d43c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d442:	69fa      	ldr	r2, [r7, #28]
 800d444:	429a      	cmp	r2, r3
 800d446:	d04c      	beq.n	800d4e2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d448:	69bb      	ldr	r3, [r7, #24]
 800d44a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d44c:	697a      	ldr	r2, [r7, #20]
 800d44e:	429a      	cmp	r2, r3
 800d450:	d147      	bne.n	800d4e2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d452:	4b26      	ldr	r3, [pc, #152]	@ (800d4ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	69ba      	ldr	r2, [r7, #24]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d10b      	bne.n	800d474 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800d45c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d460:	f383 8811 	msr	BASEPRI, r3
 800d464:	f3bf 8f6f 	isb	sy
 800d468:	f3bf 8f4f 	dsb	sy
 800d46c:	60bb      	str	r3, [r7, #8]
}
 800d46e:	bf00      	nop
 800d470:	bf00      	nop
 800d472:	e7fd      	b.n	800d470 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d474:	69bb      	ldr	r3, [r7, #24]
 800d476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d478:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	69fa      	ldr	r2, [r7, #28]
 800d47e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	699b      	ldr	r3, [r3, #24]
 800d484:	2b00      	cmp	r3, #0
 800d486:	db04      	blt.n	800d492 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	6959      	ldr	r1, [r3, #20]
 800d496:	693a      	ldr	r2, [r7, #16]
 800d498:	4613      	mov	r3, r2
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	4413      	add	r3, r2
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	4a13      	ldr	r2, [pc, #76]	@ (800d4f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d4a2:	4413      	add	r3, r2
 800d4a4:	4299      	cmp	r1, r3
 800d4a6:	d11c      	bne.n	800d4e2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	3304      	adds	r3, #4
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7fd ff37 	bl	800b320 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4b6:	4b0f      	ldr	r3, [pc, #60]	@ (800d4f4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d903      	bls.n	800d4c6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800d4be:	69bb      	ldr	r3, [r7, #24]
 800d4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4c2:	4a0c      	ldr	r2, [pc, #48]	@ (800d4f4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d4c4:	6013      	str	r3, [r2, #0]
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ca:	4613      	mov	r3, r2
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	4413      	add	r3, r2
 800d4d0:	009b      	lsls	r3, r3, #2
 800d4d2:	4a07      	ldr	r2, [pc, #28]	@ (800d4f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d4d4:	441a      	add	r2, r3
 800d4d6:	69bb      	ldr	r3, [r7, #24]
 800d4d8:	3304      	adds	r3, #4
 800d4da:	4619      	mov	r1, r3
 800d4dc:	4610      	mov	r0, r2
 800d4de:	f7fd fec2 	bl	800b266 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d4e2:	bf00      	nop
 800d4e4:	3720      	adds	r7, #32
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	20001aec 	.word	0x20001aec
 800d4f0:	20001af0 	.word	0x20001af0
 800d4f4:	20001fc8 	.word	0x20001fc8

0800d4f8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800d502:	6839      	ldr	r1, [r7, #0]
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f004 f9e4 	bl	80118d2 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f7f2 fe6a 	bl	80001e4 <strlen>
 800d510:	60f8      	str	r0, [r7, #12]
 800d512:	e007      	b.n	800d524 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	4413      	add	r3, r2
 800d51a:	2220      	movs	r2, #32
 800d51c:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	3301      	adds	r3, #1
 800d522:	60fb      	str	r3, [r7, #12]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2b0e      	cmp	r3, #14
 800d528:	d9f4      	bls.n	800d514 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	4413      	add	r3, r2
 800d530:	2200      	movs	r2, #0
 800d532:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	4413      	add	r3, r2
	}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
	...

0800d544 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800d544:	b590      	push	{r4, r7, lr}
 800d546:	b089      	sub	sp, #36	@ 0x24
 800d548:	af02      	add	r7, sp, #8
 800d54a:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800d552:	4b45      	ldr	r3, [pc, #276]	@ (800d668 <vTaskList+0x124>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800d558:	4b43      	ldr	r3, [pc, #268]	@ (800d668 <vTaskList+0x124>)
 800d55a:	681a      	ldr	r2, [r3, #0]
 800d55c:	4613      	mov	r3, r2
 800d55e:	00db      	lsls	r3, r3, #3
 800d560:	4413      	add	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4618      	mov	r0, r3
 800d566:	f000 fe99 	bl	800e29c <pvPortMalloc>
 800d56a:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d076      	beq.n	800d660 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800d572:	2200      	movs	r2, #0
 800d574:	68f9      	ldr	r1, [r7, #12]
 800d576:	68b8      	ldr	r0, [r7, #8]
 800d578:	f7ff f99a 	bl	800c8b0 <uxTaskGetSystemState>
 800d57c:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800d57e:	2300      	movs	r3, #0
 800d580:	617b      	str	r3, [r7, #20]
 800d582:	e066      	b.n	800d652 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800d584:	697a      	ldr	r2, [r7, #20]
 800d586:	4613      	mov	r3, r2
 800d588:	00db      	lsls	r3, r3, #3
 800d58a:	4413      	add	r3, r2
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	461a      	mov	r2, r3
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	4413      	add	r3, r2
 800d594:	7b1b      	ldrb	r3, [r3, #12]
 800d596:	2b04      	cmp	r3, #4
 800d598:	d81b      	bhi.n	800d5d2 <vTaskList+0x8e>
 800d59a:	a201      	add	r2, pc, #4	@ (adr r2, 800d5a0 <vTaskList+0x5c>)
 800d59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5a0:	0800d5b5 	.word	0x0800d5b5
 800d5a4:	0800d5bb 	.word	0x0800d5bb
 800d5a8:	0800d5c1 	.word	0x0800d5c1
 800d5ac:	0800d5c7 	.word	0x0800d5c7
 800d5b0:	0800d5cd 	.word	0x0800d5cd
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800d5b4:	2358      	movs	r3, #88	@ 0x58
 800d5b6:	74fb      	strb	r3, [r7, #19]
										break;
 800d5b8:	e00e      	b.n	800d5d8 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800d5ba:	2352      	movs	r3, #82	@ 0x52
 800d5bc:	74fb      	strb	r3, [r7, #19]
										break;
 800d5be:	e00b      	b.n	800d5d8 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800d5c0:	2342      	movs	r3, #66	@ 0x42
 800d5c2:	74fb      	strb	r3, [r7, #19]
										break;
 800d5c4:	e008      	b.n	800d5d8 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800d5c6:	2353      	movs	r3, #83	@ 0x53
 800d5c8:	74fb      	strb	r3, [r7, #19]
										break;
 800d5ca:	e005      	b.n	800d5d8 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800d5cc:	2344      	movs	r3, #68	@ 0x44
 800d5ce:	74fb      	strb	r3, [r7, #19]
										break;
 800d5d0:	e002      	b.n	800d5d8 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	74fb      	strb	r3, [r7, #19]
										break;
 800d5d6:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800d5d8:	697a      	ldr	r2, [r7, #20]
 800d5da:	4613      	mov	r3, r2
 800d5dc:	00db      	lsls	r3, r3, #3
 800d5de:	4413      	add	r3, r2
 800d5e0:	009b      	lsls	r3, r3, #2
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f7ff ff83 	bl	800d4f8 <prvWriteNameToBuffer>
 800d5f2:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800d5f4:	7cf9      	ldrb	r1, [r7, #19]
 800d5f6:	697a      	ldr	r2, [r7, #20]
 800d5f8:	4613      	mov	r3, r2
 800d5fa:	00db      	lsls	r3, r3, #3
 800d5fc:	4413      	add	r3, r2
 800d5fe:	009b      	lsls	r3, r3, #2
 800d600:	461a      	mov	r2, r3
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	4413      	add	r3, r2
 800d606:	6918      	ldr	r0, [r3, #16]
 800d608:	697a      	ldr	r2, [r7, #20]
 800d60a:	4613      	mov	r3, r2
 800d60c:	00db      	lsls	r3, r3, #3
 800d60e:	4413      	add	r3, r2
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	461a      	mov	r2, r3
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	4413      	add	r3, r2
 800d618:	8c1b      	ldrh	r3, [r3, #32]
 800d61a:	461c      	mov	r4, r3
 800d61c:	697a      	ldr	r2, [r7, #20]
 800d61e:	4613      	mov	r3, r2
 800d620:	00db      	lsls	r3, r3, #3
 800d622:	4413      	add	r3, r2
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	461a      	mov	r2, r3
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	4413      	add	r3, r2
 800d62c:	689b      	ldr	r3, [r3, #8]
 800d62e:	9301      	str	r3, [sp, #4]
 800d630:	9400      	str	r4, [sp, #0]
 800d632:	4603      	mov	r3, r0
 800d634:	460a      	mov	r2, r1
 800d636:	490d      	ldr	r1, [pc, #52]	@ (800d66c <vTaskList+0x128>)
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f003 ff39 	bl	80114b0 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f7f2 fdd0 	bl	80001e4 <strlen>
 800d644:	4602      	mov	r2, r0
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4413      	add	r3, r2
 800d64a:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	3301      	adds	r3, #1
 800d650:	617b      	str	r3, [r7, #20]
 800d652:	697a      	ldr	r2, [r7, #20]
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	429a      	cmp	r2, r3
 800d658:	d394      	bcc.n	800d584 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800d65a:	68b8      	ldr	r0, [r7, #8]
 800d65c:	f000 feec 	bl	800e438 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d660:	bf00      	nop
 800d662:	371c      	adds	r7, #28
 800d664:	46bd      	mov	sp, r7
 800d666:	bd90      	pop	{r4, r7, pc}
 800d668:	20001fc0 	.word	0x20001fc0
 800d66c:	08012af8 	.word	0x08012af8

0800d670 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d670:	b480      	push	{r7}
 800d672:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d674:	4b07      	ldr	r3, [pc, #28]	@ (800d694 <pvTaskIncrementMutexHeldCount+0x24>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d004      	beq.n	800d686 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d67c:	4b05      	ldr	r3, [pc, #20]	@ (800d694 <pvTaskIncrementMutexHeldCount+0x24>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d682:	3201      	adds	r2, #1
 800d684:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800d686:	4b03      	ldr	r3, [pc, #12]	@ (800d694 <pvTaskIncrementMutexHeldCount+0x24>)
 800d688:	681b      	ldr	r3, [r3, #0]
	}
 800d68a:	4618      	mov	r0, r3
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr
 800d694:	20001aec 	.word	0x20001aec

0800d698 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d6a2:	4b21      	ldr	r3, [pc, #132]	@ (800d728 <prvAddCurrentTaskToDelayedList+0x90>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6a8:	4b20      	ldr	r3, [pc, #128]	@ (800d72c <prvAddCurrentTaskToDelayedList+0x94>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	3304      	adds	r3, #4
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fd fe36 	bl	800b320 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ba:	d10a      	bne.n	800d6d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d007      	beq.n	800d6d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6c2:	4b1a      	ldr	r3, [pc, #104]	@ (800d72c <prvAddCurrentTaskToDelayedList+0x94>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	3304      	adds	r3, #4
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	4819      	ldr	r0, [pc, #100]	@ (800d730 <prvAddCurrentTaskToDelayedList+0x98>)
 800d6cc:	f7fd fdcb 	bl	800b266 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d6d0:	e026      	b.n	800d720 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d6d2:	68fa      	ldr	r2, [r7, #12]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d6da:	4b14      	ldr	r3, [pc, #80]	@ (800d72c <prvAddCurrentTaskToDelayedList+0x94>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d6e2:	68ba      	ldr	r2, [r7, #8]
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d209      	bcs.n	800d6fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6ea:	4b12      	ldr	r3, [pc, #72]	@ (800d734 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d6ec:	681a      	ldr	r2, [r3, #0]
 800d6ee:	4b0f      	ldr	r3, [pc, #60]	@ (800d72c <prvAddCurrentTaskToDelayedList+0x94>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	3304      	adds	r3, #4
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	4610      	mov	r0, r2
 800d6f8:	f7fd fdd9 	bl	800b2ae <vListInsert>
}
 800d6fc:	e010      	b.n	800d720 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d738 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d700:	681a      	ldr	r2, [r3, #0]
 800d702:	4b0a      	ldr	r3, [pc, #40]	@ (800d72c <prvAddCurrentTaskToDelayedList+0x94>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	3304      	adds	r3, #4
 800d708:	4619      	mov	r1, r3
 800d70a:	4610      	mov	r0, r2
 800d70c:	f7fd fdcf 	bl	800b2ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d710:	4b0a      	ldr	r3, [pc, #40]	@ (800d73c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	68ba      	ldr	r2, [r7, #8]
 800d716:	429a      	cmp	r2, r3
 800d718:	d202      	bcs.n	800d720 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d71a:	4a08      	ldr	r2, [pc, #32]	@ (800d73c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	6013      	str	r3, [r2, #0]
}
 800d720:	bf00      	nop
 800d722:	3710      	adds	r7, #16
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	20001fc4 	.word	0x20001fc4
 800d72c:	20001aec 	.word	0x20001aec
 800d730:	20001fac 	.word	0x20001fac
 800d734:	20001f7c 	.word	0x20001f7c
 800d738:	20001f78 	.word	0x20001f78
 800d73c:	20001fe0 	.word	0x20001fe0

0800d740 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b08a      	sub	sp, #40	@ 0x28
 800d744:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d746:	2300      	movs	r3, #0
 800d748:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d74a:	f000 fb13 	bl	800dd74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d74e:	4b1d      	ldr	r3, [pc, #116]	@ (800d7c4 <xTimerCreateTimerTask+0x84>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d021      	beq.n	800d79a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d756:	2300      	movs	r3, #0
 800d758:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d75a:	2300      	movs	r3, #0
 800d75c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d75e:	1d3a      	adds	r2, r7, #4
 800d760:	f107 0108 	add.w	r1, r7, #8
 800d764:	f107 030c 	add.w	r3, r7, #12
 800d768:	4618      	mov	r0, r3
 800d76a:	f7fd fd35 	bl	800b1d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d76e:	6879      	ldr	r1, [r7, #4]
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	68fa      	ldr	r2, [r7, #12]
 800d774:	9202      	str	r2, [sp, #8]
 800d776:	9301      	str	r3, [sp, #4]
 800d778:	2302      	movs	r3, #2
 800d77a:	9300      	str	r3, [sp, #0]
 800d77c:	2300      	movs	r3, #0
 800d77e:	460a      	mov	r2, r1
 800d780:	4911      	ldr	r1, [pc, #68]	@ (800d7c8 <xTimerCreateTimerTask+0x88>)
 800d782:	4812      	ldr	r0, [pc, #72]	@ (800d7cc <xTimerCreateTimerTask+0x8c>)
 800d784:	f7fe fd0c 	bl	800c1a0 <xTaskCreateStatic>
 800d788:	4603      	mov	r3, r0
 800d78a:	4a11      	ldr	r2, [pc, #68]	@ (800d7d0 <xTimerCreateTimerTask+0x90>)
 800d78c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d78e:	4b10      	ldr	r3, [pc, #64]	@ (800d7d0 <xTimerCreateTimerTask+0x90>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d001      	beq.n	800d79a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d796:	2301      	movs	r3, #1
 800d798:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d10b      	bne.n	800d7b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a4:	f383 8811 	msr	BASEPRI, r3
 800d7a8:	f3bf 8f6f 	isb	sy
 800d7ac:	f3bf 8f4f 	dsb	sy
 800d7b0:	613b      	str	r3, [r7, #16]
}
 800d7b2:	bf00      	nop
 800d7b4:	bf00      	nop
 800d7b6:	e7fd      	b.n	800d7b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d7b8:	697b      	ldr	r3, [r7, #20]
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3718      	adds	r7, #24
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	2000201c 	.word	0x2000201c
 800d7c8:	08012b08 	.word	0x08012b08
 800d7cc:	0800d90d 	.word	0x0800d90d
 800d7d0:	20002020 	.word	0x20002020

0800d7d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b08a      	sub	sp, #40	@ 0x28
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	607a      	str	r2, [r7, #4]
 800d7e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d10b      	bne.n	800d804 <xTimerGenericCommand+0x30>
	__asm volatile
 800d7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f0:	f383 8811 	msr	BASEPRI, r3
 800d7f4:	f3bf 8f6f 	isb	sy
 800d7f8:	f3bf 8f4f 	dsb	sy
 800d7fc:	623b      	str	r3, [r7, #32]
}
 800d7fe:	bf00      	nop
 800d800:	bf00      	nop
 800d802:	e7fd      	b.n	800d800 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d804:	4b19      	ldr	r3, [pc, #100]	@ (800d86c <xTimerGenericCommand+0x98>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d02a      	beq.n	800d862 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	2b05      	cmp	r3, #5
 800d81c:	dc18      	bgt.n	800d850 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d81e:	f7ff fcf1 	bl	800d204 <xTaskGetSchedulerState>
 800d822:	4603      	mov	r3, r0
 800d824:	2b02      	cmp	r3, #2
 800d826:	d109      	bne.n	800d83c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d828:	4b10      	ldr	r3, [pc, #64]	@ (800d86c <xTimerGenericCommand+0x98>)
 800d82a:	6818      	ldr	r0, [r3, #0]
 800d82c:	f107 0110 	add.w	r1, r7, #16
 800d830:	2300      	movs	r3, #0
 800d832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d834:	f7fd ff9c 	bl	800b770 <xQueueGenericSend>
 800d838:	6278      	str	r0, [r7, #36]	@ 0x24
 800d83a:	e012      	b.n	800d862 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d83c:	4b0b      	ldr	r3, [pc, #44]	@ (800d86c <xTimerGenericCommand+0x98>)
 800d83e:	6818      	ldr	r0, [r3, #0]
 800d840:	f107 0110 	add.w	r1, r7, #16
 800d844:	2300      	movs	r3, #0
 800d846:	2200      	movs	r2, #0
 800d848:	f7fd ff92 	bl	800b770 <xQueueGenericSend>
 800d84c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d84e:	e008      	b.n	800d862 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d850:	4b06      	ldr	r3, [pc, #24]	@ (800d86c <xTimerGenericCommand+0x98>)
 800d852:	6818      	ldr	r0, [r3, #0]
 800d854:	f107 0110 	add.w	r1, r7, #16
 800d858:	2300      	movs	r3, #0
 800d85a:	683a      	ldr	r2, [r7, #0]
 800d85c:	f7fe f88a 	bl	800b974 <xQueueGenericSendFromISR>
 800d860:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d864:	4618      	mov	r0, r3
 800d866:	3728      	adds	r7, #40	@ 0x28
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	2000201c 	.word	0x2000201c

0800d870 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b088      	sub	sp, #32
 800d874:	af02      	add	r7, sp, #8
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d87a:	4b23      	ldr	r3, [pc, #140]	@ (800d908 <prvProcessExpiredTimer+0x98>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	68db      	ldr	r3, [r3, #12]
 800d880:	68db      	ldr	r3, [r3, #12]
 800d882:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	3304      	adds	r3, #4
 800d888:	4618      	mov	r0, r3
 800d88a:	f7fd fd49 	bl	800b320 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d894:	f003 0304 	and.w	r3, r3, #4
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d023      	beq.n	800d8e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	699a      	ldr	r2, [r3, #24]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	18d1      	adds	r1, r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	683a      	ldr	r2, [r7, #0]
 800d8a8:	6978      	ldr	r0, [r7, #20]
 800d8aa:	f000 f8d5 	bl	800da58 <prvInsertTimerInActiveList>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d020      	beq.n	800d8f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	9300      	str	r3, [sp, #0]
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	2100      	movs	r1, #0
 800d8be:	6978      	ldr	r0, [r7, #20]
 800d8c0:	f7ff ff88 	bl	800d7d4 <xTimerGenericCommand>
 800d8c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d114      	bne.n	800d8f6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d0:	f383 8811 	msr	BASEPRI, r3
 800d8d4:	f3bf 8f6f 	isb	sy
 800d8d8:	f3bf 8f4f 	dsb	sy
 800d8dc:	60fb      	str	r3, [r7, #12]
}
 800d8de:	bf00      	nop
 800d8e0:	bf00      	nop
 800d8e2:	e7fd      	b.n	800d8e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d8ea:	f023 0301 	bic.w	r3, r3, #1
 800d8ee:	b2da      	uxtb	r2, r3
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	6a1b      	ldr	r3, [r3, #32]
 800d8fa:	6978      	ldr	r0, [r7, #20]
 800d8fc:	4798      	blx	r3
}
 800d8fe:	bf00      	nop
 800d900:	3718      	adds	r7, #24
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	20002014 	.word	0x20002014

0800d90c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d914:	f107 0308 	add.w	r3, r7, #8
 800d918:	4618      	mov	r0, r3
 800d91a:	f000 f859 	bl	800d9d0 <prvGetNextExpireTime>
 800d91e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	4619      	mov	r1, r3
 800d924:	68f8      	ldr	r0, [r7, #12]
 800d926:	f000 f805 	bl	800d934 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d92a:	f000 f8d7 	bl	800dadc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d92e:	bf00      	nop
 800d930:	e7f0      	b.n	800d914 <prvTimerTask+0x8>
	...

0800d934 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d93e:	f7fe fefb 	bl	800c738 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d942:	f107 0308 	add.w	r3, r7, #8
 800d946:	4618      	mov	r0, r3
 800d948:	f000 f866 	bl	800da18 <prvSampleTimeNow>
 800d94c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d130      	bne.n	800d9b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d10a      	bne.n	800d970 <prvProcessTimerOrBlockTask+0x3c>
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d806      	bhi.n	800d970 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d962:	f7fe fef7 	bl	800c754 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d966:	68f9      	ldr	r1, [r7, #12]
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f7ff ff81 	bl	800d870 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d96e:	e024      	b.n	800d9ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d008      	beq.n	800d988 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d976:	4b13      	ldr	r3, [pc, #76]	@ (800d9c4 <prvProcessTimerOrBlockTask+0x90>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d101      	bne.n	800d984 <prvProcessTimerOrBlockTask+0x50>
 800d980:	2301      	movs	r3, #1
 800d982:	e000      	b.n	800d986 <prvProcessTimerOrBlockTask+0x52>
 800d984:	2300      	movs	r3, #0
 800d986:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d988:	4b0f      	ldr	r3, [pc, #60]	@ (800d9c8 <prvProcessTimerOrBlockTask+0x94>)
 800d98a:	6818      	ldr	r0, [r3, #0]
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	1ad3      	subs	r3, r2, r3
 800d992:	683a      	ldr	r2, [r7, #0]
 800d994:	4619      	mov	r1, r3
 800d996:	f7fe fbcf 	bl	800c138 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d99a:	f7fe fedb 	bl	800c754 <xTaskResumeAll>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d10a      	bne.n	800d9ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d9a4:	4b09      	ldr	r3, [pc, #36]	@ (800d9cc <prvProcessTimerOrBlockTask+0x98>)
 800d9a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9aa:	601a      	str	r2, [r3, #0]
 800d9ac:	f3bf 8f4f 	dsb	sy
 800d9b0:	f3bf 8f6f 	isb	sy
}
 800d9b4:	e001      	b.n	800d9ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d9b6:	f7fe fecd 	bl	800c754 <xTaskResumeAll>
}
 800d9ba:	bf00      	nop
 800d9bc:	3710      	adds	r7, #16
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	20002018 	.word	0x20002018
 800d9c8:	2000201c 	.word	0x2000201c
 800d9cc:	e000ed04 	.word	0xe000ed04

0800d9d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b085      	sub	sp, #20
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d9d8:	4b0e      	ldr	r3, [pc, #56]	@ (800da14 <prvGetNextExpireTime+0x44>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d101      	bne.n	800d9e6 <prvGetNextExpireTime+0x16>
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	e000      	b.n	800d9e8 <prvGetNextExpireTime+0x18>
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d105      	bne.n	800da00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d9f4:	4b07      	ldr	r3, [pc, #28]	@ (800da14 <prvGetNextExpireTime+0x44>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	60fb      	str	r3, [r7, #12]
 800d9fe:	e001      	b.n	800da04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800da00:	2300      	movs	r3, #0
 800da02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800da04:	68fb      	ldr	r3, [r7, #12]
}
 800da06:	4618      	mov	r0, r3
 800da08:	3714      	adds	r7, #20
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	20002014 	.word	0x20002014

0800da18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800da20:	f7fe ff36 	bl	800c890 <xTaskGetTickCount>
 800da24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800da26:	4b0b      	ldr	r3, [pc, #44]	@ (800da54 <prvSampleTimeNow+0x3c>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	68fa      	ldr	r2, [r7, #12]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d205      	bcs.n	800da3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800da30:	f000 f93a 	bl	800dca8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2201      	movs	r2, #1
 800da38:	601a      	str	r2, [r3, #0]
 800da3a:	e002      	b.n	800da42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800da42:	4a04      	ldr	r2, [pc, #16]	@ (800da54 <prvSampleTimeNow+0x3c>)
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800da48:	68fb      	ldr	r3, [r7, #12]
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3710      	adds	r7, #16
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	20002024 	.word	0x20002024

0800da58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b086      	sub	sp, #24
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	607a      	str	r2, [r7, #4]
 800da64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800da66:	2300      	movs	r3, #0
 800da68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	68ba      	ldr	r2, [r7, #8]
 800da6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	68fa      	ldr	r2, [r7, #12]
 800da74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800da76:	68ba      	ldr	r2, [r7, #8]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d812      	bhi.n	800daa4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	1ad2      	subs	r2, r2, r3
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	699b      	ldr	r3, [r3, #24]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d302      	bcc.n	800da92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800da8c:	2301      	movs	r3, #1
 800da8e:	617b      	str	r3, [r7, #20]
 800da90:	e01b      	b.n	800daca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800da92:	4b10      	ldr	r3, [pc, #64]	@ (800dad4 <prvInsertTimerInActiveList+0x7c>)
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	3304      	adds	r3, #4
 800da9a:	4619      	mov	r1, r3
 800da9c:	4610      	mov	r0, r2
 800da9e:	f7fd fc06 	bl	800b2ae <vListInsert>
 800daa2:	e012      	b.n	800daca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800daa4:	687a      	ldr	r2, [r7, #4]
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d206      	bcs.n	800daba <prvInsertTimerInActiveList+0x62>
 800daac:	68ba      	ldr	r2, [r7, #8]
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d302      	bcc.n	800daba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dab4:	2301      	movs	r3, #1
 800dab6:	617b      	str	r3, [r7, #20]
 800dab8:	e007      	b.n	800daca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800daba:	4b07      	ldr	r3, [pc, #28]	@ (800dad8 <prvInsertTimerInActiveList+0x80>)
 800dabc:	681a      	ldr	r2, [r3, #0]
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	3304      	adds	r3, #4
 800dac2:	4619      	mov	r1, r3
 800dac4:	4610      	mov	r0, r2
 800dac6:	f7fd fbf2 	bl	800b2ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800daca:	697b      	ldr	r3, [r7, #20]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3718      	adds	r7, #24
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	20002018 	.word	0x20002018
 800dad8:	20002014 	.word	0x20002014

0800dadc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b08e      	sub	sp, #56	@ 0x38
 800dae0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dae2:	e0ce      	b.n	800dc82 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	da19      	bge.n	800db1e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800daea:	1d3b      	adds	r3, r7, #4
 800daec:	3304      	adds	r3, #4
 800daee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800daf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d10b      	bne.n	800db0e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800daf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dafa:	f383 8811 	msr	BASEPRI, r3
 800dafe:	f3bf 8f6f 	isb	sy
 800db02:	f3bf 8f4f 	dsb	sy
 800db06:	61fb      	str	r3, [r7, #28]
}
 800db08:	bf00      	nop
 800db0a:	bf00      	nop
 800db0c:	e7fd      	b.n	800db0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800db0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db14:	6850      	ldr	r0, [r2, #4]
 800db16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db18:	6892      	ldr	r2, [r2, #8]
 800db1a:	4611      	mov	r1, r2
 800db1c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2b00      	cmp	r3, #0
 800db22:	f2c0 80ae 	blt.w	800dc82 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800db2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db2c:	695b      	ldr	r3, [r3, #20]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d004      	beq.n	800db3c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db34:	3304      	adds	r3, #4
 800db36:	4618      	mov	r0, r3
 800db38:	f7fd fbf2 	bl	800b320 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db3c:	463b      	mov	r3, r7
 800db3e:	4618      	mov	r0, r3
 800db40:	f7ff ff6a 	bl	800da18 <prvSampleTimeNow>
 800db44:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2b09      	cmp	r3, #9
 800db4a:	f200 8097 	bhi.w	800dc7c <prvProcessReceivedCommands+0x1a0>
 800db4e:	a201      	add	r2, pc, #4	@ (adr r2, 800db54 <prvProcessReceivedCommands+0x78>)
 800db50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db54:	0800db7d 	.word	0x0800db7d
 800db58:	0800db7d 	.word	0x0800db7d
 800db5c:	0800db7d 	.word	0x0800db7d
 800db60:	0800dbf3 	.word	0x0800dbf3
 800db64:	0800dc07 	.word	0x0800dc07
 800db68:	0800dc53 	.word	0x0800dc53
 800db6c:	0800db7d 	.word	0x0800db7d
 800db70:	0800db7d 	.word	0x0800db7d
 800db74:	0800dbf3 	.word	0x0800dbf3
 800db78:	0800dc07 	.word	0x0800dc07
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800db7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db82:	f043 0301 	orr.w	r3, r3, #1
 800db86:	b2da      	uxtb	r2, r3
 800db88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800db8e:	68ba      	ldr	r2, [r7, #8]
 800db90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db92:	699b      	ldr	r3, [r3, #24]
 800db94:	18d1      	adds	r1, r2, r3
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db9c:	f7ff ff5c 	bl	800da58 <prvInsertTimerInActiveList>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d06c      	beq.n	800dc80 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dba8:	6a1b      	ldr	r3, [r3, #32]
 800dbaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dbb4:	f003 0304 	and.w	r3, r3, #4
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d061      	beq.n	800dc80 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbc0:	699b      	ldr	r3, [r3, #24]
 800dbc2:	441a      	add	r2, r3
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	9300      	str	r3, [sp, #0]
 800dbc8:	2300      	movs	r3, #0
 800dbca:	2100      	movs	r1, #0
 800dbcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbce:	f7ff fe01 	bl	800d7d4 <xTimerGenericCommand>
 800dbd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dbd4:	6a3b      	ldr	r3, [r7, #32]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d152      	bne.n	800dc80 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800dbda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbde:	f383 8811 	msr	BASEPRI, r3
 800dbe2:	f3bf 8f6f 	isb	sy
 800dbe6:	f3bf 8f4f 	dsb	sy
 800dbea:	61bb      	str	r3, [r7, #24]
}
 800dbec:	bf00      	nop
 800dbee:	bf00      	nop
 800dbf0:	e7fd      	b.n	800dbee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dbf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dbf8:	f023 0301 	bic.w	r3, r3, #1
 800dbfc:	b2da      	uxtb	r2, r3
 800dbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dc04:	e03d      	b.n	800dc82 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc0c:	f043 0301 	orr.w	r3, r3, #1
 800dc10:	b2da      	uxtb	r2, r3
 800dc12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dc18:	68ba      	ldr	r2, [r7, #8]
 800dc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dc1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc20:	699b      	ldr	r3, [r3, #24]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d10b      	bne.n	800dc3e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800dc26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc2a:	f383 8811 	msr	BASEPRI, r3
 800dc2e:	f3bf 8f6f 	isb	sy
 800dc32:	f3bf 8f4f 	dsb	sy
 800dc36:	617b      	str	r3, [r7, #20]
}
 800dc38:	bf00      	nop
 800dc3a:	bf00      	nop
 800dc3c:	e7fd      	b.n	800dc3a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dc3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc40:	699a      	ldr	r2, [r3, #24]
 800dc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc44:	18d1      	adds	r1, r2, r3
 800dc46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc4c:	f7ff ff04 	bl	800da58 <prvInsertTimerInActiveList>
					break;
 800dc50:	e017      	b.n	800dc82 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dc52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc58:	f003 0302 	and.w	r3, r3, #2
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d103      	bne.n	800dc68 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800dc60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc62:	f000 fbe9 	bl	800e438 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dc66:	e00c      	b.n	800dc82 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc6e:	f023 0301 	bic.w	r3, r3, #1
 800dc72:	b2da      	uxtb	r2, r3
 800dc74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dc7a:	e002      	b.n	800dc82 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800dc7c:	bf00      	nop
 800dc7e:	e000      	b.n	800dc82 <prvProcessReceivedCommands+0x1a6>
					break;
 800dc80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc82:	4b08      	ldr	r3, [pc, #32]	@ (800dca4 <prvProcessReceivedCommands+0x1c8>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	1d39      	adds	r1, r7, #4
 800dc88:	2200      	movs	r2, #0
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7fd ff10 	bl	800bab0 <xQueueReceive>
 800dc90:	4603      	mov	r3, r0
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f47f af26 	bne.w	800dae4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dc98:	bf00      	nop
 800dc9a:	bf00      	nop
 800dc9c:	3730      	adds	r7, #48	@ 0x30
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	2000201c 	.word	0x2000201c

0800dca8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b088      	sub	sp, #32
 800dcac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dcae:	e049      	b.n	800dd44 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dcb0:	4b2e      	ldr	r3, [pc, #184]	@ (800dd6c <prvSwitchTimerLists+0xc4>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	68db      	ldr	r3, [r3, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcba:	4b2c      	ldr	r3, [pc, #176]	@ (800dd6c <prvSwitchTimerLists+0xc4>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	68db      	ldr	r3, [r3, #12]
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	3304      	adds	r3, #4
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7fd fb29 	bl	800b320 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	6a1b      	ldr	r3, [r3, #32]
 800dcd2:	68f8      	ldr	r0, [r7, #12]
 800dcd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dcdc:	f003 0304 	and.w	r3, r3, #4
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d02f      	beq.n	800dd44 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	699b      	ldr	r3, [r3, #24]
 800dce8:	693a      	ldr	r2, [r7, #16]
 800dcea:	4413      	add	r3, r2
 800dcec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d90e      	bls.n	800dd14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	68ba      	ldr	r2, [r7, #8]
 800dcfa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd02:	4b1a      	ldr	r3, [pc, #104]	@ (800dd6c <prvSwitchTimerLists+0xc4>)
 800dd04:	681a      	ldr	r2, [r3, #0]
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	3304      	adds	r3, #4
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	4610      	mov	r0, r2
 800dd0e:	f7fd face 	bl	800b2ae <vListInsert>
 800dd12:	e017      	b.n	800dd44 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dd14:	2300      	movs	r3, #0
 800dd16:	9300      	str	r3, [sp, #0]
 800dd18:	2300      	movs	r3, #0
 800dd1a:	693a      	ldr	r2, [r7, #16]
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	68f8      	ldr	r0, [r7, #12]
 800dd20:	f7ff fd58 	bl	800d7d4 <xTimerGenericCommand>
 800dd24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d10b      	bne.n	800dd44 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800dd2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd30:	f383 8811 	msr	BASEPRI, r3
 800dd34:	f3bf 8f6f 	isb	sy
 800dd38:	f3bf 8f4f 	dsb	sy
 800dd3c:	603b      	str	r3, [r7, #0]
}
 800dd3e:	bf00      	nop
 800dd40:	bf00      	nop
 800dd42:	e7fd      	b.n	800dd40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd44:	4b09      	ldr	r3, [pc, #36]	@ (800dd6c <prvSwitchTimerLists+0xc4>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d1b0      	bne.n	800dcb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dd4e:	4b07      	ldr	r3, [pc, #28]	@ (800dd6c <prvSwitchTimerLists+0xc4>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dd54:	4b06      	ldr	r3, [pc, #24]	@ (800dd70 <prvSwitchTimerLists+0xc8>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	4a04      	ldr	r2, [pc, #16]	@ (800dd6c <prvSwitchTimerLists+0xc4>)
 800dd5a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dd5c:	4a04      	ldr	r2, [pc, #16]	@ (800dd70 <prvSwitchTimerLists+0xc8>)
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	6013      	str	r3, [r2, #0]
}
 800dd62:	bf00      	nop
 800dd64:	3718      	adds	r7, #24
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	20002014 	.word	0x20002014
 800dd70:	20002018 	.word	0x20002018

0800dd74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dd7a:	f000 f96d 	bl	800e058 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dd7e:	4b15      	ldr	r3, [pc, #84]	@ (800ddd4 <prvCheckForValidListAndQueue+0x60>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d120      	bne.n	800ddc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dd86:	4814      	ldr	r0, [pc, #80]	@ (800ddd8 <prvCheckForValidListAndQueue+0x64>)
 800dd88:	f7fd fa40 	bl	800b20c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dd8c:	4813      	ldr	r0, [pc, #76]	@ (800dddc <prvCheckForValidListAndQueue+0x68>)
 800dd8e:	f7fd fa3d 	bl	800b20c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dd92:	4b13      	ldr	r3, [pc, #76]	@ (800dde0 <prvCheckForValidListAndQueue+0x6c>)
 800dd94:	4a10      	ldr	r2, [pc, #64]	@ (800ddd8 <prvCheckForValidListAndQueue+0x64>)
 800dd96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dd98:	4b12      	ldr	r3, [pc, #72]	@ (800dde4 <prvCheckForValidListAndQueue+0x70>)
 800dd9a:	4a10      	ldr	r2, [pc, #64]	@ (800dddc <prvCheckForValidListAndQueue+0x68>)
 800dd9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dd9e:	2300      	movs	r3, #0
 800dda0:	9300      	str	r3, [sp, #0]
 800dda2:	4b11      	ldr	r3, [pc, #68]	@ (800dde8 <prvCheckForValidListAndQueue+0x74>)
 800dda4:	4a11      	ldr	r2, [pc, #68]	@ (800ddec <prvCheckForValidListAndQueue+0x78>)
 800dda6:	2110      	movs	r1, #16
 800dda8:	200a      	movs	r0, #10
 800ddaa:	f7fd fb4d 	bl	800b448 <xQueueGenericCreateStatic>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	4a08      	ldr	r2, [pc, #32]	@ (800ddd4 <prvCheckForValidListAndQueue+0x60>)
 800ddb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ddb4:	4b07      	ldr	r3, [pc, #28]	@ (800ddd4 <prvCheckForValidListAndQueue+0x60>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d005      	beq.n	800ddc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ddbc:	4b05      	ldr	r3, [pc, #20]	@ (800ddd4 <prvCheckForValidListAndQueue+0x60>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	490b      	ldr	r1, [pc, #44]	@ (800ddf0 <prvCheckForValidListAndQueue+0x7c>)
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7fe f98e 	bl	800c0e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ddc8:	f000 f978 	bl	800e0bc <vPortExitCritical>
}
 800ddcc:	bf00      	nop
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	2000201c 	.word	0x2000201c
 800ddd8:	20001fec 	.word	0x20001fec
 800dddc:	20002000 	.word	0x20002000
 800dde0:	20002014 	.word	0x20002014
 800dde4:	20002018 	.word	0x20002018
 800dde8:	200020c8 	.word	0x200020c8
 800ddec:	20002028 	.word	0x20002028
 800ddf0:	08012b10 	.word	0x08012b10

0800ddf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b085      	sub	sp, #20
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	60f8      	str	r0, [r7, #12]
 800ddfc:	60b9      	str	r1, [r7, #8]
 800ddfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	3b04      	subs	r3, #4
 800de04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800de0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	3b04      	subs	r3, #4
 800de12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	f023 0201 	bic.w	r2, r3, #1
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	3b04      	subs	r3, #4
 800de22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800de24:	4a0c      	ldr	r2, [pc, #48]	@ (800de58 <pxPortInitialiseStack+0x64>)
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	3b14      	subs	r3, #20
 800de2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	3b04      	subs	r3, #4
 800de3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f06f 0202 	mvn.w	r2, #2
 800de42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	3b20      	subs	r3, #32
 800de48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800de4a:	68fb      	ldr	r3, [r7, #12]
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3714      	adds	r7, #20
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr
 800de58:	0800de5d 	.word	0x0800de5d

0800de5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800de5c:	b480      	push	{r7}
 800de5e:	b085      	sub	sp, #20
 800de60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800de62:	2300      	movs	r3, #0
 800de64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800de66:	4b13      	ldr	r3, [pc, #76]	@ (800deb4 <prvTaskExitError+0x58>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de6e:	d00b      	beq.n	800de88 <prvTaskExitError+0x2c>
	__asm volatile
 800de70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de74:	f383 8811 	msr	BASEPRI, r3
 800de78:	f3bf 8f6f 	isb	sy
 800de7c:	f3bf 8f4f 	dsb	sy
 800de80:	60fb      	str	r3, [r7, #12]
}
 800de82:	bf00      	nop
 800de84:	bf00      	nop
 800de86:	e7fd      	b.n	800de84 <prvTaskExitError+0x28>
	__asm volatile
 800de88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de8c:	f383 8811 	msr	BASEPRI, r3
 800de90:	f3bf 8f6f 	isb	sy
 800de94:	f3bf 8f4f 	dsb	sy
 800de98:	60bb      	str	r3, [r7, #8]
}
 800de9a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800de9c:	bf00      	nop
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d0fc      	beq.n	800de9e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dea4:	bf00      	nop
 800dea6:	bf00      	nop
 800dea8:	3714      	adds	r7, #20
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop
 800deb4:	2000002c 	.word	0x2000002c
	...

0800dec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dec0:	4b07      	ldr	r3, [pc, #28]	@ (800dee0 <pxCurrentTCBConst2>)
 800dec2:	6819      	ldr	r1, [r3, #0]
 800dec4:	6808      	ldr	r0, [r1, #0]
 800dec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deca:	f380 8809 	msr	PSP, r0
 800dece:	f3bf 8f6f 	isb	sy
 800ded2:	f04f 0000 	mov.w	r0, #0
 800ded6:	f380 8811 	msr	BASEPRI, r0
 800deda:	4770      	bx	lr
 800dedc:	f3af 8000 	nop.w

0800dee0 <pxCurrentTCBConst2>:
 800dee0:	20001aec 	.word	0x20001aec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dee4:	bf00      	nop
 800dee6:	bf00      	nop

0800dee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dee8:	4808      	ldr	r0, [pc, #32]	@ (800df0c <prvPortStartFirstTask+0x24>)
 800deea:	6800      	ldr	r0, [r0, #0]
 800deec:	6800      	ldr	r0, [r0, #0]
 800deee:	f380 8808 	msr	MSP, r0
 800def2:	f04f 0000 	mov.w	r0, #0
 800def6:	f380 8814 	msr	CONTROL, r0
 800defa:	b662      	cpsie	i
 800defc:	b661      	cpsie	f
 800defe:	f3bf 8f4f 	dsb	sy
 800df02:	f3bf 8f6f 	isb	sy
 800df06:	df00      	svc	0
 800df08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800df0a:	bf00      	nop
 800df0c:	e000ed08 	.word	0xe000ed08

0800df10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b086      	sub	sp, #24
 800df14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800df16:	4b47      	ldr	r3, [pc, #284]	@ (800e034 <xPortStartScheduler+0x124>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4a47      	ldr	r2, [pc, #284]	@ (800e038 <xPortStartScheduler+0x128>)
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d10b      	bne.n	800df38 <xPortStartScheduler+0x28>
	__asm volatile
 800df20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df24:	f383 8811 	msr	BASEPRI, r3
 800df28:	f3bf 8f6f 	isb	sy
 800df2c:	f3bf 8f4f 	dsb	sy
 800df30:	613b      	str	r3, [r7, #16]
}
 800df32:	bf00      	nop
 800df34:	bf00      	nop
 800df36:	e7fd      	b.n	800df34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800df38:	4b3e      	ldr	r3, [pc, #248]	@ (800e034 <xPortStartScheduler+0x124>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a3f      	ldr	r2, [pc, #252]	@ (800e03c <xPortStartScheduler+0x12c>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d10b      	bne.n	800df5a <xPortStartScheduler+0x4a>
	__asm volatile
 800df42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df46:	f383 8811 	msr	BASEPRI, r3
 800df4a:	f3bf 8f6f 	isb	sy
 800df4e:	f3bf 8f4f 	dsb	sy
 800df52:	60fb      	str	r3, [r7, #12]
}
 800df54:	bf00      	nop
 800df56:	bf00      	nop
 800df58:	e7fd      	b.n	800df56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800df5a:	4b39      	ldr	r3, [pc, #228]	@ (800e040 <xPortStartScheduler+0x130>)
 800df5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	b2db      	uxtb	r3, r3
 800df64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	22ff      	movs	r2, #255	@ 0xff
 800df6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	b2db      	uxtb	r3, r3
 800df72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800df74:	78fb      	ldrb	r3, [r7, #3]
 800df76:	b2db      	uxtb	r3, r3
 800df78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800df7c:	b2da      	uxtb	r2, r3
 800df7e:	4b31      	ldr	r3, [pc, #196]	@ (800e044 <xPortStartScheduler+0x134>)
 800df80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800df82:	4b31      	ldr	r3, [pc, #196]	@ (800e048 <xPortStartScheduler+0x138>)
 800df84:	2207      	movs	r2, #7
 800df86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df88:	e009      	b.n	800df9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800df8a:	4b2f      	ldr	r3, [pc, #188]	@ (800e048 <xPortStartScheduler+0x138>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	3b01      	subs	r3, #1
 800df90:	4a2d      	ldr	r2, [pc, #180]	@ (800e048 <xPortStartScheduler+0x138>)
 800df92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800df94:	78fb      	ldrb	r3, [r7, #3]
 800df96:	b2db      	uxtb	r3, r3
 800df98:	005b      	lsls	r3, r3, #1
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df9e:	78fb      	ldrb	r3, [r7, #3]
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dfa6:	2b80      	cmp	r3, #128	@ 0x80
 800dfa8:	d0ef      	beq.n	800df8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dfaa:	4b27      	ldr	r3, [pc, #156]	@ (800e048 <xPortStartScheduler+0x138>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f1c3 0307 	rsb	r3, r3, #7
 800dfb2:	2b04      	cmp	r3, #4
 800dfb4:	d00b      	beq.n	800dfce <xPortStartScheduler+0xbe>
	__asm volatile
 800dfb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfba:	f383 8811 	msr	BASEPRI, r3
 800dfbe:	f3bf 8f6f 	isb	sy
 800dfc2:	f3bf 8f4f 	dsb	sy
 800dfc6:	60bb      	str	r3, [r7, #8]
}
 800dfc8:	bf00      	nop
 800dfca:	bf00      	nop
 800dfcc:	e7fd      	b.n	800dfca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dfce:	4b1e      	ldr	r3, [pc, #120]	@ (800e048 <xPortStartScheduler+0x138>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	021b      	lsls	r3, r3, #8
 800dfd4:	4a1c      	ldr	r2, [pc, #112]	@ (800e048 <xPortStartScheduler+0x138>)
 800dfd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dfd8:	4b1b      	ldr	r3, [pc, #108]	@ (800e048 <xPortStartScheduler+0x138>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dfe0:	4a19      	ldr	r2, [pc, #100]	@ (800e048 <xPortStartScheduler+0x138>)
 800dfe2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	b2da      	uxtb	r2, r3
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dfec:	4b17      	ldr	r3, [pc, #92]	@ (800e04c <xPortStartScheduler+0x13c>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4a16      	ldr	r2, [pc, #88]	@ (800e04c <xPortStartScheduler+0x13c>)
 800dff2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800dff6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dff8:	4b14      	ldr	r3, [pc, #80]	@ (800e04c <xPortStartScheduler+0x13c>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	4a13      	ldr	r2, [pc, #76]	@ (800e04c <xPortStartScheduler+0x13c>)
 800dffe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e002:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e004:	f000 f8da 	bl	800e1bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e008:	4b11      	ldr	r3, [pc, #68]	@ (800e050 <xPortStartScheduler+0x140>)
 800e00a:	2200      	movs	r2, #0
 800e00c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e00e:	f000 f8f9 	bl	800e204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e012:	4b10      	ldr	r3, [pc, #64]	@ (800e054 <xPortStartScheduler+0x144>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	4a0f      	ldr	r2, [pc, #60]	@ (800e054 <xPortStartScheduler+0x144>)
 800e018:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e01c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e01e:	f7ff ff63 	bl	800dee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e022:	f7fe fd8d 	bl	800cb40 <vTaskSwitchContext>
	prvTaskExitError();
 800e026:	f7ff ff19 	bl	800de5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e02a:	2300      	movs	r3, #0
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3718      	adds	r7, #24
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	e000ed00 	.word	0xe000ed00
 800e038:	410fc271 	.word	0x410fc271
 800e03c:	410fc270 	.word	0x410fc270
 800e040:	e000e400 	.word	0xe000e400
 800e044:	20002118 	.word	0x20002118
 800e048:	2000211c 	.word	0x2000211c
 800e04c:	e000ed20 	.word	0xe000ed20
 800e050:	2000002c 	.word	0x2000002c
 800e054:	e000ef34 	.word	0xe000ef34

0800e058 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
	__asm volatile
 800e05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e062:	f383 8811 	msr	BASEPRI, r3
 800e066:	f3bf 8f6f 	isb	sy
 800e06a:	f3bf 8f4f 	dsb	sy
 800e06e:	607b      	str	r3, [r7, #4]
}
 800e070:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e072:	4b10      	ldr	r3, [pc, #64]	@ (800e0b4 <vPortEnterCritical+0x5c>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	3301      	adds	r3, #1
 800e078:	4a0e      	ldr	r2, [pc, #56]	@ (800e0b4 <vPortEnterCritical+0x5c>)
 800e07a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e07c:	4b0d      	ldr	r3, [pc, #52]	@ (800e0b4 <vPortEnterCritical+0x5c>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b01      	cmp	r3, #1
 800e082:	d110      	bne.n	800e0a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e084:	4b0c      	ldr	r3, [pc, #48]	@ (800e0b8 <vPortEnterCritical+0x60>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	b2db      	uxtb	r3, r3
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d00b      	beq.n	800e0a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e092:	f383 8811 	msr	BASEPRI, r3
 800e096:	f3bf 8f6f 	isb	sy
 800e09a:	f3bf 8f4f 	dsb	sy
 800e09e:	603b      	str	r3, [r7, #0]
}
 800e0a0:	bf00      	nop
 800e0a2:	bf00      	nop
 800e0a4:	e7fd      	b.n	800e0a2 <vPortEnterCritical+0x4a>
	}
}
 800e0a6:	bf00      	nop
 800e0a8:	370c      	adds	r7, #12
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr
 800e0b2:	bf00      	nop
 800e0b4:	2000002c 	.word	0x2000002c
 800e0b8:	e000ed04 	.word	0xe000ed04

0800e0bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b083      	sub	sp, #12
 800e0c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e0c2:	4b12      	ldr	r3, [pc, #72]	@ (800e10c <vPortExitCritical+0x50>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d10b      	bne.n	800e0e2 <vPortExitCritical+0x26>
	__asm volatile
 800e0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ce:	f383 8811 	msr	BASEPRI, r3
 800e0d2:	f3bf 8f6f 	isb	sy
 800e0d6:	f3bf 8f4f 	dsb	sy
 800e0da:	607b      	str	r3, [r7, #4]
}
 800e0dc:	bf00      	nop
 800e0de:	bf00      	nop
 800e0e0:	e7fd      	b.n	800e0de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e0e2:	4b0a      	ldr	r3, [pc, #40]	@ (800e10c <vPortExitCritical+0x50>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	3b01      	subs	r3, #1
 800e0e8:	4a08      	ldr	r2, [pc, #32]	@ (800e10c <vPortExitCritical+0x50>)
 800e0ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e0ec:	4b07      	ldr	r3, [pc, #28]	@ (800e10c <vPortExitCritical+0x50>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d105      	bne.n	800e100 <vPortExitCritical+0x44>
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	f383 8811 	msr	BASEPRI, r3
}
 800e0fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e100:	bf00      	nop
 800e102:	370c      	adds	r7, #12
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr
 800e10c:	2000002c 	.word	0x2000002c

0800e110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e110:	f3ef 8009 	mrs	r0, PSP
 800e114:	f3bf 8f6f 	isb	sy
 800e118:	4b15      	ldr	r3, [pc, #84]	@ (800e170 <pxCurrentTCBConst>)
 800e11a:	681a      	ldr	r2, [r3, #0]
 800e11c:	f01e 0f10 	tst.w	lr, #16
 800e120:	bf08      	it	eq
 800e122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e12a:	6010      	str	r0, [r2, #0]
 800e12c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e130:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e134:	f380 8811 	msr	BASEPRI, r0
 800e138:	f3bf 8f4f 	dsb	sy
 800e13c:	f3bf 8f6f 	isb	sy
 800e140:	f7fe fcfe 	bl	800cb40 <vTaskSwitchContext>
 800e144:	f04f 0000 	mov.w	r0, #0
 800e148:	f380 8811 	msr	BASEPRI, r0
 800e14c:	bc09      	pop	{r0, r3}
 800e14e:	6819      	ldr	r1, [r3, #0]
 800e150:	6808      	ldr	r0, [r1, #0]
 800e152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e156:	f01e 0f10 	tst.w	lr, #16
 800e15a:	bf08      	it	eq
 800e15c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e160:	f380 8809 	msr	PSP, r0
 800e164:	f3bf 8f6f 	isb	sy
 800e168:	4770      	bx	lr
 800e16a:	bf00      	nop
 800e16c:	f3af 8000 	nop.w

0800e170 <pxCurrentTCBConst>:
 800e170:	20001aec 	.word	0x20001aec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e174:	bf00      	nop
 800e176:	bf00      	nop

0800e178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
	__asm volatile
 800e17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e182:	f383 8811 	msr	BASEPRI, r3
 800e186:	f3bf 8f6f 	isb	sy
 800e18a:	f3bf 8f4f 	dsb	sy
 800e18e:	607b      	str	r3, [r7, #4]
}
 800e190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e192:	f7fe fc1b 	bl	800c9cc <xTaskIncrementTick>
 800e196:	4603      	mov	r3, r0
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d003      	beq.n	800e1a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e19c:	4b06      	ldr	r3, [pc, #24]	@ (800e1b8 <xPortSysTickHandler+0x40>)
 800e19e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1a2:	601a      	str	r2, [r3, #0]
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	f383 8811 	msr	BASEPRI, r3
}
 800e1ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e1b0:	bf00      	nop
 800e1b2:	3708      	adds	r7, #8
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}
 800e1b8:	e000ed04 	.word	0xe000ed04

0800e1bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e1bc:	b480      	push	{r7}
 800e1be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e1c0:	4b0b      	ldr	r3, [pc, #44]	@ (800e1f0 <vPortSetupTimerInterrupt+0x34>)
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e1c6:	4b0b      	ldr	r3, [pc, #44]	@ (800e1f4 <vPortSetupTimerInterrupt+0x38>)
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e1cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e1f8 <vPortSetupTimerInterrupt+0x3c>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4a0a      	ldr	r2, [pc, #40]	@ (800e1fc <vPortSetupTimerInterrupt+0x40>)
 800e1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e1d6:	099b      	lsrs	r3, r3, #6
 800e1d8:	4a09      	ldr	r2, [pc, #36]	@ (800e200 <vPortSetupTimerInterrupt+0x44>)
 800e1da:	3b01      	subs	r3, #1
 800e1dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e1de:	4b04      	ldr	r3, [pc, #16]	@ (800e1f0 <vPortSetupTimerInterrupt+0x34>)
 800e1e0:	2207      	movs	r2, #7
 800e1e2:	601a      	str	r2, [r3, #0]
}
 800e1e4:	bf00      	nop
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ec:	4770      	bx	lr
 800e1ee:	bf00      	nop
 800e1f0:	e000e010 	.word	0xe000e010
 800e1f4:	e000e018 	.word	0xe000e018
 800e1f8:	20000000 	.word	0x20000000
 800e1fc:	10624dd3 	.word	0x10624dd3
 800e200:	e000e014 	.word	0xe000e014

0800e204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e204:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e214 <vPortEnableVFP+0x10>
 800e208:	6801      	ldr	r1, [r0, #0]
 800e20a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e20e:	6001      	str	r1, [r0, #0]
 800e210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e212:	bf00      	nop
 800e214:	e000ed88 	.word	0xe000ed88

0800e218 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e21e:	f3ef 8305 	mrs	r3, IPSR
 800e222:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2b0f      	cmp	r3, #15
 800e228:	d915      	bls.n	800e256 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e22a:	4a18      	ldr	r2, [pc, #96]	@ (800e28c <vPortValidateInterruptPriority+0x74>)
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	4413      	add	r3, r2
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e234:	4b16      	ldr	r3, [pc, #88]	@ (800e290 <vPortValidateInterruptPriority+0x78>)
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	7afa      	ldrb	r2, [r7, #11]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d20b      	bcs.n	800e256 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e242:	f383 8811 	msr	BASEPRI, r3
 800e246:	f3bf 8f6f 	isb	sy
 800e24a:	f3bf 8f4f 	dsb	sy
 800e24e:	607b      	str	r3, [r7, #4]
}
 800e250:	bf00      	nop
 800e252:	bf00      	nop
 800e254:	e7fd      	b.n	800e252 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e256:	4b0f      	ldr	r3, [pc, #60]	@ (800e294 <vPortValidateInterruptPriority+0x7c>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e25e:	4b0e      	ldr	r3, [pc, #56]	@ (800e298 <vPortValidateInterruptPriority+0x80>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	429a      	cmp	r2, r3
 800e264:	d90b      	bls.n	800e27e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e26a:	f383 8811 	msr	BASEPRI, r3
 800e26e:	f3bf 8f6f 	isb	sy
 800e272:	f3bf 8f4f 	dsb	sy
 800e276:	603b      	str	r3, [r7, #0]
}
 800e278:	bf00      	nop
 800e27a:	bf00      	nop
 800e27c:	e7fd      	b.n	800e27a <vPortValidateInterruptPriority+0x62>
	}
 800e27e:	bf00      	nop
 800e280:	3714      	adds	r7, #20
 800e282:	46bd      	mov	sp, r7
 800e284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e288:	4770      	bx	lr
 800e28a:	bf00      	nop
 800e28c:	e000e3f0 	.word	0xe000e3f0
 800e290:	20002118 	.word	0x20002118
 800e294:	e000ed0c 	.word	0xe000ed0c
 800e298:	2000211c 	.word	0x2000211c

0800e29c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b08a      	sub	sp, #40	@ 0x28
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e2a8:	f7fe fa46 	bl	800c738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e2ac:	4b5c      	ldr	r3, [pc, #368]	@ (800e420 <pvPortMalloc+0x184>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d101      	bne.n	800e2b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e2b4:	f000 f924 	bl	800e500 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e2b8:	4b5a      	ldr	r3, [pc, #360]	@ (800e424 <pvPortMalloc+0x188>)
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	4013      	ands	r3, r2
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	f040 8095 	bne.w	800e3f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d01e      	beq.n	800e30a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e2cc:	2208      	movs	r2, #8
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f003 0307 	and.w	r3, r3, #7
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d015      	beq.n	800e30a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f023 0307 	bic.w	r3, r3, #7
 800e2e4:	3308      	adds	r3, #8
 800e2e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f003 0307 	and.w	r3, r3, #7
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d00b      	beq.n	800e30a <pvPortMalloc+0x6e>
	__asm volatile
 800e2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2f6:	f383 8811 	msr	BASEPRI, r3
 800e2fa:	f3bf 8f6f 	isb	sy
 800e2fe:	f3bf 8f4f 	dsb	sy
 800e302:	617b      	str	r3, [r7, #20]
}
 800e304:	bf00      	nop
 800e306:	bf00      	nop
 800e308:	e7fd      	b.n	800e306 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d06f      	beq.n	800e3f0 <pvPortMalloc+0x154>
 800e310:	4b45      	ldr	r3, [pc, #276]	@ (800e428 <pvPortMalloc+0x18c>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	429a      	cmp	r2, r3
 800e318:	d86a      	bhi.n	800e3f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e31a:	4b44      	ldr	r3, [pc, #272]	@ (800e42c <pvPortMalloc+0x190>)
 800e31c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e31e:	4b43      	ldr	r3, [pc, #268]	@ (800e42c <pvPortMalloc+0x190>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e324:	e004      	b.n	800e330 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e328:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	687a      	ldr	r2, [r7, #4]
 800e336:	429a      	cmp	r2, r3
 800e338:	d903      	bls.n	800e342 <pvPortMalloc+0xa6>
 800e33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d1f1      	bne.n	800e326 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e342:	4b37      	ldr	r3, [pc, #220]	@ (800e420 <pvPortMalloc+0x184>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e348:	429a      	cmp	r2, r3
 800e34a:	d051      	beq.n	800e3f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e34c:	6a3b      	ldr	r3, [r7, #32]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2208      	movs	r2, #8
 800e352:	4413      	add	r3, r2
 800e354:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	6a3b      	ldr	r3, [r7, #32]
 800e35c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e360:	685a      	ldr	r2, [r3, #4]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	1ad2      	subs	r2, r2, r3
 800e366:	2308      	movs	r3, #8
 800e368:	005b      	lsls	r3, r3, #1
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d920      	bls.n	800e3b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e36e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	4413      	add	r3, r2
 800e374:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e376:	69bb      	ldr	r3, [r7, #24]
 800e378:	f003 0307 	and.w	r3, r3, #7
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d00b      	beq.n	800e398 <pvPortMalloc+0xfc>
	__asm volatile
 800e380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e384:	f383 8811 	msr	BASEPRI, r3
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	f3bf 8f4f 	dsb	sy
 800e390:	613b      	str	r3, [r7, #16]
}
 800e392:	bf00      	nop
 800e394:	bf00      	nop
 800e396:	e7fd      	b.n	800e394 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e39a:	685a      	ldr	r2, [r3, #4]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	1ad2      	subs	r2, r2, r3
 800e3a0:	69bb      	ldr	r3, [r7, #24]
 800e3a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e3aa:	69b8      	ldr	r0, [r7, #24]
 800e3ac:	f000 f90a 	bl	800e5c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e3b0:	4b1d      	ldr	r3, [pc, #116]	@ (800e428 <pvPortMalloc+0x18c>)
 800e3b2:	681a      	ldr	r2, [r3, #0]
 800e3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	1ad3      	subs	r3, r2, r3
 800e3ba:	4a1b      	ldr	r2, [pc, #108]	@ (800e428 <pvPortMalloc+0x18c>)
 800e3bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e3be:	4b1a      	ldr	r3, [pc, #104]	@ (800e428 <pvPortMalloc+0x18c>)
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	4b1b      	ldr	r3, [pc, #108]	@ (800e430 <pvPortMalloc+0x194>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d203      	bcs.n	800e3d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e3ca:	4b17      	ldr	r3, [pc, #92]	@ (800e428 <pvPortMalloc+0x18c>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	4a18      	ldr	r2, [pc, #96]	@ (800e430 <pvPortMalloc+0x194>)
 800e3d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3d4:	685a      	ldr	r2, [r3, #4]
 800e3d6:	4b13      	ldr	r3, [pc, #76]	@ (800e424 <pvPortMalloc+0x188>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	431a      	orrs	r2, r3
 800e3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e3e6:	4b13      	ldr	r3, [pc, #76]	@ (800e434 <pvPortMalloc+0x198>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	4a11      	ldr	r2, [pc, #68]	@ (800e434 <pvPortMalloc+0x198>)
 800e3ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e3f0:	f7fe f9b0 	bl	800c754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	f003 0307 	and.w	r3, r3, #7
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d00b      	beq.n	800e416 <pvPortMalloc+0x17a>
	__asm volatile
 800e3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e402:	f383 8811 	msr	BASEPRI, r3
 800e406:	f3bf 8f6f 	isb	sy
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	60fb      	str	r3, [r7, #12]
}
 800e410:	bf00      	nop
 800e412:	bf00      	nop
 800e414:	e7fd      	b.n	800e412 <pvPortMalloc+0x176>
	return pvReturn;
 800e416:	69fb      	ldr	r3, [r7, #28]
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3728      	adds	r7, #40	@ 0x28
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}
 800e420:	20003898 	.word	0x20003898
 800e424:	200038ac 	.word	0x200038ac
 800e428:	2000389c 	.word	0x2000389c
 800e42c:	20003890 	.word	0x20003890
 800e430:	200038a0 	.word	0x200038a0
 800e434:	200038a4 	.word	0x200038a4

0800e438 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b086      	sub	sp, #24
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d04f      	beq.n	800e4ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e44a:	2308      	movs	r3, #8
 800e44c:	425b      	negs	r3, r3
 800e44e:	697a      	ldr	r2, [r7, #20]
 800e450:	4413      	add	r3, r2
 800e452:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	685a      	ldr	r2, [r3, #4]
 800e45c:	4b25      	ldr	r3, [pc, #148]	@ (800e4f4 <vPortFree+0xbc>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4013      	ands	r3, r2
 800e462:	2b00      	cmp	r3, #0
 800e464:	d10b      	bne.n	800e47e <vPortFree+0x46>
	__asm volatile
 800e466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e46a:	f383 8811 	msr	BASEPRI, r3
 800e46e:	f3bf 8f6f 	isb	sy
 800e472:	f3bf 8f4f 	dsb	sy
 800e476:	60fb      	str	r3, [r7, #12]
}
 800e478:	bf00      	nop
 800e47a:	bf00      	nop
 800e47c:	e7fd      	b.n	800e47a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d00b      	beq.n	800e49e <vPortFree+0x66>
	__asm volatile
 800e486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e48a:	f383 8811 	msr	BASEPRI, r3
 800e48e:	f3bf 8f6f 	isb	sy
 800e492:	f3bf 8f4f 	dsb	sy
 800e496:	60bb      	str	r3, [r7, #8]
}
 800e498:	bf00      	nop
 800e49a:	bf00      	nop
 800e49c:	e7fd      	b.n	800e49a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	685a      	ldr	r2, [r3, #4]
 800e4a2:	4b14      	ldr	r3, [pc, #80]	@ (800e4f4 <vPortFree+0xbc>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	4013      	ands	r3, r2
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d01e      	beq.n	800e4ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d11a      	bne.n	800e4ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	685a      	ldr	r2, [r3, #4]
 800e4b8:	4b0e      	ldr	r3, [pc, #56]	@ (800e4f4 <vPortFree+0xbc>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	43db      	mvns	r3, r3
 800e4be:	401a      	ands	r2, r3
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e4c4:	f7fe f938 	bl	800c738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	685a      	ldr	r2, [r3, #4]
 800e4cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e4f8 <vPortFree+0xc0>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	4a09      	ldr	r2, [pc, #36]	@ (800e4f8 <vPortFree+0xc0>)
 800e4d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e4d6:	6938      	ldr	r0, [r7, #16]
 800e4d8:	f000 f874 	bl	800e5c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e4dc:	4b07      	ldr	r3, [pc, #28]	@ (800e4fc <vPortFree+0xc4>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	4a06      	ldr	r2, [pc, #24]	@ (800e4fc <vPortFree+0xc4>)
 800e4e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e4e6:	f7fe f935 	bl	800c754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e4ea:	bf00      	nop
 800e4ec:	3718      	adds	r7, #24
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}
 800e4f2:	bf00      	nop
 800e4f4:	200038ac 	.word	0x200038ac
 800e4f8:	2000389c 	.word	0x2000389c
 800e4fc:	200038a8 	.word	0x200038a8

0800e500 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e500:	b480      	push	{r7}
 800e502:	b085      	sub	sp, #20
 800e504:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e506:	f241 7370 	movw	r3, #6000	@ 0x1770
 800e50a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e50c:	4b27      	ldr	r3, [pc, #156]	@ (800e5ac <prvHeapInit+0xac>)
 800e50e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f003 0307 	and.w	r3, r3, #7
 800e516:	2b00      	cmp	r3, #0
 800e518:	d00c      	beq.n	800e534 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	3307      	adds	r3, #7
 800e51e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f023 0307 	bic.w	r3, r3, #7
 800e526:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e528:	68ba      	ldr	r2, [r7, #8]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	1ad3      	subs	r3, r2, r3
 800e52e:	4a1f      	ldr	r2, [pc, #124]	@ (800e5ac <prvHeapInit+0xac>)
 800e530:	4413      	add	r3, r2
 800e532:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e538:	4a1d      	ldr	r2, [pc, #116]	@ (800e5b0 <prvHeapInit+0xb0>)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e53e:	4b1c      	ldr	r3, [pc, #112]	@ (800e5b0 <prvHeapInit+0xb0>)
 800e540:	2200      	movs	r2, #0
 800e542:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	68ba      	ldr	r2, [r7, #8]
 800e548:	4413      	add	r3, r2
 800e54a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e54c:	2208      	movs	r2, #8
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	1a9b      	subs	r3, r3, r2
 800e552:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f023 0307 	bic.w	r3, r3, #7
 800e55a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	4a15      	ldr	r2, [pc, #84]	@ (800e5b4 <prvHeapInit+0xb4>)
 800e560:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e562:	4b14      	ldr	r3, [pc, #80]	@ (800e5b4 <prvHeapInit+0xb4>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2200      	movs	r2, #0
 800e568:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e56a:	4b12      	ldr	r3, [pc, #72]	@ (800e5b4 <prvHeapInit+0xb4>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2200      	movs	r2, #0
 800e570:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	68fa      	ldr	r2, [r7, #12]
 800e57a:	1ad2      	subs	r2, r2, r3
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e580:	4b0c      	ldr	r3, [pc, #48]	@ (800e5b4 <prvHeapInit+0xb4>)
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	4a0a      	ldr	r2, [pc, #40]	@ (800e5b8 <prvHeapInit+0xb8>)
 800e58e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	685b      	ldr	r3, [r3, #4]
 800e594:	4a09      	ldr	r2, [pc, #36]	@ (800e5bc <prvHeapInit+0xbc>)
 800e596:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e598:	4b09      	ldr	r3, [pc, #36]	@ (800e5c0 <prvHeapInit+0xc0>)
 800e59a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e59e:	601a      	str	r2, [r3, #0]
}
 800e5a0:	bf00      	nop
 800e5a2:	3714      	adds	r7, #20
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr
 800e5ac:	20002120 	.word	0x20002120
 800e5b0:	20003890 	.word	0x20003890
 800e5b4:	20003898 	.word	0x20003898
 800e5b8:	200038a0 	.word	0x200038a0
 800e5bc:	2000389c 	.word	0x2000389c
 800e5c0:	200038ac 	.word	0x200038ac

0800e5c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b085      	sub	sp, #20
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e5cc:	4b28      	ldr	r3, [pc, #160]	@ (800e670 <prvInsertBlockIntoFreeList+0xac>)
 800e5ce:	60fb      	str	r3, [r7, #12]
 800e5d0:	e002      	b.n	800e5d8 <prvInsertBlockIntoFreeList+0x14>
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	60fb      	str	r3, [r7, #12]
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d8f7      	bhi.n	800e5d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	68ba      	ldr	r2, [r7, #8]
 800e5ec:	4413      	add	r3, r2
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d108      	bne.n	800e606 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	685a      	ldr	r2, [r3, #4]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	441a      	add	r2, r3
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	68ba      	ldr	r2, [r7, #8]
 800e610:	441a      	add	r2, r3
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	429a      	cmp	r2, r3
 800e618:	d118      	bne.n	800e64c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	4b15      	ldr	r3, [pc, #84]	@ (800e674 <prvInsertBlockIntoFreeList+0xb0>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	429a      	cmp	r2, r3
 800e624:	d00d      	beq.n	800e642 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	685a      	ldr	r2, [r3, #4]
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	441a      	add	r2, r3
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	601a      	str	r2, [r3, #0]
 800e640:	e008      	b.n	800e654 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e642:	4b0c      	ldr	r3, [pc, #48]	@ (800e674 <prvInsertBlockIntoFreeList+0xb0>)
 800e644:	681a      	ldr	r2, [r3, #0]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	601a      	str	r2, [r3, #0]
 800e64a:	e003      	b.n	800e654 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681a      	ldr	r2, [r3, #0]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e654:	68fa      	ldr	r2, [r7, #12]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	429a      	cmp	r2, r3
 800e65a:	d002      	beq.n	800e662 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e662:	bf00      	nop
 800e664:	3714      	adds	r7, #20
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr
 800e66e:	bf00      	nop
 800e670:	20003890 	.word	0x20003890
 800e674:	20003898 	.word	0x20003898

0800e678 <init_analog_mng>:

uint8_t ADC_FLAG=0;
volatile uint16_t adc_dma_result[anaSnrNB];

void init_analog_mng(ADC_HandleTypeDef* hadc)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(hadc, (uint32_t *) adc_dma_result , anaSnrNB);
 800e680:	2203      	movs	r2, #3
 800e682:	4904      	ldr	r1, [pc, #16]	@ (800e694 <init_analog_mng+0x1c>)
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f7f4 facb 	bl	8002c20 <HAL_ADC_Start_DMA>
}
 800e68a:	bf00      	nop
 800e68c:	3708      	adds	r7, #8
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
 800e692:	bf00      	nop
 800e694:	200038b4 	.word	0x200038b4

0800e698 <HAL_ADC_ConvCpltCallback>:

// when DMA conversion is completed, HAL_ADC_ConvCpltCallback function
// will interrupt the processor. You can find this function in
// Drivers>STM32F4xx_HAL_Drivers>stm32f4xx_hal_adc.c file as __weak attribute
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800e698:	b480      	push	{r7}
 800e69a:	b083      	sub	sp, #12
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
	// I set adc_conv_complete_flag variable to 1 when,
	// HAL_ADC_ConvCpltCallback function is call.
	ADC_FLAG = 1;
 800e6a0:	4b04      	ldr	r3, [pc, #16]	@ (800e6b4 <HAL_ADC_ConvCpltCallback+0x1c>)
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	701a      	strb	r2, [r3, #0]
}
 800e6a6:	bf00      	nop
 800e6a8:	370c      	adds	r7, #12
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop
 800e6b4:	200038b0 	.word	0x200038b0

0800e6b8 <getAnalogMeasure>:

uint8_t getAnalogMeasure(eAnalogMeasure FeMes, float* FpResult)
{
 800e6b8:	b5b0      	push	{r4, r5, r7, lr}
 800e6ba:	b086      	sub	sp, #24
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	4603      	mov	r3, r0
 800e6c0:	6039      	str	r1, [r7, #0]
 800e6c2:	71fb      	strb	r3, [r7, #7]
	uint8_t u8RetVal = 0;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	75fb      	strb	r3, [r7, #23]
	if(FeMes>=anaSnrNB)
 800e6c8:	79fb      	ldrb	r3, [r7, #7]
 800e6ca:	2b02      	cmp	r3, #2
 800e6cc:	d902      	bls.n	800e6d4 <getAnalogMeasure+0x1c>
	{
		u8RetVal = 0;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	75fb      	strb	r3, [r7, #23]
 800e6d2:	e0ab      	b.n	800e82c <getAnalogMeasure+0x174>
	}
	else
	{
		switch((uint8_t)FeMes){
 800e6d4:	79fb      	ldrb	r3, [r7, #7]
 800e6d6:	2b02      	cmp	r3, #2
 800e6d8:	f000 8081 	beq.w	800e7de <getAnalogMeasure+0x126>
 800e6dc:	2b02      	cmp	r3, #2
 800e6de:	f300 80a3 	bgt.w	800e828 <getAnalogMeasure+0x170>
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d002      	beq.n	800e6ec <getAnalogMeasure+0x34>
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d05a      	beq.n	800e7a0 <getAnalogMeasure+0xe8>
 800e6ea:	e09d      	b.n	800e828 <getAnalogMeasure+0x170>
			case anaTemperature:
				int B = 4275;
 800e6ec:	f241 03b3 	movw	r3, #4275	@ 0x10b3
 800e6f0:	613b      	str	r3, [r7, #16]
				float R = 4095.0/(adc_dma_result[FeMes])-1.0;
 800e6f2:	79fb      	ldrb	r3, [r7, #7]
 800e6f4:	4a58      	ldr	r2, [pc, #352]	@ (800e858 <getAnalogMeasure+0x1a0>)
 800e6f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7f1 ff21 	bl	8000544 <__aeabi_i2d>
 800e702:	4602      	mov	r2, r0
 800e704:	460b      	mov	r3, r1
 800e706:	a14c      	add	r1, pc, #304	@ (adr r1, 800e838 <getAnalogMeasure+0x180>)
 800e708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e70c:	f7f2 f8ae 	bl	800086c <__aeabi_ddiv>
 800e710:	4602      	mov	r2, r0
 800e712:	460b      	mov	r3, r1
 800e714:	4610      	mov	r0, r2
 800e716:	4619      	mov	r1, r3
 800e718:	f04f 0200 	mov.w	r2, #0
 800e71c:	4b4f      	ldr	r3, [pc, #316]	@ (800e85c <getAnalogMeasure+0x1a4>)
 800e71e:	f7f1 fdc3 	bl	80002a8 <__aeabi_dsub>
 800e722:	4602      	mov	r2, r0
 800e724:	460b      	mov	r3, r1
 800e726:	4610      	mov	r0, r2
 800e728:	4619      	mov	r1, r3
 800e72a:	f7f2 fa45 	bl	8000bb8 <__aeabi_d2f>
 800e72e:	4603      	mov	r3, r0
 800e730:	60fb      	str	r3, [r7, #12]
				*FpResult = 1.0/(log(R)/B+1/298.15)-273.15; //temperature °C
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	f7f1 ff18 	bl	8000568 <__aeabi_f2d>
 800e738:	4602      	mov	r2, r0
 800e73a:	460b      	mov	r3, r1
 800e73c:	ec43 2b10 	vmov	d0, r2, r3
 800e740:	f003 ff16 	bl	8012570 <log>
 800e744:	ec55 4b10 	vmov	r4, r5, d0
 800e748:	6938      	ldr	r0, [r7, #16]
 800e74a:	f7f1 fefb 	bl	8000544 <__aeabi_i2d>
 800e74e:	4602      	mov	r2, r0
 800e750:	460b      	mov	r3, r1
 800e752:	4620      	mov	r0, r4
 800e754:	4629      	mov	r1, r5
 800e756:	f7f2 f889 	bl	800086c <__aeabi_ddiv>
 800e75a:	4602      	mov	r2, r0
 800e75c:	460b      	mov	r3, r1
 800e75e:	4610      	mov	r0, r2
 800e760:	4619      	mov	r1, r3
 800e762:	a337      	add	r3, pc, #220	@ (adr r3, 800e840 <getAnalogMeasure+0x188>)
 800e764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e768:	f7f1 fda0 	bl	80002ac <__adddf3>
 800e76c:	4602      	mov	r2, r0
 800e76e:	460b      	mov	r3, r1
 800e770:	f04f 0000 	mov.w	r0, #0
 800e774:	4939      	ldr	r1, [pc, #228]	@ (800e85c <getAnalogMeasure+0x1a4>)
 800e776:	f7f2 f879 	bl	800086c <__aeabi_ddiv>
 800e77a:	4602      	mov	r2, r0
 800e77c:	460b      	mov	r3, r1
 800e77e:	4610      	mov	r0, r2
 800e780:	4619      	mov	r1, r3
 800e782:	a331      	add	r3, pc, #196	@ (adr r3, 800e848 <getAnalogMeasure+0x190>)
 800e784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e788:	f7f1 fd8e 	bl	80002a8 <__aeabi_dsub>
 800e78c:	4602      	mov	r2, r0
 800e78e:	460b      	mov	r3, r1
 800e790:	4610      	mov	r0, r2
 800e792:	4619      	mov	r1, r3
 800e794:	f7f2 fa10 	bl	8000bb8 <__aeabi_d2f>
 800e798:	4602      	mov	r2, r0
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	601a      	str	r2, [r3, #0]
				break;
 800e79e:	e043      	b.n	800e828 <getAnalogMeasure+0x170>
			case anaLight:
				*FpResult=(float)(4095-adc_dma_result[FeMes])*10/adc_dma_result[FeMes]; //light intensity
 800e7a0:	79fb      	ldrb	r3, [r7, #7]
 800e7a2:	4a2d      	ldr	r2, [pc, #180]	@ (800e858 <getAnalogMeasure+0x1a0>)
 800e7a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 800e7ae:	330f      	adds	r3, #15
 800e7b0:	ee07 3a90 	vmov	s15, r3
 800e7b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e7b8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800e7bc:	ee67 6a87 	vmul.f32	s13, s15, s14
 800e7c0:	79fb      	ldrb	r3, [r7, #7]
 800e7c2:	4a25      	ldr	r2, [pc, #148]	@ (800e858 <getAnalogMeasure+0x1a0>)
 800e7c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7c8:	b29b      	uxth	r3, r3
 800e7ca:	ee07 3a90 	vmov	s15, r3
 800e7ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e7d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	edc3 7a00 	vstr	s15, [r3]
				//*FpResult = adc_dma_result[FeMes];
				break;
 800e7dc:	e024      	b.n	800e828 <getAnalogMeasure+0x170>
			case anaMoisture:
				*FpResult=((float)adc_dma_result[FeMes]/4095.0)*3.3; //sensor output in V
 800e7de:	79fb      	ldrb	r3, [r7, #7]
 800e7e0:	4a1d      	ldr	r2, [pc, #116]	@ (800e858 <getAnalogMeasure+0x1a0>)
 800e7e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7e6:	b29b      	uxth	r3, r3
 800e7e8:	ee07 3a90 	vmov	s15, r3
 800e7ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7f0:	ee17 0a90 	vmov	r0, s15
 800e7f4:	f7f1 feb8 	bl	8000568 <__aeabi_f2d>
 800e7f8:	a30f      	add	r3, pc, #60	@ (adr r3, 800e838 <getAnalogMeasure+0x180>)
 800e7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fe:	f7f2 f835 	bl	800086c <__aeabi_ddiv>
 800e802:	4602      	mov	r2, r0
 800e804:	460b      	mov	r3, r1
 800e806:	4610      	mov	r0, r2
 800e808:	4619      	mov	r1, r3
 800e80a:	a311      	add	r3, pc, #68	@ (adr r3, 800e850 <getAnalogMeasure+0x198>)
 800e80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e810:	f7f1 ff02 	bl	8000618 <__aeabi_dmul>
 800e814:	4602      	mov	r2, r0
 800e816:	460b      	mov	r3, r1
 800e818:	4610      	mov	r0, r2
 800e81a:	4619      	mov	r1, r3
 800e81c:	f7f2 f9cc 	bl	8000bb8 <__aeabi_d2f>
 800e820:	4602      	mov	r2, r0
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	601a      	str	r2, [r3, #0]
				break;
 800e826:	bf00      	nop
		}
		u8RetVal = 1;
 800e828:	2301      	movs	r3, #1
 800e82a:	75fb      	strb	r3, [r7, #23]

	}
	return(u8RetVal);
 800e82c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3718      	adds	r7, #24
 800e832:	46bd      	mov	sp, r7
 800e834:	bdb0      	pop	{r4, r5, r7, pc}
 800e836:	bf00      	nop
 800e838:	00000000 	.word	0x00000000
 800e83c:	40affe00 	.word	0x40affe00
 800e840:	dcb5db83 	.word	0xdcb5db83
 800e844:	3f6b79e1 	.word	0x3f6b79e1
 800e848:	66666666 	.word	0x66666666
 800e84c:	40711266 	.word	0x40711266
 800e850:	66666666 	.word	0x66666666
 800e854:	400a6666 	.word	0x400a6666
 800e858:	200038b4 	.word	0x200038b4
 800e85c:	3ff00000 	.word	0x3ff00000

0800e860 <buzzerMNG_init>:

void buzzerMNG_setTimeBaseFreq(uint16_t bpm);
int ipower(uint8_t x, uint8_t n);

void buzzerMNG_init(UART_HandleTypeDef* huart, TIM_HandleTypeDef* fhtim, TIM_HandleTypeDef* fhtim2, uint32_t u32Channel)
{
 800e860:	b480      	push	{r7}
 800e862:	b085      	sub	sp, #20
 800e864:	af00      	add	r7, sp, #0
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	60b9      	str	r1, [r7, #8]
 800e86a:	607a      	str	r2, [r7, #4]
 800e86c:	603b      	str	r3, [r7, #0]
	buzzFreqTimer = fhtim;
 800e86e:	4a0a      	ldr	r2, [pc, #40]	@ (800e898 <buzzerMNG_init+0x38>)
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	6013      	str	r3, [r2, #0]
	buzzTimeBaseTimer = fhtim2;
 800e874:	4a09      	ldr	r2, [pc, #36]	@ (800e89c <buzzerMNG_init+0x3c>)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6013      	str	r3, [r2, #0]
	buzzFreqChannel = u32Channel;
 800e87a:	4a09      	ldr	r2, [pc, #36]	@ (800e8a0 <buzzerMNG_init+0x40>)
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	6013      	str	r3, [r2, #0]
	buzzDbghuart = huart;
 800e880:	4a08      	ldr	r2, [pc, #32]	@ (800e8a4 <buzzerMNG_init+0x44>)
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	6013      	str	r3, [r2, #0]
	u8BuzzerTbFlag=0;
 800e886:	4b08      	ldr	r3, [pc, #32]	@ (800e8a8 <buzzerMNG_init+0x48>)
 800e888:	2200      	movs	r2, #0
 800e88a:	701a      	strb	r2, [r3, #0]

}
 800e88c:	bf00      	nop
 800e88e:	3714      	adds	r7, #20
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr
 800e898:	200038bc 	.word	0x200038bc
 800e89c:	200038c0 	.word	0x200038c0
 800e8a0:	200038c8 	.word	0x200038c8
 800e8a4:	200038c4 	.word	0x200038c4
 800e8a8:	200038cc 	.word	0x200038cc

0800e8ac <buzzerMNG_start>:

void buzzerMNG_start()
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(buzzFreqTimer, buzzFreqChannel);
 800e8b0:	4b04      	ldr	r3, [pc, #16]	@ (800e8c4 <buzzerMNG_start+0x18>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4a04      	ldr	r2, [pc, #16]	@ (800e8c8 <buzzerMNG_start+0x1c>)
 800e8b6:	6812      	ldr	r2, [r2, #0]
 800e8b8:	4611      	mov	r1, r2
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7f8 fe00 	bl	80074c0 <HAL_TIM_PWM_Start>
}
 800e8c0:	bf00      	nop
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	200038bc 	.word	0x200038bc
 800e8c8:	200038c8 	.word	0x200038c8

0800e8cc <buzzerMNG_stop>:

void buzzerMNG_stop()
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(buzzFreqTimer, buzzFreqChannel);
 800e8d0:	4b04      	ldr	r3, [pc, #16]	@ (800e8e4 <buzzerMNG_stop+0x18>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	4a04      	ldr	r2, [pc, #16]	@ (800e8e8 <buzzerMNG_stop+0x1c>)
 800e8d6:	6812      	ldr	r2, [r2, #0]
 800e8d8:	4611      	mov	r1, r2
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7f8 fef6 	bl	80076cc <HAL_TIM_PWM_Stop>
}
 800e8e0:	bf00      	nop
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	200038bc 	.word	0x200038bc
 800e8e8:	200038c8 	.word	0x200038c8

0800e8ec <buzzerMNG_setfrequency>:

void buzzerMNG_setfrequency(float freq)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b085      	sub	sp, #20
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	ed87 0a01 	vstr	s0, [r7, #4]
	//TIM_OC_InitTypeDef sConfigOC;
	if(freq == 0)
 800e8f6:	edd7 7a01 	vldr	s15, [r7, #4]
 800e8fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e902:	d115      	bne.n	800e930 <buzzerMNG_setfrequency+0x44>
	{
		buzzFreqTimer->Instance->ARR = (uint32_t)1000-1;
 800e904:	4b20      	ldr	r3, [pc, #128]	@ (800e988 <buzzerMNG_setfrequency+0x9c>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800e90e:	62da      	str	r2, [r3, #44]	@ 0x2c
		buzzFreqTimer->Instance->CCR1 = (uint32_t)0;
 800e910:	4b1d      	ldr	r3, [pc, #116]	@ (800e988 <buzzerMNG_setfrequency+0x9c>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2200      	movs	r2, #0
 800e918:	635a      	str	r2, [r3, #52]	@ 0x34
		buzzFreqTimer->Instance->CR1 &= ~TIM_CR1_UDIS;
 800e91a:	4b1b      	ldr	r3, [pc, #108]	@ (800e988 <buzzerMNG_setfrequency+0x9c>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	4b19      	ldr	r3, [pc, #100]	@ (800e988 <buzzerMNG_setfrequency+0x9c>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f022 0202 	bic.w	r2, r2, #2
 800e92c:	601a      	str	r2, [r3, #0]
		buzzFreqTimer->Instance->CCR1 = (uint32_t)u16period/6;
		buzzFreqTimer->Instance->CR1 &= ~TIM_CR1_UDIS;
	}


}
 800e92e:	e024      	b.n	800e97a <buzzerMNG_setfrequency+0x8e>
		uint16_t u16period = (uint16_t)(1000000/freq);
 800e930:	eddf 6a16 	vldr	s13, [pc, #88]	@ 800e98c <buzzerMNG_setfrequency+0xa0>
 800e934:	ed97 7a01 	vldr	s14, [r7, #4]
 800e938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e93c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e940:	ee17 3a90 	vmov	r3, s15
 800e944:	81fb      	strh	r3, [r7, #14]
		buzzFreqTimer->Instance->ARR = (uint32_t)u16period-1;
 800e946:	89fa      	ldrh	r2, [r7, #14]
 800e948:	4b0f      	ldr	r3, [pc, #60]	@ (800e988 <buzzerMNG_setfrequency+0x9c>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	3a01      	subs	r2, #1
 800e950:	62da      	str	r2, [r3, #44]	@ 0x2c
		buzzFreqTimer->Instance->CCR1 = (uint32_t)u16period/6;
 800e952:	89fb      	ldrh	r3, [r7, #14]
 800e954:	4a0e      	ldr	r2, [pc, #56]	@ (800e990 <buzzerMNG_setfrequency+0xa4>)
 800e956:	fba2 2303 	umull	r2, r3, r2, r3
 800e95a:	089b      	lsrs	r3, r3, #2
 800e95c:	b29a      	uxth	r2, r3
 800e95e:	4b0a      	ldr	r3, [pc, #40]	@ (800e988 <buzzerMNG_setfrequency+0x9c>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	635a      	str	r2, [r3, #52]	@ 0x34
		buzzFreqTimer->Instance->CR1 &= ~TIM_CR1_UDIS;
 800e966:	4b08      	ldr	r3, [pc, #32]	@ (800e988 <buzzerMNG_setfrequency+0x9c>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	4b06      	ldr	r3, [pc, #24]	@ (800e988 <buzzerMNG_setfrequency+0x9c>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f022 0202 	bic.w	r2, r2, #2
 800e978:	601a      	str	r2, [r3, #0]
}
 800e97a:	bf00      	nop
 800e97c:	3714      	adds	r7, #20
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	200038bc 	.word	0x200038bc
 800e98c:	49742400 	.word	0x49742400
 800e990:	aaaaaaab 	.word	0xaaaaaaab
 800e994:	00000000 	.word	0x00000000

0800e998 <buzzerMNG_playSong>:

void buzzerMNG_playSong(buzernote* partition, uint8_t baseoctave, uint32_t length, uint16_t bpm)
{
 800e998:	b5b0      	push	{r4, r5, r7, lr}
 800e99a:	ed2d 8b02 	vpush	{d8}
 800e99e:	b088      	sub	sp, #32
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	607a      	str	r2, [r7, #4]
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	72fb      	strb	r3, [r7, #11]
 800e9ac:	4613      	mov	r3, r2
 800e9ae:	813b      	strh	r3, [r7, #8]
	buzzerMNG_setTimeBaseFreq(bpm);
 800e9b0:	893b      	ldrh	r3, [r7, #8]
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f000 f8e6 	bl	800eb84 <buzzerMNG_setTimeBaseFreq>
	uint32_t u32Period = 1000*60/bpm;
 800e9b8:	893b      	ldrh	r3, [r7, #8]
 800e9ba:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800e9be:	fb92 f3f3 	sdiv	r3, r2, r3
 800e9c2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_Base_Start_IT(buzzTimeBaseTimer) != HAL_OK)
 800e9c4:	4b6c      	ldr	r3, [pc, #432]	@ (800eb78 <buzzerMNG_playSong+0x1e0>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7f8 fc79 	bl	80072c0 <HAL_TIM_Base_Start_IT>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f040 80c7 	bne.w	800eb64 <buzzerMNG_playSong+0x1cc>
	  /* Starting Error */
	  //Error_Handler();
	}
	else
	{
		buzzerMNG_start();
 800e9d6:	f7ff ff69 	bl	800e8ac <buzzerMNG_start>
		int i=0;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	61fb      	str	r3, [r7, #28]
		int cpt_tempo=0;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	61bb      	str	r3, [r7, #24]
		uint8_t u8imp=0;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	75fb      	strb	r3, [r7, #23]
		while(i<length)
 800e9e6:	e0b1      	b.n	800eb4c <buzzerMNG_playSong+0x1b4>
		{
			if(u8imp==0)
 800e9e8:	7dfb      	ldrb	r3, [r7, #23]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d108      	bne.n	800ea00 <buzzerMNG_playSong+0x68>
			{
				buzzerMNG_setfrequency(none);
 800e9ee:	eeb2 0a08 	vmov.f32	s0, #40	@ 0x41400000  12.0
 800e9f2:	f7ff ff7b 	bl	800e8ec <buzzerMNG_setfrequency>
				HAL_Delay(5);
 800e9f6:	2005      	movs	r0, #5
 800e9f8:	f7f3 fdc8 	bl	800258c <HAL_Delay>
				u8imp=1;
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	75fb      	strb	r3, [r7, #23]
			}
			buzzerMNG_setfrequency(fNotesFrequencies[partition[i].basefreq]*ipower(2U,partition[i].octave+baseoctave));
 800ea00:	69fa      	ldr	r2, [r7, #28]
 800ea02:	4613      	mov	r3, r2
 800ea04:	005b      	lsls	r3, r3, #1
 800ea06:	4413      	add	r3, r2
 800ea08:	005b      	lsls	r3, r3, #1
 800ea0a:	461a      	mov	r2, r3
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	4413      	add	r3, r2
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	4a5a      	ldr	r2, [pc, #360]	@ (800eb7c <buzzerMNG_playSong+0x1e4>)
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	4413      	add	r3, r2
 800ea18:	ed93 8a00 	vldr	s16, [r3]
 800ea1c:	69fa      	ldr	r2, [r7, #28]
 800ea1e:	4613      	mov	r3, r2
 800ea20:	005b      	lsls	r3, r3, #1
 800ea22:	4413      	add	r3, r2
 800ea24:	005b      	lsls	r3, r3, #1
 800ea26:	461a      	mov	r2, r3
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	785a      	ldrb	r2, [r3, #1]
 800ea2e:	7afb      	ldrb	r3, [r7, #11]
 800ea30:	4413      	add	r3, r2
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	4619      	mov	r1, r3
 800ea36:	2002      	movs	r0, #2
 800ea38:	f000 f8d4 	bl	800ebe4 <ipower>
 800ea3c:	ee07 0a90 	vmov	s15, r0
 800ea40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea44:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ea48:	eeb0 0a67 	vmov.f32	s0, s15
 800ea4c:	f7ff ff4e 	bl	800e8ec <buzzerMNG_setfrequency>
			if(partition[i].isternary==1)
 800ea50:	69fa      	ldr	r2, [r7, #28]
 800ea52:	4613      	mov	r3, r2
 800ea54:	005b      	lsls	r3, r3, #1
 800ea56:	4413      	add	r3, r2
 800ea58:	005b      	lsls	r3, r3, #1
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	4413      	add	r3, r2
 800ea60:	78db      	ldrb	r3, [r3, #3]
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d132      	bne.n	800eacc <buzzerMNG_playSong+0x134>
			{
				HAL_Delay((uint32_t)(0.66*u32Period* partition[i].tempo));
 800ea66:	6938      	ldr	r0, [r7, #16]
 800ea68:	f7f1 fd5c 	bl	8000524 <__aeabi_ui2d>
 800ea6c:	a340      	add	r3, pc, #256	@ (adr r3, 800eb70 <buzzerMNG_playSong+0x1d8>)
 800ea6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea72:	f7f1 fdd1 	bl	8000618 <__aeabi_dmul>
 800ea76:	4602      	mov	r2, r0
 800ea78:	460b      	mov	r3, r1
 800ea7a:	4614      	mov	r4, r2
 800ea7c:	461d      	mov	r5, r3
 800ea7e:	69fa      	ldr	r2, [r7, #28]
 800ea80:	4613      	mov	r3, r2
 800ea82:	005b      	lsls	r3, r3, #1
 800ea84:	4413      	add	r3, r2
 800ea86:	005b      	lsls	r3, r3, #1
 800ea88:	461a      	mov	r2, r3
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	789b      	ldrb	r3, [r3, #2]
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7f1 fd57 	bl	8000544 <__aeabi_i2d>
 800ea96:	4602      	mov	r2, r0
 800ea98:	460b      	mov	r3, r1
 800ea9a:	4620      	mov	r0, r4
 800ea9c:	4629      	mov	r1, r5
 800ea9e:	f7f1 fdbb 	bl	8000618 <__aeabi_dmul>
 800eaa2:	4602      	mov	r2, r0
 800eaa4:	460b      	mov	r3, r1
 800eaa6:	4610      	mov	r0, r2
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	f7f2 f865 	bl	8000b78 <__aeabi_d2uiz>
 800eaae:	4603      	mov	r3, r0
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7f3 fd6b 	bl	800258c <HAL_Delay>
				u8BuzzerTbFlag=0;
 800eab6:	4b32      	ldr	r3, [pc, #200]	@ (800eb80 <buzzerMNG_playSong+0x1e8>)
 800eab8:	2200      	movs	r2, #0
 800eaba:	701a      	strb	r2, [r3, #0]
				cpt_tempo = 0;
 800eabc:	2300      	movs	r3, #0
 800eabe:	61bb      	str	r3, [r7, #24]
				u8imp=0;
 800eac0:	2300      	movs	r3, #0
 800eac2:	75fb      	strb	r3, [r7, #23]
				i++;
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	3301      	adds	r3, #1
 800eac8:	61fb      	str	r3, [r7, #28]
 800eaca:	e03f      	b.n	800eb4c <buzzerMNG_playSong+0x1b4>
			}
			else if(u8BuzzerTbFlag==1)
 800eacc:	4b2c      	ldr	r3, [pc, #176]	@ (800eb80 <buzzerMNG_playSong+0x1e8>)
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d13b      	bne.n	800eb4c <buzzerMNG_playSong+0x1b4>
			{
				u8BuzzerTbFlag=0;
 800ead4:	4b2a      	ldr	r3, [pc, #168]	@ (800eb80 <buzzerMNG_playSong+0x1e8>)
 800ead6:	2200      	movs	r2, #0
 800ead8:	701a      	strb	r2, [r3, #0]
				cpt_tempo++;
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	3301      	adds	r3, #1
 800eade:	61bb      	str	r3, [r7, #24]
				if(cpt_tempo == partition[i].tempo)
 800eae0:	69fa      	ldr	r2, [r7, #28]
 800eae2:	4613      	mov	r3, r2
 800eae4:	005b      	lsls	r3, r3, #1
 800eae6:	4413      	add	r3, r2
 800eae8:	005b      	lsls	r3, r3, #1
 800eaea:	461a      	mov	r2, r3
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	4413      	add	r3, r2
 800eaf0:	789b      	ldrb	r3, [r3, #2]
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	69bb      	ldr	r3, [r7, #24]
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	d128      	bne.n	800eb4c <buzzerMNG_playSong+0x1b4>
				{
					cpt_tempo=0;
 800eafa:	2300      	movs	r3, #0
 800eafc:	61bb      	str	r3, [r7, #24]
					u8imp=0;
 800eafe:	2300      	movs	r3, #0
 800eb00:	75fb      	strb	r3, [r7, #23]
					if(partition[i].repeat[1]>0)
 800eb02:	69fa      	ldr	r2, [r7, #28]
 800eb04:	4613      	mov	r3, r2
 800eb06:	005b      	lsls	r3, r3, #1
 800eb08:	4413      	add	r3, r2
 800eb0a:	005b      	lsls	r3, r3, #1
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	4413      	add	r3, r2
 800eb12:	795b      	ldrb	r3, [r3, #5]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d016      	beq.n	800eb46 <buzzerMNG_playSong+0x1ae>
					{
						partition[i].repeat[1]--;
 800eb18:	69fa      	ldr	r2, [r7, #28]
 800eb1a:	4613      	mov	r3, r2
 800eb1c:	005b      	lsls	r3, r3, #1
 800eb1e:	4413      	add	r3, r2
 800eb20:	005b      	lsls	r3, r3, #1
 800eb22:	461a      	mov	r2, r3
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	4413      	add	r3, r2
 800eb28:	795a      	ldrb	r2, [r3, #5]
 800eb2a:	3a01      	subs	r2, #1
 800eb2c:	b2d2      	uxtb	r2, r2
 800eb2e:	715a      	strb	r2, [r3, #5]
						i=partition[i].repeat[0];
 800eb30:	69fa      	ldr	r2, [r7, #28]
 800eb32:	4613      	mov	r3, r2
 800eb34:	005b      	lsls	r3, r3, #1
 800eb36:	4413      	add	r3, r2
 800eb38:	005b      	lsls	r3, r3, #1
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	4413      	add	r3, r2
 800eb40:	791b      	ldrb	r3, [r3, #4]
 800eb42:	61fb      	str	r3, [r7, #28]
 800eb44:	e002      	b.n	800eb4c <buzzerMNG_playSong+0x1b4>
					}
					else
					{
						i++;
 800eb46:	69fb      	ldr	r3, [r7, #28]
 800eb48:	3301      	adds	r3, #1
 800eb4a:	61fb      	str	r3, [r7, #28]
		while(i<length)
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	f63f af49 	bhi.w	800e9e8 <buzzerMNG_playSong+0x50>
					}

				}
			}
		}
		buzzerMNG_stop();
 800eb56:	f7ff feb9 	bl	800e8cc <buzzerMNG_stop>
		HAL_TIM_Base_Stop_IT(buzzTimeBaseTimer);
 800eb5a:	4b07      	ldr	r3, [pc, #28]	@ (800eb78 <buzzerMNG_playSong+0x1e0>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f7f8 fc1e 	bl	80073a0 <HAL_TIM_Base_Stop_IT>
	}
}
 800eb64:	bf00      	nop
 800eb66:	3720      	adds	r7, #32
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	ecbd 8b02 	vpop	{d8}
 800eb6e:	bdb0      	pop	{r4, r5, r7, pc}
 800eb70:	51eb851f 	.word	0x51eb851f
 800eb74:	3fe51eb8 	.word	0x3fe51eb8
 800eb78:	200038c0 	.word	0x200038c0
 800eb7c:	20000030 	.word	0x20000030
 800eb80:	200038cc 	.word	0x200038cc

0800eb84 <buzzerMNG_setTimeBaseFreq>:

void buzzerMNG_setTimeBaseFreq(uint16_t bpm)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b087      	sub	sp, #28
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	80fb      	strh	r3, [r7, #6]
	float ftbfreq = (float)bpm/60.0;
 800eb8e:	88fb      	ldrh	r3, [r7, #6]
 800eb90:	ee07 3a90 	vmov	s15, r3
 800eb94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800eb98:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800ebdc <buzzerMNG_setTimeBaseFreq+0x58>
 800eb9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800eba0:	edc7 7a05 	vstr	s15, [r7, #20]
	uint32_t u32tbperiod = 1000*60/bpm;//target time base period in ms
 800eba4:	88fb      	ldrh	r3, [r7, #6]
 800eba6:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800ebaa:	fb92 f3f3 	sdiv	r3, r2, r3
 800ebae:	613b      	str	r3, [r7, #16]
	uint32_t arr = u32tbperiod*10; //time base timer frequency is 10kHz (10 samples in 1ms)
 800ebb0:	693a      	ldr	r2, [r7, #16]
 800ebb2:	4613      	mov	r3, r2
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	4413      	add	r3, r2
 800ebb8:	005b      	lsls	r3, r3, #1
 800ebba:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(buzzTimeBaseTimer, arr);
 800ebbc:	4b08      	ldr	r3, [pc, #32]	@ (800ebe0 <buzzerMNG_setTimeBaseFreq+0x5c>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	68fa      	ldr	r2, [r7, #12]
 800ebc4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ebc6:	4b06      	ldr	r3, [pc, #24]	@ (800ebe0 <buzzerMNG_setTimeBaseFreq+0x5c>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	68fa      	ldr	r2, [r7, #12]
 800ebcc:	60da      	str	r2, [r3, #12]
}
 800ebce:	bf00      	nop
 800ebd0:	371c      	adds	r7, #28
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd8:	4770      	bx	lr
 800ebda:	bf00      	nop
 800ebdc:	42700000 	.word	0x42700000
 800ebe0:	200038c0 	.word	0x200038c0

0800ebe4 <ipower>:

int ipower(uint8_t x, uint8_t n)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b085      	sub	sp, #20
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	4603      	mov	r3, r0
 800ebec:	460a      	mov	r2, r1
 800ebee:	71fb      	strb	r3, [r7, #7]
 800ebf0:	4613      	mov	r3, r2
 800ebf2:	71bb      	strb	r3, [r7, #6]
	uint8_t result = x;
 800ebf4:	79fb      	ldrb	r3, [r7, #7]
 800ebf6:	73fb      	strb	r3, [r7, #15]
	if(x==0)
 800ebf8:	79fb      	ldrb	r3, [r7, #7]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d101      	bne.n	800ec02 <ipower+0x1e>
		return 0;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	e014      	b.n	800ec2c <ipower+0x48>
	else
	{
		if(n==0)
 800ec02:	79bb      	ldrb	r3, [r7, #6]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d101      	bne.n	800ec0c <ipower+0x28>
			return 1;
 800ec08:	2301      	movs	r3, #1
 800ec0a:	e00f      	b.n	800ec2c <ipower+0x48>
		else
		{
			uint8_t cpt=1;
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	73bb      	strb	r3, [r7, #14]
			while(cpt<n)
 800ec10:	e007      	b.n	800ec22 <ipower+0x3e>
			{
				result = result*x;
 800ec12:	7bfa      	ldrb	r2, [r7, #15]
 800ec14:	79fb      	ldrb	r3, [r7, #7]
 800ec16:	fb12 f303 	smulbb	r3, r2, r3
 800ec1a:	73fb      	strb	r3, [r7, #15]
				cpt++;
 800ec1c:	7bbb      	ldrb	r3, [r7, #14]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	73bb      	strb	r3, [r7, #14]
			while(cpt<n)
 800ec22:	7bba      	ldrb	r2, [r7, #14]
 800ec24:	79bb      	ldrb	r3, [r7, #6]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d3f3      	bcc.n	800ec12 <ipower+0x2e>
			}
			return result;
 800ec2a:	7bfb      	ldrb	r3, [r7, #15]
		}
	}
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3714      	adds	r7, #20
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr

0800ec38 <vCommandConsoleTask>:
uint8_t cRxedChar = 0x00;
//osMutexId_t I2CMutexHandle;
extern eSongs song;

void vCommandConsoleTask(void *pvParameters)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b086      	sub	sp, #24
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
    int8_t cInputIndex = 0;
 800ec40:	2300      	movs	r3, #0
 800ec42:	75fb      	strb	r3, [r7, #23]
    BaseType_t xMoreDataToFollow;
    /* The input and output buffers are declared static to keep them off the
     * stack. */
    static int8_t pcOutputString[MAX_OUTPUT_LENGTH], pcInputString[MAX_INPUT_LENGTH];
    HAL_UART_Receive_IT(&huart2, &cRxedChar, 1);
 800ec44:	2201      	movs	r2, #1
 800ec46:	494b      	ldr	r1, [pc, #300]	@ (800ed74 <vCommandConsoleTask+0x13c>)
 800ec48:	484b      	ldr	r0, [pc, #300]	@ (800ed78 <vCommandConsoleTask+0x140>)
 800ec4a:	f7fa fafb 	bl	8009244 <HAL_UART_Receive_IT>
    vRegisterCLICommands();
 800ec4e:	f000 fbc1 	bl	800f3d4 <vRegisterCLICommands>
    //vRegisterFileSystemCLICommands();

    for (;;)
    {

        if (cRxedChar != 0x00)
 800ec52:	4b48      	ldr	r3, [pc, #288]	@ (800ed74 <vCommandConsoleTask+0x13c>)
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	f000 8088 	beq.w	800ed6c <vCommandConsoleTask+0x134>
        {

            if (cRxedChar == '\r' || cRxedChar == '\n')
 800ec5c:	4b45      	ldr	r3, [pc, #276]	@ (800ed74 <vCommandConsoleTask+0x13c>)
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	2b0d      	cmp	r3, #13
 800ec62:	d003      	beq.n	800ec6c <vCommandConsoleTask+0x34>
 800ec64:	4b43      	ldr	r3, [pc, #268]	@ (800ed74 <vCommandConsoleTask+0x13c>)
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	2b0a      	cmp	r3, #10
 800ec6a:	d13e      	bne.n	800ecea <vCommandConsoleTask+0xb2>
            {
                printf("\r\n");
 800ec6c:	4843      	ldr	r0, [pc, #268]	@ (800ed7c <vCommandConsoleTask+0x144>)
 800ec6e:	f002 fc17 	bl	80114a0 <puts>
                fflush(stdout);
 800ec72:	4b43      	ldr	r3, [pc, #268]	@ (800ed80 <vCommandConsoleTask+0x148>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	689b      	ldr	r3, [r3, #8]
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f002 facb 	bl	8011214 <fflush>
                {
                    /* Send the command string to the command interpreter.  Any
                    output generated by the command interpreter will be placed in the
                    pcOutputString buffer. */
                    xMoreDataToFollow =
                        FreeRTOS_CLIProcessCommand(pcInputString,    /* The command string.*/
 800ec7e:	2264      	movs	r2, #100	@ 0x64
 800ec80:	4940      	ldr	r1, [pc, #256]	@ (800ed84 <vCommandConsoleTask+0x14c>)
 800ec82:	4841      	ldr	r0, [pc, #260]	@ (800ed88 <vCommandConsoleTask+0x150>)
 800ec84:	f7fb fe6c 	bl	800a960 <FreeRTOS_CLIProcessCommand>
 800ec88:	60f8      	str	r0, [r7, #12]
                        );

                    /* Write the output generated by the command interpreter to the
                    console. */

                    for (int x = 0; x < (xMoreDataToFollow == pdTRUE ? MAX_OUTPUT_LENGTH : strlen(pcOutputString)); x++)
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	613b      	str	r3, [r7, #16]
 800ec8e:	e010      	b.n	800ecb2 <vCommandConsoleTask+0x7a>
                    {
                        printf("%c", *(pcOutputString + x));
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	4a3c      	ldr	r2, [pc, #240]	@ (800ed84 <vCommandConsoleTask+0x14c>)
 800ec94:	4413      	add	r3, r2
 800ec96:	f993 3000 	ldrsb.w	r3, [r3]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f002 fba2 	bl	80113e4 <putchar>
                        fflush(stdout);
 800eca0:	4b37      	ldr	r3, [pc, #220]	@ (800ed80 <vCommandConsoleTask+0x148>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	689b      	ldr	r3, [r3, #8]
 800eca6:	4618      	mov	r0, r3
 800eca8:	f002 fab4 	bl	8011214 <fflush>
                    for (int x = 0; x < (xMoreDataToFollow == pdTRUE ? MAX_OUTPUT_LENGTH : strlen(pcOutputString)); x++)
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	613b      	str	r3, [r7, #16]
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d004      	beq.n	800ecc2 <vCommandConsoleTask+0x8a>
 800ecb8:	4832      	ldr	r0, [pc, #200]	@ (800ed84 <vCommandConsoleTask+0x14c>)
 800ecba:	f7f1 fa93 	bl	80001e4 <strlen>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	e000      	b.n	800ecc4 <vCommandConsoleTask+0x8c>
 800ecc2:	2364      	movs	r3, #100	@ 0x64
 800ecc4:	693a      	ldr	r2, [r7, #16]
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d8e2      	bhi.n	800ec90 <vCommandConsoleTask+0x58>
                    }

                } while (xMoreDataToFollow != pdFALSE);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d1d6      	bne.n	800ec7e <vCommandConsoleTask+0x46>

                /* All the strings generated by the input command have been sent.
                Processing of the command is complete.  Clear the input string ready
                to receive the next command. */
                cInputIndex = 0;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	75fb      	strb	r3, [r7, #23]
                memset(pcInputString, 0x00, MAX_INPUT_LENGTH);
 800ecd4:	2232      	movs	r2, #50	@ 0x32
 800ecd6:	2100      	movs	r1, #0
 800ecd8:	482b      	ldr	r0, [pc, #172]	@ (800ed88 <vCommandConsoleTask+0x150>)
 800ecda:	f002 fce1 	bl	80116a0 <memset>
                memset(pcOutputString, 0x00, MAX_INPUT_LENGTH);
 800ecde:	2232      	movs	r2, #50	@ 0x32
 800ece0:	2100      	movs	r1, #0
 800ece2:	4828      	ldr	r0, [pc, #160]	@ (800ed84 <vCommandConsoleTask+0x14c>)
 800ece4:	f002 fcdc 	bl	80116a0 <memset>
 800ece8:	e037      	b.n	800ed5a <vCommandConsoleTask+0x122>
            {
                /* The if() clause performs the processing after a newline character
                is received.  This else clause performs the processing if any other
                character is received. */

                if (cRxedChar == '\b')
 800ecea:	4b22      	ldr	r3, [pc, #136]	@ (800ed74 <vCommandConsoleTask+0x13c>)
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	2b08      	cmp	r3, #8
 800ecf0:	d11d      	bne.n	800ed2e <vCommandConsoleTask+0xf6>
                {
                    /* Backspace was pressed.  Erase the last character in the input
                    buffer - if there are any. */
                    if (cInputIndex > 0)
 800ecf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	dd12      	ble.n	800ed20 <vCommandConsoleTask+0xe8>
                    {
                        cInputIndex--;
 800ecfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ecfe:	b2db      	uxtb	r3, r3
 800ed00:	3b01      	subs	r3, #1
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	75fb      	strb	r3, [r7, #23]
                        memset(&pcInputString[cInputIndex], 0x00, 1);
 800ed06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed0a:	4a1f      	ldr	r2, [pc, #124]	@ (800ed88 <vCommandConsoleTask+0x150>)
 800ed0c:	4413      	add	r3, r2
 800ed0e:	2201      	movs	r2, #1
 800ed10:	2100      	movs	r1, #0
 800ed12:	4618      	mov	r0, r3
 800ed14:	f002 fcc4 	bl	80116a0 <memset>
                        printf("%s", (const uint8_t *)  pcInputString);
 800ed18:	491b      	ldr	r1, [pc, #108]	@ (800ed88 <vCommandConsoleTask+0x150>)
 800ed1a:	481c      	ldr	r0, [pc, #112]	@ (800ed8c <vCommandConsoleTask+0x154>)
 800ed1c:	f002 fb50 	bl	80113c0 <iprintf>
                    }
                    fflush(stdout);
 800ed20:	4b17      	ldr	r3, [pc, #92]	@ (800ed80 <vCommandConsoleTask+0x148>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	689b      	ldr	r3, [r3, #8]
 800ed26:	4618      	mov	r0, r3
 800ed28:	f002 fa74 	bl	8011214 <fflush>
 800ed2c:	e015      	b.n	800ed5a <vCommandConsoleTask+0x122>
                {
                    /* A character was entered.  It was not a new line, backspace
                    or carriage return, so it is accepted as part of the input and
                    placed into the input buffer.  When a n is entered the complete
                    string will be passed to the command interpreter. */
                    if (cInputIndex < MAX_INPUT_LENGTH)
 800ed2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed32:	2b31      	cmp	r3, #49	@ 0x31
 800ed34:	dc11      	bgt.n	800ed5a <vCommandConsoleTask+0x122>
                    {
                        pcInputString[cInputIndex] = cRxedChar;
 800ed36:	4b0f      	ldr	r3, [pc, #60]	@ (800ed74 <vCommandConsoleTask+0x13c>)
 800ed38:	781a      	ldrb	r2, [r3, #0]
 800ed3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed3e:	b251      	sxtb	r1, r2
 800ed40:	4a11      	ldr	r2, [pc, #68]	@ (800ed88 <vCommandConsoleTask+0x150>)
 800ed42:	54d1      	strb	r1, [r2, r3]
                        cInputIndex++;
 800ed44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed48:	b2db      	uxtb	r3, r3
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	75fb      	strb	r3, [r7, #23]
                        printf("%c", cRxedChar);
 800ed50:	4b08      	ldr	r3, [pc, #32]	@ (800ed74 <vCommandConsoleTask+0x13c>)
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	4618      	mov	r0, r3
 800ed56:	f002 fb45 	bl	80113e4 <putchar>
                    }
                }
            }
            cRxedChar = 0x00;
 800ed5a:	4b06      	ldr	r3, [pc, #24]	@ (800ed74 <vCommandConsoleTask+0x13c>)
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	701a      	strb	r2, [r3, #0]
            fflush(stdout);
 800ed60:	4b07      	ldr	r3, [pc, #28]	@ (800ed80 <vCommandConsoleTask+0x148>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	4618      	mov	r0, r3
 800ed68:	f002 fa54 	bl	8011214 <fflush>
        }
        osDelay(1);
 800ed6c:	2001      	movs	r0, #1
 800ed6e:	f7fc f8ef 	bl	800af50 <osDelay>
        if (cRxedChar != 0x00)
 800ed72:	e76e      	b.n	800ec52 <vCommandConsoleTask+0x1a>
 800ed74:	200038ce 	.word	0x200038ce
 800ed78:	200015b0 	.word	0x200015b0
 800ed7c:	08012b18 	.word	0x08012b18
 800ed80:	20001190 	.word	0x20001190
 800ed84:	20003904 	.word	0x20003904
 800ed88:	200038d0 	.word	0x200038d0
 800ed8c:	08012b1c 	.word	0x08012b1c

0800ed90 <cmd_ok>:

/******************************************************************************************************/
static BaseType_t cmd_ok(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString);

static BaseType_t cmd_ok(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b086      	sub	sp, #24
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	60f8      	str	r0, [r7, #12]
 800ed98:	60b9      	str	r1, [r7, #8]
 800ed9a:	607a      	str	r2, [r7, #4]
    const char *const okMessage = "everything OK! \r\n";
 800ed9c:	4b07      	ldr	r3, [pc, #28]	@ (800edbc <cmd_ok+0x2c>)
 800ed9e:	617b      	str	r3, [r7, #20]

    memset(pcWriteBuffer, 0x00, xWriteBufferLen);
 800eda0:	68ba      	ldr	r2, [r7, #8]
 800eda2:	2100      	movs	r1, #0
 800eda4:	68f8      	ldr	r0, [r7, #12]
 800eda6:	f002 fc7b 	bl	80116a0 <memset>
    strcpy(pcWriteBuffer, okMessage);
 800edaa:	6979      	ldr	r1, [r7, #20]
 800edac:	68f8      	ldr	r0, [r7, #12]
 800edae:	f002 fd90 	bl	80118d2 <strcpy>
    /* There is no more data to return after this single string, so return
        pdFALSE. */
    return pdFALSE;
 800edb2:	2300      	movs	r3, #0
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3718      	adds	r7, #24
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}
 800edbc:	08012b20 	.word	0x08012b20

0800edc0 <cmd_led>:
/******************************************************************************************************/
/******************************************************************************************************/
static BaseType_t cmd_led(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString);

static BaseType_t cmd_led(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
 800edc0:	b5b0      	push	{r4, r5, r7, lr}
 800edc2:	b086      	sub	sp, #24
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	60f8      	str	r0, [r7, #12]
 800edc8:	60b9      	str	r1, [r7, #8]
 800edca:	607a      	str	r2, [r7, #4]
	char *pcParameter1;
	BaseType_t xParameter1StringLength, xResult;
	memset(pcWriteBuffer, 0x00, xWriteBufferLen);
 800edcc:	68ba      	ldr	r2, [r7, #8]
 800edce:	2100      	movs	r1, #0
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	f002 fc65 	bl	80116a0 <memset>

	pcParameter1 = FreeRTOS_CLIGetParameter
 800edd6:	f107 0310 	add.w	r3, r7, #16
 800edda:	461a      	mov	r2, r3
 800eddc:	2101      	movs	r1, #1
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f7fb fe44 	bl	800aa6c <FreeRTOS_CLIGetParameter>
 800ede4:	6178      	str	r0, [r7, #20]
	                          /* Return the first parameter. */
	                          1,
	                          /* Store the parameter string length. */
	                          &xParameter1StringLength
	                        );
	pcParameter1[ xParameter1StringLength ] = 0x00;
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	461a      	mov	r2, r3
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	4413      	add	r3, r2
 800edee:	2200      	movs	r2, #0
 800edf0:	701a      	strb	r2, [r3, #0]
	if(strcmp(pcParameter1, "red")==0)
 800edf2:	4978      	ldr	r1, [pc, #480]	@ (800efd4 <cmd_led+0x214>)
 800edf4:	6978      	ldr	r0, [r7, #20]
 800edf6:	f7f1 f9eb 	bl	80001d0 <strcmp>
 800edfa:	4603      	mov	r3, r0
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d111      	bne.n	800ee24 <cmd_led+0x64>
	{
		WS28i3SetColor(red);
 800ee00:	2001      	movs	r0, #1
 800ee02:	f000 fc53 	bl	800f6ac <WS28i3SetColor>
		strcat(pcWriteBuffer, ">>led RED\r\n");
 800ee06:	68f8      	ldr	r0, [r7, #12]
 800ee08:	f7f1 f9ec 	bl	80001e4 <strlen>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	461a      	mov	r2, r3
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	4413      	add	r3, r2
 800ee14:	4a70      	ldr	r2, [pc, #448]	@ (800efd8 <cmd_led+0x218>)
 800ee16:	461c      	mov	r4, r3
 800ee18:	4613      	mov	r3, r2
 800ee1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ee1c:	6020      	str	r0, [r4, #0]
 800ee1e:	6061      	str	r1, [r4, #4]
 800ee20:	60a2      	str	r2, [r4, #8]
 800ee22:	e0d1      	b.n	800efc8 <cmd_led+0x208>
	}
	else if (strcmp(pcParameter1, "blue")==0)
 800ee24:	496d      	ldr	r1, [pc, #436]	@ (800efdc <cmd_led+0x21c>)
 800ee26:	6978      	ldr	r0, [r7, #20]
 800ee28:	f7f1 f9d2 	bl	80001d0 <strcmp>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d113      	bne.n	800ee5a <cmd_led+0x9a>
	{
		WS28i3SetColor(blue);
 800ee32:	2000      	movs	r0, #0
 800ee34:	f000 fc3a 	bl	800f6ac <WS28i3SetColor>
		strcat(pcWriteBuffer, ">>led BLUE\r\n");
 800ee38:	68f8      	ldr	r0, [r7, #12]
 800ee3a:	f7f1 f9d3 	bl	80001e4 <strlen>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	461a      	mov	r2, r3
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	4413      	add	r3, r2
 800ee46:	4a66      	ldr	r2, [pc, #408]	@ (800efe0 <cmd_led+0x220>)
 800ee48:	461c      	mov	r4, r3
 800ee4a:	4613      	mov	r3, r2
 800ee4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ee4e:	6020      	str	r0, [r4, #0]
 800ee50:	6061      	str	r1, [r4, #4]
 800ee52:	60a2      	str	r2, [r4, #8]
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	7323      	strb	r3, [r4, #12]
 800ee58:	e0b6      	b.n	800efc8 <cmd_led+0x208>
	}
	else if (strcmp(pcParameter1, "green")==0)
 800ee5a:	4962      	ldr	r1, [pc, #392]	@ (800efe4 <cmd_led+0x224>)
 800ee5c:	6978      	ldr	r0, [r7, #20]
 800ee5e:	f7f1 f9b7 	bl	80001d0 <strcmp>
 800ee62:	4603      	mov	r3, r0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d113      	bne.n	800ee90 <cmd_led+0xd0>
	{
		WS28i3SetColor(green);
 800ee68:	2002      	movs	r0, #2
 800ee6a:	f000 fc1f 	bl	800f6ac <WS28i3SetColor>
		strcat(pcWriteBuffer, ">>led GREEN\r\n");
 800ee6e:	68f8      	ldr	r0, [r7, #12]
 800ee70:	f7f1 f9b8 	bl	80001e4 <strlen>
 800ee74:	4603      	mov	r3, r0
 800ee76:	461a      	mov	r2, r3
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	4413      	add	r3, r2
 800ee7c:	4a5a      	ldr	r2, [pc, #360]	@ (800efe8 <cmd_led+0x228>)
 800ee7e:	461c      	mov	r4, r3
 800ee80:	4613      	mov	r3, r2
 800ee82:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ee84:	6020      	str	r0, [r4, #0]
 800ee86:	6061      	str	r1, [r4, #4]
 800ee88:	60a2      	str	r2, [r4, #8]
 800ee8a:	881b      	ldrh	r3, [r3, #0]
 800ee8c:	81a3      	strh	r3, [r4, #12]
 800ee8e:	e09b      	b.n	800efc8 <cmd_led+0x208>
	}
	else if (strcmp(pcParameter1, "cyan")==0)
 800ee90:	4956      	ldr	r1, [pc, #344]	@ (800efec <cmd_led+0x22c>)
 800ee92:	6978      	ldr	r0, [r7, #20]
 800ee94:	f7f1 f99c 	bl	80001d0 <strcmp>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d113      	bne.n	800eec6 <cmd_led+0x106>
	{
		WS28i3SetColor(cyan);
 800ee9e:	2003      	movs	r0, #3
 800eea0:	f000 fc04 	bl	800f6ac <WS28i3SetColor>
		strcat(pcWriteBuffer, ">>led CYAN\r\n");
 800eea4:	68f8      	ldr	r0, [r7, #12]
 800eea6:	f7f1 f99d 	bl	80001e4 <strlen>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	461a      	mov	r2, r3
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	4413      	add	r3, r2
 800eeb2:	4a4f      	ldr	r2, [pc, #316]	@ (800eff0 <cmd_led+0x230>)
 800eeb4:	461c      	mov	r4, r3
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eeba:	6020      	str	r0, [r4, #0]
 800eebc:	6061      	str	r1, [r4, #4]
 800eebe:	60a2      	str	r2, [r4, #8]
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	7323      	strb	r3, [r4, #12]
 800eec4:	e080      	b.n	800efc8 <cmd_led+0x208>
	}
	else if (strcmp(pcParameter1, "purple")==0)
 800eec6:	494b      	ldr	r1, [pc, #300]	@ (800eff4 <cmd_led+0x234>)
 800eec8:	6978      	ldr	r0, [r7, #20]
 800eeca:	f7f1 f981 	bl	80001d0 <strcmp>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d115      	bne.n	800ef00 <cmd_led+0x140>
	{
		WS28i3SetColor(purple);
 800eed4:	2004      	movs	r0, #4
 800eed6:	f000 fbe9 	bl	800f6ac <WS28i3SetColor>
		strcat(pcWriteBuffer, ">>led PURPLE\r\n");
 800eeda:	68f8      	ldr	r0, [r7, #12]
 800eedc:	f7f1 f982 	bl	80001e4 <strlen>
 800eee0:	4603      	mov	r3, r0
 800eee2:	461a      	mov	r2, r3
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	4413      	add	r3, r2
 800eee8:	4a43      	ldr	r2, [pc, #268]	@ (800eff8 <cmd_led+0x238>)
 800eeea:	461c      	mov	r4, r3
 800eeec:	4613      	mov	r3, r2
 800eeee:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eef0:	6020      	str	r0, [r4, #0]
 800eef2:	6061      	str	r1, [r4, #4]
 800eef4:	60a2      	str	r2, [r4, #8]
 800eef6:	881a      	ldrh	r2, [r3, #0]
 800eef8:	789b      	ldrb	r3, [r3, #2]
 800eefa:	81a2      	strh	r2, [r4, #12]
 800eefc:	73a3      	strb	r3, [r4, #14]
 800eefe:	e063      	b.n	800efc8 <cmd_led+0x208>
	}
	else if (strcmp(pcParameter1, "yellow")==0)
 800ef00:	493e      	ldr	r1, [pc, #248]	@ (800effc <cmd_led+0x23c>)
 800ef02:	6978      	ldr	r0, [r7, #20]
 800ef04:	f7f1 f964 	bl	80001d0 <strcmp>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d115      	bne.n	800ef3a <cmd_led+0x17a>
	{
		WS28i3SetColor(yellow);
 800ef0e:	2005      	movs	r0, #5
 800ef10:	f000 fbcc 	bl	800f6ac <WS28i3SetColor>
		strcat(pcWriteBuffer, ">>led YELLOW\r\n");
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f7f1 f965 	bl	80001e4 <strlen>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	4413      	add	r3, r2
 800ef22:	4a37      	ldr	r2, [pc, #220]	@ (800f000 <cmd_led+0x240>)
 800ef24:	461c      	mov	r4, r3
 800ef26:	4613      	mov	r3, r2
 800ef28:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ef2a:	6020      	str	r0, [r4, #0]
 800ef2c:	6061      	str	r1, [r4, #4]
 800ef2e:	60a2      	str	r2, [r4, #8]
 800ef30:	881a      	ldrh	r2, [r3, #0]
 800ef32:	789b      	ldrb	r3, [r3, #2]
 800ef34:	81a2      	strh	r2, [r4, #12]
 800ef36:	73a3      	strb	r3, [r4, #14]
 800ef38:	e046      	b.n	800efc8 <cmd_led+0x208>
	}
	else if (strcmp(pcParameter1, "orange")==0)
 800ef3a:	4932      	ldr	r1, [pc, #200]	@ (800f004 <cmd_led+0x244>)
 800ef3c:	6978      	ldr	r0, [r7, #20]
 800ef3e:	f7f1 f947 	bl	80001d0 <strcmp>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d115      	bne.n	800ef74 <cmd_led+0x1b4>
	{
		WS28i3SetColor(orange);
 800ef48:	2006      	movs	r0, #6
 800ef4a:	f000 fbaf 	bl	800f6ac <WS28i3SetColor>
		strcat(pcWriteBuffer, ">>led ORANGE\r\n");
 800ef4e:	68f8      	ldr	r0, [r7, #12]
 800ef50:	f7f1 f948 	bl	80001e4 <strlen>
 800ef54:	4603      	mov	r3, r0
 800ef56:	461a      	mov	r2, r3
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	4413      	add	r3, r2
 800ef5c:	4a2a      	ldr	r2, [pc, #168]	@ (800f008 <cmd_led+0x248>)
 800ef5e:	461c      	mov	r4, r3
 800ef60:	4613      	mov	r3, r2
 800ef62:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ef64:	6020      	str	r0, [r4, #0]
 800ef66:	6061      	str	r1, [r4, #4]
 800ef68:	60a2      	str	r2, [r4, #8]
 800ef6a:	881a      	ldrh	r2, [r3, #0]
 800ef6c:	789b      	ldrb	r3, [r3, #2]
 800ef6e:	81a2      	strh	r2, [r4, #12]
 800ef70:	73a3      	strb	r3, [r4, #14]
 800ef72:	e029      	b.n	800efc8 <cmd_led+0x208>
	}
	else if (strcmp(pcParameter1, "off")==0)
 800ef74:	4925      	ldr	r1, [pc, #148]	@ (800f00c <cmd_led+0x24c>)
 800ef76:	6978      	ldr	r0, [r7, #20]
 800ef78:	f7f1 f92a 	bl	80001d0 <strcmp>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d111      	bne.n	800efa6 <cmd_led+0x1e6>
	{
		WS28i3SetColor(off);
 800ef82:	2007      	movs	r0, #7
 800ef84:	f000 fb92 	bl	800f6ac <WS28i3SetColor>
		strcat(pcWriteBuffer, ">>led OFF\r\n");
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	f7f1 f92b 	bl	80001e4 <strlen>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	461a      	mov	r2, r3
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	4413      	add	r3, r2
 800ef96:	4a1e      	ldr	r2, [pc, #120]	@ (800f010 <cmd_led+0x250>)
 800ef98:	461c      	mov	r4, r3
 800ef9a:	4613      	mov	r3, r2
 800ef9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ef9e:	6020      	str	r0, [r4, #0]
 800efa0:	6061      	str	r1, [r4, #4]
 800efa2:	60a2      	str	r2, [r4, #8]
 800efa4:	e010      	b.n	800efc8 <cmd_led+0x208>
	}
	else
	{
		strcat(pcWriteBuffer, ">>arg not valid\r\n");
 800efa6:	68f8      	ldr	r0, [r7, #12]
 800efa8:	f7f1 f91c 	bl	80001e4 <strlen>
 800efac:	4603      	mov	r3, r0
 800efae:	461a      	mov	r2, r3
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	4413      	add	r3, r2
 800efb4:	4a17      	ldr	r2, [pc, #92]	@ (800f014 <cmd_led+0x254>)
 800efb6:	461d      	mov	r5, r3
 800efb8:	4614      	mov	r4, r2
 800efba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800efbc:	6028      	str	r0, [r5, #0]
 800efbe:	6069      	str	r1, [r5, #4]
 800efc0:	60aa      	str	r2, [r5, #8]
 800efc2:	60eb      	str	r3, [r5, #12]
 800efc4:	8823      	ldrh	r3, [r4, #0]
 800efc6:	822b      	strh	r3, [r5, #16]
	}

    return pdFALSE;
 800efc8:	2300      	movs	r3, #0
}
 800efca:	4618      	mov	r0, r3
 800efcc:	3718      	adds	r7, #24
 800efce:	46bd      	mov	sp, r7
 800efd0:	bdb0      	pop	{r4, r5, r7, pc}
 800efd2:	bf00      	nop
 800efd4:	08012b58 	.word	0x08012b58
 800efd8:	08012b5c 	.word	0x08012b5c
 800efdc:	08012b68 	.word	0x08012b68
 800efe0:	08012b70 	.word	0x08012b70
 800efe4:	08012b80 	.word	0x08012b80
 800efe8:	08012b88 	.word	0x08012b88
 800efec:	08012b98 	.word	0x08012b98
 800eff0:	08012ba0 	.word	0x08012ba0
 800eff4:	08012bb0 	.word	0x08012bb0
 800eff8:	08012bb8 	.word	0x08012bb8
 800effc:	08012bc8 	.word	0x08012bc8
 800f000:	08012bd0 	.word	0x08012bd0
 800f004:	08012be0 	.word	0x08012be0
 800f008:	08012be8 	.word	0x08012be8
 800f00c:	08012bf8 	.word	0x08012bf8
 800f010:	08012bfc 	.word	0x08012bfc
 800f014:	08012c08 	.word	0x08012c08

0800f018 <CmdServo>:
/******************************************************************************************************/
//servo
static BaseType_t CmdServo( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString );

static BaseType_t CmdServo( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 800f018:	b5b0      	push	{r4, r5, r7, lr}
 800f01a:	b094      	sub	sp, #80	@ 0x50
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	60f8      	str	r0, [r7, #12]
 800f020:	60b9      	str	r1, [r7, #8]
 800f022:	607a      	str	r2, [r7, #4]
	char *pcParameter1;
	const char const buff[30];
		const char const okMessage[20];
		BaseType_t xParameter1StringLength, xResult;
		memset(pcWriteBuffer, 0x00, xWriteBufferLen);
 800f024:	68ba      	ldr	r2, [r7, #8]
 800f026:	2100      	movs	r1, #0
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	f002 fb39 	bl	80116a0 <memset>

		pcParameter1 = FreeRTOS_CLIGetParameter
 800f02e:	f107 0314 	add.w	r3, r7, #20
 800f032:	461a      	mov	r2, r3
 800f034:	2101      	movs	r1, #1
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f7fb fd18 	bl	800aa6c <FreeRTOS_CLIGetParameter>
 800f03c:	64f8      	str	r0, [r7, #76]	@ 0x4c
		                          /* Return the first parameter. */
		                          1,
		                          /* Store the parameter string length. */
		                          &xParameter1StringLength
		                        );
		pcParameter1[ xParameter1StringLength ] = 0x00;
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	461a      	mov	r2, r3
 800f042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f044:	4413      	add	r3, r2
 800f046:	2200      	movs	r2, #0
 800f048:	701a      	strb	r2, [r3, #0]
		uint8_t u8cons = atoi(pcParameter1);
 800f04a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800f04c:	f001 ffae 	bl	8010fac <atoi>
 800f050:	4603      	mov	r3, r0
 800f052:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
		if(u8cons>180)
 800f056:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800f05a:	2bb4      	cmp	r3, #180	@ 0xb4
 800f05c:	d912      	bls.n	800f084 <CmdServo+0x6c>
		{
			strcat(pcWriteBuffer,"parameter error\r\n");
 800f05e:	68f8      	ldr	r0, [r7, #12]
 800f060:	f7f1 f8c0 	bl	80001e4 <strlen>
 800f064:	4603      	mov	r3, r0
 800f066:	461a      	mov	r2, r3
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	4413      	add	r3, r2
 800f06c:	4a14      	ldr	r2, [pc, #80]	@ (800f0c0 <CmdServo+0xa8>)
 800f06e:	461d      	mov	r5, r3
 800f070:	4614      	mov	r4, r2
 800f072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f074:	6028      	str	r0, [r5, #0]
 800f076:	6069      	str	r1, [r5, #4]
 800f078:	60aa      	str	r2, [r5, #8]
 800f07a:	60eb      	str	r3, [r5, #12]
 800f07c:	8823      	ldrh	r3, [r4, #0]
 800f07e:	822b      	strh	r3, [r5, #16]
			return(pdFALSE);
 800f080:	2300      	movs	r3, #0
 800f082:	e018      	b.n	800f0b6 <CmdServo+0x9e>
		}
		servoMng_SetAngle((float)u8cons);
 800f084:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800f088:	ee07 3a90 	vmov	s15, r3
 800f08c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f090:	eeb0 0a67 	vmov.f32	s0, s15
 800f094:	f001 fefe 	bl	8010e94 <servoMng_SetAngle>
		sprintf(buff, ">>Servo angle set to %u\r\n",u8cons);
 800f098:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800f09c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f0a0:	4908      	ldr	r1, [pc, #32]	@ (800f0c4 <CmdServo+0xac>)
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f002 fa04 	bl	80114b0 <siprintf>
		strcat(pcWriteBuffer,buff);
 800f0a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	68f8      	ldr	r0, [r7, #12]
 800f0b0:	f002 fafe 	bl	80116b0 <strcat>
		return(pdFALSE);
 800f0b4:	2300      	movs	r3, #0
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3750      	adds	r7, #80	@ 0x50
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bdb0      	pop	{r4, r5, r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	08012c48 	.word	0x08012c48
 800f0c4:	08012c5c 	.word	0x08012c5c

0800f0c8 <cmd_buzzer>:
/******************************************************************************************************/
//buzzer
static BaseType_t cmd_buzzer(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString);

static BaseType_t cmd_buzzer(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b08c      	sub	sp, #48	@ 0x30
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	60f8      	str	r0, [r7, #12]
 800f0d0:	60b9      	str	r1, [r7, #8]
 800f0d2:	607a      	str	r2, [r7, #4]
	char *pcParameter1;
	const char const okMessage[20];
	BaseType_t xParameter1StringLength, xResult;

	pcParameter1 = FreeRTOS_CLIGetParameter
 800f0d4:	f107 0314 	add.w	r3, r7, #20
 800f0d8:	461a      	mov	r2, r3
 800f0da:	2101      	movs	r1, #1
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f7fb fcc5 	bl	800aa6c <FreeRTOS_CLIGetParameter>
 800f0e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
	                          /* Return the first parameter. */
	                          1,
	                          /* Store the parameter string length. */
	                          &xParameter1StringLength
	                        );
	pcParameter1[ xParameter1StringLength ] = 0x00;
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ea:	4413      	add	r3, r2
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	701a      	strb	r2, [r3, #0]
	if(strcmp(pcParameter1, "zelda")==0)
 800f0f0:	4926      	ldr	r1, [pc, #152]	@ (800f18c <cmd_buzzer+0xc4>)
 800f0f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f0f4:	f7f1 f86c 	bl	80001d0 <strcmp>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d10a      	bne.n	800f114 <cmd_buzzer+0x4c>
	{
		//send request play zelda
		song = eZelda;
 800f0fe:	4b24      	ldr	r3, [pc, #144]	@ (800f190 <cmd_buzzer+0xc8>)
 800f100:	2201      	movs	r2, #1
 800f102:	701a      	strb	r2, [r3, #0]
		//osMessageQueuePut(SongsQueueHandle, &song, NULL, 0);
		memcpy(okMessage, ">>play ZELDA\r\n", 15);
 800f104:	f107 0318 	add.w	r3, r7, #24
 800f108:	220f      	movs	r2, #15
 800f10a:	4922      	ldr	r1, [pc, #136]	@ (800f194 <cmd_buzzer+0xcc>)
 800f10c:	4618      	mov	r0, r3
 800f10e:	f002 fbe8 	bl	80118e2 <memcpy>
 800f112:	e02a      	b.n	800f16a <cmd_buzzer+0xa2>
	}
	else if (strcmp(pcParameter1, "mario")==0)
 800f114:	4920      	ldr	r1, [pc, #128]	@ (800f198 <cmd_buzzer+0xd0>)
 800f116:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f118:	f7f1 f85a 	bl	80001d0 <strcmp>
 800f11c:	4603      	mov	r3, r0
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d10a      	bne.n	800f138 <cmd_buzzer+0x70>
	{
		//send request play mario
		song =  eMario;
 800f122:	4b1b      	ldr	r3, [pc, #108]	@ (800f190 <cmd_buzzer+0xc8>)
 800f124:	2202      	movs	r2, #2
 800f126:	701a      	strb	r2, [r3, #0]
		//osMessageQueuePut(SongsQueueHandle, &song, NULL, 0);
		memcpy(okMessage, ">>play MARIO\r\n", 14);
 800f128:	f107 0318 	add.w	r3, r7, #24
 800f12c:	220e      	movs	r2, #14
 800f12e:	491b      	ldr	r1, [pc, #108]	@ (800f19c <cmd_buzzer+0xd4>)
 800f130:	4618      	mov	r0, r3
 800f132:	f002 fbd6 	bl	80118e2 <memcpy>
 800f136:	e018      	b.n	800f16a <cmd_buzzer+0xa2>
	}
	else if (strcmp(pcParameter1, "pokemon")==0)
 800f138:	4919      	ldr	r1, [pc, #100]	@ (800f1a0 <cmd_buzzer+0xd8>)
 800f13a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f13c:	f7f1 f848 	bl	80001d0 <strcmp>
 800f140:	4603      	mov	r3, r0
 800f142:	2b00      	cmp	r3, #0
 800f144:	d10a      	bne.n	800f15c <cmd_buzzer+0x94>
	{
		//send request play mario
		song =  ePokemon;
 800f146:	4b12      	ldr	r3, [pc, #72]	@ (800f190 <cmd_buzzer+0xc8>)
 800f148:	2203      	movs	r2, #3
 800f14a:	701a      	strb	r2, [r3, #0]
		//osMessageQueuePut(SongsQueueHandle, &song, NULL, 0);
		memcpy(okMessage, ">>play Pokemon\r\n", 16);
 800f14c:	f107 0318 	add.w	r3, r7, #24
 800f150:	2210      	movs	r2, #16
 800f152:	4914      	ldr	r1, [pc, #80]	@ (800f1a4 <cmd_buzzer+0xdc>)
 800f154:	4618      	mov	r0, r3
 800f156:	f002 fbc4 	bl	80118e2 <memcpy>
 800f15a:	e006      	b.n	800f16a <cmd_buzzer+0xa2>
	}
	else
	{
		memcpy(okMessage, ">>arg not valid\r\n", 17);
 800f15c:	f107 0318 	add.w	r3, r7, #24
 800f160:	2211      	movs	r2, #17
 800f162:	4911      	ldr	r1, [pc, #68]	@ (800f1a8 <cmd_buzzer+0xe0>)
 800f164:	4618      	mov	r0, r3
 800f166:	f002 fbbc 	bl	80118e2 <memcpy>
	}


	memset(pcWriteBuffer, 0x00, xWriteBufferLen);
 800f16a:	68ba      	ldr	r2, [r7, #8]
 800f16c:	2100      	movs	r1, #0
 800f16e:	68f8      	ldr	r0, [r7, #12]
 800f170:	f002 fa96 	bl	80116a0 <memset>
	strcpy(pcWriteBuffer, okMessage);
 800f174:	f107 0318 	add.w	r3, r7, #24
 800f178:	4619      	mov	r1, r3
 800f17a:	68f8      	ldr	r0, [r7, #12]
 800f17c:	f002 fba9 	bl	80118d2 <strcpy>
    return pdFALSE;
 800f180:	2300      	movs	r3, #0
}
 800f182:	4618      	mov	r0, r3
 800f184:	3730      	adds	r7, #48	@ 0x30
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
 800f18a:	bf00      	nop
 800f18c:	08012ca0 	.word	0x08012ca0
 800f190:	200038cd 	.word	0x200038cd
 800f194:	08012ca8 	.word	0x08012ca8
 800f198:	08012cb8 	.word	0x08012cb8
 800f19c:	08012cc0 	.word	0x08012cc0
 800f1a0:	08012cd0 	.word	0x08012cd0
 800f1a4:	08012cd8 	.word	0x08012cd8
 800f1a8:	08012c08 	.word	0x08012c08

0800f1ac <CmdClock>:
//set clock

static BaseType_t CmdClock( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString );

static BaseType_t CmdClock( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 800f1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1ae:	b099      	sub	sp, #100	@ 0x64
 800f1b0:	af04      	add	r7, sp, #16
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	607a      	str	r2, [r7, #4]
	char *pcParameter1;
	char *pcParameter2;
	BaseType_t xParameter1StringLength, xParameter2StringLength, xResult;
	const char const buff[30];
	memset(pcWriteBuffer, 0x00, xWriteBufferLen);
 800f1b8:	68ba      	ldr	r2, [r7, #8]
 800f1ba:	2100      	movs	r1, #0
 800f1bc:	68f8      	ldr	r0, [r7, #12]
 800f1be:	f002 fa6f 	bl	80116a0 <memset>

	pcParameter2 = ( char * )FreeRTOS_CLIGetParameter
 800f1c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f1c6:	461a      	mov	r2, r3
 800f1c8:	2102      	movs	r1, #2
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f7fb fc4e 	bl	800aa6c <FreeRTOS_CLIGetParameter>
 800f1d0:	64f8      	str	r0, [r7, #76]	@ 0x4c
	                          /* Return the 2nd parameter. */
	                          2,
	                          /* Store the parameter string length. */
	                          &xParameter2StringLength
	                        );
	pcParameter2[ xParameter2StringLength ] = 0x00;
 800f1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1d4:	461a      	mov	r2, r3
 800f1d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1d8:	4413      	add	r3, r2
 800f1da:	2200      	movs	r2, #0
 800f1dc:	701a      	strb	r2, [r3, #0]

	pcParameter1 = ( char * )FreeRTOS_CLIGetParameter
 800f1de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f1e2:	461a      	mov	r2, r3
 800f1e4:	2101      	movs	r1, #1
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f7fb fc40 	bl	800aa6c <FreeRTOS_CLIGetParameter>
 800f1ec:	64b8      	str	r0, [r7, #72]	@ 0x48
	                          /* Return the first parameter. */
	                          1,
	                          /* Store the parameter string length. */
	                          &xParameter1StringLength
	                        );
	pcParameter1[ xParameter1StringLength ] = 0x00;
 800f1ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1f4:	4413      	add	r3, r2
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	701a      	strb	r2, [r3, #0]



	uint32_t u32date = atoi(pcParameter1);
 800f1fa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800f1fc:	f001 fed6 	bl	8010fac <atoi>
 800f200:	4603      	mov	r3, r0
 800f202:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t u32time = atoi(pcParameter2);
 800f204:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800f206:	f001 fed1 	bl	8010fac <atoi>
 800f20a:	4603      	mov	r3, r0
 800f20c:	643b      	str	r3, [r7, #64]	@ 0x40

	uint8_t u8day = u32date/10000;
 800f20e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f210:	4a56      	ldr	r2, [pc, #344]	@ (800f36c <CmdClock+0x1c0>)
 800f212:	fba2 2303 	umull	r2, r3, r2, r3
 800f216:	0b5b      	lsrs	r3, r3, #13
 800f218:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t u8month = (u32date - u8day*10000)/100;
 800f21c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f220:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f224:	fb02 f303 	mul.w	r3, r2, r3
 800f228:	461a      	mov	r2, r3
 800f22a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f22c:	1a9b      	subs	r3, r3, r2
 800f22e:	4a50      	ldr	r2, [pc, #320]	@ (800f370 <CmdClock+0x1c4>)
 800f230:	fba2 2303 	umull	r2, r3, r2, r3
 800f234:	095b      	lsrs	r3, r3, #5
 800f236:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	uint16_t u16year = 2000 + u32date -  u8day*10000 - u8month * 100;
 800f23a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f23c:	b29a      	uxth	r2, r3
 800f23e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f242:	b29b      	uxth	r3, r3
 800f244:	4619      	mov	r1, r3
 800f246:	0149      	lsls	r1, r1, #5
 800f248:	1ac9      	subs	r1, r1, r3
 800f24a:	0089      	lsls	r1, r1, #2
 800f24c:	440b      	add	r3, r1
 800f24e:	4619      	mov	r1, r3
 800f250:	0088      	lsls	r0, r1, #2
 800f252:	4619      	mov	r1, r3
 800f254:	4603      	mov	r3, r0
 800f256:	440b      	add	r3, r1
 800f258:	011b      	lsls	r3, r3, #4
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	1ad3      	subs	r3, r2, r3
 800f25e:	b29a      	uxth	r2, r3
 800f260:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800f264:	b29b      	uxth	r3, r3
 800f266:	4619      	mov	r1, r3
 800f268:	0089      	lsls	r1, r1, #2
 800f26a:	440b      	add	r3, r1
 800f26c:	4619      	mov	r1, r3
 800f26e:	0088      	lsls	r0, r1, #2
 800f270:	4619      	mov	r1, r3
 800f272:	4603      	mov	r3, r0
 800f274:	440b      	add	r3, r1
 800f276:	009b      	lsls	r3, r3, #2
 800f278:	b29b      	uxth	r3, r3
 800f27a:	1ad3      	subs	r3, r2, r3
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800f282:	87bb      	strh	r3, [r7, #60]	@ 0x3c

	uint8_t u8hour = u32time/10000;
 800f284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f286:	4a39      	ldr	r2, [pc, #228]	@ (800f36c <CmdClock+0x1c0>)
 800f288:	fba2 2303 	umull	r2, r3, r2, r3
 800f28c:	0b5b      	lsrs	r3, r3, #13
 800f28e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t u8minute = (u32time - u8hour*10000)/100;
 800f292:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800f296:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f29a:	fb02 f303 	mul.w	r3, r2, r3
 800f29e:	461a      	mov	r2, r3
 800f2a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f2a2:	1a9b      	subs	r3, r3, r2
 800f2a4:	4a32      	ldr	r2, [pc, #200]	@ (800f370 <CmdClock+0x1c4>)
 800f2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800f2aa:	095b      	lsrs	r3, r3, #5
 800f2ac:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint16_t u8second = u32time -  u8hour*10000 - u8minute * 100;
 800f2b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	0149      	lsls	r1, r1, #5
 800f2be:	1ac9      	subs	r1, r1, r3
 800f2c0:	0089      	lsls	r1, r1, #2
 800f2c2:	440b      	add	r3, r1
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	0088      	lsls	r0, r1, #2
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	440b      	add	r3, r1
 800f2ce:	011b      	lsls	r3, r3, #4
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	1ad3      	subs	r3, r2, r3
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	4619      	mov	r1, r3
 800f2de:	0089      	lsls	r1, r1, #2
 800f2e0:	440b      	add	r3, r1
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	0088      	lsls	r0, r1, #2
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	440b      	add	r3, r1
 800f2ec:	009b      	lsls	r3, r3, #2
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	1ad3      	subs	r3, r2, r3
 800f2f2:	873b      	strh	r3, [r7, #56]	@ 0x38

	osMutexAcquire(I2CMutexHandle, 100);
 800f2f4:	4b1f      	ldr	r3, [pc, #124]	@ (800f374 <CmdClock+0x1c8>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	2164      	movs	r1, #100	@ 0x64
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7fb fec9 	bl	800b092 <osMutexAcquire>
	DS1307setDateTime(u16year, u8month, u8day, u8hour, u8minute, u8second);
 800f300:	8fb8      	ldrh	r0, [r7, #60]	@ 0x3c
 800f302:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 800f306:	f897 403f 	ldrb.w	r4, [r7, #63]	@ 0x3f
 800f30a:	f897 503b 	ldrb.w	r5, [r7, #59]	@ 0x3b
 800f30e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800f312:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800f314:	9201      	str	r2, [sp, #4]
 800f316:	9300      	str	r3, [sp, #0]
 800f318:	462b      	mov	r3, r5
 800f31a:	4622      	mov	r2, r4
 800f31c:	f000 fa7e 	bl	800f81c <DS1307setDateTime>
	osMutexRelease(I2CMutexHandle);
 800f320:	4b14      	ldr	r3, [pc, #80]	@ (800f374 <CmdClock+0x1c8>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	4618      	mov	r0, r3
 800f326:	f7fb feff 	bl	800b128 <osMutexRelease>

	sprintf(buff, ">>clk set to: %2u/%2u/%2u %2u:%2u:%2u\r\n",u8day,u8month,u16year,u8hour, u8minute, u8second);
 800f32a:	f897 503f 	ldrb.w	r5, [r7, #63]	@ 0x3f
 800f32e:	f897 603e 	ldrb.w	r6, [r7, #62]	@ 0x3e
 800f332:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f334:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800f338:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 800f33c:	8f38      	ldrh	r0, [r7, #56]	@ 0x38
 800f33e:	f107 0410 	add.w	r4, r7, #16
 800f342:	9003      	str	r0, [sp, #12]
 800f344:	9102      	str	r1, [sp, #8]
 800f346:	9201      	str	r2, [sp, #4]
 800f348:	9300      	str	r3, [sp, #0]
 800f34a:	4633      	mov	r3, r6
 800f34c:	462a      	mov	r2, r5
 800f34e:	490a      	ldr	r1, [pc, #40]	@ (800f378 <CmdClock+0x1cc>)
 800f350:	4620      	mov	r0, r4
 800f352:	f002 f8ad 	bl	80114b0 <siprintf>
	strcat(pcWriteBuffer,buff);
 800f356:	f107 0310 	add.w	r3, r7, #16
 800f35a:	4619      	mov	r1, r3
 800f35c:	68f8      	ldr	r0, [r7, #12]
 800f35e:	f002 f9a7 	bl	80116b0 <strcat>
	return pdFALSE;
 800f362:	2300      	movs	r3, #0
}
 800f364:	4618      	mov	r0, r3
 800f366:	3754      	adds	r7, #84	@ 0x54
 800f368:	46bd      	mov	sp, r7
 800f36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f36c:	d1b71759 	.word	0xd1b71759
 800f370:	51eb851f 	.word	0x51eb851f
 800f374:	200012b8 	.word	0x200012b8
 800f378:	08012d18 	.word	0x08012d18

0800f37c <prvTaskStatsCommand>:
 * Implements the run-time-stats command.
 */
static BaseType_t prvTaskStatsCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString );

static BaseType_t prvTaskStatsCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b086      	sub	sp, #24
 800f380:	af00      	add	r7, sp, #0
 800f382:	60f8      	str	r0, [r7, #12]
 800f384:	60b9      	str	r1, [r7, #8]
 800f386:	607a      	str	r2, [r7, #4]
const char *const pcHeader = "Task          State  Priority  Stack	#\r\n************************************************\r\n";
 800f388:	4b11      	ldr	r3, [pc, #68]	@ (800f3d0 <prvTaskStatsCommand+0x54>)
 800f38a:	617b      	str	r3, [r7, #20]
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d10b      	bne.n	800f3aa <prvTaskStatsCommand+0x2e>
	__asm volatile
 800f392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f396:	f383 8811 	msr	BASEPRI, r3
 800f39a:	f3bf 8f6f 	isb	sy
 800f39e:	f3bf 8f4f 	dsb	sy
 800f3a2:	613b      	str	r3, [r7, #16]
}
 800f3a4:	bf00      	nop
 800f3a6:	bf00      	nop
 800f3a8:	e7fd      	b.n	800f3a6 <prvTaskStatsCommand+0x2a>

	/* Generate a table of task stats. */
	strcpy( pcWriteBuffer, pcHeader );
 800f3aa:	6979      	ldr	r1, [r7, #20]
 800f3ac:	68f8      	ldr	r0, [r7, #12]
 800f3ae:	f002 fa90 	bl	80118d2 <strcpy>
	vTaskList( pcWriteBuffer + strlen( pcHeader ) );
 800f3b2:	6978      	ldr	r0, [r7, #20]
 800f3b4:	f7f0 ff16 	bl	80001e4 <strlen>
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	4413      	add	r3, r2
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7fe f8c0 	bl	800d544 <vTaskList>

	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
 800f3c4:	2300      	movs	r3, #0
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3718      	adds	r7, #24
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
 800f3ce:	bf00      	nop
 800f3d0:	08012d8c 	.word	0x08012d8c

0800f3d4 <vRegisterCLICommands>:
	0 /* No parameters are expected. */
};
/******************************************************************************************************/

void vRegisterCLICommands(void)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	af00      	add	r7, sp, #0
    FreeRTOS_CLIRegisterCommand(&xCmdOK);
 800f3d8:	4809      	ldr	r0, [pc, #36]	@ (800f400 <vRegisterCLICommands+0x2c>)
 800f3da:	f7fb fa8a 	bl	800a8f2 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&xCmdLed);
 800f3de:	4809      	ldr	r0, [pc, #36]	@ (800f404 <vRegisterCLICommands+0x30>)
 800f3e0:	f7fb fa87 	bl	800a8f2 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&xCmdBuzzer);
 800f3e4:	4808      	ldr	r0, [pc, #32]	@ (800f408 <vRegisterCLICommands+0x34>)
 800f3e6:	f7fb fa84 	bl	800a8f2 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&xTaskStats);
 800f3ea:	4808      	ldr	r0, [pc, #32]	@ (800f40c <vRegisterCLICommands+0x38>)
 800f3ec:	f7fb fa81 	bl	800a8f2 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&xclk);
 800f3f0:	4807      	ldr	r0, [pc, #28]	@ (800f410 <vRegisterCLICommands+0x3c>)
 800f3f2:	f7fb fa7e 	bl	800a8f2 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&xCmdServo);
 800f3f6:	4807      	ldr	r0, [pc, #28]	@ (800f414 <vRegisterCLICommands+0x40>)
 800f3f8:	f7fb fa7b 	bl	800a8f2 <FreeRTOS_CLIRegisterCommand>
}
 800f3fc:	bf00      	nop
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	08013020 	.word	0x08013020
 800f404:	08013030 	.word	0x08013030
 800f408:	08013050 	.word	0x08013050
 800f40c:	08013070 	.word	0x08013070
 800f410:	08013060 	.word	0x08013060
 800f414:	08013040 	.word	0x08013040

0800f418 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b082      	sub	sp, #8
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, &cRxedChar, 1); //You need to toggle a breakpoint on this line!
 800f420:	2201      	movs	r2, #1
 800f422:	4904      	ldr	r1, [pc, #16]	@ (800f434 <HAL_UART_RxCpltCallback+0x1c>)
 800f424:	4804      	ldr	r0, [pc, #16]	@ (800f438 <HAL_UART_RxCpltCallback+0x20>)
 800f426:	f7f9 ff0d 	bl	8009244 <HAL_UART_Receive_IT>
}
 800f42a:	bf00      	nop
 800f42c:	3708      	adds	r7, #8
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
 800f432:	bf00      	nop
 800f434:	200038ce 	.word	0x200038ce
 800f438:	200015b0 	.word	0x200015b0

0800f43c <clear>:
uint8_t command(I2C_HandleTypeDef *hi2c, uint8_t value);
void display(I2C_HandleTypeDef *hi2c);
void noDisplay(I2C_HandleTypeDef *hi2c);
void setCursor(I2C_HandleTypeDef *hi2c, uint8_t col, uint8_t row);

void clear(I2C_HandleTypeDef *hi2c) {
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b082      	sub	sp, #8
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
    command(hi2c,LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 800f444:	2101      	movs	r1, #1
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	f000 f825 	bl	800f496 <command>
    HAL_Delay(2);          // this command takes a long time!
 800f44c:	2002      	movs	r0, #2
 800f44e:	f7f3 f89d 	bl	800258c <HAL_Delay>
}
 800f452:	bf00      	nop
 800f454:	3708      	adds	r7, #8
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}

0800f45a <setCursor>:
void home(I2C_HandleTypeDef *hi2c) {
    command(hi2c,LCD_RETURNHOME);
    HAL_Delay(2);
}

void setCursor(I2C_HandleTypeDef *hi2c, uint8_t col, uint8_t row) {
 800f45a:	b580      	push	{r7, lr}
 800f45c:	b082      	sub	sp, #8
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
 800f462:	460b      	mov	r3, r1
 800f464:	70fb      	strb	r3, [r7, #3]
 800f466:	4613      	mov	r3, r2
 800f468:	70bb      	strb	r3, [r7, #2]
    col = (row == 0 ? col | 0x80 : col | 0xc0);
 800f46a:	78bb      	ldrb	r3, [r7, #2]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d104      	bne.n	800f47a <setCursor+0x20>
 800f470:	78fb      	ldrb	r3, [r7, #3]
 800f472:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f476:	b2db      	uxtb	r3, r3
 800f478:	e003      	b.n	800f482 <setCursor+0x28>
 800f47a:	78fb      	ldrb	r3, [r7, #3]
 800f47c:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800f480:	b2db      	uxtb	r3, r3
 800f482:	70fb      	strb	r3, [r7, #3]
    command(hi2c, col);
 800f484:	78fb      	ldrb	r3, [r7, #3]
 800f486:	4619      	mov	r1, r3
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f000 f804 	bl	800f496 <command>
}
 800f48e:	bf00      	nop
 800f490:	3708      	adds	r7, #8
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}

0800f496 <command>:

uint8_t command(I2C_HandleTypeDef *hi2c, uint8_t value) {
 800f496:	b580      	push	{r7, lr}
 800f498:	b086      	sub	sp, #24
 800f49a:	af02      	add	r7, sp, #8
 800f49c:	6078      	str	r0, [r7, #4]
 800f49e:	460b      	mov	r3, r1
 800f4a0:	70fb      	strb	r3, [r7, #3]
    unsigned char dta[2] = {0x80, value};
 800f4a2:	2380      	movs	r3, #128	@ 0x80
 800f4a4:	733b      	strb	r3, [r7, #12]
 800f4a6:	78fb      	ldrb	r3, [r7, #3]
 800f4a8:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(hi2c, LCD_ADDRESS, dta, 2, 100);
 800f4aa:	f107 020c 	add.w	r2, r7, #12
 800f4ae:	2364      	movs	r3, #100	@ 0x64
 800f4b0:	9300      	str	r3, [sp, #0]
 800f4b2:	2302      	movs	r3, #2
 800f4b4:	217c      	movs	r1, #124	@ 0x7c
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f7f5 f81a 	bl	80044f0 <HAL_I2C_Master_Transmit>
 800f4bc:	4603      	mov	r3, r0
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3710      	adds	r7, #16
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}

0800f4c6 <write>:

uint8_t write(I2C_HandleTypeDef *hi2c, uint8_t value) {
 800f4c6:	b580      	push	{r7, lr}
 800f4c8:	b086      	sub	sp, #24
 800f4ca:	af02      	add	r7, sp, #8
 800f4cc:	6078      	str	r0, [r7, #4]
 800f4ce:	460b      	mov	r3, r1
 800f4d0:	70fb      	strb	r3, [r7, #3]
    unsigned char dta[2] = {0x40, value};
 800f4d2:	2340      	movs	r3, #64	@ 0x40
 800f4d4:	733b      	strb	r3, [r7, #12]
 800f4d6:	78fb      	ldrb	r3, [r7, #3]
 800f4d8:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(hi2c, LCD_ADDRESS, dta, 2, 100);
 800f4da:	f107 020c 	add.w	r2, r7, #12
 800f4de:	2364      	movs	r3, #100	@ 0x64
 800f4e0:	9300      	str	r3, [sp, #0]
 800f4e2:	2302      	movs	r3, #2
 800f4e4:	217c      	movs	r1, #124	@ 0x7c
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7f5 f802 	bl	80044f0 <HAL_I2C_Master_Transmit>
 800f4ec:	4603      	mov	r3, r0
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	3710      	adds	r7, #16
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
	...

0800f4f8 <display>:
void noDisplay(I2C_HandleTypeDef *hi2c) {
    _displaycontrol &= ~LCD_DISPLAYON;
    command(hi2c, LCD_DISPLAYCONTROL | _displaycontrol);
}

void display(I2C_HandleTypeDef *hi2c) {
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
    _displaycontrol |= LCD_DISPLAYON;
 800f500:	4b09      	ldr	r3, [pc, #36]	@ (800f528 <display+0x30>)
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	f043 0304 	orr.w	r3, r3, #4
 800f508:	b2da      	uxtb	r2, r3
 800f50a:	4b07      	ldr	r3, [pc, #28]	@ (800f528 <display+0x30>)
 800f50c:	701a      	strb	r2, [r3, #0]
    command(hi2c, LCD_DISPLAYCONTROL | _displaycontrol);
 800f50e:	4b06      	ldr	r3, [pc, #24]	@ (800f528 <display+0x30>)
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	f043 0308 	orr.w	r3, r3, #8
 800f516:	b2db      	uxtb	r3, r3
 800f518:	4619      	mov	r1, r3
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f7ff ffbb 	bl	800f496 <command>
}
 800f520:	bf00      	nop
 800f522:	3708      	adds	r7, #8
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	20003969 	.word	0x20003969

0800f52c <writeMsg>:

void writeMsg(I2C_HandleTypeDef *hi2c, uint8_t* fpu8Value, uint8_t fu8Lentgh, uint8_t fu8ColInd, uint8_t fu8RowInd)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b086      	sub	sp, #24
 800f530:	af00      	add	r7, sp, #0
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	4611      	mov	r1, r2
 800f538:	461a      	mov	r2, r3
 800f53a:	460b      	mov	r3, r1
 800f53c:	71fb      	strb	r3, [r7, #7]
 800f53e:	4613      	mov	r3, r2
 800f540:	71bb      	strb	r3, [r7, #6]
	setCursor(hi2c, fu8ColInd, fu8RowInd);
 800f542:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f546:	79bb      	ldrb	r3, [r7, #6]
 800f548:	4619      	mov	r1, r3
 800f54a:	68f8      	ldr	r0, [r7, #12]
 800f54c:	f7ff ff85 	bl	800f45a <setCursor>
	for(uint8_t i=0;i<fu8Lentgh;i++)
 800f550:	2300      	movs	r3, #0
 800f552:	75fb      	strb	r3, [r7, #23]
 800f554:	e00a      	b.n	800f56c <writeMsg+0x40>
	{
		write(hi2c,*(fpu8Value+i));
 800f556:	7dfb      	ldrb	r3, [r7, #23]
 800f558:	68ba      	ldr	r2, [r7, #8]
 800f55a:	4413      	add	r3, r2
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	4619      	mov	r1, r3
 800f560:	68f8      	ldr	r0, [r7, #12]
 800f562:	f7ff ffb0 	bl	800f4c6 <write>
	for(uint8_t i=0;i<fu8Lentgh;i++)
 800f566:	7dfb      	ldrb	r3, [r7, #23]
 800f568:	3301      	adds	r3, #1
 800f56a:	75fb      	strb	r3, [r7, #23]
 800f56c:	7dfa      	ldrb	r2, [r7, #23]
 800f56e:	79fb      	ldrb	r3, [r7, #7]
 800f570:	429a      	cmp	r2, r3
 800f572:	d3f0      	bcc.n	800f556 <writeMsg+0x2a>
	}
}
 800f574:	bf00      	nop
 800f576:	bf00      	nop
 800f578:	3718      	adds	r7, #24
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
	...

0800f580 <lcd_init>:

void lcd_init(I2C_HandleTypeDef *hi2c, uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	4608      	mov	r0, r1
 800f58a:	4611      	mov	r1, r2
 800f58c:	461a      	mov	r2, r3
 800f58e:	4603      	mov	r3, r0
 800f590:	70fb      	strb	r3, [r7, #3]
 800f592:	460b      	mov	r3, r1
 800f594:	70bb      	strb	r3, [r7, #2]
 800f596:	4613      	mov	r3, r2
 800f598:	707b      	strb	r3, [r7, #1]
	uint8_t result = 0;
 800f59a:	2300      	movs	r3, #0
 800f59c:	73fb      	strb	r3, [r7, #15]
	//HAL_Delay(100);
	//noDisplay(hi2c);
    if (lines > 1) {
 800f59e:	78bb      	ldrb	r3, [r7, #2]
 800f5a0:	2b01      	cmp	r3, #1
 800f5a2:	d906      	bls.n	800f5b2 <lcd_init+0x32>
        _displayfunction |= LCD_2LINE;
 800f5a4:	4b34      	ldr	r3, [pc, #208]	@ (800f678 <lcd_init+0xf8>)
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	f043 0308 	orr.w	r3, r3, #8
 800f5ac:	b2da      	uxtb	r2, r3
 800f5ae:	4b32      	ldr	r3, [pc, #200]	@ (800f678 <lcd_init+0xf8>)
 800f5b0:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 800f5b2:	4a32      	ldr	r2, [pc, #200]	@ (800f67c <lcd_init+0xfc>)
 800f5b4:	78bb      	ldrb	r3, [r7, #2]
 800f5b6:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 800f5b8:	4b31      	ldr	r3, [pc, #196]	@ (800f680 <lcd_init+0x100>)
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 800f5be:	787b      	ldrb	r3, [r7, #1]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d009      	beq.n	800f5d8 <lcd_init+0x58>
 800f5c4:	78bb      	ldrb	r3, [r7, #2]
 800f5c6:	2b01      	cmp	r3, #1
 800f5c8:	d106      	bne.n	800f5d8 <lcd_init+0x58>
        _displayfunction |= LCD_5x10DOTS;
 800f5ca:	4b2b      	ldr	r3, [pc, #172]	@ (800f678 <lcd_init+0xf8>)
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	f043 0304 	orr.w	r3, r3, #4
 800f5d2:	b2da      	uxtb	r2, r3
 800f5d4:	4b28      	ldr	r3, [pc, #160]	@ (800f678 <lcd_init+0xf8>)
 800f5d6:	701a      	strb	r2, [r3, #0]
    }

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
    HAL_Delay(50);
 800f5d8:	2032      	movs	r0, #50	@ 0x32
 800f5da:	f7f2 ffd7 	bl	800258c <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    result = command(hi2c, LCD_FUNCTIONSET | _displayfunction);
 800f5de:	4b26      	ldr	r3, [pc, #152]	@ (800f678 <lcd_init+0xf8>)
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	f043 0320 	orr.w	r3, r3, #32
 800f5e6:	b2db      	uxtb	r3, r3
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f7ff ff53 	bl	800f496 <command>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(5);  // wait more than 4.1ms
 800f5f4:	2005      	movs	r0, #5
 800f5f6:	f7f2 ffc9 	bl	800258c <HAL_Delay>

    // second try
    result = command(hi2c, LCD_FUNCTIONSET | _displayfunction);
 800f5fa:	4b1f      	ldr	r3, [pc, #124]	@ (800f678 <lcd_init+0xf8>)
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	f043 0320 	orr.w	r3, r3, #32
 800f602:	b2db      	uxtb	r3, r3
 800f604:	4619      	mov	r1, r3
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f7ff ff45 	bl	800f496 <command>
 800f60c:	4603      	mov	r3, r0
 800f60e:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1);
 800f610:	2001      	movs	r0, #1
 800f612:	f7f2 ffbb 	bl	800258c <HAL_Delay>

    // third go
    result = command(hi2c, LCD_FUNCTIONSET | _displayfunction);
 800f616:	4b18      	ldr	r3, [pc, #96]	@ (800f678 <lcd_init+0xf8>)
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	f043 0320 	orr.w	r3, r3, #32
 800f61e:	b2db      	uxtb	r3, r3
 800f620:	4619      	mov	r1, r3
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f7ff ff37 	bl	800f496 <command>
 800f628:	4603      	mov	r3, r0
 800f62a:	73fb      	strb	r3, [r7, #15]


    // finally, set # lines, font size, etc.
    result = command(hi2c, LCD_FUNCTIONSET | _displayfunction);
 800f62c:	4b12      	ldr	r3, [pc, #72]	@ (800f678 <lcd_init+0xf8>)
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	f043 0320 	orr.w	r3, r3, #32
 800f634:	b2db      	uxtb	r3, r3
 800f636:	4619      	mov	r1, r3
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f7ff ff2c 	bl	800f496 <command>
 800f63e:	4603      	mov	r3, r0
 800f640:	73fb      	strb	r3, [r7, #15]

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800f642:	4b10      	ldr	r3, [pc, #64]	@ (800f684 <lcd_init+0x104>)
 800f644:	2204      	movs	r2, #4
 800f646:	701a      	strb	r2, [r3, #0]
    display(hi2c);
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f7ff ff55 	bl	800f4f8 <display>

    // clear it off
    clear(hi2c);
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f7ff fef4 	bl	800f43c <clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800f654:	4b0c      	ldr	r3, [pc, #48]	@ (800f688 <lcd_init+0x108>)
 800f656:	2202      	movs	r2, #2
 800f658:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    result = command(hi2c, LCD_ENTRYMODESET | _displaymode);
 800f65a:	4b0b      	ldr	r3, [pc, #44]	@ (800f688 <lcd_init+0x108>)
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	f043 0304 	orr.w	r3, r3, #4
 800f662:	b2db      	uxtb	r3, r3
 800f664:	4619      	mov	r1, r3
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f7ff ff15 	bl	800f496 <command>
 800f66c:	4603      	mov	r3, r0
 800f66e:	73fb      	strb	r3, [r7, #15]
        setReg(REG_MODE2, 0x20);
    }

    setColorWhite();*/

}
 800f670:	bf00      	nop
 800f672:	3710      	adds	r7, #16
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	20003968 	.word	0x20003968
 800f67c:	2000396b 	.word	0x2000396b
 800f680:	2000396c 	.word	0x2000396c
 800f684:	20003969 	.word	0x20003969
 800f688:	2000396a 	.word	0x2000396a

0800f68c <WS28i3Init>:
PixelRGB_t pixel[NUM_PIXELS] = {0};
uint32_t dmaBuffer[DMA_BUFF_SIZE] = {0};
TIM_HandleTypeDef* LEDhtim;

void WS28i3Init(TIM_HandleTypeDef *htim)
{
 800f68c:	b480      	push	{r7}
 800f68e:	b083      	sub	sp, #12
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
	LEDhtim = htim;
 800f694:	4a04      	ldr	r2, [pc, #16]	@ (800f6a8 <WS28i3Init+0x1c>)
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6013      	str	r3, [r2, #0]
}
 800f69a:	bf00      	nop
 800f69c:	370c      	adds	r7, #12
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr
 800f6a6:	bf00      	nop
 800f6a8:	200039d8 	.word	0x200039d8

0800f6ac <WS28i3SetColor>:

void WS28i3SetColor(eWS2813Color feColor)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	71fb      	strb	r3, [r7, #7]
	PixelRGB_t fu32ColorVal;
	switch((uint8_t)feColor)
 800f6b6:	79fb      	ldrb	r3, [r7, #7]
 800f6b8:	2b07      	cmp	r3, #7
 800f6ba:	d86b      	bhi.n	800f794 <WS28i3SetColor+0xe8>
 800f6bc:	a201      	add	r2, pc, #4	@ (adr r2, 800f6c4 <WS28i3SetColor+0x18>)
 800f6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c2:	bf00      	nop
 800f6c4:	0800f6e5 	.word	0x0800f6e5
 800f6c8:	0800f6fb 	.word	0x0800f6fb
 800f6cc:	0800f711 	.word	0x0800f711
 800f6d0:	0800f727 	.word	0x0800f727
 800f6d4:	0800f73d 	.word	0x0800f73d
 800f6d8:	0800f753 	.word	0x0800f753
 800f6dc:	0800f769 	.word	0x0800f769
 800f6e0:	0800f77f 	.word	0x0800f77f
	{
	case blue:
		fu32ColorVal.color.b=255;
 800f6e4:	23ff      	movs	r3, #255	@ 0xff
 800f6e6:	733b      	strb	r3, [r7, #12]
		fu32ColorVal.color.r=0;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	737b      	strb	r3, [r7, #13]
		fu32ColorVal.color.g=0;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	73bb      	strb	r3, [r7, #14]
		WS28i3SetColorval(TIM_CHANNEL_3, fu32ColorVal);
 800f6f0:	68f9      	ldr	r1, [r7, #12]
 800f6f2:	2008      	movs	r0, #8
 800f6f4:	f000 f852 	bl	800f79c <WS28i3SetColorval>
		break;
 800f6f8:	e04c      	b.n	800f794 <WS28i3SetColor+0xe8>
	case red:
		fu32ColorVal.color.b=0;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	733b      	strb	r3, [r7, #12]
		fu32ColorVal.color.r=255;
 800f6fe:	23ff      	movs	r3, #255	@ 0xff
 800f700:	737b      	strb	r3, [r7, #13]
		fu32ColorVal.color.g=0;
 800f702:	2300      	movs	r3, #0
 800f704:	73bb      	strb	r3, [r7, #14]
		WS28i3SetColorval(TIM_CHANNEL_3, fu32ColorVal);
 800f706:	68f9      	ldr	r1, [r7, #12]
 800f708:	2008      	movs	r0, #8
 800f70a:	f000 f847 	bl	800f79c <WS28i3SetColorval>
		break;
 800f70e:	e041      	b.n	800f794 <WS28i3SetColor+0xe8>
	case green:
		fu32ColorVal.color.b=0;
 800f710:	2300      	movs	r3, #0
 800f712:	733b      	strb	r3, [r7, #12]
		fu32ColorVal.color.r=0;
 800f714:	2300      	movs	r3, #0
 800f716:	737b      	strb	r3, [r7, #13]
		fu32ColorVal.color.g=255;
 800f718:	23ff      	movs	r3, #255	@ 0xff
 800f71a:	73bb      	strb	r3, [r7, #14]
		WS28i3SetColorval(TIM_CHANNEL_3, fu32ColorVal);
 800f71c:	68f9      	ldr	r1, [r7, #12]
 800f71e:	2008      	movs	r0, #8
 800f720:	f000 f83c 	bl	800f79c <WS28i3SetColorval>
		break;
 800f724:	e036      	b.n	800f794 <WS28i3SetColor+0xe8>
	case cyan:
		fu32ColorVal.color.b=255;
 800f726:	23ff      	movs	r3, #255	@ 0xff
 800f728:	733b      	strb	r3, [r7, #12]
		fu32ColorVal.color.r=0;
 800f72a:	2300      	movs	r3, #0
 800f72c:	737b      	strb	r3, [r7, #13]
		fu32ColorVal.color.g=255;
 800f72e:	23ff      	movs	r3, #255	@ 0xff
 800f730:	73bb      	strb	r3, [r7, #14]
		WS28i3SetColorval(TIM_CHANNEL_3, fu32ColorVal);
 800f732:	68f9      	ldr	r1, [r7, #12]
 800f734:	2008      	movs	r0, #8
 800f736:	f000 f831 	bl	800f79c <WS28i3SetColorval>
		break;
 800f73a:	e02b      	b.n	800f794 <WS28i3SetColor+0xe8>
	case purple:
		fu32ColorVal.color.b=128;
 800f73c:	2380      	movs	r3, #128	@ 0x80
 800f73e:	733b      	strb	r3, [r7, #12]
		fu32ColorVal.color.r=128;
 800f740:	2380      	movs	r3, #128	@ 0x80
 800f742:	737b      	strb	r3, [r7, #13]
		fu32ColorVal.color.g=0;
 800f744:	2300      	movs	r3, #0
 800f746:	73bb      	strb	r3, [r7, #14]
		WS28i3SetColorval( TIM_CHANNEL_3, fu32ColorVal);
 800f748:	68f9      	ldr	r1, [r7, #12]
 800f74a:	2008      	movs	r0, #8
 800f74c:	f000 f826 	bl	800f79c <WS28i3SetColorval>
		break;
 800f750:	e020      	b.n	800f794 <WS28i3SetColor+0xe8>
	case yellow:
		fu32ColorVal.color.b=0;
 800f752:	2300      	movs	r3, #0
 800f754:	733b      	strb	r3, [r7, #12]
		fu32ColorVal.color.r=255;
 800f756:	23ff      	movs	r3, #255	@ 0xff
 800f758:	737b      	strb	r3, [r7, #13]
		fu32ColorVal.color.g=255;
 800f75a:	23ff      	movs	r3, #255	@ 0xff
 800f75c:	73bb      	strb	r3, [r7, #14]
		WS28i3SetColorval(TIM_CHANNEL_3, fu32ColorVal);
 800f75e:	68f9      	ldr	r1, [r7, #12]
 800f760:	2008      	movs	r0, #8
 800f762:	f000 f81b 	bl	800f79c <WS28i3SetColorval>
		break;
 800f766:	e015      	b.n	800f794 <WS28i3SetColor+0xe8>
	case orange:
		fu32ColorVal.color.b=0;
 800f768:	2300      	movs	r3, #0
 800f76a:	733b      	strb	r3, [r7, #12]
		fu32ColorVal.color.r=255;
 800f76c:	23ff      	movs	r3, #255	@ 0xff
 800f76e:	737b      	strb	r3, [r7, #13]
		fu32ColorVal.color.g=137;
 800f770:	2389      	movs	r3, #137	@ 0x89
 800f772:	73bb      	strb	r3, [r7, #14]
		WS28i3SetColorval(TIM_CHANNEL_3, fu32ColorVal);
 800f774:	68f9      	ldr	r1, [r7, #12]
 800f776:	2008      	movs	r0, #8
 800f778:	f000 f810 	bl	800f79c <WS28i3SetColorval>
		break;
 800f77c:	e00a      	b.n	800f794 <WS28i3SetColor+0xe8>
	case off:
		fu32ColorVal.color.b=0;
 800f77e:	2300      	movs	r3, #0
 800f780:	733b      	strb	r3, [r7, #12]
		fu32ColorVal.color.r=0;
 800f782:	2300      	movs	r3, #0
 800f784:	737b      	strb	r3, [r7, #13]
		fu32ColorVal.color.g=0;
 800f786:	2300      	movs	r3, #0
 800f788:	73bb      	strb	r3, [r7, #14]
		WS28i3SetColorval(TIM_CHANNEL_3, fu32ColorVal);
 800f78a:	68f9      	ldr	r1, [r7, #12]
 800f78c:	2008      	movs	r0, #8
 800f78e:	f000 f805 	bl	800f79c <WS28i3SetColorval>
		break;
 800f792:	bf00      	nop

	}
}
 800f794:	bf00      	nop
 800f796:	3710      	adds	r7, #16
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <WS28i3SetColorval>:

void WS28i3SetColorval(uint32_t Channel, PixelRGB_t fu32ColorVal)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b084      	sub	sp, #16
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	6039      	str	r1, [r7, #0]
	pixel[0] = fu32ColorVal;
 800f7a6:	4a1a      	ldr	r2, [pc, #104]	@ (800f810 <WS28i3SetColorval+0x74>)
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	6013      	str	r3, [r2, #0]
	uint32_t *pBuff;
	 pBuff = dmaBuffer;
 800f7ac:	4b19      	ldr	r3, [pc, #100]	@ (800f814 <WS28i3SetColorval+0x78>)
 800f7ae:	60fb      	str	r3, [r7, #12]
	 for (int8_t j = 23; j >= 0; j--)
 800f7b0:	2317      	movs	r3, #23
 800f7b2:	72fb      	strb	r3, [r7, #11]
 800f7b4:	e019      	b.n	800f7ea <WS28i3SetColorval+0x4e>
	 {
		 if ((pixel[0].data >> j) & 0x01)
 800f7b6:	4b16      	ldr	r3, [pc, #88]	@ (800f810 <WS28i3SetColorval+0x74>)
 800f7b8:	681a      	ldr	r2, [r3, #0]
 800f7ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f7be:	fa22 f303 	lsr.w	r3, r2, r3
 800f7c2:	f003 0301 	and.w	r3, r3, #1
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d003      	beq.n	800f7d2 <WS28i3SetColorval+0x36>
		 {
			 *pBuff = NEOPIXEL_ONE;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	2233      	movs	r2, #51	@ 0x33
 800f7ce:	601a      	str	r2, [r3, #0]
 800f7d0:	e002      	b.n	800f7d8 <WS28i3SetColorval+0x3c>
		 }
		 else
		 {
			 *pBuff = NEOPIXEL_ZERO;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2219      	movs	r2, #25
 800f7d6:	601a      	str	r2, [r3, #0]
		  }
		  pBuff++;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	3304      	adds	r3, #4
 800f7dc:	60fb      	str	r3, [r7, #12]
	 for (int8_t j = 23; j >= 0; j--)
 800f7de:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f7e2:	b2db      	uxtb	r3, r3
 800f7e4:	3b01      	subs	r3, #1
 800f7e6:	b2db      	uxtb	r3, r3
 800f7e8:	72fb      	strb	r3, [r7, #11]
 800f7ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	dae1      	bge.n	800f7b6 <WS28i3SetColorval+0x1a>
	}
	 dmaBuffer[DMA_BUFF_SIZE - 1] = 0;
 800f7f2:	4b08      	ldr	r3, [pc, #32]	@ (800f814 <WS28i3SetColorval+0x78>)
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	661a      	str	r2, [r3, #96]	@ 0x60
	 HAL_TIM_PWM_Start_DMA(LEDhtim, Channel, dmaBuffer, DMA_BUFF_SIZE);
 800f7f8:	4b07      	ldr	r3, [pc, #28]	@ (800f818 <WS28i3SetColorval+0x7c>)
 800f7fa:	6818      	ldr	r0, [r3, #0]
 800f7fc:	2319      	movs	r3, #25
 800f7fe:	4a05      	ldr	r2, [pc, #20]	@ (800f814 <WS28i3SetColorval+0x78>)
 800f800:	6879      	ldr	r1, [r7, #4]
 800f802:	f7f7 fff9 	bl	80077f8 <HAL_TIM_PWM_Start_DMA>
}
 800f806:	bf00      	nop
 800f808:	3710      	adds	r7, #16
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	20003970 	.word	0x20003970
 800f814:	20003974 	.word	0x20003974
 800f818:	200039d8 	.word	0x200039d8

0800f81c <DS1307setDateTime>:

void writeRegister8(uint8_t reg, uint8_t value);


eDS1307Ret DS1307setDateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second)
{
 800f81c:	b590      	push	{r4, r7, lr}
 800f81e:	b089      	sub	sp, #36	@ 0x24
 800f820:	af02      	add	r7, sp, #8
 800f822:	4604      	mov	r4, r0
 800f824:	4608      	mov	r0, r1
 800f826:	4611      	mov	r1, r2
 800f828:	461a      	mov	r2, r3
 800f82a:	4623      	mov	r3, r4
 800f82c:	80fb      	strh	r3, [r7, #6]
 800f82e:	4603      	mov	r3, r0
 800f830:	717b      	strb	r3, [r7, #5]
 800f832:	460b      	mov	r3, r1
 800f834:	713b      	strb	r3, [r7, #4]
 800f836:	4613      	mov	r3, r2
 800f838:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef i2cResult;
	uint8_t dta[8];
	eDS1307Ret u8RetVal;
	dta[0] = DS1307_REG_TIME;
 800f83a:	2300      	movs	r3, #0
 800f83c:	733b      	strb	r3, [r7, #12]
	dta[1] = dec2bcd(second);
 800f83e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f842:	4618      	mov	r0, r3
 800f844:	f000 fb1a 	bl	800fe7c <dec2bcd>
 800f848:	4603      	mov	r3, r0
 800f84a:	737b      	strb	r3, [r7, #13]
	dta[2] = dec2bcd(minute);
 800f84c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f850:	4618      	mov	r0, r3
 800f852:	f000 fb13 	bl	800fe7c <dec2bcd>
 800f856:	4603      	mov	r3, r0
 800f858:	73bb      	strb	r3, [r7, #14]
	dta[3] = dec2bcd(hour);
 800f85a:	78fb      	ldrb	r3, [r7, #3]
 800f85c:	4618      	mov	r0, r3
 800f85e:	f000 fb0d 	bl	800fe7c <dec2bcd>
 800f862:	4603      	mov	r3, r0
 800f864:	73fb      	strb	r3, [r7, #15]
	dta[4] = dec2bcd(dow(year, month, day));
 800f866:	793a      	ldrb	r2, [r7, #4]
 800f868:	7979      	ldrb	r1, [r7, #5]
 800f86a:	88fb      	ldrh	r3, [r7, #6]
 800f86c:	4618      	mov	r0, r3
 800f86e:	f000 fd3d 	bl	80102ec <dow>
 800f872:	4603      	mov	r3, r0
 800f874:	4618      	mov	r0, r3
 800f876:	f000 fb01 	bl	800fe7c <dec2bcd>
 800f87a:	4603      	mov	r3, r0
 800f87c:	743b      	strb	r3, [r7, #16]
	dta[5] = dec2bcd(day);
 800f87e:	793b      	ldrb	r3, [r7, #4]
 800f880:	4618      	mov	r0, r3
 800f882:	f000 fafb 	bl	800fe7c <dec2bcd>
 800f886:	4603      	mov	r3, r0
 800f888:	747b      	strb	r3, [r7, #17]
	dta[6] = dec2bcd(month);
 800f88a:	797b      	ldrb	r3, [r7, #5]
 800f88c:	4618      	mov	r0, r3
 800f88e:	f000 faf5 	bl	800fe7c <dec2bcd>
 800f892:	4603      	mov	r3, r0
 800f894:	74bb      	strb	r3, [r7, #18]
	dta[7] = dec2bcd(year-2000);
 800f896:	88fb      	ldrh	r3, [r7, #6]
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	3330      	adds	r3, #48	@ 0x30
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f000 faec 	bl	800fe7c <dec2bcd>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	74fb      	strb	r3, [r7, #19]
	i2cResult = HAL_I2C_Master_Transmit(sRTCI2C, DS1307_ADDRESS, dta, 8, 100);
 800f8a8:	4b0c      	ldr	r3, [pc, #48]	@ (800f8dc <DS1307setDateTime+0xc0>)
 800f8aa:	6818      	ldr	r0, [r3, #0]
 800f8ac:	f107 020c 	add.w	r2, r7, #12
 800f8b0:	2364      	movs	r3, #100	@ 0x64
 800f8b2:	9300      	str	r3, [sp, #0]
 800f8b4:	2308      	movs	r3, #8
 800f8b6:	21d0      	movs	r1, #208	@ 0xd0
 800f8b8:	f7f4 fe1a 	bl	80044f0 <HAL_I2C_Master_Transmit>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	75bb      	strb	r3, [r7, #22]
	if(i2cResult == HAL_OK)
 800f8c0:	7dbb      	ldrb	r3, [r7, #22]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d102      	bne.n	800f8cc <DS1307setDateTime+0xb0>
	{
		u8RetVal = DS1307_success;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	75fb      	strb	r3, [r7, #23]
 800f8ca:	e001      	b.n	800f8d0 <DS1307setDateTime+0xb4>
	}
	else{
		u8RetVal = DS1307_error;
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	75fb      	strb	r3, [r7, #23]
	}
	return(u8RetVal);
 800f8d0:	7dfb      	ldrb	r3, [r7, #23]

}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	371c      	adds	r7, #28
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd90      	pop	{r4, r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	200039e8 	.word	0x200039e8

0800f8e0 <dateFormat>:
    u8RetVal = DS1307setDateTime(year+2000, month, day, hour, minute, second);
    return(u8RetVal);
}

void dateFormat(const char* dateFormat, sRTCDateTime dt, char* buffer)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b088      	sub	sp, #32
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	4638      	mov	r0, r7
 800f8ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}

    buffer[0] = 0;
 800f8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	701a      	strb	r2, [r3, #0]

    char helper[11];

    while (*dateFormat != '\0')
 800f8f4:	e201      	b.n	800fcfa <dateFormat+0x41a>
    {
        switch (dateFormat[0])
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	3b41      	subs	r3, #65	@ 0x41
 800f8fc:	2b39      	cmp	r3, #57	@ 0x39
 800f8fe:	f200 81f3 	bhi.w	800fce8 <dateFormat+0x408>
 800f902:	a201      	add	r2, pc, #4	@ (adr r2, 800f908 <dateFormat+0x28>)
 800f904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f908:	0800fc65 	.word	0x0800fc65
 800f90c:	0800fce9 	.word	0x0800fce9
 800f910:	0800fce9 	.word	0x0800fce9
 800f914:	0800fa41 	.word	0x0800fa41
 800f918:	0800fce9 	.word	0x0800fce9
 800f91c:	0800fb25 	.word	0x0800fb25
 800f920:	0800fbfb 	.word	0x0800fbfb
 800f924:	0800fbdd 	.word	0x0800fbdd
 800f928:	0800fce9 	.word	0x0800fce9
 800f92c:	0800fce9 	.word	0x0800fce9
 800f930:	0800fce9 	.word	0x0800fce9
 800f934:	0800fbb7 	.word	0x0800fbb7
 800f938:	0800fb39 	.word	0x0800fb39
 800f93c:	0800fa57 	.word	0x0800fa57
 800f940:	0800fce9 	.word	0x0800fce9
 800f944:	0800fce9 	.word	0x0800fce9
 800f948:	0800fce9 	.word	0x0800fce9
 800f94c:	0800fce9 	.word	0x0800fce9
 800f950:	0800fad5 	.word	0x0800fad5
 800f954:	0800fce9 	.word	0x0800fce9
 800f958:	0800fccd 	.word	0x0800fccd
 800f95c:	0800fce9 	.word	0x0800fce9
 800f960:	0800fce9 	.word	0x0800fce9
 800f964:	0800fce9 	.word	0x0800fce9
 800f968:	0800fb79 	.word	0x0800fb79
 800f96c:	0800fce9 	.word	0x0800fce9
 800f970:	0800fce9 	.word	0x0800fce9
 800f974:	0800fce9 	.word	0x0800fce9
 800f978:	0800fce9 	.word	0x0800fce9
 800f97c:	0800fce9 	.word	0x0800fce9
 800f980:	0800fce9 	.word	0x0800fce9
 800f984:	0800fce9 	.word	0x0800fce9
 800f988:	0800fc7b 	.word	0x0800fc7b
 800f98c:	0800fce9 	.word	0x0800fce9
 800f990:	0800fce9 	.word	0x0800fce9
 800f994:	0800f9f1 	.word	0x0800f9f1
 800f998:	0800fce9 	.word	0x0800fce9
 800f99c:	0800fce9 	.word	0x0800fce9
 800f9a0:	0800fc3f 	.word	0x0800fc3f
 800f9a4:	0800fc19 	.word	0x0800fc19
 800f9a8:	0800fc91 	.word	0x0800fc91
 800f9ac:	0800fa0f 	.word	0x0800fa0f
 800f9b0:	0800fce9 	.word	0x0800fce9
 800f9b4:	0800fa2d 	.word	0x0800fa2d
 800f9b8:	0800fae9 	.word	0x0800fae9
 800f9bc:	0800fb07 	.word	0x0800fb07
 800f9c0:	0800fce9 	.word	0x0800fce9
 800f9c4:	0800fce9 	.word	0x0800fce9
 800f9c8:	0800fce9 	.word	0x0800fce9
 800f9cc:	0800fce9 	.word	0x0800fce9
 800f9d0:	0800fcaf 	.word	0x0800fcaf
 800f9d4:	0800fb4f 	.word	0x0800fb4f
 800f9d8:	0800fce9 	.word	0x0800fce9
 800f9dc:	0800fce9 	.word	0x0800fce9
 800f9e0:	0800fa75 	.word	0x0800fa75
 800f9e4:	0800fce9 	.word	0x0800fce9
 800f9e8:	0800fb97 	.word	0x0800fb97
 800f9ec:	0800faab 	.word	0x0800faab
        {
            // Day decoder
            case 'd':
                sprintf(helper, "%02d", dt.u8day);
 800f9f0:	78fb      	ldrb	r3, [r7, #3]
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	f107 0314 	add.w	r3, r7, #20
 800f9f8:	49c5      	ldr	r1, [pc, #788]	@ (800fd10 <dateFormat+0x430>)
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f001 fd58 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800fa00:	f107 0314 	add.w	r3, r7, #20
 800fa04:	4619      	mov	r1, r3
 800fa06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa08:	f001 fe52 	bl	80116b0 <strcat>
                break;
 800fa0c:	e172      	b.n	800fcf4 <dateFormat+0x414>
            case 'j':
                sprintf(helper, "%d", dt.u8day);
 800fa0e:	78fb      	ldrb	r3, [r7, #3]
 800fa10:	461a      	mov	r2, r3
 800fa12:	f107 0314 	add.w	r3, r7, #20
 800fa16:	49bf      	ldr	r1, [pc, #764]	@ (800fd14 <dateFormat+0x434>)
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f001 fd49 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800fa1e:	f107 0314 	add.w	r3, r7, #20
 800fa22:	4619      	mov	r1, r3
 800fa24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa26:	f001 fe43 	bl	80116b0 <strcat>
                break;
 800fa2a:	e163      	b.n	800fcf4 <dateFormat+0x414>
            case 'l':
                strcat(buffer, (const char *)strDayOfWeek(dt.u8dayOfWeek));
 800fa2c:	79fb      	ldrb	r3, [r7, #7]
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f000 fa46 	bl	800fec0 <strDayOfWeek>
 800fa34:	4603      	mov	r3, r0
 800fa36:	4619      	mov	r1, r3
 800fa38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa3a:	f001 fe39 	bl	80116b0 <strcat>
                break;
 800fa3e:	e159      	b.n	800fcf4 <dateFormat+0x414>
            case 'D':
                strncat(buffer, strDayOfWeek(dt.u8dayOfWeek), 3);
 800fa40:	79fb      	ldrb	r3, [r7, #7]
 800fa42:	4618      	mov	r0, r3
 800fa44:	f000 fa3c 	bl	800fec0 <strDayOfWeek>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	2203      	movs	r2, #3
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa50:	f001 fe3d 	bl	80116ce <strncat>
                break;
 800fa54:	e14e      	b.n	800fcf4 <dateFormat+0x414>
            case 'N':
                sprintf(helper, "%d", dt.u8dayOfWeek);
 800fa56:	79fb      	ldrb	r3, [r7, #7]
 800fa58:	461a      	mov	r2, r3
 800fa5a:	f107 0314 	add.w	r3, r7, #20
 800fa5e:	49ad      	ldr	r1, [pc, #692]	@ (800fd14 <dateFormat+0x434>)
 800fa60:	4618      	mov	r0, r3
 800fa62:	f001 fd25 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800fa66:	f107 0314 	add.w	r3, r7, #20
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa6e:	f001 fe1f 	bl	80116b0 <strcat>
                break;
 800fa72:	e13f      	b.n	800fcf4 <dateFormat+0x414>
            case 'w':
                sprintf(helper, "%d", (dt.u8dayOfWeek + 7) % 7);
 800fa74:	79fb      	ldrb	r3, [r7, #7]
 800fa76:	1dda      	adds	r2, r3, #7
 800fa78:	4ba7      	ldr	r3, [pc, #668]	@ (800fd18 <dateFormat+0x438>)
 800fa7a:	fb83 1302 	smull	r1, r3, r3, r2
 800fa7e:	4413      	add	r3, r2
 800fa80:	1099      	asrs	r1, r3, #2
 800fa82:	17d3      	asrs	r3, r2, #31
 800fa84:	1ac9      	subs	r1, r1, r3
 800fa86:	460b      	mov	r3, r1
 800fa88:	00db      	lsls	r3, r3, #3
 800fa8a:	1a5b      	subs	r3, r3, r1
 800fa8c:	1ad1      	subs	r1, r2, r3
 800fa8e:	f107 0314 	add.w	r3, r7, #20
 800fa92:	460a      	mov	r2, r1
 800fa94:	499f      	ldr	r1, [pc, #636]	@ (800fd14 <dateFormat+0x434>)
 800fa96:	4618      	mov	r0, r3
 800fa98:	f001 fd0a 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800fa9c:	f107 0314 	add.w	r3, r7, #20
 800faa0:	4619      	mov	r1, r3
 800faa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800faa4:	f001 fe04 	bl	80116b0 <strcat>
                break;
 800faa8:	e124      	b.n	800fcf4 <dateFormat+0x414>
            case 'z':
                sprintf(helper, "%d", dayInYear(dt.u16year, dt.u8month, dt.u8day));
 800faaa:	883b      	ldrh	r3, [r7, #0]
 800faac:	78b9      	ldrb	r1, [r7, #2]
 800faae:	78fa      	ldrb	r2, [r7, #3]
 800fab0:	4618      	mov	r0, r3
 800fab2:	f000 fb4f 	bl	8010154 <dayInYear>
 800fab6:	4603      	mov	r3, r0
 800fab8:	461a      	mov	r2, r3
 800faba:	f107 0314 	add.w	r3, r7, #20
 800fabe:	4995      	ldr	r1, [pc, #596]	@ (800fd14 <dateFormat+0x434>)
 800fac0:	4618      	mov	r0, r3
 800fac2:	f001 fcf5 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800fac6:	f107 0314 	add.w	r3, r7, #20
 800faca:	4619      	mov	r1, r3
 800facc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800face:	f001 fdef 	bl	80116b0 <strcat>
                break;
 800fad2:	e10f      	b.n	800fcf4 <dateFormat+0x414>
            case 'S':
                strcat(buffer, (const char *)strDaySufix(dt.u8day));
 800fad4:	78fb      	ldrb	r3, [r7, #3]
 800fad6:	4618      	mov	r0, r3
 800fad8:	f000 fab6 	bl	8010048 <strDaySufix>
 800fadc:	4603      	mov	r3, r0
 800fade:	4619      	mov	r1, r3
 800fae0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fae2:	f001 fde5 	bl	80116b0 <strcat>
                break;
 800fae6:	e105      	b.n	800fcf4 <dateFormat+0x414>

            // Month decoder
            case 'm':
                sprintf(helper, "%02d", dt.u8month);
 800fae8:	78bb      	ldrb	r3, [r7, #2]
 800faea:	461a      	mov	r2, r3
 800faec:	f107 0314 	add.w	r3, r7, #20
 800faf0:	4987      	ldr	r1, [pc, #540]	@ (800fd10 <dateFormat+0x430>)
 800faf2:	4618      	mov	r0, r3
 800faf4:	f001 fcdc 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800faf8:	f107 0314 	add.w	r3, r7, #20
 800fafc:	4619      	mov	r1, r3
 800fafe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb00:	f001 fdd6 	bl	80116b0 <strcat>
                break;
 800fb04:	e0f6      	b.n	800fcf4 <dateFormat+0x414>
            case 'n':
                sprintf(helper, "%d", dt.u8month);
 800fb06:	78bb      	ldrb	r3, [r7, #2]
 800fb08:	461a      	mov	r2, r3
 800fb0a:	f107 0314 	add.w	r3, r7, #20
 800fb0e:	4981      	ldr	r1, [pc, #516]	@ (800fd14 <dateFormat+0x434>)
 800fb10:	4618      	mov	r0, r3
 800fb12:	f001 fccd 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800fb16:	f107 0314 	add.w	r3, r7, #20
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb1e:	f001 fdc7 	bl	80116b0 <strcat>
                break;
 800fb22:	e0e7      	b.n	800fcf4 <dateFormat+0x414>
            case 'F':
                strcat(buffer, (const char *)strMonth(dt.u8month));
 800fb24:	78bb      	ldrb	r3, [r7, #2]
 800fb26:	4618      	mov	r0, r3
 800fb28:	f000 fa0a 	bl	800ff40 <strMonth>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	4619      	mov	r1, r3
 800fb30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb32:	f001 fdbd 	bl	80116b0 <strcat>
                break;
 800fb36:	e0dd      	b.n	800fcf4 <dateFormat+0x414>
            case 'M':
                strncat(buffer, (const char *)strMonth(dt.u8month), 3);
 800fb38:	78bb      	ldrb	r3, [r7, #2]
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f000 fa00 	bl	800ff40 <strMonth>
 800fb40:	4603      	mov	r3, r0
 800fb42:	2203      	movs	r2, #3
 800fb44:	4619      	mov	r1, r3
 800fb46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb48:	f001 fdc1 	bl	80116ce <strncat>
                break;
 800fb4c:	e0d2      	b.n	800fcf4 <dateFormat+0x414>
            case 't':
                sprintf(helper, "%d", daysInMonth(dt.u16year, dt.u8month));
 800fb4e:	883b      	ldrh	r3, [r7, #0]
 800fb50:	78ba      	ldrb	r2, [r7, #2]
 800fb52:	4611      	mov	r1, r2
 800fb54:	4618      	mov	r0, r3
 800fb56:	f000 fb33 	bl	80101c0 <daysInMonth>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	f107 0314 	add.w	r3, r7, #20
 800fb62:	496c      	ldr	r1, [pc, #432]	@ (800fd14 <dateFormat+0x434>)
 800fb64:	4618      	mov	r0, r3
 800fb66:	f001 fca3 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800fb6a:	f107 0314 	add.w	r3, r7, #20
 800fb6e:	4619      	mov	r1, r3
 800fb70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb72:	f001 fd9d 	bl	80116b0 <strcat>
                break;
 800fb76:	e0bd      	b.n	800fcf4 <dateFormat+0x414>

            // Year decoder
            case 'Y':
                sprintf(helper, "%d", dt.u16year);
 800fb78:	883b      	ldrh	r3, [r7, #0]
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	f107 0314 	add.w	r3, r7, #20
 800fb80:	4964      	ldr	r1, [pc, #400]	@ (800fd14 <dateFormat+0x434>)
 800fb82:	4618      	mov	r0, r3
 800fb84:	f001 fc94 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800fb88:	f107 0314 	add.w	r3, r7, #20
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb90:	f001 fd8e 	bl	80116b0 <strcat>
                break;
 800fb94:	e0ae      	b.n	800fcf4 <dateFormat+0x414>
            case 'y': sprintf(helper, "%02d", dt.u16year-2000);
 800fb96:	883b      	ldrh	r3, [r7, #0]
 800fb98:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 800fb9c:	f107 0314 	add.w	r3, r7, #20
 800fba0:	495b      	ldr	r1, [pc, #364]	@ (800fd10 <dateFormat+0x430>)
 800fba2:	4618      	mov	r0, r3
 800fba4:	f001 fc84 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800fba8:	f107 0314 	add.w	r3, r7, #20
 800fbac:	4619      	mov	r1, r3
 800fbae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fbb0:	f001 fd7e 	bl	80116b0 <strcat>
                break;
 800fbb4:	e09e      	b.n	800fcf4 <dateFormat+0x414>
            case 'L':
                sprintf(helper, "%d", isLeapYear(dt.u16year));
 800fbb6:	883b      	ldrh	r3, [r7, #0]
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f000 faec 	bl	8010196 <isLeapYear>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	f107 0314 	add.w	r3, r7, #20
 800fbc6:	4953      	ldr	r1, [pc, #332]	@ (800fd14 <dateFormat+0x434>)
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f001 fc71 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800fbce:	f107 0314 	add.w	r3, r7, #20
 800fbd2:	4619      	mov	r1, r3
 800fbd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fbd6:	f001 fd6b 	bl	80116b0 <strcat>
                break;
 800fbda:	e08b      	b.n	800fcf4 <dateFormat+0x414>

            // Hour decoder
            case 'H':
                sprintf(helper, "%02d", dt.u8hour);
 800fbdc:	793b      	ldrb	r3, [r7, #4]
 800fbde:	461a      	mov	r2, r3
 800fbe0:	f107 0314 	add.w	r3, r7, #20
 800fbe4:	494a      	ldr	r1, [pc, #296]	@ (800fd10 <dateFormat+0x430>)
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f001 fc62 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800fbec:	f107 0314 	add.w	r3, r7, #20
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fbf4:	f001 fd5c 	bl	80116b0 <strcat>
                break;
 800fbf8:	e07c      	b.n	800fcf4 <dateFormat+0x414>
            case 'G':
                sprintf(helper, "%d", dt.u8hour);
 800fbfa:	793b      	ldrb	r3, [r7, #4]
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	f107 0314 	add.w	r3, r7, #20
 800fc02:	4944      	ldr	r1, [pc, #272]	@ (800fd14 <dateFormat+0x434>)
 800fc04:	4618      	mov	r0, r3
 800fc06:	f001 fc53 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800fc0a:	f107 0314 	add.w	r3, r7, #20
 800fc0e:	4619      	mov	r1, r3
 800fc10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc12:	f001 fd4d 	bl	80116b0 <strcat>
                break;
 800fc16:	e06d      	b.n	800fcf4 <dateFormat+0x414>
            case 'h':
                sprintf(helper, "%02d", hour12(dt.u8hour));
 800fc18:	793b      	ldrb	r3, [r7, #4]
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f000 fa58 	bl	80100d0 <hour12>
 800fc20:	4603      	mov	r3, r0
 800fc22:	461a      	mov	r2, r3
 800fc24:	f107 0314 	add.w	r3, r7, #20
 800fc28:	4939      	ldr	r1, [pc, #228]	@ (800fd10 <dateFormat+0x430>)
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f001 fc40 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800fc30:	f107 0314 	add.w	r3, r7, #20
 800fc34:	4619      	mov	r1, r3
 800fc36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc38:	f001 fd3a 	bl	80116b0 <strcat>
                break;
 800fc3c:	e05a      	b.n	800fcf4 <dateFormat+0x414>
            case 'g':
                sprintf(helper, "%d", hour12(dt.u8hour));
 800fc3e:	793b      	ldrb	r3, [r7, #4]
 800fc40:	4618      	mov	r0, r3
 800fc42:	f000 fa45 	bl	80100d0 <hour12>
 800fc46:	4603      	mov	r3, r0
 800fc48:	461a      	mov	r2, r3
 800fc4a:	f107 0314 	add.w	r3, r7, #20
 800fc4e:	4931      	ldr	r1, [pc, #196]	@ (800fd14 <dateFormat+0x434>)
 800fc50:	4618      	mov	r0, r3
 800fc52:	f001 fc2d 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800fc56:	f107 0314 	add.w	r3, r7, #20
 800fc5a:	4619      	mov	r1, r3
 800fc5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc5e:	f001 fd27 	bl	80116b0 <strcat>
                break;
 800fc62:	e047      	b.n	800fcf4 <dateFormat+0x414>
            case 'A':
                strcat(buffer, (const char *)strAmPm(dt.u8hour, 1));
 800fc64:	793b      	ldrb	r3, [r7, #4]
 800fc66:	2101      	movs	r1, #1
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f000 f9c7 	bl	800fffc <strAmPm>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	4619      	mov	r1, r3
 800fc72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc74:	f001 fd1c 	bl	80116b0 <strcat>
                break;
 800fc78:	e03c      	b.n	800fcf4 <dateFormat+0x414>
            case 'a':
                strcat(buffer, (const char *)strAmPm(dt.u8hour, 0));
 800fc7a:	793b      	ldrb	r3, [r7, #4]
 800fc7c:	2100      	movs	r1, #0
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f000 f9bc 	bl	800fffc <strAmPm>
 800fc84:	4603      	mov	r3, r0
 800fc86:	4619      	mov	r1, r3
 800fc88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc8a:	f001 fd11 	bl	80116b0 <strcat>
                break;
 800fc8e:	e031      	b.n	800fcf4 <dateFormat+0x414>

            // Minute decoder
            case 'i':
                sprintf(helper, "%02d", dt.u8minute);
 800fc90:	797b      	ldrb	r3, [r7, #5]
 800fc92:	461a      	mov	r2, r3
 800fc94:	f107 0314 	add.w	r3, r7, #20
 800fc98:	491d      	ldr	r1, [pc, #116]	@ (800fd10 <dateFormat+0x430>)
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f001 fc08 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800fca0:	f107 0314 	add.w	r3, r7, #20
 800fca4:	4619      	mov	r1, r3
 800fca6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fca8:	f001 fd02 	bl	80116b0 <strcat>
                break;
 800fcac:	e022      	b.n	800fcf4 <dateFormat+0x414>

            // Second decoder
            case 's':
                sprintf(helper, "%02d", dt.u8second);
 800fcae:	79bb      	ldrb	r3, [r7, #6]
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	f107 0314 	add.w	r3, r7, #20
 800fcb6:	4916      	ldr	r1, [pc, #88]	@ (800fd10 <dateFormat+0x430>)
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f001 fbf9 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800fcbe:	f107 0314 	add.w	r3, r7, #20
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fcc6:	f001 fcf3 	bl	80116b0 <strcat>
                break;
 800fcca:	e013      	b.n	800fcf4 <dateFormat+0x414>

            // Misc decoder
            case 'U':
                sprintf(helper, "%lu", dt.u32unixtime);
 800fccc:	68ba      	ldr	r2, [r7, #8]
 800fcce:	f107 0314 	add.w	r3, r7, #20
 800fcd2:	4912      	ldr	r1, [pc, #72]	@ (800fd1c <dateFormat+0x43c>)
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f001 fbeb 	bl	80114b0 <siprintf>
                strcat(buffer, (const char *)helper);
 800fcda:	f107 0314 	add.w	r3, r7, #20
 800fcde:	4619      	mov	r1, r3
 800fce0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fce2:	f001 fce5 	bl	80116b0 <strcat>
                break;
 800fce6:	e005      	b.n	800fcf4 <dateFormat+0x414>

            default:
                strncat(buffer, dateFormat, 1);
 800fce8:	2201      	movs	r2, #1
 800fcea:	68f9      	ldr	r1, [r7, #12]
 800fcec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fcee:	f001 fcee 	bl	80116ce <strncat>
                break;
 800fcf2:	bf00      	nop
        }
        dateFormat++;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	60fb      	str	r3, [r7, #12]
    while (*dateFormat != '\0')
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	f47f adf9 	bne.w	800f8f6 <dateFormat+0x16>
    }
}
 800fd04:	bf00      	nop
 800fd06:	bf00      	nop
 800fd08:	3720      	adds	r7, #32
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	08012e40 	.word	0x08012e40
 800fd14:	08012e48 	.word	0x08012e48
 800fd18:	92492493 	.word	0x92492493
 800fd1c:	08012e4c 	.word	0x08012e4c

0800fd20 <getDateTime>:

sRTCDateTime getDateTime(void)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b090      	sub	sp, #64	@ 0x40
 800fd24:	af02      	add	r7, sp, #8
 800fd26:	6078      	str	r0, [r7, #4]
    int values[7];
	uint8_t u8RData[7]={0};
 800fd28:	2300      	movs	r3, #0
 800fd2a:	613b      	str	r3, [r7, #16]
 800fd2c:	f107 0314 	add.w	r3, r7, #20
 800fd30:	2100      	movs	r1, #0
 800fd32:	460a      	mov	r2, r1
 800fd34:	801a      	strh	r2, [r3, #0]
 800fd36:	460a      	mov	r2, r1
 800fd38:	709a      	strb	r2, [r3, #2]
	uint8_t u8TData[1];
	u8TData[0] = DS1307_REG_TIME;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(sRTCI2C, DS1307_ADDRESS, u8TData, 1, 100);
 800fd3e:	4b40      	ldr	r3, [pc, #256]	@ (800fe40 <getDateTime+0x120>)
 800fd40:	6818      	ldr	r0, [r3, #0]
 800fd42:	f107 020c 	add.w	r2, r7, #12
 800fd46:	2364      	movs	r3, #100	@ 0x64
 800fd48:	9300      	str	r3, [sp, #0]
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	21d0      	movs	r1, #208	@ 0xd0
 800fd4e:	f7f4 fbcf 	bl	80044f0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(sRTCI2C, DS1307_ADDRESS|0x01, u8RData, 7, 100);
 800fd52:	4b3b      	ldr	r3, [pc, #236]	@ (800fe40 <getDateTime+0x120>)
 800fd54:	6818      	ldr	r0, [r3, #0]
 800fd56:	f107 0210 	add.w	r2, r7, #16
 800fd5a:	2364      	movs	r3, #100	@ 0x64
 800fd5c:	9300      	str	r3, [sp, #0]
 800fd5e:	2307      	movs	r3, #7
 800fd60:	21d1      	movs	r1, #209	@ 0xd1
 800fd62:	f7f4 fcdd 	bl	8004720 <HAL_I2C_Master_Receive>
		else
		{
			values[i] = bcd2dec(u8RData[0]);
        }
	}*/
    for (int i = 0; i < 7; i++)
 800fd66:	2300      	movs	r3, #0
 800fd68:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd6a:	e039      	b.n	800fde0 <getDateTime+0xc0>
    {
		if (i == 3)
 800fd6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd6e:	2b03      	cmp	r3, #3
 800fd70:	d10c      	bne.n	800fd8c <getDateTime+0x6c>
		{
			values[i] = (int)u8RData[i];
 800fd72:	f107 0210 	add.w	r2, r7, #16
 800fd76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd78:	4413      	add	r3, r2
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd80:	009b      	lsls	r3, r3, #2
 800fd82:	3338      	adds	r3, #56	@ 0x38
 800fd84:	443b      	add	r3, r7
 800fd86:	f843 2c20 	str.w	r2, [r3, #-32]
 800fd8a:	e026      	b.n	800fdda <getDateTime+0xba>
		}
		else if (i==0)
 800fd8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d113      	bne.n	800fdba <getDateTime+0x9a>
		{
			//ignore CH bit
			values[i] = bcd2dec(u8RData[i]&0x7F);
 800fd92:	f107 0210 	add.w	r2, r7, #16
 800fd96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd98:	4413      	add	r3, r2
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fda0:	b2db      	uxtb	r3, r3
 800fda2:	4618      	mov	r0, r3
 800fda4:	f000 f850 	bl	800fe48 <bcd2dec>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	461a      	mov	r2, r3
 800fdac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdae:	009b      	lsls	r3, r3, #2
 800fdb0:	3338      	adds	r3, #56	@ 0x38
 800fdb2:	443b      	add	r3, r7
 800fdb4:	f843 2c20 	str.w	r2, [r3, #-32]
 800fdb8:	e00f      	b.n	800fdda <getDateTime+0xba>
		}
		else
		{
			values[i] = bcd2dec(u8RData[i]);
 800fdba:	f107 0210 	add.w	r2, r7, #16
 800fdbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdc0:	4413      	add	r3, r2
 800fdc2:	781b      	ldrb	r3, [r3, #0]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f000 f83f 	bl	800fe48 <bcd2dec>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	461a      	mov	r2, r3
 800fdce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdd0:	009b      	lsls	r3, r3, #2
 800fdd2:	3338      	adds	r3, #56	@ 0x38
 800fdd4:	443b      	add	r3, r7
 800fdd6:	f843 2c20 	str.w	r2, [r3, #-32]
    for (int i = 0; i < 7; i++)
 800fdda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fddc:	3301      	adds	r3, #1
 800fdde:	637b      	str	r3, [r7, #52]	@ 0x34
 800fde0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fde2:	2b06      	cmp	r3, #6
 800fde4:	ddc2      	ble.n	800fd6c <getDateTime+0x4c>
        }
    }

    t.u16year = values[6] + 2000;
 800fde6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fde8:	b29b      	uxth	r3, r3
 800fdea:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	4b14      	ldr	r3, [pc, #80]	@ (800fe44 <getDateTime+0x124>)
 800fdf2:	801a      	strh	r2, [r3, #0]
    t.u8month = values[5];
 800fdf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdf6:	b2da      	uxtb	r2, r3
 800fdf8:	4b12      	ldr	r3, [pc, #72]	@ (800fe44 <getDateTime+0x124>)
 800fdfa:	709a      	strb	r2, [r3, #2]
    t.u8day = values[4];
 800fdfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdfe:	b2da      	uxtb	r2, r3
 800fe00:	4b10      	ldr	r3, [pc, #64]	@ (800fe44 <getDateTime+0x124>)
 800fe02:	70da      	strb	r2, [r3, #3]
    t.u8dayOfWeek = values[3];
 800fe04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe06:	b2da      	uxtb	r2, r3
 800fe08:	4b0e      	ldr	r3, [pc, #56]	@ (800fe44 <getDateTime+0x124>)
 800fe0a:	71da      	strb	r2, [r3, #7]
    t.u8hour = values[2];
 800fe0c:	6a3b      	ldr	r3, [r7, #32]
 800fe0e:	b2da      	uxtb	r2, r3
 800fe10:	4b0c      	ldr	r3, [pc, #48]	@ (800fe44 <getDateTime+0x124>)
 800fe12:	711a      	strb	r2, [r3, #4]
    t.u8minute = values[1];
 800fe14:	69fb      	ldr	r3, [r7, #28]
 800fe16:	b2da      	uxtb	r2, r3
 800fe18:	4b0a      	ldr	r3, [pc, #40]	@ (800fe44 <getDateTime+0x124>)
 800fe1a:	715a      	strb	r2, [r3, #5]
    t.u8second = values[0];
 800fe1c:	69bb      	ldr	r3, [r7, #24]
 800fe1e:	b2da      	uxtb	r2, r3
 800fe20:	4b08      	ldr	r3, [pc, #32]	@ (800fe44 <getDateTime+0x124>)
 800fe22:	719a      	strb	r2, [r3, #6]
    t.u32unixtime = unixtime();
 800fe24:	f000 fa3c 	bl	80102a0 <unixtime>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	4a06      	ldr	r2, [pc, #24]	@ (800fe44 <getDateTime+0x124>)
 800fe2c:	6093      	str	r3, [r2, #8]

    return t;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	4a04      	ldr	r2, [pc, #16]	@ (800fe44 <getDateTime+0x124>)
 800fe32:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	3738      	adds	r7, #56	@ 0x38
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	200039e8 	.word	0x200039e8
 800fe44:	200039dc 	.word	0x200039dc

0800fe48 <bcd2dec>:
    value = readRegister8(DS1307_REG_CONTROL);
    return (ds1307_sqwOut_t)value;
}

uint8_t bcd2dec(uint8_t bcd)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b083      	sub	sp, #12
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	4603      	mov	r3, r0
 800fe50:	71fb      	strb	r3, [r7, #7]
    return ((bcd / 16) * 10) + (bcd % 16);
 800fe52:	79fb      	ldrb	r3, [r7, #7]
 800fe54:	091b      	lsrs	r3, r3, #4
 800fe56:	b2db      	uxtb	r3, r3
 800fe58:	461a      	mov	r2, r3
 800fe5a:	0092      	lsls	r2, r2, #2
 800fe5c:	4413      	add	r3, r2
 800fe5e:	005b      	lsls	r3, r3, #1
 800fe60:	b2da      	uxtb	r2, r3
 800fe62:	79fb      	ldrb	r3, [r7, #7]
 800fe64:	f003 030f 	and.w	r3, r3, #15
 800fe68:	b2db      	uxtb	r3, r3
 800fe6a:	4413      	add	r3, r2
 800fe6c:	b2db      	uxtb	r3, r3
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	370c      	adds	r7, #12
 800fe72:	46bd      	mov	sp, r7
 800fe74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe78:	4770      	bx	lr
	...

0800fe7c <dec2bcd>:

uint8_t dec2bcd(uint8_t dec)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b083      	sub	sp, #12
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	4603      	mov	r3, r0
 800fe84:	71fb      	strb	r3, [r7, #7]
    return ((dec / 10) * 16) + (dec % 10);
 800fe86:	79fb      	ldrb	r3, [r7, #7]
 800fe88:	4a0c      	ldr	r2, [pc, #48]	@ (800febc <dec2bcd+0x40>)
 800fe8a:	fba2 2303 	umull	r2, r3, r2, r3
 800fe8e:	08db      	lsrs	r3, r3, #3
 800fe90:	b2db      	uxtb	r3, r3
 800fe92:	011b      	lsls	r3, r3, #4
 800fe94:	b2d8      	uxtb	r0, r3
 800fe96:	79fa      	ldrb	r2, [r7, #7]
 800fe98:	4b08      	ldr	r3, [pc, #32]	@ (800febc <dec2bcd+0x40>)
 800fe9a:	fba3 1302 	umull	r1, r3, r3, r2
 800fe9e:	08d9      	lsrs	r1, r3, #3
 800fea0:	460b      	mov	r3, r1
 800fea2:	009b      	lsls	r3, r3, #2
 800fea4:	440b      	add	r3, r1
 800fea6:	005b      	lsls	r3, r3, #1
 800fea8:	1ad3      	subs	r3, r2, r3
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	4403      	add	r3, r0
 800feae:	b2db      	uxtb	r3, r3
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	370c      	adds	r7, #12
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr
 800febc:	cccccccd 	.word	0xcccccccd

0800fec0 <strDayOfWeek>:

char *strDayOfWeek(uint8_t dayOfWeek)
{
 800fec0:	b480      	push	{r7}
 800fec2:	b083      	sub	sp, #12
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	4603      	mov	r3, r0
 800fec8:	71fb      	strb	r3, [r7, #7]
    switch (dayOfWeek) {
 800feca:	79fb      	ldrb	r3, [r7, #7]
 800fecc:	3b01      	subs	r3, #1
 800fece:	2b06      	cmp	r3, #6
 800fed0:	d81e      	bhi.n	800ff10 <strDayOfWeek+0x50>
 800fed2:	a201      	add	r2, pc, #4	@ (adr r2, 800fed8 <strDayOfWeek+0x18>)
 800fed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed8:	0800fef5 	.word	0x0800fef5
 800fedc:	0800fef9 	.word	0x0800fef9
 800fee0:	0800fefd 	.word	0x0800fefd
 800fee4:	0800ff01 	.word	0x0800ff01
 800fee8:	0800ff05 	.word	0x0800ff05
 800feec:	0800ff09 	.word	0x0800ff09
 800fef0:	0800ff0d 	.word	0x0800ff0d
        case 1:
            return "Monday";
 800fef4:	4b0a      	ldr	r3, [pc, #40]	@ (800ff20 <strDayOfWeek+0x60>)
 800fef6:	e00c      	b.n	800ff12 <strDayOfWeek+0x52>
            break;
        case 2:
            return "Tuesday";
 800fef8:	4b0a      	ldr	r3, [pc, #40]	@ (800ff24 <strDayOfWeek+0x64>)
 800fefa:	e00a      	b.n	800ff12 <strDayOfWeek+0x52>
            break;
        case 3:
            return "Wednesday";
 800fefc:	4b0a      	ldr	r3, [pc, #40]	@ (800ff28 <strDayOfWeek+0x68>)
 800fefe:	e008      	b.n	800ff12 <strDayOfWeek+0x52>
            break;
        case 4:
            return "Thursday";
 800ff00:	4b0a      	ldr	r3, [pc, #40]	@ (800ff2c <strDayOfWeek+0x6c>)
 800ff02:	e006      	b.n	800ff12 <strDayOfWeek+0x52>
            break;
        case 5:
            return "Friday";
 800ff04:	4b0a      	ldr	r3, [pc, #40]	@ (800ff30 <strDayOfWeek+0x70>)
 800ff06:	e004      	b.n	800ff12 <strDayOfWeek+0x52>
            break;
        case 6:
            return "Saturday";
 800ff08:	4b0a      	ldr	r3, [pc, #40]	@ (800ff34 <strDayOfWeek+0x74>)
 800ff0a:	e002      	b.n	800ff12 <strDayOfWeek+0x52>
            break;
        case 7:
            return "Sunday";
 800ff0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ff38 <strDayOfWeek+0x78>)
 800ff0e:	e000      	b.n	800ff12 <strDayOfWeek+0x52>
            break;
        default:
            return "Unknown";
 800ff10:	4b0a      	ldr	r3, [pc, #40]	@ (800ff3c <strDayOfWeek+0x7c>)
    }
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	370c      	adds	r7, #12
 800ff16:	46bd      	mov	sp, r7
 800ff18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1c:	4770      	bx	lr
 800ff1e:	bf00      	nop
 800ff20:	08012e50 	.word	0x08012e50
 800ff24:	08012e58 	.word	0x08012e58
 800ff28:	08012e60 	.word	0x08012e60
 800ff2c:	08012e6c 	.word	0x08012e6c
 800ff30:	08012e78 	.word	0x08012e78
 800ff34:	08012e80 	.word	0x08012e80
 800ff38:	08012e8c 	.word	0x08012e8c
 800ff3c:	08012e94 	.word	0x08012e94

0800ff40 <strMonth>:

char *strMonth(uint8_t month)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	4603      	mov	r3, r0
 800ff48:	71fb      	strb	r3, [r7, #7]
    switch (month) {
 800ff4a:	79fb      	ldrb	r3, [r7, #7]
 800ff4c:	3b01      	subs	r3, #1
 800ff4e:	2b0b      	cmp	r3, #11
 800ff50:	d832      	bhi.n	800ffb8 <strMonth+0x78>
 800ff52:	a201      	add	r2, pc, #4	@ (adr r2, 800ff58 <strMonth+0x18>)
 800ff54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff58:	0800ff89 	.word	0x0800ff89
 800ff5c:	0800ff8d 	.word	0x0800ff8d
 800ff60:	0800ff91 	.word	0x0800ff91
 800ff64:	0800ff95 	.word	0x0800ff95
 800ff68:	0800ff99 	.word	0x0800ff99
 800ff6c:	0800ff9d 	.word	0x0800ff9d
 800ff70:	0800ffa1 	.word	0x0800ffa1
 800ff74:	0800ffa5 	.word	0x0800ffa5
 800ff78:	0800ffa9 	.word	0x0800ffa9
 800ff7c:	0800ffad 	.word	0x0800ffad
 800ff80:	0800ffb1 	.word	0x0800ffb1
 800ff84:	0800ffb5 	.word	0x0800ffb5
        case 1:
            return "January";
 800ff88:	4b0f      	ldr	r3, [pc, #60]	@ (800ffc8 <strMonth+0x88>)
 800ff8a:	e016      	b.n	800ffba <strMonth+0x7a>
            break;
        case 2:
            return "February";
 800ff8c:	4b0f      	ldr	r3, [pc, #60]	@ (800ffcc <strMonth+0x8c>)
 800ff8e:	e014      	b.n	800ffba <strMonth+0x7a>
            break;
        case 3:
            return "March";
 800ff90:	4b0f      	ldr	r3, [pc, #60]	@ (800ffd0 <strMonth+0x90>)
 800ff92:	e012      	b.n	800ffba <strMonth+0x7a>
            break;
        case 4:
            return "April";
 800ff94:	4b0f      	ldr	r3, [pc, #60]	@ (800ffd4 <strMonth+0x94>)
 800ff96:	e010      	b.n	800ffba <strMonth+0x7a>
            break;
        case 5:
            return "May";
 800ff98:	4b0f      	ldr	r3, [pc, #60]	@ (800ffd8 <strMonth+0x98>)
 800ff9a:	e00e      	b.n	800ffba <strMonth+0x7a>
            break;
        case 6:
            return "June";
 800ff9c:	4b0f      	ldr	r3, [pc, #60]	@ (800ffdc <strMonth+0x9c>)
 800ff9e:	e00c      	b.n	800ffba <strMonth+0x7a>
            break;
        case 7:
            return "July";
 800ffa0:	4b0f      	ldr	r3, [pc, #60]	@ (800ffe0 <strMonth+0xa0>)
 800ffa2:	e00a      	b.n	800ffba <strMonth+0x7a>
            break;
        case 8:
            return "August";
 800ffa4:	4b0f      	ldr	r3, [pc, #60]	@ (800ffe4 <strMonth+0xa4>)
 800ffa6:	e008      	b.n	800ffba <strMonth+0x7a>
            break;
        case 9:
            return "September";
 800ffa8:	4b0f      	ldr	r3, [pc, #60]	@ (800ffe8 <strMonth+0xa8>)
 800ffaa:	e006      	b.n	800ffba <strMonth+0x7a>
            break;
        case 10:
            return "October";
 800ffac:	4b0f      	ldr	r3, [pc, #60]	@ (800ffec <strMonth+0xac>)
 800ffae:	e004      	b.n	800ffba <strMonth+0x7a>
            break;
        case 11:
            return "November";
 800ffb0:	4b0f      	ldr	r3, [pc, #60]	@ (800fff0 <strMonth+0xb0>)
 800ffb2:	e002      	b.n	800ffba <strMonth+0x7a>
            break;
        case 12:
            return "December";
 800ffb4:	4b0f      	ldr	r3, [pc, #60]	@ (800fff4 <strMonth+0xb4>)
 800ffb6:	e000      	b.n	800ffba <strMonth+0x7a>
            break;
        default:
            return "Unknown";
 800ffb8:	4b0f      	ldr	r3, [pc, #60]	@ (800fff8 <strMonth+0xb8>)
    }
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	370c      	adds	r7, #12
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc4:	4770      	bx	lr
 800ffc6:	bf00      	nop
 800ffc8:	08012e9c 	.word	0x08012e9c
 800ffcc:	08012ea4 	.word	0x08012ea4
 800ffd0:	08012eb0 	.word	0x08012eb0
 800ffd4:	08012eb8 	.word	0x08012eb8
 800ffd8:	08012ec0 	.word	0x08012ec0
 800ffdc:	08012ec4 	.word	0x08012ec4
 800ffe0:	08012ecc 	.word	0x08012ecc
 800ffe4:	08012ed4 	.word	0x08012ed4
 800ffe8:	08012edc 	.word	0x08012edc
 800ffec:	08012ee8 	.word	0x08012ee8
 800fff0:	08012ef0 	.word	0x08012ef0
 800fff4:	08012efc 	.word	0x08012efc
 800fff8:	08012e94 	.word	0x08012e94

0800fffc <strAmPm>:

char *strAmPm(uint8_t hour, uint8_t uppercase)
{
 800fffc:	b480      	push	{r7}
 800fffe:	b083      	sub	sp, #12
 8010000:	af00      	add	r7, sp, #0
 8010002:	4603      	mov	r3, r0
 8010004:	460a      	mov	r2, r1
 8010006:	71fb      	strb	r3, [r7, #7]
 8010008:	4613      	mov	r3, r2
 801000a:	71bb      	strb	r3, [r7, #6]
    if (hour < 12)
 801000c:	79fb      	ldrb	r3, [r7, #7]
 801000e:	2b0b      	cmp	r3, #11
 8010010:	d806      	bhi.n	8010020 <strAmPm+0x24>
    {
        if (uppercase)
 8010012:	79bb      	ldrb	r3, [r7, #6]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d001      	beq.n	801001c <strAmPm+0x20>
        {
            return "AM";
 8010018:	4b07      	ldr	r3, [pc, #28]	@ (8010038 <strAmPm+0x3c>)
 801001a:	e007      	b.n	801002c <strAmPm+0x30>
        } else
        {
            return "am";
 801001c:	4b07      	ldr	r3, [pc, #28]	@ (801003c <strAmPm+0x40>)
 801001e:	e005      	b.n	801002c <strAmPm+0x30>
        }
    } else
    {
        if (uppercase)
 8010020:	79bb      	ldrb	r3, [r7, #6]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d001      	beq.n	801002a <strAmPm+0x2e>
        {
            return "PM";
 8010026:	4b06      	ldr	r3, [pc, #24]	@ (8010040 <strAmPm+0x44>)
 8010028:	e000      	b.n	801002c <strAmPm+0x30>
        } else
        {
            return "pm";
 801002a:	4b06      	ldr	r3, [pc, #24]	@ (8010044 <strAmPm+0x48>)
        }
    }
}
 801002c:	4618      	mov	r0, r3
 801002e:	370c      	adds	r7, #12
 8010030:	46bd      	mov	sp, r7
 8010032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010036:	4770      	bx	lr
 8010038:	08012f08 	.word	0x08012f08
 801003c:	08012f0c 	.word	0x08012f0c
 8010040:	08012f10 	.word	0x08012f10
 8010044:	08012f14 	.word	0x08012f14

08010048 <strDaySufix>:

char *strDaySufix(uint8_t day)
{
 8010048:	b480      	push	{r7}
 801004a:	b083      	sub	sp, #12
 801004c:	af00      	add	r7, sp, #0
 801004e:	4603      	mov	r3, r0
 8010050:	71fb      	strb	r3, [r7, #7]
    if (day % 10 == 1)
 8010052:	79fa      	ldrb	r2, [r7, #7]
 8010054:	4b19      	ldr	r3, [pc, #100]	@ (80100bc <strDaySufix+0x74>)
 8010056:	fba3 1302 	umull	r1, r3, r3, r2
 801005a:	08d9      	lsrs	r1, r3, #3
 801005c:	460b      	mov	r3, r1
 801005e:	009b      	lsls	r3, r3, #2
 8010060:	440b      	add	r3, r1
 8010062:	005b      	lsls	r3, r3, #1
 8010064:	1ad3      	subs	r3, r2, r3
 8010066:	b2db      	uxtb	r3, r3
 8010068:	2b01      	cmp	r3, #1
 801006a:	d101      	bne.n	8010070 <strDaySufix+0x28>
    {
        return "st";
 801006c:	4b14      	ldr	r3, [pc, #80]	@ (80100c0 <strDaySufix+0x78>)
 801006e:	e01e      	b.n	80100ae <strDaySufix+0x66>
    } else
    if (day % 10 == 2)
 8010070:	79fa      	ldrb	r2, [r7, #7]
 8010072:	4b12      	ldr	r3, [pc, #72]	@ (80100bc <strDaySufix+0x74>)
 8010074:	fba3 1302 	umull	r1, r3, r3, r2
 8010078:	08d9      	lsrs	r1, r3, #3
 801007a:	460b      	mov	r3, r1
 801007c:	009b      	lsls	r3, r3, #2
 801007e:	440b      	add	r3, r1
 8010080:	005b      	lsls	r3, r3, #1
 8010082:	1ad3      	subs	r3, r2, r3
 8010084:	b2db      	uxtb	r3, r3
 8010086:	2b02      	cmp	r3, #2
 8010088:	d101      	bne.n	801008e <strDaySufix+0x46>
    {
        return "nd";
 801008a:	4b0e      	ldr	r3, [pc, #56]	@ (80100c4 <strDaySufix+0x7c>)
 801008c:	e00f      	b.n	80100ae <strDaySufix+0x66>
    }
    if (day % 10 == 3)
 801008e:	79fa      	ldrb	r2, [r7, #7]
 8010090:	4b0a      	ldr	r3, [pc, #40]	@ (80100bc <strDaySufix+0x74>)
 8010092:	fba3 1302 	umull	r1, r3, r3, r2
 8010096:	08d9      	lsrs	r1, r3, #3
 8010098:	460b      	mov	r3, r1
 801009a:	009b      	lsls	r3, r3, #2
 801009c:	440b      	add	r3, r1
 801009e:	005b      	lsls	r3, r3, #1
 80100a0:	1ad3      	subs	r3, r2, r3
 80100a2:	b2db      	uxtb	r3, r3
 80100a4:	2b03      	cmp	r3, #3
 80100a6:	d101      	bne.n	80100ac <strDaySufix+0x64>
    {
        return "rd";
 80100a8:	4b07      	ldr	r3, [pc, #28]	@ (80100c8 <strDaySufix+0x80>)
 80100aa:	e000      	b.n	80100ae <strDaySufix+0x66>
    }

    return "th";
 80100ac:	4b07      	ldr	r3, [pc, #28]	@ (80100cc <strDaySufix+0x84>)
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	370c      	adds	r7, #12
 80100b2:	46bd      	mov	sp, r7
 80100b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b8:	4770      	bx	lr
 80100ba:	bf00      	nop
 80100bc:	cccccccd 	.word	0xcccccccd
 80100c0:	08012f18 	.word	0x08012f18
 80100c4:	08012f1c 	.word	0x08012f1c
 80100c8:	08012f20 	.word	0x08012f20
 80100cc:	08012f24 	.word	0x08012f24

080100d0 <hour12>:

uint8_t hour12(uint8_t hour24)
{
 80100d0:	b480      	push	{r7}
 80100d2:	b083      	sub	sp, #12
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	4603      	mov	r3, r0
 80100d8:	71fb      	strb	r3, [r7, #7]
    if (hour24 == 0)
 80100da:	79fb      	ldrb	r3, [r7, #7]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d101      	bne.n	80100e4 <hour12+0x14>
    {
        return 12;
 80100e0:	230c      	movs	r3, #12
 80100e2:	e007      	b.n	80100f4 <hour12+0x24>
    }

    if (hour24 > 12)
 80100e4:	79fb      	ldrb	r3, [r7, #7]
 80100e6:	2b0c      	cmp	r3, #12
 80100e8:	d903      	bls.n	80100f2 <hour12+0x22>
    {
       return (hour24 - 12);
 80100ea:	79fb      	ldrb	r3, [r7, #7]
 80100ec:	3b0c      	subs	r3, #12
 80100ee:	b2db      	uxtb	r3, r3
 80100f0:	e000      	b.n	80100f4 <hour12+0x24>
    }

    return hour24;
 80100f2:	79fb      	ldrb	r3, [r7, #7]
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	370c      	adds	r7, #12
 80100f8:	46bd      	mov	sp, r7
 80100fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fe:	4770      	bx	lr

08010100 <time2long>:

long time2long(uint16_t days, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 8010100:	b490      	push	{r4, r7}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	4604      	mov	r4, r0
 8010108:	4608      	mov	r0, r1
 801010a:	4611      	mov	r1, r2
 801010c:	461a      	mov	r2, r3
 801010e:	4623      	mov	r3, r4
 8010110:	80fb      	strh	r3, [r7, #6]
 8010112:	4603      	mov	r3, r0
 8010114:	717b      	strb	r3, [r7, #5]
 8010116:	460b      	mov	r3, r1
 8010118:	713b      	strb	r3, [r7, #4]
 801011a:	4613      	mov	r3, r2
 801011c:	70fb      	strb	r3, [r7, #3]
    return ((days * 24L + hours) * 60 + minutes) * 60 + seconds;
 801011e:	88fa      	ldrh	r2, [r7, #6]
 8010120:	4613      	mov	r3, r2
 8010122:	005b      	lsls	r3, r3, #1
 8010124:	4413      	add	r3, r2
 8010126:	00db      	lsls	r3, r3, #3
 8010128:	461a      	mov	r2, r3
 801012a:	797b      	ldrb	r3, [r7, #5]
 801012c:	441a      	add	r2, r3
 801012e:	4613      	mov	r3, r2
 8010130:	011b      	lsls	r3, r3, #4
 8010132:	1a9b      	subs	r3, r3, r2
 8010134:	009b      	lsls	r3, r3, #2
 8010136:	461a      	mov	r2, r3
 8010138:	793b      	ldrb	r3, [r7, #4]
 801013a:	441a      	add	r2, r3
 801013c:	4613      	mov	r3, r2
 801013e:	011b      	lsls	r3, r3, #4
 8010140:	1a9b      	subs	r3, r3, r2
 8010142:	009b      	lsls	r3, r3, #2
 8010144:	461a      	mov	r2, r3
 8010146:	78fb      	ldrb	r3, [r7, #3]
 8010148:	4413      	add	r3, r2
}
 801014a:	4618      	mov	r0, r3
 801014c:	3708      	adds	r7, #8
 801014e:	46bd      	mov	sp, r7
 8010150:	bc90      	pop	{r4, r7}
 8010152:	4770      	bx	lr

08010154 <dayInYear>:

uint16_t dayInYear(uint16_t year, uint8_t month, uint8_t day)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b084      	sub	sp, #16
 8010158:	af00      	add	r7, sp, #0
 801015a:	4603      	mov	r3, r0
 801015c:	80fb      	strh	r3, [r7, #6]
 801015e:	460b      	mov	r3, r1
 8010160:	717b      	strb	r3, [r7, #5]
 8010162:	4613      	mov	r3, r2
 8010164:	713b      	strb	r3, [r7, #4]
    uint16_t fromDate;
    uint16_t toDate;

    fromDate = date2days(year, 1, 1);
 8010166:	88fb      	ldrh	r3, [r7, #6]
 8010168:	2201      	movs	r2, #1
 801016a:	2101      	movs	r1, #1
 801016c:	4618      	mov	r0, r3
 801016e:	f000 f849 	bl	8010204 <date2days>
 8010172:	4603      	mov	r3, r0
 8010174:	81fb      	strh	r3, [r7, #14]
    toDate = date2days(year, month, day);
 8010176:	793a      	ldrb	r2, [r7, #4]
 8010178:	7979      	ldrb	r1, [r7, #5]
 801017a:	88fb      	ldrh	r3, [r7, #6]
 801017c:	4618      	mov	r0, r3
 801017e:	f000 f841 	bl	8010204 <date2days>
 8010182:	4603      	mov	r3, r0
 8010184:	81bb      	strh	r3, [r7, #12]

    return (toDate - fromDate);
 8010186:	89ba      	ldrh	r2, [r7, #12]
 8010188:	89fb      	ldrh	r3, [r7, #14]
 801018a:	1ad3      	subs	r3, r2, r3
 801018c:	b29b      	uxth	r3, r3
}
 801018e:	4618      	mov	r0, r3
 8010190:	3710      	adds	r7, #16
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}

08010196 <isLeapYear>:

uint8_t isLeapYear(uint16_t year)
{
 8010196:	b480      	push	{r7}
 8010198:	b083      	sub	sp, #12
 801019a:	af00      	add	r7, sp, #0
 801019c:	4603      	mov	r3, r0
 801019e:	80fb      	strh	r3, [r7, #6]
    return (year % 4 == 0);
 80101a0:	88fb      	ldrh	r3, [r7, #6]
 80101a2:	f003 0303 	and.w	r3, r3, #3
 80101a6:	b29b      	uxth	r3, r3
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	bf0c      	ite	eq
 80101ac:	2301      	moveq	r3, #1
 80101ae:	2300      	movne	r3, #0
 80101b0:	b2db      	uxtb	r3, r3
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	370c      	adds	r7, #12
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr
	...

080101c0 <daysInMonth>:

uint8_t daysInMonth(uint16_t year, uint8_t month)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b084      	sub	sp, #16
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	4603      	mov	r3, r0
 80101c8:	460a      	mov	r2, r1
 80101ca:	80fb      	strh	r3, [r7, #6]
 80101cc:	4613      	mov	r3, r2
 80101ce:	717b      	strb	r3, [r7, #5]
    uint8_t days;

    days = daysArray[month - 1];
 80101d0:	797b      	ldrb	r3, [r7, #5]
 80101d2:	3b01      	subs	r3, #1
 80101d4:	4a0a      	ldr	r2, [pc, #40]	@ (8010200 <daysInMonth+0x40>)
 80101d6:	5cd3      	ldrb	r3, [r2, r3]
 80101d8:	73fb      	strb	r3, [r7, #15]

    if ((month == 2) && isLeapYear(year))
 80101da:	797b      	ldrb	r3, [r7, #5]
 80101dc:	2b02      	cmp	r3, #2
 80101de:	d109      	bne.n	80101f4 <daysInMonth+0x34>
 80101e0:	88fb      	ldrh	r3, [r7, #6]
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7ff ffd7 	bl	8010196 <isLeapYear>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d002      	beq.n	80101f4 <daysInMonth+0x34>
    {
        ++days;
 80101ee:	7bfb      	ldrb	r3, [r7, #15]
 80101f0:	3301      	adds	r3, #1
 80101f2:	73fb      	strb	r3, [r7, #15]
    }

    return days;
 80101f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3710      	adds	r7, #16
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	08013080 	.word	0x08013080

08010204 <date2days>:

uint16_t date2days(uint16_t year, uint8_t month, uint8_t day)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b084      	sub	sp, #16
 8010208:	af00      	add	r7, sp, #0
 801020a:	4603      	mov	r3, r0
 801020c:	80fb      	strh	r3, [r7, #6]
 801020e:	460b      	mov	r3, r1
 8010210:	717b      	strb	r3, [r7, #5]
 8010212:	4613      	mov	r3, r2
 8010214:	713b      	strb	r3, [r7, #4]
    year = year - 2000;
 8010216:	88fb      	ldrh	r3, [r7, #6]
 8010218:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 801021c:	80fb      	strh	r3, [r7, #6]

    uint16_t days16 = day;
 801021e:	793b      	ldrb	r3, [r7, #4]
 8010220:	81fb      	strh	r3, [r7, #14]

    for (uint8_t i = 1; i < month; ++i)
 8010222:	2301      	movs	r3, #1
 8010224:	737b      	strb	r3, [r7, #13]
 8010226:	e00a      	b.n	801023e <date2days+0x3a>
    {
        days16 += daysArray[i - 1];
 8010228:	7b7b      	ldrb	r3, [r7, #13]
 801022a:	3b01      	subs	r3, #1
 801022c:	4a1b      	ldr	r2, [pc, #108]	@ (801029c <date2days+0x98>)
 801022e:	5cd3      	ldrb	r3, [r2, r3]
 8010230:	461a      	mov	r2, r3
 8010232:	89fb      	ldrh	r3, [r7, #14]
 8010234:	4413      	add	r3, r2
 8010236:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 1; i < month; ++i)
 8010238:	7b7b      	ldrb	r3, [r7, #13]
 801023a:	3301      	adds	r3, #1
 801023c:	737b      	strb	r3, [r7, #13]
 801023e:	7b7a      	ldrb	r2, [r7, #13]
 8010240:	797b      	ldrb	r3, [r7, #5]
 8010242:	429a      	cmp	r2, r3
 8010244:	d3f0      	bcc.n	8010228 <date2days+0x24>
    }

    if ((month == 2) && isLeapYear(year))
 8010246:	797b      	ldrb	r3, [r7, #5]
 8010248:	2b02      	cmp	r3, #2
 801024a:	d109      	bne.n	8010260 <date2days+0x5c>
 801024c:	88fb      	ldrh	r3, [r7, #6]
 801024e:	4618      	mov	r0, r3
 8010250:	f7ff ffa1 	bl	8010196 <isLeapYear>
 8010254:	4603      	mov	r3, r0
 8010256:	2b00      	cmp	r3, #0
 8010258:	d002      	beq.n	8010260 <date2days+0x5c>
    {
        ++days16;
 801025a:	89fb      	ldrh	r3, [r7, #14]
 801025c:	3301      	adds	r3, #1
 801025e:	81fb      	strh	r3, [r7, #14]
    }

    return days16 + 365 * year + (year + 3) / 4 - 1;
 8010260:	88fb      	ldrh	r3, [r7, #6]
 8010262:	461a      	mov	r2, r3
 8010264:	00d2      	lsls	r2, r2, #3
 8010266:	441a      	add	r2, r3
 8010268:	00d2      	lsls	r2, r2, #3
 801026a:	4413      	add	r3, r2
 801026c:	461a      	mov	r2, r3
 801026e:	0091      	lsls	r1, r2, #2
 8010270:	461a      	mov	r2, r3
 8010272:	460b      	mov	r3, r1
 8010274:	4413      	add	r3, r2
 8010276:	b29a      	uxth	r2, r3
 8010278:	89fb      	ldrh	r3, [r7, #14]
 801027a:	4413      	add	r3, r2
 801027c:	b29a      	uxth	r2, r3
 801027e:	88fb      	ldrh	r3, [r7, #6]
 8010280:	3303      	adds	r3, #3
 8010282:	2b00      	cmp	r3, #0
 8010284:	da00      	bge.n	8010288 <date2days+0x84>
 8010286:	3303      	adds	r3, #3
 8010288:	109b      	asrs	r3, r3, #2
 801028a:	b29b      	uxth	r3, r3
 801028c:	4413      	add	r3, r2
 801028e:	b29b      	uxth	r3, r3
 8010290:	3b01      	subs	r3, #1
 8010292:	b29b      	uxth	r3, r3
}
 8010294:	4618      	mov	r0, r3
 8010296:	3710      	adds	r7, #16
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	08013080 	.word	0x08013080

080102a0 <unixtime>:

uint32_t unixtime(void)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
    uint32_t u;

    u = time2long(date2days(t.u16year, t.u8month, t.u8day), t.u8hour, t.u8minute, t.u8second);
 80102a6:	4b0f      	ldr	r3, [pc, #60]	@ (80102e4 <unixtime+0x44>)
 80102a8:	881b      	ldrh	r3, [r3, #0]
 80102aa:	4a0e      	ldr	r2, [pc, #56]	@ (80102e4 <unixtime+0x44>)
 80102ac:	7891      	ldrb	r1, [r2, #2]
 80102ae:	4a0d      	ldr	r2, [pc, #52]	@ (80102e4 <unixtime+0x44>)
 80102b0:	78d2      	ldrb	r2, [r2, #3]
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7ff ffa6 	bl	8010204 <date2days>
 80102b8:	4603      	mov	r3, r0
 80102ba:	4618      	mov	r0, r3
 80102bc:	4b09      	ldr	r3, [pc, #36]	@ (80102e4 <unixtime+0x44>)
 80102be:	7919      	ldrb	r1, [r3, #4]
 80102c0:	4b08      	ldr	r3, [pc, #32]	@ (80102e4 <unixtime+0x44>)
 80102c2:	795a      	ldrb	r2, [r3, #5]
 80102c4:	4b07      	ldr	r3, [pc, #28]	@ (80102e4 <unixtime+0x44>)
 80102c6:	799b      	ldrb	r3, [r3, #6]
 80102c8:	f7ff ff1a 	bl	8010100 <time2long>
 80102cc:	4603      	mov	r3, r0
 80102ce:	607b      	str	r3, [r7, #4]
    u += 946681200;
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	4b05      	ldr	r3, [pc, #20]	@ (80102e8 <unixtime+0x48>)
 80102d4:	4413      	add	r3, r2
 80102d6:	607b      	str	r3, [r7, #4]

    return u;
 80102d8:	687b      	ldr	r3, [r7, #4]
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3708      	adds	r7, #8
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
 80102e2:	bf00      	nop
 80102e4:	200039dc 	.word	0x200039dc
 80102e8:	386d3570 	.word	0x386d3570

080102ec <dow>:

    return 10 * v + *++p - '0';
}

uint8_t dow(uint16_t y, uint8_t m, uint8_t d)
{
 80102ec:	b480      	push	{r7}
 80102ee:	b085      	sub	sp, #20
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	4603      	mov	r3, r0
 80102f4:	80fb      	strh	r3, [r7, #6]
 80102f6:	460b      	mov	r3, r1
 80102f8:	717b      	strb	r3, [r7, #5]
 80102fa:	4613      	mov	r3, r2
 80102fc:	713b      	strb	r3, [r7, #4]
    uint8_t dow;

    y -= m < 3;
 80102fe:	797b      	ldrb	r3, [r7, #5]
 8010300:	2b02      	cmp	r3, #2
 8010302:	bf94      	ite	ls
 8010304:	2301      	movls	r3, #1
 8010306:	2300      	movhi	r3, #0
 8010308:	b2db      	uxtb	r3, r3
 801030a:	461a      	mov	r2, r3
 801030c:	88fb      	ldrh	r3, [r7, #6]
 801030e:	1a9b      	subs	r3, r3, r2
 8010310:	80fb      	strh	r3, [r7, #6]
    dow = ((y + y/4 - y/100 + y/400 + (dowArray[m-1]) + d) % 7);
 8010312:	88fb      	ldrh	r3, [r7, #6]
 8010314:	88fa      	ldrh	r2, [r7, #6]
 8010316:	0892      	lsrs	r2, r2, #2
 8010318:	b292      	uxth	r2, r2
 801031a:	4413      	add	r3, r2
 801031c:	88fa      	ldrh	r2, [r7, #6]
 801031e:	4916      	ldr	r1, [pc, #88]	@ (8010378 <dow+0x8c>)
 8010320:	fba1 1202 	umull	r1, r2, r1, r2
 8010324:	0952      	lsrs	r2, r2, #5
 8010326:	b292      	uxth	r2, r2
 8010328:	1a9b      	subs	r3, r3, r2
 801032a:	88fa      	ldrh	r2, [r7, #6]
 801032c:	4912      	ldr	r1, [pc, #72]	@ (8010378 <dow+0x8c>)
 801032e:	fba1 1202 	umull	r1, r2, r1, r2
 8010332:	09d2      	lsrs	r2, r2, #7
 8010334:	b292      	uxth	r2, r2
 8010336:	4413      	add	r3, r2
 8010338:	797a      	ldrb	r2, [r7, #5]
 801033a:	3a01      	subs	r2, #1
 801033c:	490f      	ldr	r1, [pc, #60]	@ (801037c <dow+0x90>)
 801033e:	5c8a      	ldrb	r2, [r1, r2]
 8010340:	441a      	add	r2, r3
 8010342:	793b      	ldrb	r3, [r7, #4]
 8010344:	441a      	add	r2, r3
 8010346:	4b0e      	ldr	r3, [pc, #56]	@ (8010380 <dow+0x94>)
 8010348:	fb83 1302 	smull	r1, r3, r3, r2
 801034c:	4413      	add	r3, r2
 801034e:	1099      	asrs	r1, r3, #2
 8010350:	17d3      	asrs	r3, r2, #31
 8010352:	1ac9      	subs	r1, r1, r3
 8010354:	460b      	mov	r3, r1
 8010356:	00db      	lsls	r3, r3, #3
 8010358:	1a5b      	subs	r3, r3, r1
 801035a:	1ad1      	subs	r1, r2, r3
 801035c:	460b      	mov	r3, r1
 801035e:	73fb      	strb	r3, [r7, #15]

    if (dow == 0)
 8010360:	7bfb      	ldrb	r3, [r7, #15]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d101      	bne.n	801036a <dow+0x7e>
    {
        return 7;
 8010366:	2307      	movs	r3, #7
 8010368:	e000      	b.n	801036c <dow+0x80>
    }

    return dow;
 801036a:	7bfb      	ldrb	r3, [r7, #15]
}
 801036c:	4618      	mov	r0, r3
 801036e:	3714      	adds	r7, #20
 8010370:	46bd      	mov	sp, r7
 8010372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010376:	4770      	bx	lr
 8010378:	51eb851f 	.word	0x51eb851f
 801037c:	0801308c 	.word	0x0801308c
 8010380:	92492493 	.word	0x92492493

08010384 <DS1307Init>:
	HAL_I2C_Master_Receive(sRTCI2C, DS1307_ADDRESS|0x01, u8RData, 1, 100);
    return(u8RData[0]);
}

void DS1307Init(I2C_HandleTypeDef* fi2cHandle)
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
	sRTCI2C = fi2cHandle;
 801038c:	4a10      	ldr	r2, [pc, #64]	@ (80103d0 <DS1307Init+0x4c>)
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6013      	str	r3, [r2, #0]
    t.u16year = 2000;
 8010392:	4b10      	ldr	r3, [pc, #64]	@ (80103d4 <DS1307Init+0x50>)
 8010394:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8010398:	801a      	strh	r2, [r3, #0]
    t.u8month = 1;
 801039a:	4b0e      	ldr	r3, [pc, #56]	@ (80103d4 <DS1307Init+0x50>)
 801039c:	2201      	movs	r2, #1
 801039e:	709a      	strb	r2, [r3, #2]
    t.u8day = 1;
 80103a0:	4b0c      	ldr	r3, [pc, #48]	@ (80103d4 <DS1307Init+0x50>)
 80103a2:	2201      	movs	r2, #1
 80103a4:	70da      	strb	r2, [r3, #3]
    t.u8hour = 0;
 80103a6:	4b0b      	ldr	r3, [pc, #44]	@ (80103d4 <DS1307Init+0x50>)
 80103a8:	2200      	movs	r2, #0
 80103aa:	711a      	strb	r2, [r3, #4]
    t.u8minute = 0;
 80103ac:	4b09      	ldr	r3, [pc, #36]	@ (80103d4 <DS1307Init+0x50>)
 80103ae:	2200      	movs	r2, #0
 80103b0:	715a      	strb	r2, [r3, #5]
    t.u8second = 0;
 80103b2:	4b08      	ldr	r3, [pc, #32]	@ (80103d4 <DS1307Init+0x50>)
 80103b4:	2200      	movs	r2, #0
 80103b6:	719a      	strb	r2, [r3, #6]
    t.u8dayOfWeek = 6;
 80103b8:	4b06      	ldr	r3, [pc, #24]	@ (80103d4 <DS1307Init+0x50>)
 80103ba:	2206      	movs	r2, #6
 80103bc:	71da      	strb	r2, [r3, #7]
    t.u32unixtime = 946681200;
 80103be:	4b05      	ldr	r3, [pc, #20]	@ (80103d4 <DS1307Init+0x50>)
 80103c0:	4a05      	ldr	r2, [pc, #20]	@ (80103d8 <DS1307Init+0x54>)
 80103c2:	609a      	str	r2, [r3, #8]
}
 80103c4:	bf00      	nop
 80103c6:	370c      	adds	r7, #12
 80103c8:	46bd      	mov	sp, r7
 80103ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ce:	4770      	bx	lr
 80103d0:	200039e8 	.word	0x200039e8
 80103d4:	200039dc 	.word	0x200039dc
 80103d8:	386d3570 	.word	0x386d3570

080103dc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80103dc:	b580      	push	{r7, lr}
 80103de:	b082      	sub	sp, #8
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80103e4:	f7f2 f8c6 	bl	8002574 <HAL_GetTick>
 80103e8:	4603      	mov	r3, r0
 80103ea:	4a04      	ldr	r2, [pc, #16]	@ (80103fc <SPI_Timer_On+0x20>)
 80103ec:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80103ee:	4a04      	ldr	r2, [pc, #16]	@ (8010400 <SPI_Timer_On+0x24>)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6013      	str	r3, [r2, #0]
}
 80103f4:	bf00      	nop
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}
 80103fc:	200039f0 	.word	0x200039f0
 8010400:	200039f4 	.word	0x200039f4

08010404 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8010404:	b580      	push	{r7, lr}
 8010406:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8010408:	f7f2 f8b4 	bl	8002574 <HAL_GetTick>
 801040c:	4602      	mov	r2, r0
 801040e:	4b06      	ldr	r3, [pc, #24]	@ (8010428 <SPI_Timer_Status+0x24>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	1ad2      	subs	r2, r2, r3
 8010414:	4b05      	ldr	r3, [pc, #20]	@ (801042c <SPI_Timer_Status+0x28>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	429a      	cmp	r2, r3
 801041a:	bf34      	ite	cc
 801041c:	2301      	movcc	r3, #1
 801041e:	2300      	movcs	r3, #0
 8010420:	b2db      	uxtb	r3, r3
}
 8010422:	4618      	mov	r0, r3
 8010424:	bd80      	pop	{r7, pc}
 8010426:	bf00      	nop
 8010428:	200039f0 	.word	0x200039f0
 801042c:	200039f4 	.word	0x200039f4

08010430 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b086      	sub	sp, #24
 8010434:	af02      	add	r7, sp, #8
 8010436:	4603      	mov	r3, r0
 8010438:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 801043a:	f107 020f 	add.w	r2, r7, #15
 801043e:	1df9      	adds	r1, r7, #7
 8010440:	2332      	movs	r3, #50	@ 0x32
 8010442:	9300      	str	r3, [sp, #0]
 8010444:	2301      	movs	r3, #1
 8010446:	4804      	ldr	r0, [pc, #16]	@ (8010458 <xchg_spi+0x28>)
 8010448:	f7f6 faf4 	bl	8006a34 <HAL_SPI_TransmitReceive>
    return rxDat;
 801044c:	7bfb      	ldrb	r3, [r7, #15]
}
 801044e:	4618      	mov	r0, r3
 8010450:	3710      	adds	r7, #16
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}
 8010456:	bf00      	nop
 8010458:	20001338 	.word	0x20001338

0801045c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 801045c:	b590      	push	{r4, r7, lr}
 801045e:	b085      	sub	sp, #20
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8010466:	2300      	movs	r3, #0
 8010468:	60fb      	str	r3, [r7, #12]
 801046a:	e00a      	b.n	8010482 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 801046c:	687a      	ldr	r2, [r7, #4]
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	18d4      	adds	r4, r2, r3
 8010472:	20ff      	movs	r0, #255	@ 0xff
 8010474:	f7ff ffdc 	bl	8010430 <xchg_spi>
 8010478:	4603      	mov	r3, r0
 801047a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	3301      	adds	r3, #1
 8010480:	60fb      	str	r3, [r7, #12]
 8010482:	68fa      	ldr	r2, [r7, #12]
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	429a      	cmp	r2, r3
 8010488:	d3f0      	bcc.n	801046c <rcvr_spi_multi+0x10>
	}
}
 801048a:	bf00      	nop
 801048c:	bf00      	nop
 801048e:	3714      	adds	r7, #20
 8010490:	46bd      	mov	sp, r7
 8010492:	bd90      	pop	{r4, r7, pc}

08010494 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	b29a      	uxth	r2, r3
 80104a2:	f04f 33ff 	mov.w	r3, #4294967295
 80104a6:	6879      	ldr	r1, [r7, #4]
 80104a8:	4803      	ldr	r0, [pc, #12]	@ (80104b8 <xmit_spi_multi+0x24>)
 80104aa:	f7f6 f94e 	bl	800674a <HAL_SPI_Transmit>
}
 80104ae:	bf00      	nop
 80104b0:	3708      	adds	r7, #8
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	20001338 	.word	0x20001338

080104bc <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b086      	sub	sp, #24
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80104c4:	f7f2 f856 	bl	8002574 <HAL_GetTick>
 80104c8:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80104ce:	20ff      	movs	r0, #255	@ 0xff
 80104d0:	f7ff ffae 	bl	8010430 <xchg_spi>
 80104d4:	4603      	mov	r3, r0
 80104d6:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80104d8:	7bfb      	ldrb	r3, [r7, #15]
 80104da:	2bff      	cmp	r3, #255	@ 0xff
 80104dc:	d007      	beq.n	80104ee <wait_ready+0x32>
 80104de:	f7f2 f849 	bl	8002574 <HAL_GetTick>
 80104e2:	4602      	mov	r2, r0
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	1ad3      	subs	r3, r2, r3
 80104e8:	693a      	ldr	r2, [r7, #16]
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d8ef      	bhi.n	80104ce <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80104ee:	7bfb      	ldrb	r3, [r7, #15]
 80104f0:	2bff      	cmp	r3, #255	@ 0xff
 80104f2:	bf0c      	ite	eq
 80104f4:	2301      	moveq	r3, #1
 80104f6:	2300      	movne	r3, #0
 80104f8:	b2db      	uxtb	r3, r3
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3718      	adds	r7, #24
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}
	...

08010504 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8010508:	2201      	movs	r2, #1
 801050a:	2104      	movs	r1, #4
 801050c:	4803      	ldr	r0, [pc, #12]	@ (801051c <despiselect+0x18>)
 801050e:	f7f3 ff3b 	bl	8004388 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8010512:	20ff      	movs	r0, #255	@ 0xff
 8010514:	f7ff ff8c 	bl	8010430 <xchg_spi>

}
 8010518:	bf00      	nop
 801051a:	bd80      	pop	{r7, pc}
 801051c:	48000c00 	.word	0x48000c00

08010520 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8010520:	b580      	push	{r7, lr}
 8010522:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8010524:	2200      	movs	r2, #0
 8010526:	2104      	movs	r1, #4
 8010528:	4809      	ldr	r0, [pc, #36]	@ (8010550 <spiselect+0x30>)
 801052a:	f7f3 ff2d 	bl	8004388 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 801052e:	20ff      	movs	r0, #255	@ 0xff
 8010530:	f7ff ff7e 	bl	8010430 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8010534:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8010538:	f7ff ffc0 	bl	80104bc <wait_ready>
 801053c:	4603      	mov	r3, r0
 801053e:	2b00      	cmp	r3, #0
 8010540:	d001      	beq.n	8010546 <spiselect+0x26>
 8010542:	2301      	movs	r3, #1
 8010544:	e002      	b.n	801054c <spiselect+0x2c>

	despiselect();
 8010546:	f7ff ffdd 	bl	8010504 <despiselect>
	return 0;	/* Timeout */
 801054a:	2300      	movs	r3, #0
}
 801054c:	4618      	mov	r0, r3
 801054e:	bd80      	pop	{r7, pc}
 8010550:	48000c00 	.word	0x48000c00

08010554 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b084      	sub	sp, #16
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 801055e:	20c8      	movs	r0, #200	@ 0xc8
 8010560:	f7ff ff3c 	bl	80103dc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8010564:	20ff      	movs	r0, #255	@ 0xff
 8010566:	f7ff ff63 	bl	8010430 <xchg_spi>
 801056a:	4603      	mov	r3, r0
 801056c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 801056e:	7bfb      	ldrb	r3, [r7, #15]
 8010570:	2bff      	cmp	r3, #255	@ 0xff
 8010572:	d104      	bne.n	801057e <rcvr_datablock+0x2a>
 8010574:	f7ff ff46 	bl	8010404 <SPI_Timer_Status>
 8010578:	4603      	mov	r3, r0
 801057a:	2b00      	cmp	r3, #0
 801057c:	d1f2      	bne.n	8010564 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 801057e:	7bfb      	ldrb	r3, [r7, #15]
 8010580:	2bfe      	cmp	r3, #254	@ 0xfe
 8010582:	d001      	beq.n	8010588 <rcvr_datablock+0x34>
 8010584:	2300      	movs	r3, #0
 8010586:	e00a      	b.n	801059e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8010588:	6839      	ldr	r1, [r7, #0]
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f7ff ff66 	bl	801045c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8010590:	20ff      	movs	r0, #255	@ 0xff
 8010592:	f7ff ff4d 	bl	8010430 <xchg_spi>
 8010596:	20ff      	movs	r0, #255	@ 0xff
 8010598:	f7ff ff4a 	bl	8010430 <xchg_spi>

	return 1;						/* Function succeeded */
 801059c:	2301      	movs	r3, #1
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3710      	adds	r7, #16
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}

080105a6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80105a6:	b580      	push	{r7, lr}
 80105a8:	b084      	sub	sp, #16
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	6078      	str	r0, [r7, #4]
 80105ae:	460b      	mov	r3, r1
 80105b0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80105b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80105b6:	f7ff ff81 	bl	80104bc <wait_ready>
 80105ba:	4603      	mov	r3, r0
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d101      	bne.n	80105c4 <xmit_datablock+0x1e>
 80105c0:	2300      	movs	r3, #0
 80105c2:	e01e      	b.n	8010602 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80105c4:	78fb      	ldrb	r3, [r7, #3]
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7ff ff32 	bl	8010430 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80105cc:	78fb      	ldrb	r3, [r7, #3]
 80105ce:	2bfd      	cmp	r3, #253	@ 0xfd
 80105d0:	d016      	beq.n	8010600 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80105d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f7ff ff5c 	bl	8010494 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80105dc:	20ff      	movs	r0, #255	@ 0xff
 80105de:	f7ff ff27 	bl	8010430 <xchg_spi>
 80105e2:	20ff      	movs	r0, #255	@ 0xff
 80105e4:	f7ff ff24 	bl	8010430 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80105e8:	20ff      	movs	r0, #255	@ 0xff
 80105ea:	f7ff ff21 	bl	8010430 <xchg_spi>
 80105ee:	4603      	mov	r3, r0
 80105f0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80105f2:	7bfb      	ldrb	r3, [r7, #15]
 80105f4:	f003 031f 	and.w	r3, r3, #31
 80105f8:	2b05      	cmp	r3, #5
 80105fa:	d001      	beq.n	8010600 <xmit_datablock+0x5a>
 80105fc:	2300      	movs	r3, #0
 80105fe:	e000      	b.n	8010602 <xmit_datablock+0x5c>
	}
	return 1;
 8010600:	2301      	movs	r3, #1
}
 8010602:	4618      	mov	r0, r3
 8010604:	3710      	adds	r7, #16
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}

0801060a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 801060a:	b580      	push	{r7, lr}
 801060c:	b084      	sub	sp, #16
 801060e:	af00      	add	r7, sp, #0
 8010610:	4603      	mov	r3, r0
 8010612:	6039      	str	r1, [r7, #0]
 8010614:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8010616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801061a:	2b00      	cmp	r3, #0
 801061c:	da0e      	bge.n	801063c <send_cmd+0x32>
		cmd &= 0x7F;
 801061e:	79fb      	ldrb	r3, [r7, #7]
 8010620:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010624:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8010626:	2100      	movs	r1, #0
 8010628:	2037      	movs	r0, #55	@ 0x37
 801062a:	f7ff ffee 	bl	801060a <send_cmd>
 801062e:	4603      	mov	r3, r0
 8010630:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8010632:	7bbb      	ldrb	r3, [r7, #14]
 8010634:	2b01      	cmp	r3, #1
 8010636:	d901      	bls.n	801063c <send_cmd+0x32>
 8010638:	7bbb      	ldrb	r3, [r7, #14]
 801063a:	e051      	b.n	80106e0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 801063c:	79fb      	ldrb	r3, [r7, #7]
 801063e:	2b0c      	cmp	r3, #12
 8010640:	d008      	beq.n	8010654 <send_cmd+0x4a>
		despiselect();
 8010642:	f7ff ff5f 	bl	8010504 <despiselect>
		if (!spiselect()) return 0xFF;
 8010646:	f7ff ff6b 	bl	8010520 <spiselect>
 801064a:	4603      	mov	r3, r0
 801064c:	2b00      	cmp	r3, #0
 801064e:	d101      	bne.n	8010654 <send_cmd+0x4a>
 8010650:	23ff      	movs	r3, #255	@ 0xff
 8010652:	e045      	b.n	80106e0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8010654:	79fb      	ldrb	r3, [r7, #7]
 8010656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801065a:	b2db      	uxtb	r3, r3
 801065c:	4618      	mov	r0, r3
 801065e:	f7ff fee7 	bl	8010430 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	0e1b      	lsrs	r3, r3, #24
 8010666:	b2db      	uxtb	r3, r3
 8010668:	4618      	mov	r0, r3
 801066a:	f7ff fee1 	bl	8010430 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	0c1b      	lsrs	r3, r3, #16
 8010672:	b2db      	uxtb	r3, r3
 8010674:	4618      	mov	r0, r3
 8010676:	f7ff fedb 	bl	8010430 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	0a1b      	lsrs	r3, r3, #8
 801067e:	b2db      	uxtb	r3, r3
 8010680:	4618      	mov	r0, r3
 8010682:	f7ff fed5 	bl	8010430 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	b2db      	uxtb	r3, r3
 801068a:	4618      	mov	r0, r3
 801068c:	f7ff fed0 	bl	8010430 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8010690:	2301      	movs	r3, #1
 8010692:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8010694:	79fb      	ldrb	r3, [r7, #7]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d101      	bne.n	801069e <send_cmd+0x94>
 801069a:	2395      	movs	r3, #149	@ 0x95
 801069c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 801069e:	79fb      	ldrb	r3, [r7, #7]
 80106a0:	2b08      	cmp	r3, #8
 80106a2:	d101      	bne.n	80106a8 <send_cmd+0x9e>
 80106a4:	2387      	movs	r3, #135	@ 0x87
 80106a6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80106a8:	7bfb      	ldrb	r3, [r7, #15]
 80106aa:	4618      	mov	r0, r3
 80106ac:	f7ff fec0 	bl	8010430 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80106b0:	79fb      	ldrb	r3, [r7, #7]
 80106b2:	2b0c      	cmp	r3, #12
 80106b4:	d102      	bne.n	80106bc <send_cmd+0xb2>
 80106b6:	20ff      	movs	r0, #255	@ 0xff
 80106b8:	f7ff feba 	bl	8010430 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80106bc:	230a      	movs	r3, #10
 80106be:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80106c0:	20ff      	movs	r0, #255	@ 0xff
 80106c2:	f7ff feb5 	bl	8010430 <xchg_spi>
 80106c6:	4603      	mov	r3, r0
 80106c8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80106ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	da05      	bge.n	80106de <send_cmd+0xd4>
 80106d2:	7bfb      	ldrb	r3, [r7, #15]
 80106d4:	3b01      	subs	r3, #1
 80106d6:	73fb      	strb	r3, [r7, #15]
 80106d8:	7bfb      	ldrb	r3, [r7, #15]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d1f0      	bne.n	80106c0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80106de:	7bbb      	ldrb	r3, [r7, #14]
}
 80106e0:	4618      	mov	r0, r3
 80106e2:	3710      	adds	r7, #16
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}

080106e8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80106e8:	b590      	push	{r4, r7, lr}
 80106ea:	b085      	sub	sp, #20
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	4603      	mov	r3, r0
 80106f0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80106f2:	79fb      	ldrb	r3, [r7, #7]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d001      	beq.n	80106fc <USER_SPI_initialize+0x14>
 80106f8:	2301      	movs	r3, #1
 80106fa:	e0d4      	b.n	80108a6 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80106fc:	4b6c      	ldr	r3, [pc, #432]	@ (80108b0 <USER_SPI_initialize+0x1c8>)
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	b2db      	uxtb	r3, r3
 8010702:	f003 0302 	and.w	r3, r3, #2
 8010706:	2b00      	cmp	r3, #0
 8010708:	d003      	beq.n	8010712 <USER_SPI_initialize+0x2a>
 801070a:	4b69      	ldr	r3, [pc, #420]	@ (80108b0 <USER_SPI_initialize+0x1c8>)
 801070c:	781b      	ldrb	r3, [r3, #0]
 801070e:	b2db      	uxtb	r3, r3
 8010710:	e0c9      	b.n	80108a6 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8010712:	4b68      	ldr	r3, [pc, #416]	@ (80108b4 <USER_SPI_initialize+0x1cc>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	681a      	ldr	r2, [r3, #0]
 8010718:	4b66      	ldr	r3, [pc, #408]	@ (80108b4 <USER_SPI_initialize+0x1cc>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	f042 0238 	orr.w	r2, r2, #56	@ 0x38
 8010720:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8010722:	230a      	movs	r3, #10
 8010724:	73fb      	strb	r3, [r7, #15]
 8010726:	e005      	b.n	8010734 <USER_SPI_initialize+0x4c>
 8010728:	20ff      	movs	r0, #255	@ 0xff
 801072a:	f7ff fe81 	bl	8010430 <xchg_spi>
 801072e:	7bfb      	ldrb	r3, [r7, #15]
 8010730:	3b01      	subs	r3, #1
 8010732:	73fb      	strb	r3, [r7, #15]
 8010734:	7bfb      	ldrb	r3, [r7, #15]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d1f6      	bne.n	8010728 <USER_SPI_initialize+0x40>

	ty = 0;
 801073a:	2300      	movs	r3, #0
 801073c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 801073e:	2100      	movs	r1, #0
 8010740:	2000      	movs	r0, #0
 8010742:	f7ff ff62 	bl	801060a <send_cmd>
 8010746:	4603      	mov	r3, r0
 8010748:	2b01      	cmp	r3, #1
 801074a:	f040 808b 	bne.w	8010864 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 801074e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010752:	f7ff fe43 	bl	80103dc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8010756:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 801075a:	2008      	movs	r0, #8
 801075c:	f7ff ff55 	bl	801060a <send_cmd>
 8010760:	4603      	mov	r3, r0
 8010762:	2b01      	cmp	r3, #1
 8010764:	d151      	bne.n	801080a <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8010766:	2300      	movs	r3, #0
 8010768:	73fb      	strb	r3, [r7, #15]
 801076a:	e00d      	b.n	8010788 <USER_SPI_initialize+0xa0>
 801076c:	7bfc      	ldrb	r4, [r7, #15]
 801076e:	20ff      	movs	r0, #255	@ 0xff
 8010770:	f7ff fe5e 	bl	8010430 <xchg_spi>
 8010774:	4603      	mov	r3, r0
 8010776:	461a      	mov	r2, r3
 8010778:	f104 0310 	add.w	r3, r4, #16
 801077c:	443b      	add	r3, r7
 801077e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8010782:	7bfb      	ldrb	r3, [r7, #15]
 8010784:	3301      	adds	r3, #1
 8010786:	73fb      	strb	r3, [r7, #15]
 8010788:	7bfb      	ldrb	r3, [r7, #15]
 801078a:	2b03      	cmp	r3, #3
 801078c:	d9ee      	bls.n	801076c <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 801078e:	7abb      	ldrb	r3, [r7, #10]
 8010790:	2b01      	cmp	r3, #1
 8010792:	d167      	bne.n	8010864 <USER_SPI_initialize+0x17c>
 8010794:	7afb      	ldrb	r3, [r7, #11]
 8010796:	2baa      	cmp	r3, #170	@ 0xaa
 8010798:	d164      	bne.n	8010864 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 801079a:	bf00      	nop
 801079c:	f7ff fe32 	bl	8010404 <SPI_Timer_Status>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d007      	beq.n	80107b6 <USER_SPI_initialize+0xce>
 80107a6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80107aa:	20a9      	movs	r0, #169	@ 0xa9
 80107ac:	f7ff ff2d 	bl	801060a <send_cmd>
 80107b0:	4603      	mov	r3, r0
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d1f2      	bne.n	801079c <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80107b6:	f7ff fe25 	bl	8010404 <SPI_Timer_Status>
 80107ba:	4603      	mov	r3, r0
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d051      	beq.n	8010864 <USER_SPI_initialize+0x17c>
 80107c0:	2100      	movs	r1, #0
 80107c2:	203a      	movs	r0, #58	@ 0x3a
 80107c4:	f7ff ff21 	bl	801060a <send_cmd>
 80107c8:	4603      	mov	r3, r0
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d14a      	bne.n	8010864 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80107ce:	2300      	movs	r3, #0
 80107d0:	73fb      	strb	r3, [r7, #15]
 80107d2:	e00d      	b.n	80107f0 <USER_SPI_initialize+0x108>
 80107d4:	7bfc      	ldrb	r4, [r7, #15]
 80107d6:	20ff      	movs	r0, #255	@ 0xff
 80107d8:	f7ff fe2a 	bl	8010430 <xchg_spi>
 80107dc:	4603      	mov	r3, r0
 80107de:	461a      	mov	r2, r3
 80107e0:	f104 0310 	add.w	r3, r4, #16
 80107e4:	443b      	add	r3, r7
 80107e6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80107ea:	7bfb      	ldrb	r3, [r7, #15]
 80107ec:	3301      	adds	r3, #1
 80107ee:	73fb      	strb	r3, [r7, #15]
 80107f0:	7bfb      	ldrb	r3, [r7, #15]
 80107f2:	2b03      	cmp	r3, #3
 80107f4:	d9ee      	bls.n	80107d4 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80107f6:	7a3b      	ldrb	r3, [r7, #8]
 80107f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d001      	beq.n	8010804 <USER_SPI_initialize+0x11c>
 8010800:	230c      	movs	r3, #12
 8010802:	e000      	b.n	8010806 <USER_SPI_initialize+0x11e>
 8010804:	2304      	movs	r3, #4
 8010806:	737b      	strb	r3, [r7, #13]
 8010808:	e02c      	b.n	8010864 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 801080a:	2100      	movs	r1, #0
 801080c:	20a9      	movs	r0, #169	@ 0xa9
 801080e:	f7ff fefc 	bl	801060a <send_cmd>
 8010812:	4603      	mov	r3, r0
 8010814:	2b01      	cmp	r3, #1
 8010816:	d804      	bhi.n	8010822 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8010818:	2302      	movs	r3, #2
 801081a:	737b      	strb	r3, [r7, #13]
 801081c:	23a9      	movs	r3, #169	@ 0xa9
 801081e:	73bb      	strb	r3, [r7, #14]
 8010820:	e003      	b.n	801082a <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8010822:	2301      	movs	r3, #1
 8010824:	737b      	strb	r3, [r7, #13]
 8010826:	2301      	movs	r3, #1
 8010828:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 801082a:	bf00      	nop
 801082c:	f7ff fdea 	bl	8010404 <SPI_Timer_Status>
 8010830:	4603      	mov	r3, r0
 8010832:	2b00      	cmp	r3, #0
 8010834:	d007      	beq.n	8010846 <USER_SPI_initialize+0x15e>
 8010836:	7bbb      	ldrb	r3, [r7, #14]
 8010838:	2100      	movs	r1, #0
 801083a:	4618      	mov	r0, r3
 801083c:	f7ff fee5 	bl	801060a <send_cmd>
 8010840:	4603      	mov	r3, r0
 8010842:	2b00      	cmp	r3, #0
 8010844:	d1f2      	bne.n	801082c <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8010846:	f7ff fddd 	bl	8010404 <SPI_Timer_Status>
 801084a:	4603      	mov	r3, r0
 801084c:	2b00      	cmp	r3, #0
 801084e:	d007      	beq.n	8010860 <USER_SPI_initialize+0x178>
 8010850:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010854:	2010      	movs	r0, #16
 8010856:	f7ff fed8 	bl	801060a <send_cmd>
 801085a:	4603      	mov	r3, r0
 801085c:	2b00      	cmp	r3, #0
 801085e:	d001      	beq.n	8010864 <USER_SPI_initialize+0x17c>
				ty = 0;
 8010860:	2300      	movs	r3, #0
 8010862:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8010864:	4a14      	ldr	r2, [pc, #80]	@ (80108b8 <USER_SPI_initialize+0x1d0>)
 8010866:	7b7b      	ldrb	r3, [r7, #13]
 8010868:	7013      	strb	r3, [r2, #0]
	despiselect();
 801086a:	f7ff fe4b 	bl	8010504 <despiselect>

	if (ty) {			/* OK */
 801086e:	7b7b      	ldrb	r3, [r7, #13]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d012      	beq.n	801089a <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8010874:	4b0f      	ldr	r3, [pc, #60]	@ (80108b4 <USER_SPI_initialize+0x1cc>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 801087e:	4b0d      	ldr	r3, [pc, #52]	@ (80108b4 <USER_SPI_initialize+0x1cc>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	f042 0218 	orr.w	r2, r2, #24
 8010886:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8010888:	4b09      	ldr	r3, [pc, #36]	@ (80108b0 <USER_SPI_initialize+0x1c8>)
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	b2db      	uxtb	r3, r3
 801088e:	f023 0301 	bic.w	r3, r3, #1
 8010892:	b2da      	uxtb	r2, r3
 8010894:	4b06      	ldr	r3, [pc, #24]	@ (80108b0 <USER_SPI_initialize+0x1c8>)
 8010896:	701a      	strb	r2, [r3, #0]
 8010898:	e002      	b.n	80108a0 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 801089a:	4b05      	ldr	r3, [pc, #20]	@ (80108b0 <USER_SPI_initialize+0x1c8>)
 801089c:	2201      	movs	r2, #1
 801089e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80108a0:	4b03      	ldr	r3, [pc, #12]	@ (80108b0 <USER_SPI_initialize+0x1c8>)
 80108a2:	781b      	ldrb	r3, [r3, #0]
 80108a4:	b2db      	uxtb	r3, r3
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3714      	adds	r7, #20
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd90      	pop	{r4, r7, pc}
 80108ae:	bf00      	nop
 80108b0:	20001182 	.word	0x20001182
 80108b4:	20001338 	.word	0x20001338
 80108b8:	200039ec 	.word	0x200039ec

080108bc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80108bc:	b480      	push	{r7}
 80108be:	b083      	sub	sp, #12
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	4603      	mov	r3, r0
 80108c4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80108c6:	79fb      	ldrb	r3, [r7, #7]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d001      	beq.n	80108d0 <USER_SPI_status+0x14>
 80108cc:	2301      	movs	r3, #1
 80108ce:	e002      	b.n	80108d6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80108d0:	4b04      	ldr	r3, [pc, #16]	@ (80108e4 <USER_SPI_status+0x28>)
 80108d2:	781b      	ldrb	r3, [r3, #0]
 80108d4:	b2db      	uxtb	r3, r3
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	370c      	adds	r7, #12
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	20001182 	.word	0x20001182

080108e8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b084      	sub	sp, #16
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	60b9      	str	r1, [r7, #8]
 80108f0:	607a      	str	r2, [r7, #4]
 80108f2:	603b      	str	r3, [r7, #0]
 80108f4:	4603      	mov	r3, r0
 80108f6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80108f8:	7bfb      	ldrb	r3, [r7, #15]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d102      	bne.n	8010904 <USER_SPI_read+0x1c>
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d101      	bne.n	8010908 <USER_SPI_read+0x20>
 8010904:	2304      	movs	r3, #4
 8010906:	e04d      	b.n	80109a4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8010908:	4b28      	ldr	r3, [pc, #160]	@ (80109ac <USER_SPI_read+0xc4>)
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	b2db      	uxtb	r3, r3
 801090e:	f003 0301 	and.w	r3, r3, #1
 8010912:	2b00      	cmp	r3, #0
 8010914:	d001      	beq.n	801091a <USER_SPI_read+0x32>
 8010916:	2303      	movs	r3, #3
 8010918:	e044      	b.n	80109a4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 801091a:	4b25      	ldr	r3, [pc, #148]	@ (80109b0 <USER_SPI_read+0xc8>)
 801091c:	781b      	ldrb	r3, [r3, #0]
 801091e:	f003 0308 	and.w	r3, r3, #8
 8010922:	2b00      	cmp	r3, #0
 8010924:	d102      	bne.n	801092c <USER_SPI_read+0x44>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	025b      	lsls	r3, r3, #9
 801092a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	2b01      	cmp	r3, #1
 8010930:	d111      	bne.n	8010956 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8010932:	6879      	ldr	r1, [r7, #4]
 8010934:	2011      	movs	r0, #17
 8010936:	f7ff fe68 	bl	801060a <send_cmd>
 801093a:	4603      	mov	r3, r0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d129      	bne.n	8010994 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8010940:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010944:	68b8      	ldr	r0, [r7, #8]
 8010946:	f7ff fe05 	bl	8010554 <rcvr_datablock>
 801094a:	4603      	mov	r3, r0
 801094c:	2b00      	cmp	r3, #0
 801094e:	d021      	beq.n	8010994 <USER_SPI_read+0xac>
			count = 0;
 8010950:	2300      	movs	r3, #0
 8010952:	603b      	str	r3, [r7, #0]
 8010954:	e01e      	b.n	8010994 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8010956:	6879      	ldr	r1, [r7, #4]
 8010958:	2012      	movs	r0, #18
 801095a:	f7ff fe56 	bl	801060a <send_cmd>
 801095e:	4603      	mov	r3, r0
 8010960:	2b00      	cmp	r3, #0
 8010962:	d117      	bne.n	8010994 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8010964:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010968:	68b8      	ldr	r0, [r7, #8]
 801096a:	f7ff fdf3 	bl	8010554 <rcvr_datablock>
 801096e:	4603      	mov	r3, r0
 8010970:	2b00      	cmp	r3, #0
 8010972:	d00a      	beq.n	801098a <USER_SPI_read+0xa2>
				buff += 512;
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801097a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	3b01      	subs	r3, #1
 8010980:	603b      	str	r3, [r7, #0]
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d1ed      	bne.n	8010964 <USER_SPI_read+0x7c>
 8010988:	e000      	b.n	801098c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 801098a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 801098c:	2100      	movs	r1, #0
 801098e:	200c      	movs	r0, #12
 8010990:	f7ff fe3b 	bl	801060a <send_cmd>
		}
	}
	despiselect();
 8010994:	f7ff fdb6 	bl	8010504 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	2b00      	cmp	r3, #0
 801099c:	bf14      	ite	ne
 801099e:	2301      	movne	r3, #1
 80109a0:	2300      	moveq	r3, #0
 80109a2:	b2db      	uxtb	r3, r3
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3710      	adds	r7, #16
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}
 80109ac:	20001182 	.word	0x20001182
 80109b0:	200039ec 	.word	0x200039ec

080109b4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b084      	sub	sp, #16
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	60b9      	str	r1, [r7, #8]
 80109bc:	607a      	str	r2, [r7, #4]
 80109be:	603b      	str	r3, [r7, #0]
 80109c0:	4603      	mov	r3, r0
 80109c2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80109c4:	7bfb      	ldrb	r3, [r7, #15]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d102      	bne.n	80109d0 <USER_SPI_write+0x1c>
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d101      	bne.n	80109d4 <USER_SPI_write+0x20>
 80109d0:	2304      	movs	r3, #4
 80109d2:	e063      	b.n	8010a9c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80109d4:	4b33      	ldr	r3, [pc, #204]	@ (8010aa4 <USER_SPI_write+0xf0>)
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	b2db      	uxtb	r3, r3
 80109da:	f003 0301 	and.w	r3, r3, #1
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d001      	beq.n	80109e6 <USER_SPI_write+0x32>
 80109e2:	2303      	movs	r3, #3
 80109e4:	e05a      	b.n	8010a9c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80109e6:	4b2f      	ldr	r3, [pc, #188]	@ (8010aa4 <USER_SPI_write+0xf0>)
 80109e8:	781b      	ldrb	r3, [r3, #0]
 80109ea:	b2db      	uxtb	r3, r3
 80109ec:	f003 0304 	and.w	r3, r3, #4
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d001      	beq.n	80109f8 <USER_SPI_write+0x44>
 80109f4:	2302      	movs	r3, #2
 80109f6:	e051      	b.n	8010a9c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80109f8:	4b2b      	ldr	r3, [pc, #172]	@ (8010aa8 <USER_SPI_write+0xf4>)
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	f003 0308 	and.w	r3, r3, #8
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d102      	bne.n	8010a0a <USER_SPI_write+0x56>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	025b      	lsls	r3, r3, #9
 8010a08:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	2b01      	cmp	r3, #1
 8010a0e:	d110      	bne.n	8010a32 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8010a10:	6879      	ldr	r1, [r7, #4]
 8010a12:	2018      	movs	r0, #24
 8010a14:	f7ff fdf9 	bl	801060a <send_cmd>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d136      	bne.n	8010a8c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8010a1e:	21fe      	movs	r1, #254	@ 0xfe
 8010a20:	68b8      	ldr	r0, [r7, #8]
 8010a22:	f7ff fdc0 	bl	80105a6 <xmit_datablock>
 8010a26:	4603      	mov	r3, r0
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d02f      	beq.n	8010a8c <USER_SPI_write+0xd8>
			count = 0;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	603b      	str	r3, [r7, #0]
 8010a30:	e02c      	b.n	8010a8c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8010a32:	4b1d      	ldr	r3, [pc, #116]	@ (8010aa8 <USER_SPI_write+0xf4>)
 8010a34:	781b      	ldrb	r3, [r3, #0]
 8010a36:	f003 0306 	and.w	r3, r3, #6
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d003      	beq.n	8010a46 <USER_SPI_write+0x92>
 8010a3e:	6839      	ldr	r1, [r7, #0]
 8010a40:	2097      	movs	r0, #151	@ 0x97
 8010a42:	f7ff fde2 	bl	801060a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8010a46:	6879      	ldr	r1, [r7, #4]
 8010a48:	2019      	movs	r0, #25
 8010a4a:	f7ff fdde 	bl	801060a <send_cmd>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d11b      	bne.n	8010a8c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8010a54:	21fc      	movs	r1, #252	@ 0xfc
 8010a56:	68b8      	ldr	r0, [r7, #8]
 8010a58:	f7ff fda5 	bl	80105a6 <xmit_datablock>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d00a      	beq.n	8010a78 <USER_SPI_write+0xc4>
				buff += 512;
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8010a68:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	3b01      	subs	r3, #1
 8010a6e:	603b      	str	r3, [r7, #0]
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d1ee      	bne.n	8010a54 <USER_SPI_write+0xa0>
 8010a76:	e000      	b.n	8010a7a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8010a78:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8010a7a:	21fd      	movs	r1, #253	@ 0xfd
 8010a7c:	2000      	movs	r0, #0
 8010a7e:	f7ff fd92 	bl	80105a6 <xmit_datablock>
 8010a82:	4603      	mov	r3, r0
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d101      	bne.n	8010a8c <USER_SPI_write+0xd8>
 8010a88:	2301      	movs	r3, #1
 8010a8a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8010a8c:	f7ff fd3a 	bl	8010504 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	bf14      	ite	ne
 8010a96:	2301      	movne	r3, #1
 8010a98:	2300      	moveq	r3, #0
 8010a9a:	b2db      	uxtb	r3, r3
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3710      	adds	r7, #16
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	20001182 	.word	0x20001182
 8010aa8:	200039ec 	.word	0x200039ec

08010aac <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b08c      	sub	sp, #48	@ 0x30
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	603a      	str	r2, [r7, #0]
 8010ab6:	71fb      	strb	r3, [r7, #7]
 8010ab8:	460b      	mov	r3, r1
 8010aba:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8010abc:	79fb      	ldrb	r3, [r7, #7]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d001      	beq.n	8010ac6 <USER_SPI_ioctl+0x1a>
 8010ac2:	2304      	movs	r3, #4
 8010ac4:	e15a      	b.n	8010d7c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8010ac6:	4baf      	ldr	r3, [pc, #700]	@ (8010d84 <USER_SPI_ioctl+0x2d8>)
 8010ac8:	781b      	ldrb	r3, [r3, #0]
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	f003 0301 	and.w	r3, r3, #1
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d001      	beq.n	8010ad8 <USER_SPI_ioctl+0x2c>
 8010ad4:	2303      	movs	r3, #3
 8010ad6:	e151      	b.n	8010d7c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8010ad8:	2301      	movs	r3, #1
 8010ada:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8010ade:	79bb      	ldrb	r3, [r7, #6]
 8010ae0:	2b04      	cmp	r3, #4
 8010ae2:	f200 8136 	bhi.w	8010d52 <USER_SPI_ioctl+0x2a6>
 8010ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8010aec <USER_SPI_ioctl+0x40>)
 8010ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aec:	08010b01 	.word	0x08010b01
 8010af0:	08010b15 	.word	0x08010b15
 8010af4:	08010d53 	.word	0x08010d53
 8010af8:	08010bc1 	.word	0x08010bc1
 8010afc:	08010cb7 	.word	0x08010cb7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8010b00:	f7ff fd0e 	bl	8010520 <spiselect>
 8010b04:	4603      	mov	r3, r0
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	f000 8127 	beq.w	8010d5a <USER_SPI_ioctl+0x2ae>
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8010b12:	e122      	b.n	8010d5a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8010b14:	2100      	movs	r1, #0
 8010b16:	2009      	movs	r0, #9
 8010b18:	f7ff fd77 	bl	801060a <send_cmd>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	f040 811d 	bne.w	8010d5e <USER_SPI_ioctl+0x2b2>
 8010b24:	f107 030c 	add.w	r3, r7, #12
 8010b28:	2110      	movs	r1, #16
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f7ff fd12 	bl	8010554 <rcvr_datablock>
 8010b30:	4603      	mov	r3, r0
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	f000 8113 	beq.w	8010d5e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8010b38:	7b3b      	ldrb	r3, [r7, #12]
 8010b3a:	099b      	lsrs	r3, r3, #6
 8010b3c:	b2db      	uxtb	r3, r3
 8010b3e:	2b01      	cmp	r3, #1
 8010b40:	d111      	bne.n	8010b66 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8010b42:	7d7b      	ldrb	r3, [r7, #21]
 8010b44:	461a      	mov	r2, r3
 8010b46:	7d3b      	ldrb	r3, [r7, #20]
 8010b48:	021b      	lsls	r3, r3, #8
 8010b4a:	4413      	add	r3, r2
 8010b4c:	461a      	mov	r2, r3
 8010b4e:	7cfb      	ldrb	r3, [r7, #19]
 8010b50:	041b      	lsls	r3, r3, #16
 8010b52:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8010b56:	4413      	add	r3, r2
 8010b58:	3301      	adds	r3, #1
 8010b5a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8010b5c:	69fb      	ldr	r3, [r7, #28]
 8010b5e:	029a      	lsls	r2, r3, #10
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	601a      	str	r2, [r3, #0]
 8010b64:	e028      	b.n	8010bb8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8010b66:	7c7b      	ldrb	r3, [r7, #17]
 8010b68:	f003 030f 	and.w	r3, r3, #15
 8010b6c:	b2da      	uxtb	r2, r3
 8010b6e:	7dbb      	ldrb	r3, [r7, #22]
 8010b70:	09db      	lsrs	r3, r3, #7
 8010b72:	b2db      	uxtb	r3, r3
 8010b74:	4413      	add	r3, r2
 8010b76:	b2da      	uxtb	r2, r3
 8010b78:	7d7b      	ldrb	r3, [r7, #21]
 8010b7a:	005b      	lsls	r3, r3, #1
 8010b7c:	b2db      	uxtb	r3, r3
 8010b7e:	f003 0306 	and.w	r3, r3, #6
 8010b82:	b2db      	uxtb	r3, r3
 8010b84:	4413      	add	r3, r2
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	3302      	adds	r3, #2
 8010b8a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8010b8e:	7d3b      	ldrb	r3, [r7, #20]
 8010b90:	099b      	lsrs	r3, r3, #6
 8010b92:	b2db      	uxtb	r3, r3
 8010b94:	461a      	mov	r2, r3
 8010b96:	7cfb      	ldrb	r3, [r7, #19]
 8010b98:	009b      	lsls	r3, r3, #2
 8010b9a:	441a      	add	r2, r3
 8010b9c:	7cbb      	ldrb	r3, [r7, #18]
 8010b9e:	029b      	lsls	r3, r3, #10
 8010ba0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8010ba4:	4413      	add	r3, r2
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8010baa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010bae:	3b09      	subs	r3, #9
 8010bb0:	69fa      	ldr	r2, [r7, #28]
 8010bb2:	409a      	lsls	r2, r3
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8010bbe:	e0ce      	b.n	8010d5e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8010bc0:	4b71      	ldr	r3, [pc, #452]	@ (8010d88 <USER_SPI_ioctl+0x2dc>)
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	f003 0304 	and.w	r3, r3, #4
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d031      	beq.n	8010c30 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8010bcc:	2100      	movs	r1, #0
 8010bce:	208d      	movs	r0, #141	@ 0x8d
 8010bd0:	f7ff fd1b 	bl	801060a <send_cmd>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	f040 80c3 	bne.w	8010d62 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8010bdc:	20ff      	movs	r0, #255	@ 0xff
 8010bde:	f7ff fc27 	bl	8010430 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8010be2:	f107 030c 	add.w	r3, r7, #12
 8010be6:	2110      	movs	r1, #16
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7ff fcb3 	bl	8010554 <rcvr_datablock>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	f000 80b6 	beq.w	8010d62 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8010bf6:	2330      	movs	r3, #48	@ 0x30
 8010bf8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8010bfc:	e007      	b.n	8010c0e <USER_SPI_ioctl+0x162>
 8010bfe:	20ff      	movs	r0, #255	@ 0xff
 8010c00:	f7ff fc16 	bl	8010430 <xchg_spi>
 8010c04:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010c08:	3b01      	subs	r3, #1
 8010c0a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8010c0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d1f3      	bne.n	8010bfe <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8010c16:	7dbb      	ldrb	r3, [r7, #22]
 8010c18:	091b      	lsrs	r3, r3, #4
 8010c1a:	b2db      	uxtb	r3, r3
 8010c1c:	461a      	mov	r2, r3
 8010c1e:	2310      	movs	r3, #16
 8010c20:	fa03 f202 	lsl.w	r2, r3, r2
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8010c2e:	e098      	b.n	8010d62 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8010c30:	2100      	movs	r1, #0
 8010c32:	2009      	movs	r0, #9
 8010c34:	f7ff fce9 	bl	801060a <send_cmd>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	f040 8091 	bne.w	8010d62 <USER_SPI_ioctl+0x2b6>
 8010c40:	f107 030c 	add.w	r3, r7, #12
 8010c44:	2110      	movs	r1, #16
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7ff fc84 	bl	8010554 <rcvr_datablock>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	f000 8087 	beq.w	8010d62 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8010c54:	4b4c      	ldr	r3, [pc, #304]	@ (8010d88 <USER_SPI_ioctl+0x2dc>)
 8010c56:	781b      	ldrb	r3, [r3, #0]
 8010c58:	f003 0302 	and.w	r3, r3, #2
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d012      	beq.n	8010c86 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8010c60:	7dbb      	ldrb	r3, [r7, #22]
 8010c62:	005b      	lsls	r3, r3, #1
 8010c64:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8010c68:	7dfa      	ldrb	r2, [r7, #23]
 8010c6a:	09d2      	lsrs	r2, r2, #7
 8010c6c:	b2d2      	uxtb	r2, r2
 8010c6e:	4413      	add	r3, r2
 8010c70:	1c5a      	adds	r2, r3, #1
 8010c72:	7e7b      	ldrb	r3, [r7, #25]
 8010c74:	099b      	lsrs	r3, r3, #6
 8010c76:	b2db      	uxtb	r3, r3
 8010c78:	3b01      	subs	r3, #1
 8010c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8010c7e:	461a      	mov	r2, r3
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	601a      	str	r2, [r3, #0]
 8010c84:	e013      	b.n	8010cae <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8010c86:	7dbb      	ldrb	r3, [r7, #22]
 8010c88:	109b      	asrs	r3, r3, #2
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	f003 031f 	and.w	r3, r3, #31
 8010c90:	3301      	adds	r3, #1
 8010c92:	7dfa      	ldrb	r2, [r7, #23]
 8010c94:	00d2      	lsls	r2, r2, #3
 8010c96:	f002 0218 	and.w	r2, r2, #24
 8010c9a:	7df9      	ldrb	r1, [r7, #23]
 8010c9c:	0949      	lsrs	r1, r1, #5
 8010c9e:	b2c9      	uxtb	r1, r1
 8010ca0:	440a      	add	r2, r1
 8010ca2:	3201      	adds	r2, #1
 8010ca4:	fb02 f303 	mul.w	r3, r2, r3
 8010ca8:	461a      	mov	r2, r3
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8010cb4:	e055      	b.n	8010d62 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8010cb6:	4b34      	ldr	r3, [pc, #208]	@ (8010d88 <USER_SPI_ioctl+0x2dc>)
 8010cb8:	781b      	ldrb	r3, [r3, #0]
 8010cba:	f003 0306 	and.w	r3, r3, #6
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d051      	beq.n	8010d66 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8010cc2:	f107 020c 	add.w	r2, r7, #12
 8010cc6:	79fb      	ldrb	r3, [r7, #7]
 8010cc8:	210b      	movs	r1, #11
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7ff feee 	bl	8010aac <USER_SPI_ioctl>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d149      	bne.n	8010d6a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8010cd6:	7b3b      	ldrb	r3, [r7, #12]
 8010cd8:	099b      	lsrs	r3, r3, #6
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d104      	bne.n	8010cea <USER_SPI_ioctl+0x23e>
 8010ce0:	7dbb      	ldrb	r3, [r7, #22]
 8010ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d041      	beq.n	8010d6e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	623b      	str	r3, [r7, #32]
 8010cee:	6a3b      	ldr	r3, [r7, #32]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010cf4:	6a3b      	ldr	r3, [r7, #32]
 8010cf6:	685b      	ldr	r3, [r3, #4]
 8010cf8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8010cfa:	4b23      	ldr	r3, [pc, #140]	@ (8010d88 <USER_SPI_ioctl+0x2dc>)
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	f003 0308 	and.w	r3, r3, #8
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d105      	bne.n	8010d12 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8010d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d08:	025b      	lsls	r3, r3, #9
 8010d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d0e:	025b      	lsls	r3, r3, #9
 8010d10:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8010d12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010d14:	2020      	movs	r0, #32
 8010d16:	f7ff fc78 	bl	801060a <send_cmd>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d128      	bne.n	8010d72 <USER_SPI_ioctl+0x2c6>
 8010d20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010d22:	2021      	movs	r0, #33	@ 0x21
 8010d24:	f7ff fc71 	bl	801060a <send_cmd>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d121      	bne.n	8010d72 <USER_SPI_ioctl+0x2c6>
 8010d2e:	2100      	movs	r1, #0
 8010d30:	2026      	movs	r0, #38	@ 0x26
 8010d32:	f7ff fc6a 	bl	801060a <send_cmd>
 8010d36:	4603      	mov	r3, r0
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d11a      	bne.n	8010d72 <USER_SPI_ioctl+0x2c6>
 8010d3c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010d40:	f7ff fbbc 	bl	80104bc <wait_ready>
 8010d44:	4603      	mov	r3, r0
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d013      	beq.n	8010d72 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8010d50:	e00f      	b.n	8010d72 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8010d52:	2304      	movs	r3, #4
 8010d54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010d58:	e00c      	b.n	8010d74 <USER_SPI_ioctl+0x2c8>
		break;
 8010d5a:	bf00      	nop
 8010d5c:	e00a      	b.n	8010d74 <USER_SPI_ioctl+0x2c8>
		break;
 8010d5e:	bf00      	nop
 8010d60:	e008      	b.n	8010d74 <USER_SPI_ioctl+0x2c8>
		break;
 8010d62:	bf00      	nop
 8010d64:	e006      	b.n	8010d74 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8010d66:	bf00      	nop
 8010d68:	e004      	b.n	8010d74 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8010d6a:	bf00      	nop
 8010d6c:	e002      	b.n	8010d74 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8010d6e:	bf00      	nop
 8010d70:	e000      	b.n	8010d74 <USER_SPI_ioctl+0x2c8>
		break;
 8010d72:	bf00      	nop
	}

	despiselect();
 8010d74:	f7ff fbc6 	bl	8010504 <despiselect>

	return res;
 8010d78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3730      	adds	r7, #48	@ 0x30
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	20001182 	.word	0x20001182
 8010d88:	200039ec 	.word	0x200039ec

08010d8c <servoMng_Init>:
uint32_t u32ServoChannel;
eServoStatus eServoState = servoIdle;
uint16_t u16ServoValue;

void servoMng_Init(TIM_HandleTypeDef* ftim, uint32_t channel, uint32_t u32pwMin,  uint32_t u32pwMax, uint16_t fu16angleMin,  uint16_t fu16angleMax )
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	60f8      	str	r0, [r7, #12]
 8010d94:	60b9      	str	r1, [r7, #8]
 8010d96:	607a      	str	r2, [r7, #4]
 8010d98:	603b      	str	r3, [r7, #0]
	if((u32pwMin<u32pwMax) && (fu16angleMin<fu16angleMax))
 8010d9a:	687a      	ldr	r2, [r7, #4]
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d220      	bcs.n	8010de4 <servoMng_Init+0x58>
 8010da2:	8b3a      	ldrh	r2, [r7, #24]
 8010da4:	8bbb      	ldrh	r3, [r7, #28]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d21c      	bcs.n	8010de4 <servoMng_Init+0x58>
	{
		servoTimHandle = ftim;
 8010daa:	4a10      	ldr	r2, [pc, #64]	@ (8010dec <servoMng_Init+0x60>)
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	6013      	str	r3, [r2, #0]
		u32ServoChannel = channel;
 8010db0:	4a0f      	ldr	r2, [pc, #60]	@ (8010df0 <servoMng_Init+0x64>)
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	6013      	str	r3, [r2, #0]
		imax_pulse_width = u32pwMax; //us
 8010db6:	4a0f      	ldr	r2, [pc, #60]	@ (8010df4 <servoMng_Init+0x68>)
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	6013      	str	r3, [r2, #0]
		imin_pulse_width = u32pwMin; //us
 8010dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8010df8 <servoMng_Init+0x6c>)
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6013      	str	r3, [r2, #0]
		u16min_angle = fu16angleMin;
 8010dc2:	4a0e      	ldr	r2, [pc, #56]	@ (8010dfc <servoMng_Init+0x70>)
 8010dc4:	8b3b      	ldrh	r3, [r7, #24]
 8010dc6:	8013      	strh	r3, [r2, #0]
		u16max_angle = fu16angleMax;
 8010dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8010e00 <servoMng_Init+0x74>)
 8010dca:	8bbb      	ldrh	r3, [r7, #28]
 8010dcc:	8013      	strh	r3, [r2, #0]
		 HAL_TIM_PWM_Start(servoTimHandle, u32ServoChannel);
 8010dce:	4b07      	ldr	r3, [pc, #28]	@ (8010dec <servoMng_Init+0x60>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	4a07      	ldr	r2, [pc, #28]	@ (8010df0 <servoMng_Init+0x64>)
 8010dd4:	6812      	ldr	r2, [r2, #0]
 8010dd6:	4611      	mov	r1, r2
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7f6 fb71 	bl	80074c0 <HAL_TIM_PWM_Start>
		 eServoState = servoInit;
 8010dde:	4b09      	ldr	r3, [pc, #36]	@ (8010e04 <servoMng_Init+0x78>)
 8010de0:	2201      	movs	r2, #1
 8010de2:	701a      	strb	r2, [r3, #0]
	}

}
 8010de4:	bf00      	nop
 8010de6:	3710      	adds	r7, #16
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	20003a04 	.word	0x20003a04
 8010df0:	20003a08 	.word	0x20003a08
 8010df4:	200039f8 	.word	0x200039f8
 8010df8:	200039fc 	.word	0x200039fc
 8010dfc:	20003a00 	.word	0x20003a00
 8010e00:	20003a02 	.word	0x20003a02
 8010e04:	20003a0c 	.word	0x20003a0c

08010e08 <servoMng_Set>:

void servoMng_Set(uint16_t value)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b08a      	sub	sp, #40	@ 0x28
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	4603      	mov	r3, r0
 8010e10:	80fb      	strh	r3, [r7, #6]
	if(eServoState == servoInit)
 8010e12:	4b1a      	ldr	r3, [pc, #104]	@ (8010e7c <servoMng_Set+0x74>)
 8010e14:	781b      	ldrb	r3, [r3, #0]
 8010e16:	2b01      	cmp	r3, #1
 8010e18:	d12b      	bne.n	8010e72 <servoMng_Set+0x6a>
	{
		if(value<imin_pulse_width)
 8010e1a:	88fa      	ldrh	r2, [r7, #6]
 8010e1c:	4b18      	ldr	r3, [pc, #96]	@ (8010e80 <servoMng_Set+0x78>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d202      	bcs.n	8010e2a <servoMng_Set+0x22>
		{
			value=imin_pulse_width;
 8010e24:	4b16      	ldr	r3, [pc, #88]	@ (8010e80 <servoMng_Set+0x78>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	80fb      	strh	r3, [r7, #6]
		}
		if(value>imax_pulse_width)
 8010e2a:	88fa      	ldrh	r2, [r7, #6]
 8010e2c:	4b15      	ldr	r3, [pc, #84]	@ (8010e84 <servoMng_Set+0x7c>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d902      	bls.n	8010e3a <servoMng_Set+0x32>
		{
			value=imax_pulse_width;
 8010e34:	4b13      	ldr	r3, [pc, #76]	@ (8010e84 <servoMng_Set+0x7c>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	80fb      	strh	r3, [r7, #6]
		}
		TIM_OC_InitTypeDef sConfigOC;

		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010e3a:	2360      	movs	r3, #96	@ 0x60
 8010e3c:	60fb      	str	r3, [r7, #12]
		sConfigOC.Pulse = value;
 8010e3e:	88fb      	ldrh	r3, [r7, #6]
 8010e40:	613b      	str	r3, [r7, #16]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8010e42:	2300      	movs	r3, #0
 8010e44:	617b      	str	r3, [r7, #20]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8010e46:	2300      	movs	r3, #0
 8010e48:	61fb      	str	r3, [r7, #28]
		HAL_TIM_PWM_ConfigChannel(servoTimHandle, &sConfigOC, u32ServoChannel);
 8010e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8010e88 <servoMng_Set+0x80>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	4a0f      	ldr	r2, [pc, #60]	@ (8010e8c <servoMng_Set+0x84>)
 8010e50:	6812      	ldr	r2, [r2, #0]
 8010e52:	f107 010c 	add.w	r1, r7, #12
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7f7 f8e8 	bl	800802c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(servoTimHandle, u32ServoChannel);
 8010e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8010e88 <servoMng_Set+0x80>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	4a0a      	ldr	r2, [pc, #40]	@ (8010e8c <servoMng_Set+0x84>)
 8010e62:	6812      	ldr	r2, [r2, #0]
 8010e64:	4611      	mov	r1, r2
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7f6 fb2a 	bl	80074c0 <HAL_TIM_PWM_Start>
		u16ServoValue = value;
 8010e6c:	4a08      	ldr	r2, [pc, #32]	@ (8010e90 <servoMng_Set+0x88>)
 8010e6e:	88fb      	ldrh	r3, [r7, #6]
 8010e70:	8013      	strh	r3, [r2, #0]
	}
}
 8010e72:	bf00      	nop
 8010e74:	3728      	adds	r7, #40	@ 0x28
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	20003a0c 	.word	0x20003a0c
 8010e80:	200039fc 	.word	0x200039fc
 8010e84:	200039f8 	.word	0x200039f8
 8010e88:	20003a04 	.word	0x20003a04
 8010e8c:	20003a08 	.word	0x20003a08
 8010e90:	20003a0e 	.word	0x20003a0e

08010e94 <servoMng_SetAngle>:
		servoMng_Set(imax_pulse_width);
	}
}

void servoMng_SetAngle(float angle)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b084      	sub	sp, #16
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t u16Cmd;

	if(angle>u16max_angle)
 8010e9e:	4b32      	ldr	r3, [pc, #200]	@ (8010f68 <servoMng_SetAngle+0xd4>)
 8010ea0:	881b      	ldrh	r3, [r3, #0]
 8010ea2:	ee07 3a90 	vmov	s15, r3
 8010ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010eaa:	ed97 7a01 	vldr	s14, [r7, #4]
 8010eae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb6:	dd07      	ble.n	8010ec8 <servoMng_SetAngle+0x34>
	{
		angle = (float)u16max_angle;
 8010eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8010f68 <servoMng_SetAngle+0xd4>)
 8010eba:	881b      	ldrh	r3, [r3, #0]
 8010ebc:	ee07 3a90 	vmov	s15, r3
 8010ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ec4:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	if(angle<u16min_angle)
 8010ec8:	4b28      	ldr	r3, [pc, #160]	@ (8010f6c <servoMng_SetAngle+0xd8>)
 8010eca:	881b      	ldrh	r3, [r3, #0]
 8010ecc:	ee07 3a90 	vmov	s15, r3
 8010ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ed4:	ed97 7a01 	vldr	s14, [r7, #4]
 8010ed8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ee0:	d507      	bpl.n	8010ef2 <servoMng_SetAngle+0x5e>
	{
		angle = (float)u16min_angle;
 8010ee2:	4b22      	ldr	r3, [pc, #136]	@ (8010f6c <servoMng_SetAngle+0xd8>)
 8010ee4:	881b      	ldrh	r3, [r3, #0]
 8010ee6:	ee07 3a90 	vmov	s15, r3
 8010eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010eee:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	if(eServoState == servoInit)
 8010ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8010f70 <servoMng_SetAngle+0xdc>)
 8010ef4:	781b      	ldrb	r3, [r3, #0]
 8010ef6:	2b01      	cmp	r3, #1
 8010ef8:	d131      	bne.n	8010f5e <servoMng_SetAngle+0xca>
	{
		u16Cmd = (uint16_t)((float)imin_pulse_width + (angle-(float)u16min_angle)*(imax_pulse_width-imin_pulse_width)/(float)(u16max_angle-u16min_angle));
 8010efa:	4b1e      	ldr	r3, [pc, #120]	@ (8010f74 <servoMng_SetAngle+0xe0>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	ee07 3a90 	vmov	s15, r3
 8010f02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010f06:	4b19      	ldr	r3, [pc, #100]	@ (8010f6c <servoMng_SetAngle+0xd8>)
 8010f08:	881b      	ldrh	r3, [r3, #0]
 8010f0a:	ee07 3a90 	vmov	s15, r3
 8010f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f12:	edd7 6a01 	vldr	s13, [r7, #4]
 8010f16:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010f1a:	4b17      	ldr	r3, [pc, #92]	@ (8010f78 <servoMng_SetAngle+0xe4>)
 8010f1c:	681a      	ldr	r2, [r3, #0]
 8010f1e:	4b15      	ldr	r3, [pc, #84]	@ (8010f74 <servoMng_SetAngle+0xe0>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	1ad3      	subs	r3, r2, r3
 8010f24:	ee07 3a90 	vmov	s15, r3
 8010f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f2c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8010f30:	4b0d      	ldr	r3, [pc, #52]	@ (8010f68 <servoMng_SetAngle+0xd4>)
 8010f32:	881b      	ldrh	r3, [r3, #0]
 8010f34:	461a      	mov	r2, r3
 8010f36:	4b0d      	ldr	r3, [pc, #52]	@ (8010f6c <servoMng_SetAngle+0xd8>)
 8010f38:	881b      	ldrh	r3, [r3, #0]
 8010f3a:	1ad3      	subs	r3, r2, r3
 8010f3c:	ee07 3a90 	vmov	s15, r3
 8010f40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010f44:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8010f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f50:	ee17 3a90 	vmov	r3, s15
 8010f54:	81fb      	strh	r3, [r7, #14]
		servoMng_Set(u16Cmd);
 8010f56:	89fb      	ldrh	r3, [r7, #14]
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f7ff ff55 	bl	8010e08 <servoMng_Set>
	}
}
 8010f5e:	bf00      	nop
 8010f60:	3710      	adds	r7, #16
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}
 8010f66:	bf00      	nop
 8010f68:	20003a02 	.word	0x20003a02
 8010f6c:	20003a00 	.word	0x20003a00
 8010f70:	20003a0c 	.word	0x20003a0c
 8010f74:	200039fc 	.word	0x200039fc
 8010f78:	200039f8 	.word	0x200039f8

08010f7c <HCSR04Init>:
float HCSR04_pulseIn(uint32_t fu32timeout);
void setPinMode(pindir fepindirection);
void HCSR04delayMicroseconds(uint32_t fu32Value);

void HCSR04Init(TIM_HandleTypeDef *htim)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b082      	sub	sp, #8
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
	HCSR04htim = htim;
 8010f84:	4a07      	ldr	r2, [pc, #28]	@ (8010fa4 <HCSR04Init+0x28>)
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(HCSR04htim);
 8010f8a:	4b06      	ldr	r3, [pc, #24]	@ (8010fa4 <HCSR04Init+0x28>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7f6 f92e 	bl	80071f0 <HAL_TIM_Base_Start>
	eState = init;
 8010f94:	4b04      	ldr	r3, [pc, #16]	@ (8010fa8 <HCSR04Init+0x2c>)
 8010f96:	2201      	movs	r2, #1
 8010f98:	701a      	strb	r2, [r3, #0]
}
 8010f9a:	bf00      	nop
 8010f9c:	3708      	adds	r7, #8
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}
 8010fa2:	bf00      	nop
 8010fa4:	20003a10 	.word	0x20003a10
 8010fa8:	20003a14 	.word	0x20003a14

08010fac <atoi>:
 8010fac:	220a      	movs	r2, #10
 8010fae:	2100      	movs	r1, #0
 8010fb0:	f000 b87a 	b.w	80110a8 <strtol>

08010fb4 <_strtol_l.constprop.0>:
 8010fb4:	2b24      	cmp	r3, #36	@ 0x24
 8010fb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fba:	4686      	mov	lr, r0
 8010fbc:	4690      	mov	r8, r2
 8010fbe:	d801      	bhi.n	8010fc4 <_strtol_l.constprop.0+0x10>
 8010fc0:	2b01      	cmp	r3, #1
 8010fc2:	d106      	bne.n	8010fd2 <_strtol_l.constprop.0+0x1e>
 8010fc4:	f000 fc58 	bl	8011878 <__errno>
 8010fc8:	2316      	movs	r3, #22
 8010fca:	6003      	str	r3, [r0, #0]
 8010fcc:	2000      	movs	r0, #0
 8010fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fd2:	4834      	ldr	r0, [pc, #208]	@ (80110a4 <_strtol_l.constprop.0+0xf0>)
 8010fd4:	460d      	mov	r5, r1
 8010fd6:	462a      	mov	r2, r5
 8010fd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010fdc:	5d06      	ldrb	r6, [r0, r4]
 8010fde:	f016 0608 	ands.w	r6, r6, #8
 8010fe2:	d1f8      	bne.n	8010fd6 <_strtol_l.constprop.0+0x22>
 8010fe4:	2c2d      	cmp	r4, #45	@ 0x2d
 8010fe6:	d12d      	bne.n	8011044 <_strtol_l.constprop.0+0x90>
 8010fe8:	782c      	ldrb	r4, [r5, #0]
 8010fea:	2601      	movs	r6, #1
 8010fec:	1c95      	adds	r5, r2, #2
 8010fee:	f033 0210 	bics.w	r2, r3, #16
 8010ff2:	d109      	bne.n	8011008 <_strtol_l.constprop.0+0x54>
 8010ff4:	2c30      	cmp	r4, #48	@ 0x30
 8010ff6:	d12a      	bne.n	801104e <_strtol_l.constprop.0+0x9a>
 8010ff8:	782a      	ldrb	r2, [r5, #0]
 8010ffa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010ffe:	2a58      	cmp	r2, #88	@ 0x58
 8011000:	d125      	bne.n	801104e <_strtol_l.constprop.0+0x9a>
 8011002:	786c      	ldrb	r4, [r5, #1]
 8011004:	2310      	movs	r3, #16
 8011006:	3502      	adds	r5, #2
 8011008:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801100c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011010:	2200      	movs	r2, #0
 8011012:	fbbc f9f3 	udiv	r9, ip, r3
 8011016:	4610      	mov	r0, r2
 8011018:	fb03 ca19 	mls	sl, r3, r9, ip
 801101c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011020:	2f09      	cmp	r7, #9
 8011022:	d81b      	bhi.n	801105c <_strtol_l.constprop.0+0xa8>
 8011024:	463c      	mov	r4, r7
 8011026:	42a3      	cmp	r3, r4
 8011028:	dd27      	ble.n	801107a <_strtol_l.constprop.0+0xc6>
 801102a:	1c57      	adds	r7, r2, #1
 801102c:	d007      	beq.n	801103e <_strtol_l.constprop.0+0x8a>
 801102e:	4581      	cmp	r9, r0
 8011030:	d320      	bcc.n	8011074 <_strtol_l.constprop.0+0xc0>
 8011032:	d101      	bne.n	8011038 <_strtol_l.constprop.0+0x84>
 8011034:	45a2      	cmp	sl, r4
 8011036:	db1d      	blt.n	8011074 <_strtol_l.constprop.0+0xc0>
 8011038:	fb00 4003 	mla	r0, r0, r3, r4
 801103c:	2201      	movs	r2, #1
 801103e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011042:	e7eb      	b.n	801101c <_strtol_l.constprop.0+0x68>
 8011044:	2c2b      	cmp	r4, #43	@ 0x2b
 8011046:	bf04      	itt	eq
 8011048:	782c      	ldrbeq	r4, [r5, #0]
 801104a:	1c95      	addeq	r5, r2, #2
 801104c:	e7cf      	b.n	8010fee <_strtol_l.constprop.0+0x3a>
 801104e:	2b00      	cmp	r3, #0
 8011050:	d1da      	bne.n	8011008 <_strtol_l.constprop.0+0x54>
 8011052:	2c30      	cmp	r4, #48	@ 0x30
 8011054:	bf0c      	ite	eq
 8011056:	2308      	moveq	r3, #8
 8011058:	230a      	movne	r3, #10
 801105a:	e7d5      	b.n	8011008 <_strtol_l.constprop.0+0x54>
 801105c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011060:	2f19      	cmp	r7, #25
 8011062:	d801      	bhi.n	8011068 <_strtol_l.constprop.0+0xb4>
 8011064:	3c37      	subs	r4, #55	@ 0x37
 8011066:	e7de      	b.n	8011026 <_strtol_l.constprop.0+0x72>
 8011068:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801106c:	2f19      	cmp	r7, #25
 801106e:	d804      	bhi.n	801107a <_strtol_l.constprop.0+0xc6>
 8011070:	3c57      	subs	r4, #87	@ 0x57
 8011072:	e7d8      	b.n	8011026 <_strtol_l.constprop.0+0x72>
 8011074:	f04f 32ff 	mov.w	r2, #4294967295
 8011078:	e7e1      	b.n	801103e <_strtol_l.constprop.0+0x8a>
 801107a:	1c53      	adds	r3, r2, #1
 801107c:	d108      	bne.n	8011090 <_strtol_l.constprop.0+0xdc>
 801107e:	2322      	movs	r3, #34	@ 0x22
 8011080:	f8ce 3000 	str.w	r3, [lr]
 8011084:	4660      	mov	r0, ip
 8011086:	f1b8 0f00 	cmp.w	r8, #0
 801108a:	d0a0      	beq.n	8010fce <_strtol_l.constprop.0+0x1a>
 801108c:	1e69      	subs	r1, r5, #1
 801108e:	e006      	b.n	801109e <_strtol_l.constprop.0+0xea>
 8011090:	b106      	cbz	r6, 8011094 <_strtol_l.constprop.0+0xe0>
 8011092:	4240      	negs	r0, r0
 8011094:	f1b8 0f00 	cmp.w	r8, #0
 8011098:	d099      	beq.n	8010fce <_strtol_l.constprop.0+0x1a>
 801109a:	2a00      	cmp	r2, #0
 801109c:	d1f6      	bne.n	801108c <_strtol_l.constprop.0+0xd8>
 801109e:	f8c8 1000 	str.w	r1, [r8]
 80110a2:	e794      	b.n	8010fce <_strtol_l.constprop.0+0x1a>
 80110a4:	08013099 	.word	0x08013099

080110a8 <strtol>:
 80110a8:	4613      	mov	r3, r2
 80110aa:	460a      	mov	r2, r1
 80110ac:	4601      	mov	r1, r0
 80110ae:	4802      	ldr	r0, [pc, #8]	@ (80110b8 <strtol+0x10>)
 80110b0:	6800      	ldr	r0, [r0, #0]
 80110b2:	f7ff bf7f 	b.w	8010fb4 <_strtol_l.constprop.0>
 80110b6:	bf00      	nop
 80110b8:	20001190 	.word	0x20001190

080110bc <__sflush_r>:
 80110bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80110c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110c4:	0716      	lsls	r6, r2, #28
 80110c6:	4605      	mov	r5, r0
 80110c8:	460c      	mov	r4, r1
 80110ca:	d454      	bmi.n	8011176 <__sflush_r+0xba>
 80110cc:	684b      	ldr	r3, [r1, #4]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	dc02      	bgt.n	80110d8 <__sflush_r+0x1c>
 80110d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	dd48      	ble.n	801116a <__sflush_r+0xae>
 80110d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80110da:	2e00      	cmp	r6, #0
 80110dc:	d045      	beq.n	801116a <__sflush_r+0xae>
 80110de:	2300      	movs	r3, #0
 80110e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80110e4:	682f      	ldr	r7, [r5, #0]
 80110e6:	6a21      	ldr	r1, [r4, #32]
 80110e8:	602b      	str	r3, [r5, #0]
 80110ea:	d030      	beq.n	801114e <__sflush_r+0x92>
 80110ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80110ee:	89a3      	ldrh	r3, [r4, #12]
 80110f0:	0759      	lsls	r1, r3, #29
 80110f2:	d505      	bpl.n	8011100 <__sflush_r+0x44>
 80110f4:	6863      	ldr	r3, [r4, #4]
 80110f6:	1ad2      	subs	r2, r2, r3
 80110f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80110fa:	b10b      	cbz	r3, 8011100 <__sflush_r+0x44>
 80110fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80110fe:	1ad2      	subs	r2, r2, r3
 8011100:	2300      	movs	r3, #0
 8011102:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011104:	6a21      	ldr	r1, [r4, #32]
 8011106:	4628      	mov	r0, r5
 8011108:	47b0      	blx	r6
 801110a:	1c43      	adds	r3, r0, #1
 801110c:	89a3      	ldrh	r3, [r4, #12]
 801110e:	d106      	bne.n	801111e <__sflush_r+0x62>
 8011110:	6829      	ldr	r1, [r5, #0]
 8011112:	291d      	cmp	r1, #29
 8011114:	d82b      	bhi.n	801116e <__sflush_r+0xb2>
 8011116:	4a2a      	ldr	r2, [pc, #168]	@ (80111c0 <__sflush_r+0x104>)
 8011118:	410a      	asrs	r2, r1
 801111a:	07d6      	lsls	r6, r2, #31
 801111c:	d427      	bmi.n	801116e <__sflush_r+0xb2>
 801111e:	2200      	movs	r2, #0
 8011120:	6062      	str	r2, [r4, #4]
 8011122:	04d9      	lsls	r1, r3, #19
 8011124:	6922      	ldr	r2, [r4, #16]
 8011126:	6022      	str	r2, [r4, #0]
 8011128:	d504      	bpl.n	8011134 <__sflush_r+0x78>
 801112a:	1c42      	adds	r2, r0, #1
 801112c:	d101      	bne.n	8011132 <__sflush_r+0x76>
 801112e:	682b      	ldr	r3, [r5, #0]
 8011130:	b903      	cbnz	r3, 8011134 <__sflush_r+0x78>
 8011132:	6560      	str	r0, [r4, #84]	@ 0x54
 8011134:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011136:	602f      	str	r7, [r5, #0]
 8011138:	b1b9      	cbz	r1, 801116a <__sflush_r+0xae>
 801113a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801113e:	4299      	cmp	r1, r3
 8011140:	d002      	beq.n	8011148 <__sflush_r+0x8c>
 8011142:	4628      	mov	r0, r5
 8011144:	f000 fbdc 	bl	8011900 <_free_r>
 8011148:	2300      	movs	r3, #0
 801114a:	6363      	str	r3, [r4, #52]	@ 0x34
 801114c:	e00d      	b.n	801116a <__sflush_r+0xae>
 801114e:	2301      	movs	r3, #1
 8011150:	4628      	mov	r0, r5
 8011152:	47b0      	blx	r6
 8011154:	4602      	mov	r2, r0
 8011156:	1c50      	adds	r0, r2, #1
 8011158:	d1c9      	bne.n	80110ee <__sflush_r+0x32>
 801115a:	682b      	ldr	r3, [r5, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d0c6      	beq.n	80110ee <__sflush_r+0x32>
 8011160:	2b1d      	cmp	r3, #29
 8011162:	d001      	beq.n	8011168 <__sflush_r+0xac>
 8011164:	2b16      	cmp	r3, #22
 8011166:	d11e      	bne.n	80111a6 <__sflush_r+0xea>
 8011168:	602f      	str	r7, [r5, #0]
 801116a:	2000      	movs	r0, #0
 801116c:	e022      	b.n	80111b4 <__sflush_r+0xf8>
 801116e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011172:	b21b      	sxth	r3, r3
 8011174:	e01b      	b.n	80111ae <__sflush_r+0xf2>
 8011176:	690f      	ldr	r7, [r1, #16]
 8011178:	2f00      	cmp	r7, #0
 801117a:	d0f6      	beq.n	801116a <__sflush_r+0xae>
 801117c:	0793      	lsls	r3, r2, #30
 801117e:	680e      	ldr	r6, [r1, #0]
 8011180:	bf08      	it	eq
 8011182:	694b      	ldreq	r3, [r1, #20]
 8011184:	600f      	str	r7, [r1, #0]
 8011186:	bf18      	it	ne
 8011188:	2300      	movne	r3, #0
 801118a:	eba6 0807 	sub.w	r8, r6, r7
 801118e:	608b      	str	r3, [r1, #8]
 8011190:	f1b8 0f00 	cmp.w	r8, #0
 8011194:	dde9      	ble.n	801116a <__sflush_r+0xae>
 8011196:	6a21      	ldr	r1, [r4, #32]
 8011198:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801119a:	4643      	mov	r3, r8
 801119c:	463a      	mov	r2, r7
 801119e:	4628      	mov	r0, r5
 80111a0:	47b0      	blx	r6
 80111a2:	2800      	cmp	r0, #0
 80111a4:	dc08      	bgt.n	80111b8 <__sflush_r+0xfc>
 80111a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80111ae:	81a3      	strh	r3, [r4, #12]
 80111b0:	f04f 30ff 	mov.w	r0, #4294967295
 80111b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111b8:	4407      	add	r7, r0
 80111ba:	eba8 0800 	sub.w	r8, r8, r0
 80111be:	e7e7      	b.n	8011190 <__sflush_r+0xd4>
 80111c0:	dfbffffe 	.word	0xdfbffffe

080111c4 <_fflush_r>:
 80111c4:	b538      	push	{r3, r4, r5, lr}
 80111c6:	690b      	ldr	r3, [r1, #16]
 80111c8:	4605      	mov	r5, r0
 80111ca:	460c      	mov	r4, r1
 80111cc:	b913      	cbnz	r3, 80111d4 <_fflush_r+0x10>
 80111ce:	2500      	movs	r5, #0
 80111d0:	4628      	mov	r0, r5
 80111d2:	bd38      	pop	{r3, r4, r5, pc}
 80111d4:	b118      	cbz	r0, 80111de <_fflush_r+0x1a>
 80111d6:	6a03      	ldr	r3, [r0, #32]
 80111d8:	b90b      	cbnz	r3, 80111de <_fflush_r+0x1a>
 80111da:	f000 f8bb 	bl	8011354 <__sinit>
 80111de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d0f3      	beq.n	80111ce <_fflush_r+0xa>
 80111e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80111e8:	07d0      	lsls	r0, r2, #31
 80111ea:	d404      	bmi.n	80111f6 <_fflush_r+0x32>
 80111ec:	0599      	lsls	r1, r3, #22
 80111ee:	d402      	bmi.n	80111f6 <_fflush_r+0x32>
 80111f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111f2:	f000 fb6c 	bl	80118ce <__retarget_lock_acquire_recursive>
 80111f6:	4628      	mov	r0, r5
 80111f8:	4621      	mov	r1, r4
 80111fa:	f7ff ff5f 	bl	80110bc <__sflush_r>
 80111fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011200:	07da      	lsls	r2, r3, #31
 8011202:	4605      	mov	r5, r0
 8011204:	d4e4      	bmi.n	80111d0 <_fflush_r+0xc>
 8011206:	89a3      	ldrh	r3, [r4, #12]
 8011208:	059b      	lsls	r3, r3, #22
 801120a:	d4e1      	bmi.n	80111d0 <_fflush_r+0xc>
 801120c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801120e:	f000 fb5f 	bl	80118d0 <__retarget_lock_release_recursive>
 8011212:	e7dd      	b.n	80111d0 <_fflush_r+0xc>

08011214 <fflush>:
 8011214:	4601      	mov	r1, r0
 8011216:	b920      	cbnz	r0, 8011222 <fflush+0xe>
 8011218:	4a04      	ldr	r2, [pc, #16]	@ (801122c <fflush+0x18>)
 801121a:	4905      	ldr	r1, [pc, #20]	@ (8011230 <fflush+0x1c>)
 801121c:	4805      	ldr	r0, [pc, #20]	@ (8011234 <fflush+0x20>)
 801121e:	f000 b8b1 	b.w	8011384 <_fwalk_sglue>
 8011222:	4b05      	ldr	r3, [pc, #20]	@ (8011238 <fflush+0x24>)
 8011224:	6818      	ldr	r0, [r3, #0]
 8011226:	f7ff bfcd 	b.w	80111c4 <_fflush_r>
 801122a:	bf00      	nop
 801122c:	20001184 	.word	0x20001184
 8011230:	080111c5 	.word	0x080111c5
 8011234:	20001194 	.word	0x20001194
 8011238:	20001190 	.word	0x20001190

0801123c <std>:
 801123c:	2300      	movs	r3, #0
 801123e:	b510      	push	{r4, lr}
 8011240:	4604      	mov	r4, r0
 8011242:	e9c0 3300 	strd	r3, r3, [r0]
 8011246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801124a:	6083      	str	r3, [r0, #8]
 801124c:	8181      	strh	r1, [r0, #12]
 801124e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011250:	81c2      	strh	r2, [r0, #14]
 8011252:	6183      	str	r3, [r0, #24]
 8011254:	4619      	mov	r1, r3
 8011256:	2208      	movs	r2, #8
 8011258:	305c      	adds	r0, #92	@ 0x5c
 801125a:	f000 fa21 	bl	80116a0 <memset>
 801125e:	4b0d      	ldr	r3, [pc, #52]	@ (8011294 <std+0x58>)
 8011260:	6263      	str	r3, [r4, #36]	@ 0x24
 8011262:	4b0d      	ldr	r3, [pc, #52]	@ (8011298 <std+0x5c>)
 8011264:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011266:	4b0d      	ldr	r3, [pc, #52]	@ (801129c <std+0x60>)
 8011268:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801126a:	4b0d      	ldr	r3, [pc, #52]	@ (80112a0 <std+0x64>)
 801126c:	6323      	str	r3, [r4, #48]	@ 0x30
 801126e:	4b0d      	ldr	r3, [pc, #52]	@ (80112a4 <std+0x68>)
 8011270:	6224      	str	r4, [r4, #32]
 8011272:	429c      	cmp	r4, r3
 8011274:	d006      	beq.n	8011284 <std+0x48>
 8011276:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801127a:	4294      	cmp	r4, r2
 801127c:	d002      	beq.n	8011284 <std+0x48>
 801127e:	33d0      	adds	r3, #208	@ 0xd0
 8011280:	429c      	cmp	r4, r3
 8011282:	d105      	bne.n	8011290 <std+0x54>
 8011284:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801128c:	f000 bb1e 	b.w	80118cc <__retarget_lock_init_recursive>
 8011290:	bd10      	pop	{r4, pc}
 8011292:	bf00      	nop
 8011294:	080114f1 	.word	0x080114f1
 8011298:	08011513 	.word	0x08011513
 801129c:	0801154b 	.word	0x0801154b
 80112a0:	0801156f 	.word	0x0801156f
 80112a4:	20003a18 	.word	0x20003a18

080112a8 <stdio_exit_handler>:
 80112a8:	4a02      	ldr	r2, [pc, #8]	@ (80112b4 <stdio_exit_handler+0xc>)
 80112aa:	4903      	ldr	r1, [pc, #12]	@ (80112b8 <stdio_exit_handler+0x10>)
 80112ac:	4803      	ldr	r0, [pc, #12]	@ (80112bc <stdio_exit_handler+0x14>)
 80112ae:	f000 b869 	b.w	8011384 <_fwalk_sglue>
 80112b2:	bf00      	nop
 80112b4:	20001184 	.word	0x20001184
 80112b8:	080111c5 	.word	0x080111c5
 80112bc:	20001194 	.word	0x20001194

080112c0 <cleanup_stdio>:
 80112c0:	6841      	ldr	r1, [r0, #4]
 80112c2:	4b0c      	ldr	r3, [pc, #48]	@ (80112f4 <cleanup_stdio+0x34>)
 80112c4:	4299      	cmp	r1, r3
 80112c6:	b510      	push	{r4, lr}
 80112c8:	4604      	mov	r4, r0
 80112ca:	d001      	beq.n	80112d0 <cleanup_stdio+0x10>
 80112cc:	f7ff ff7a 	bl	80111c4 <_fflush_r>
 80112d0:	68a1      	ldr	r1, [r4, #8]
 80112d2:	4b09      	ldr	r3, [pc, #36]	@ (80112f8 <cleanup_stdio+0x38>)
 80112d4:	4299      	cmp	r1, r3
 80112d6:	d002      	beq.n	80112de <cleanup_stdio+0x1e>
 80112d8:	4620      	mov	r0, r4
 80112da:	f7ff ff73 	bl	80111c4 <_fflush_r>
 80112de:	68e1      	ldr	r1, [r4, #12]
 80112e0:	4b06      	ldr	r3, [pc, #24]	@ (80112fc <cleanup_stdio+0x3c>)
 80112e2:	4299      	cmp	r1, r3
 80112e4:	d004      	beq.n	80112f0 <cleanup_stdio+0x30>
 80112e6:	4620      	mov	r0, r4
 80112e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112ec:	f7ff bf6a 	b.w	80111c4 <_fflush_r>
 80112f0:	bd10      	pop	{r4, pc}
 80112f2:	bf00      	nop
 80112f4:	20003a18 	.word	0x20003a18
 80112f8:	20003a80 	.word	0x20003a80
 80112fc:	20003ae8 	.word	0x20003ae8

08011300 <global_stdio_init.part.0>:
 8011300:	b510      	push	{r4, lr}
 8011302:	4b0b      	ldr	r3, [pc, #44]	@ (8011330 <global_stdio_init.part.0+0x30>)
 8011304:	4c0b      	ldr	r4, [pc, #44]	@ (8011334 <global_stdio_init.part.0+0x34>)
 8011306:	4a0c      	ldr	r2, [pc, #48]	@ (8011338 <global_stdio_init.part.0+0x38>)
 8011308:	601a      	str	r2, [r3, #0]
 801130a:	4620      	mov	r0, r4
 801130c:	2200      	movs	r2, #0
 801130e:	2104      	movs	r1, #4
 8011310:	f7ff ff94 	bl	801123c <std>
 8011314:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011318:	2201      	movs	r2, #1
 801131a:	2109      	movs	r1, #9
 801131c:	f7ff ff8e 	bl	801123c <std>
 8011320:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011324:	2202      	movs	r2, #2
 8011326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801132a:	2112      	movs	r1, #18
 801132c:	f7ff bf86 	b.w	801123c <std>
 8011330:	20003b50 	.word	0x20003b50
 8011334:	20003a18 	.word	0x20003a18
 8011338:	080112a9 	.word	0x080112a9

0801133c <__sfp_lock_acquire>:
 801133c:	4801      	ldr	r0, [pc, #4]	@ (8011344 <__sfp_lock_acquire+0x8>)
 801133e:	f000 bac6 	b.w	80118ce <__retarget_lock_acquire_recursive>
 8011342:	bf00      	nop
 8011344:	20003b59 	.word	0x20003b59

08011348 <__sfp_lock_release>:
 8011348:	4801      	ldr	r0, [pc, #4]	@ (8011350 <__sfp_lock_release+0x8>)
 801134a:	f000 bac1 	b.w	80118d0 <__retarget_lock_release_recursive>
 801134e:	bf00      	nop
 8011350:	20003b59 	.word	0x20003b59

08011354 <__sinit>:
 8011354:	b510      	push	{r4, lr}
 8011356:	4604      	mov	r4, r0
 8011358:	f7ff fff0 	bl	801133c <__sfp_lock_acquire>
 801135c:	6a23      	ldr	r3, [r4, #32]
 801135e:	b11b      	cbz	r3, 8011368 <__sinit+0x14>
 8011360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011364:	f7ff bff0 	b.w	8011348 <__sfp_lock_release>
 8011368:	4b04      	ldr	r3, [pc, #16]	@ (801137c <__sinit+0x28>)
 801136a:	6223      	str	r3, [r4, #32]
 801136c:	4b04      	ldr	r3, [pc, #16]	@ (8011380 <__sinit+0x2c>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d1f5      	bne.n	8011360 <__sinit+0xc>
 8011374:	f7ff ffc4 	bl	8011300 <global_stdio_init.part.0>
 8011378:	e7f2      	b.n	8011360 <__sinit+0xc>
 801137a:	bf00      	nop
 801137c:	080112c1 	.word	0x080112c1
 8011380:	20003b50 	.word	0x20003b50

08011384 <_fwalk_sglue>:
 8011384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011388:	4607      	mov	r7, r0
 801138a:	4688      	mov	r8, r1
 801138c:	4614      	mov	r4, r2
 801138e:	2600      	movs	r6, #0
 8011390:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011394:	f1b9 0901 	subs.w	r9, r9, #1
 8011398:	d505      	bpl.n	80113a6 <_fwalk_sglue+0x22>
 801139a:	6824      	ldr	r4, [r4, #0]
 801139c:	2c00      	cmp	r4, #0
 801139e:	d1f7      	bne.n	8011390 <_fwalk_sglue+0xc>
 80113a0:	4630      	mov	r0, r6
 80113a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113a6:	89ab      	ldrh	r3, [r5, #12]
 80113a8:	2b01      	cmp	r3, #1
 80113aa:	d907      	bls.n	80113bc <_fwalk_sglue+0x38>
 80113ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80113b0:	3301      	adds	r3, #1
 80113b2:	d003      	beq.n	80113bc <_fwalk_sglue+0x38>
 80113b4:	4629      	mov	r1, r5
 80113b6:	4638      	mov	r0, r7
 80113b8:	47c0      	blx	r8
 80113ba:	4306      	orrs	r6, r0
 80113bc:	3568      	adds	r5, #104	@ 0x68
 80113be:	e7e9      	b.n	8011394 <_fwalk_sglue+0x10>

080113c0 <iprintf>:
 80113c0:	b40f      	push	{r0, r1, r2, r3}
 80113c2:	b507      	push	{r0, r1, r2, lr}
 80113c4:	4906      	ldr	r1, [pc, #24]	@ (80113e0 <iprintf+0x20>)
 80113c6:	ab04      	add	r3, sp, #16
 80113c8:	6808      	ldr	r0, [r1, #0]
 80113ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80113ce:	6881      	ldr	r1, [r0, #8]
 80113d0:	9301      	str	r3, [sp, #4]
 80113d2:	f000 fd0f 	bl	8011df4 <_vfiprintf_r>
 80113d6:	b003      	add	sp, #12
 80113d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80113dc:	b004      	add	sp, #16
 80113de:	4770      	bx	lr
 80113e0:	20001190 	.word	0x20001190

080113e4 <putchar>:
 80113e4:	4b02      	ldr	r3, [pc, #8]	@ (80113f0 <putchar+0xc>)
 80113e6:	4601      	mov	r1, r0
 80113e8:	6818      	ldr	r0, [r3, #0]
 80113ea:	6882      	ldr	r2, [r0, #8]
 80113ec:	f001 b80a 	b.w	8012404 <_putc_r>
 80113f0:	20001190 	.word	0x20001190

080113f4 <_puts_r>:
 80113f4:	6a03      	ldr	r3, [r0, #32]
 80113f6:	b570      	push	{r4, r5, r6, lr}
 80113f8:	6884      	ldr	r4, [r0, #8]
 80113fa:	4605      	mov	r5, r0
 80113fc:	460e      	mov	r6, r1
 80113fe:	b90b      	cbnz	r3, 8011404 <_puts_r+0x10>
 8011400:	f7ff ffa8 	bl	8011354 <__sinit>
 8011404:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011406:	07db      	lsls	r3, r3, #31
 8011408:	d405      	bmi.n	8011416 <_puts_r+0x22>
 801140a:	89a3      	ldrh	r3, [r4, #12]
 801140c:	0598      	lsls	r0, r3, #22
 801140e:	d402      	bmi.n	8011416 <_puts_r+0x22>
 8011410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011412:	f000 fa5c 	bl	80118ce <__retarget_lock_acquire_recursive>
 8011416:	89a3      	ldrh	r3, [r4, #12]
 8011418:	0719      	lsls	r1, r3, #28
 801141a:	d502      	bpl.n	8011422 <_puts_r+0x2e>
 801141c:	6923      	ldr	r3, [r4, #16]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d135      	bne.n	801148e <_puts_r+0x9a>
 8011422:	4621      	mov	r1, r4
 8011424:	4628      	mov	r0, r5
 8011426:	f000 f8e5 	bl	80115f4 <__swsetup_r>
 801142a:	b380      	cbz	r0, 801148e <_puts_r+0x9a>
 801142c:	f04f 35ff 	mov.w	r5, #4294967295
 8011430:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011432:	07da      	lsls	r2, r3, #31
 8011434:	d405      	bmi.n	8011442 <_puts_r+0x4e>
 8011436:	89a3      	ldrh	r3, [r4, #12]
 8011438:	059b      	lsls	r3, r3, #22
 801143a:	d402      	bmi.n	8011442 <_puts_r+0x4e>
 801143c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801143e:	f000 fa47 	bl	80118d0 <__retarget_lock_release_recursive>
 8011442:	4628      	mov	r0, r5
 8011444:	bd70      	pop	{r4, r5, r6, pc}
 8011446:	2b00      	cmp	r3, #0
 8011448:	da04      	bge.n	8011454 <_puts_r+0x60>
 801144a:	69a2      	ldr	r2, [r4, #24]
 801144c:	429a      	cmp	r2, r3
 801144e:	dc17      	bgt.n	8011480 <_puts_r+0x8c>
 8011450:	290a      	cmp	r1, #10
 8011452:	d015      	beq.n	8011480 <_puts_r+0x8c>
 8011454:	6823      	ldr	r3, [r4, #0]
 8011456:	1c5a      	adds	r2, r3, #1
 8011458:	6022      	str	r2, [r4, #0]
 801145a:	7019      	strb	r1, [r3, #0]
 801145c:	68a3      	ldr	r3, [r4, #8]
 801145e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011462:	3b01      	subs	r3, #1
 8011464:	60a3      	str	r3, [r4, #8]
 8011466:	2900      	cmp	r1, #0
 8011468:	d1ed      	bne.n	8011446 <_puts_r+0x52>
 801146a:	2b00      	cmp	r3, #0
 801146c:	da11      	bge.n	8011492 <_puts_r+0x9e>
 801146e:	4622      	mov	r2, r4
 8011470:	210a      	movs	r1, #10
 8011472:	4628      	mov	r0, r5
 8011474:	f000 f87f 	bl	8011576 <__swbuf_r>
 8011478:	3001      	adds	r0, #1
 801147a:	d0d7      	beq.n	801142c <_puts_r+0x38>
 801147c:	250a      	movs	r5, #10
 801147e:	e7d7      	b.n	8011430 <_puts_r+0x3c>
 8011480:	4622      	mov	r2, r4
 8011482:	4628      	mov	r0, r5
 8011484:	f000 f877 	bl	8011576 <__swbuf_r>
 8011488:	3001      	adds	r0, #1
 801148a:	d1e7      	bne.n	801145c <_puts_r+0x68>
 801148c:	e7ce      	b.n	801142c <_puts_r+0x38>
 801148e:	3e01      	subs	r6, #1
 8011490:	e7e4      	b.n	801145c <_puts_r+0x68>
 8011492:	6823      	ldr	r3, [r4, #0]
 8011494:	1c5a      	adds	r2, r3, #1
 8011496:	6022      	str	r2, [r4, #0]
 8011498:	220a      	movs	r2, #10
 801149a:	701a      	strb	r2, [r3, #0]
 801149c:	e7ee      	b.n	801147c <_puts_r+0x88>
	...

080114a0 <puts>:
 80114a0:	4b02      	ldr	r3, [pc, #8]	@ (80114ac <puts+0xc>)
 80114a2:	4601      	mov	r1, r0
 80114a4:	6818      	ldr	r0, [r3, #0]
 80114a6:	f7ff bfa5 	b.w	80113f4 <_puts_r>
 80114aa:	bf00      	nop
 80114ac:	20001190 	.word	0x20001190

080114b0 <siprintf>:
 80114b0:	b40e      	push	{r1, r2, r3}
 80114b2:	b500      	push	{lr}
 80114b4:	b09c      	sub	sp, #112	@ 0x70
 80114b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80114b8:	9002      	str	r0, [sp, #8]
 80114ba:	9006      	str	r0, [sp, #24]
 80114bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80114c0:	4809      	ldr	r0, [pc, #36]	@ (80114e8 <siprintf+0x38>)
 80114c2:	9107      	str	r1, [sp, #28]
 80114c4:	9104      	str	r1, [sp, #16]
 80114c6:	4909      	ldr	r1, [pc, #36]	@ (80114ec <siprintf+0x3c>)
 80114c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80114cc:	9105      	str	r1, [sp, #20]
 80114ce:	6800      	ldr	r0, [r0, #0]
 80114d0:	9301      	str	r3, [sp, #4]
 80114d2:	a902      	add	r1, sp, #8
 80114d4:	f000 fb68 	bl	8011ba8 <_svfiprintf_r>
 80114d8:	9b02      	ldr	r3, [sp, #8]
 80114da:	2200      	movs	r2, #0
 80114dc:	701a      	strb	r2, [r3, #0]
 80114de:	b01c      	add	sp, #112	@ 0x70
 80114e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80114e4:	b003      	add	sp, #12
 80114e6:	4770      	bx	lr
 80114e8:	20001190 	.word	0x20001190
 80114ec:	ffff0208 	.word	0xffff0208

080114f0 <__sread>:
 80114f0:	b510      	push	{r4, lr}
 80114f2:	460c      	mov	r4, r1
 80114f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114f8:	f000 f99a 	bl	8011830 <_read_r>
 80114fc:	2800      	cmp	r0, #0
 80114fe:	bfab      	itete	ge
 8011500:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011502:	89a3      	ldrhlt	r3, [r4, #12]
 8011504:	181b      	addge	r3, r3, r0
 8011506:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801150a:	bfac      	ite	ge
 801150c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801150e:	81a3      	strhlt	r3, [r4, #12]
 8011510:	bd10      	pop	{r4, pc}

08011512 <__swrite>:
 8011512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011516:	461f      	mov	r7, r3
 8011518:	898b      	ldrh	r3, [r1, #12]
 801151a:	05db      	lsls	r3, r3, #23
 801151c:	4605      	mov	r5, r0
 801151e:	460c      	mov	r4, r1
 8011520:	4616      	mov	r6, r2
 8011522:	d505      	bpl.n	8011530 <__swrite+0x1e>
 8011524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011528:	2302      	movs	r3, #2
 801152a:	2200      	movs	r2, #0
 801152c:	f000 f96e 	bl	801180c <_lseek_r>
 8011530:	89a3      	ldrh	r3, [r4, #12]
 8011532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011536:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801153a:	81a3      	strh	r3, [r4, #12]
 801153c:	4632      	mov	r2, r6
 801153e:	463b      	mov	r3, r7
 8011540:	4628      	mov	r0, r5
 8011542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011546:	f000 b985 	b.w	8011854 <_write_r>

0801154a <__sseek>:
 801154a:	b510      	push	{r4, lr}
 801154c:	460c      	mov	r4, r1
 801154e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011552:	f000 f95b 	bl	801180c <_lseek_r>
 8011556:	1c43      	adds	r3, r0, #1
 8011558:	89a3      	ldrh	r3, [r4, #12]
 801155a:	bf15      	itete	ne
 801155c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801155e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011562:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011566:	81a3      	strheq	r3, [r4, #12]
 8011568:	bf18      	it	ne
 801156a:	81a3      	strhne	r3, [r4, #12]
 801156c:	bd10      	pop	{r4, pc}

0801156e <__sclose>:
 801156e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011572:	f000 b8e5 	b.w	8011740 <_close_r>

08011576 <__swbuf_r>:
 8011576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011578:	460e      	mov	r6, r1
 801157a:	4614      	mov	r4, r2
 801157c:	4605      	mov	r5, r0
 801157e:	b118      	cbz	r0, 8011588 <__swbuf_r+0x12>
 8011580:	6a03      	ldr	r3, [r0, #32]
 8011582:	b90b      	cbnz	r3, 8011588 <__swbuf_r+0x12>
 8011584:	f7ff fee6 	bl	8011354 <__sinit>
 8011588:	69a3      	ldr	r3, [r4, #24]
 801158a:	60a3      	str	r3, [r4, #8]
 801158c:	89a3      	ldrh	r3, [r4, #12]
 801158e:	071a      	lsls	r2, r3, #28
 8011590:	d501      	bpl.n	8011596 <__swbuf_r+0x20>
 8011592:	6923      	ldr	r3, [r4, #16]
 8011594:	b943      	cbnz	r3, 80115a8 <__swbuf_r+0x32>
 8011596:	4621      	mov	r1, r4
 8011598:	4628      	mov	r0, r5
 801159a:	f000 f82b 	bl	80115f4 <__swsetup_r>
 801159e:	b118      	cbz	r0, 80115a8 <__swbuf_r+0x32>
 80115a0:	f04f 37ff 	mov.w	r7, #4294967295
 80115a4:	4638      	mov	r0, r7
 80115a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115a8:	6823      	ldr	r3, [r4, #0]
 80115aa:	6922      	ldr	r2, [r4, #16]
 80115ac:	1a98      	subs	r0, r3, r2
 80115ae:	6963      	ldr	r3, [r4, #20]
 80115b0:	b2f6      	uxtb	r6, r6
 80115b2:	4283      	cmp	r3, r0
 80115b4:	4637      	mov	r7, r6
 80115b6:	dc05      	bgt.n	80115c4 <__swbuf_r+0x4e>
 80115b8:	4621      	mov	r1, r4
 80115ba:	4628      	mov	r0, r5
 80115bc:	f7ff fe02 	bl	80111c4 <_fflush_r>
 80115c0:	2800      	cmp	r0, #0
 80115c2:	d1ed      	bne.n	80115a0 <__swbuf_r+0x2a>
 80115c4:	68a3      	ldr	r3, [r4, #8]
 80115c6:	3b01      	subs	r3, #1
 80115c8:	60a3      	str	r3, [r4, #8]
 80115ca:	6823      	ldr	r3, [r4, #0]
 80115cc:	1c5a      	adds	r2, r3, #1
 80115ce:	6022      	str	r2, [r4, #0]
 80115d0:	701e      	strb	r6, [r3, #0]
 80115d2:	6962      	ldr	r2, [r4, #20]
 80115d4:	1c43      	adds	r3, r0, #1
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d004      	beq.n	80115e4 <__swbuf_r+0x6e>
 80115da:	89a3      	ldrh	r3, [r4, #12]
 80115dc:	07db      	lsls	r3, r3, #31
 80115de:	d5e1      	bpl.n	80115a4 <__swbuf_r+0x2e>
 80115e0:	2e0a      	cmp	r6, #10
 80115e2:	d1df      	bne.n	80115a4 <__swbuf_r+0x2e>
 80115e4:	4621      	mov	r1, r4
 80115e6:	4628      	mov	r0, r5
 80115e8:	f7ff fdec 	bl	80111c4 <_fflush_r>
 80115ec:	2800      	cmp	r0, #0
 80115ee:	d0d9      	beq.n	80115a4 <__swbuf_r+0x2e>
 80115f0:	e7d6      	b.n	80115a0 <__swbuf_r+0x2a>
	...

080115f4 <__swsetup_r>:
 80115f4:	b538      	push	{r3, r4, r5, lr}
 80115f6:	4b29      	ldr	r3, [pc, #164]	@ (801169c <__swsetup_r+0xa8>)
 80115f8:	4605      	mov	r5, r0
 80115fa:	6818      	ldr	r0, [r3, #0]
 80115fc:	460c      	mov	r4, r1
 80115fe:	b118      	cbz	r0, 8011608 <__swsetup_r+0x14>
 8011600:	6a03      	ldr	r3, [r0, #32]
 8011602:	b90b      	cbnz	r3, 8011608 <__swsetup_r+0x14>
 8011604:	f7ff fea6 	bl	8011354 <__sinit>
 8011608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801160c:	0719      	lsls	r1, r3, #28
 801160e:	d422      	bmi.n	8011656 <__swsetup_r+0x62>
 8011610:	06da      	lsls	r2, r3, #27
 8011612:	d407      	bmi.n	8011624 <__swsetup_r+0x30>
 8011614:	2209      	movs	r2, #9
 8011616:	602a      	str	r2, [r5, #0]
 8011618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801161c:	81a3      	strh	r3, [r4, #12]
 801161e:	f04f 30ff 	mov.w	r0, #4294967295
 8011622:	e033      	b.n	801168c <__swsetup_r+0x98>
 8011624:	0758      	lsls	r0, r3, #29
 8011626:	d512      	bpl.n	801164e <__swsetup_r+0x5a>
 8011628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801162a:	b141      	cbz	r1, 801163e <__swsetup_r+0x4a>
 801162c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011630:	4299      	cmp	r1, r3
 8011632:	d002      	beq.n	801163a <__swsetup_r+0x46>
 8011634:	4628      	mov	r0, r5
 8011636:	f000 f963 	bl	8011900 <_free_r>
 801163a:	2300      	movs	r3, #0
 801163c:	6363      	str	r3, [r4, #52]	@ 0x34
 801163e:	89a3      	ldrh	r3, [r4, #12]
 8011640:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011644:	81a3      	strh	r3, [r4, #12]
 8011646:	2300      	movs	r3, #0
 8011648:	6063      	str	r3, [r4, #4]
 801164a:	6923      	ldr	r3, [r4, #16]
 801164c:	6023      	str	r3, [r4, #0]
 801164e:	89a3      	ldrh	r3, [r4, #12]
 8011650:	f043 0308 	orr.w	r3, r3, #8
 8011654:	81a3      	strh	r3, [r4, #12]
 8011656:	6923      	ldr	r3, [r4, #16]
 8011658:	b94b      	cbnz	r3, 801166e <__swsetup_r+0x7a>
 801165a:	89a3      	ldrh	r3, [r4, #12]
 801165c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011664:	d003      	beq.n	801166e <__swsetup_r+0x7a>
 8011666:	4621      	mov	r1, r4
 8011668:	4628      	mov	r0, r5
 801166a:	f000 fe8f 	bl	801238c <__smakebuf_r>
 801166e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011672:	f013 0201 	ands.w	r2, r3, #1
 8011676:	d00a      	beq.n	801168e <__swsetup_r+0x9a>
 8011678:	2200      	movs	r2, #0
 801167a:	60a2      	str	r2, [r4, #8]
 801167c:	6962      	ldr	r2, [r4, #20]
 801167e:	4252      	negs	r2, r2
 8011680:	61a2      	str	r2, [r4, #24]
 8011682:	6922      	ldr	r2, [r4, #16]
 8011684:	b942      	cbnz	r2, 8011698 <__swsetup_r+0xa4>
 8011686:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801168a:	d1c5      	bne.n	8011618 <__swsetup_r+0x24>
 801168c:	bd38      	pop	{r3, r4, r5, pc}
 801168e:	0799      	lsls	r1, r3, #30
 8011690:	bf58      	it	pl
 8011692:	6962      	ldrpl	r2, [r4, #20]
 8011694:	60a2      	str	r2, [r4, #8]
 8011696:	e7f4      	b.n	8011682 <__swsetup_r+0x8e>
 8011698:	2000      	movs	r0, #0
 801169a:	e7f7      	b.n	801168c <__swsetup_r+0x98>
 801169c:	20001190 	.word	0x20001190

080116a0 <memset>:
 80116a0:	4402      	add	r2, r0
 80116a2:	4603      	mov	r3, r0
 80116a4:	4293      	cmp	r3, r2
 80116a6:	d100      	bne.n	80116aa <memset+0xa>
 80116a8:	4770      	bx	lr
 80116aa:	f803 1b01 	strb.w	r1, [r3], #1
 80116ae:	e7f9      	b.n	80116a4 <memset+0x4>

080116b0 <strcat>:
 80116b0:	b510      	push	{r4, lr}
 80116b2:	4602      	mov	r2, r0
 80116b4:	7814      	ldrb	r4, [r2, #0]
 80116b6:	4613      	mov	r3, r2
 80116b8:	3201      	adds	r2, #1
 80116ba:	2c00      	cmp	r4, #0
 80116bc:	d1fa      	bne.n	80116b4 <strcat+0x4>
 80116be:	3b01      	subs	r3, #1
 80116c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80116c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80116c8:	2a00      	cmp	r2, #0
 80116ca:	d1f9      	bne.n	80116c0 <strcat+0x10>
 80116cc:	bd10      	pop	{r4, pc}

080116ce <strncat>:
 80116ce:	b530      	push	{r4, r5, lr}
 80116d0:	4604      	mov	r4, r0
 80116d2:	7825      	ldrb	r5, [r4, #0]
 80116d4:	4623      	mov	r3, r4
 80116d6:	3401      	adds	r4, #1
 80116d8:	2d00      	cmp	r5, #0
 80116da:	d1fa      	bne.n	80116d2 <strncat+0x4>
 80116dc:	3a01      	subs	r2, #1
 80116de:	d304      	bcc.n	80116ea <strncat+0x1c>
 80116e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80116e4:	f803 4b01 	strb.w	r4, [r3], #1
 80116e8:	b904      	cbnz	r4, 80116ec <strncat+0x1e>
 80116ea:	bd30      	pop	{r4, r5, pc}
 80116ec:	2a00      	cmp	r2, #0
 80116ee:	d1f5      	bne.n	80116dc <strncat+0xe>
 80116f0:	701a      	strb	r2, [r3, #0]
 80116f2:	e7f3      	b.n	80116dc <strncat+0xe>

080116f4 <strncmp>:
 80116f4:	b510      	push	{r4, lr}
 80116f6:	b16a      	cbz	r2, 8011714 <strncmp+0x20>
 80116f8:	3901      	subs	r1, #1
 80116fa:	1884      	adds	r4, r0, r2
 80116fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011700:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011704:	429a      	cmp	r2, r3
 8011706:	d103      	bne.n	8011710 <strncmp+0x1c>
 8011708:	42a0      	cmp	r0, r4
 801170a:	d001      	beq.n	8011710 <strncmp+0x1c>
 801170c:	2a00      	cmp	r2, #0
 801170e:	d1f5      	bne.n	80116fc <strncmp+0x8>
 8011710:	1ad0      	subs	r0, r2, r3
 8011712:	bd10      	pop	{r4, pc}
 8011714:	4610      	mov	r0, r2
 8011716:	e7fc      	b.n	8011712 <strncmp+0x1e>

08011718 <strncpy>:
 8011718:	b510      	push	{r4, lr}
 801171a:	3901      	subs	r1, #1
 801171c:	4603      	mov	r3, r0
 801171e:	b132      	cbz	r2, 801172e <strncpy+0x16>
 8011720:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011724:	f803 4b01 	strb.w	r4, [r3], #1
 8011728:	3a01      	subs	r2, #1
 801172a:	2c00      	cmp	r4, #0
 801172c:	d1f7      	bne.n	801171e <strncpy+0x6>
 801172e:	441a      	add	r2, r3
 8011730:	2100      	movs	r1, #0
 8011732:	4293      	cmp	r3, r2
 8011734:	d100      	bne.n	8011738 <strncpy+0x20>
 8011736:	bd10      	pop	{r4, pc}
 8011738:	f803 1b01 	strb.w	r1, [r3], #1
 801173c:	e7f9      	b.n	8011732 <strncpy+0x1a>
	...

08011740 <_close_r>:
 8011740:	b538      	push	{r3, r4, r5, lr}
 8011742:	4d06      	ldr	r5, [pc, #24]	@ (801175c <_close_r+0x1c>)
 8011744:	2300      	movs	r3, #0
 8011746:	4604      	mov	r4, r0
 8011748:	4608      	mov	r0, r1
 801174a:	602b      	str	r3, [r5, #0]
 801174c:	f7f0 fa41 	bl	8001bd2 <_close>
 8011750:	1c43      	adds	r3, r0, #1
 8011752:	d102      	bne.n	801175a <_close_r+0x1a>
 8011754:	682b      	ldr	r3, [r5, #0]
 8011756:	b103      	cbz	r3, 801175a <_close_r+0x1a>
 8011758:	6023      	str	r3, [r4, #0]
 801175a:	bd38      	pop	{r3, r4, r5, pc}
 801175c:	20003b54 	.word	0x20003b54

08011760 <_reclaim_reent>:
 8011760:	4b29      	ldr	r3, [pc, #164]	@ (8011808 <_reclaim_reent+0xa8>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	4283      	cmp	r3, r0
 8011766:	b570      	push	{r4, r5, r6, lr}
 8011768:	4604      	mov	r4, r0
 801176a:	d04b      	beq.n	8011804 <_reclaim_reent+0xa4>
 801176c:	69c3      	ldr	r3, [r0, #28]
 801176e:	b1ab      	cbz	r3, 801179c <_reclaim_reent+0x3c>
 8011770:	68db      	ldr	r3, [r3, #12]
 8011772:	b16b      	cbz	r3, 8011790 <_reclaim_reent+0x30>
 8011774:	2500      	movs	r5, #0
 8011776:	69e3      	ldr	r3, [r4, #28]
 8011778:	68db      	ldr	r3, [r3, #12]
 801177a:	5959      	ldr	r1, [r3, r5]
 801177c:	2900      	cmp	r1, #0
 801177e:	d13b      	bne.n	80117f8 <_reclaim_reent+0x98>
 8011780:	3504      	adds	r5, #4
 8011782:	2d80      	cmp	r5, #128	@ 0x80
 8011784:	d1f7      	bne.n	8011776 <_reclaim_reent+0x16>
 8011786:	69e3      	ldr	r3, [r4, #28]
 8011788:	4620      	mov	r0, r4
 801178a:	68d9      	ldr	r1, [r3, #12]
 801178c:	f000 f8b8 	bl	8011900 <_free_r>
 8011790:	69e3      	ldr	r3, [r4, #28]
 8011792:	6819      	ldr	r1, [r3, #0]
 8011794:	b111      	cbz	r1, 801179c <_reclaim_reent+0x3c>
 8011796:	4620      	mov	r0, r4
 8011798:	f000 f8b2 	bl	8011900 <_free_r>
 801179c:	6961      	ldr	r1, [r4, #20]
 801179e:	b111      	cbz	r1, 80117a6 <_reclaim_reent+0x46>
 80117a0:	4620      	mov	r0, r4
 80117a2:	f000 f8ad 	bl	8011900 <_free_r>
 80117a6:	69e1      	ldr	r1, [r4, #28]
 80117a8:	b111      	cbz	r1, 80117b0 <_reclaim_reent+0x50>
 80117aa:	4620      	mov	r0, r4
 80117ac:	f000 f8a8 	bl	8011900 <_free_r>
 80117b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80117b2:	b111      	cbz	r1, 80117ba <_reclaim_reent+0x5a>
 80117b4:	4620      	mov	r0, r4
 80117b6:	f000 f8a3 	bl	8011900 <_free_r>
 80117ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80117bc:	b111      	cbz	r1, 80117c4 <_reclaim_reent+0x64>
 80117be:	4620      	mov	r0, r4
 80117c0:	f000 f89e 	bl	8011900 <_free_r>
 80117c4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80117c6:	b111      	cbz	r1, 80117ce <_reclaim_reent+0x6e>
 80117c8:	4620      	mov	r0, r4
 80117ca:	f000 f899 	bl	8011900 <_free_r>
 80117ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80117d0:	b111      	cbz	r1, 80117d8 <_reclaim_reent+0x78>
 80117d2:	4620      	mov	r0, r4
 80117d4:	f000 f894 	bl	8011900 <_free_r>
 80117d8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80117da:	b111      	cbz	r1, 80117e2 <_reclaim_reent+0x82>
 80117dc:	4620      	mov	r0, r4
 80117de:	f000 f88f 	bl	8011900 <_free_r>
 80117e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80117e4:	b111      	cbz	r1, 80117ec <_reclaim_reent+0x8c>
 80117e6:	4620      	mov	r0, r4
 80117e8:	f000 f88a 	bl	8011900 <_free_r>
 80117ec:	6a23      	ldr	r3, [r4, #32]
 80117ee:	b14b      	cbz	r3, 8011804 <_reclaim_reent+0xa4>
 80117f0:	4620      	mov	r0, r4
 80117f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117f6:	4718      	bx	r3
 80117f8:	680e      	ldr	r6, [r1, #0]
 80117fa:	4620      	mov	r0, r4
 80117fc:	f000 f880 	bl	8011900 <_free_r>
 8011800:	4631      	mov	r1, r6
 8011802:	e7bb      	b.n	801177c <_reclaim_reent+0x1c>
 8011804:	bd70      	pop	{r4, r5, r6, pc}
 8011806:	bf00      	nop
 8011808:	20001190 	.word	0x20001190

0801180c <_lseek_r>:
 801180c:	b538      	push	{r3, r4, r5, lr}
 801180e:	4d07      	ldr	r5, [pc, #28]	@ (801182c <_lseek_r+0x20>)
 8011810:	4604      	mov	r4, r0
 8011812:	4608      	mov	r0, r1
 8011814:	4611      	mov	r1, r2
 8011816:	2200      	movs	r2, #0
 8011818:	602a      	str	r2, [r5, #0]
 801181a:	461a      	mov	r2, r3
 801181c:	f7f0 fa00 	bl	8001c20 <_lseek>
 8011820:	1c43      	adds	r3, r0, #1
 8011822:	d102      	bne.n	801182a <_lseek_r+0x1e>
 8011824:	682b      	ldr	r3, [r5, #0]
 8011826:	b103      	cbz	r3, 801182a <_lseek_r+0x1e>
 8011828:	6023      	str	r3, [r4, #0]
 801182a:	bd38      	pop	{r3, r4, r5, pc}
 801182c:	20003b54 	.word	0x20003b54

08011830 <_read_r>:
 8011830:	b538      	push	{r3, r4, r5, lr}
 8011832:	4d07      	ldr	r5, [pc, #28]	@ (8011850 <_read_r+0x20>)
 8011834:	4604      	mov	r4, r0
 8011836:	4608      	mov	r0, r1
 8011838:	4611      	mov	r1, r2
 801183a:	2200      	movs	r2, #0
 801183c:	602a      	str	r2, [r5, #0]
 801183e:	461a      	mov	r2, r3
 8011840:	f7f0 f9aa 	bl	8001b98 <_read>
 8011844:	1c43      	adds	r3, r0, #1
 8011846:	d102      	bne.n	801184e <_read_r+0x1e>
 8011848:	682b      	ldr	r3, [r5, #0]
 801184a:	b103      	cbz	r3, 801184e <_read_r+0x1e>
 801184c:	6023      	str	r3, [r4, #0]
 801184e:	bd38      	pop	{r3, r4, r5, pc}
 8011850:	20003b54 	.word	0x20003b54

08011854 <_write_r>:
 8011854:	b538      	push	{r3, r4, r5, lr}
 8011856:	4d07      	ldr	r5, [pc, #28]	@ (8011874 <_write_r+0x20>)
 8011858:	4604      	mov	r4, r0
 801185a:	4608      	mov	r0, r1
 801185c:	4611      	mov	r1, r2
 801185e:	2200      	movs	r2, #0
 8011860:	602a      	str	r2, [r5, #0]
 8011862:	461a      	mov	r2, r3
 8011864:	f7ef ffe0 	bl	8001828 <_write>
 8011868:	1c43      	adds	r3, r0, #1
 801186a:	d102      	bne.n	8011872 <_write_r+0x1e>
 801186c:	682b      	ldr	r3, [r5, #0]
 801186e:	b103      	cbz	r3, 8011872 <_write_r+0x1e>
 8011870:	6023      	str	r3, [r4, #0]
 8011872:	bd38      	pop	{r3, r4, r5, pc}
 8011874:	20003b54 	.word	0x20003b54

08011878 <__errno>:
 8011878:	4b01      	ldr	r3, [pc, #4]	@ (8011880 <__errno+0x8>)
 801187a:	6818      	ldr	r0, [r3, #0]
 801187c:	4770      	bx	lr
 801187e:	bf00      	nop
 8011880:	20001190 	.word	0x20001190

08011884 <__libc_init_array>:
 8011884:	b570      	push	{r4, r5, r6, lr}
 8011886:	4d0d      	ldr	r5, [pc, #52]	@ (80118bc <__libc_init_array+0x38>)
 8011888:	4c0d      	ldr	r4, [pc, #52]	@ (80118c0 <__libc_init_array+0x3c>)
 801188a:	1b64      	subs	r4, r4, r5
 801188c:	10a4      	asrs	r4, r4, #2
 801188e:	2600      	movs	r6, #0
 8011890:	42a6      	cmp	r6, r4
 8011892:	d109      	bne.n	80118a8 <__libc_init_array+0x24>
 8011894:	4d0b      	ldr	r5, [pc, #44]	@ (80118c4 <__libc_init_array+0x40>)
 8011896:	4c0c      	ldr	r4, [pc, #48]	@ (80118c8 <__libc_init_array+0x44>)
 8011898:	f001 f868 	bl	801296c <_init>
 801189c:	1b64      	subs	r4, r4, r5
 801189e:	10a4      	asrs	r4, r4, #2
 80118a0:	2600      	movs	r6, #0
 80118a2:	42a6      	cmp	r6, r4
 80118a4:	d105      	bne.n	80118b2 <__libc_init_array+0x2e>
 80118a6:	bd70      	pop	{r4, r5, r6, pc}
 80118a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80118ac:	4798      	blx	r3
 80118ae:	3601      	adds	r6, #1
 80118b0:	e7ee      	b.n	8011890 <__libc_init_array+0xc>
 80118b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80118b6:	4798      	blx	r3
 80118b8:	3601      	adds	r6, #1
 80118ba:	e7f2      	b.n	80118a2 <__libc_init_array+0x1e>
 80118bc:	080131d4 	.word	0x080131d4
 80118c0:	080131d4 	.word	0x080131d4
 80118c4:	080131d4 	.word	0x080131d4
 80118c8:	080131d8 	.word	0x080131d8

080118cc <__retarget_lock_init_recursive>:
 80118cc:	4770      	bx	lr

080118ce <__retarget_lock_acquire_recursive>:
 80118ce:	4770      	bx	lr

080118d0 <__retarget_lock_release_recursive>:
 80118d0:	4770      	bx	lr

080118d2 <strcpy>:
 80118d2:	4603      	mov	r3, r0
 80118d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80118d8:	f803 2b01 	strb.w	r2, [r3], #1
 80118dc:	2a00      	cmp	r2, #0
 80118de:	d1f9      	bne.n	80118d4 <strcpy+0x2>
 80118e0:	4770      	bx	lr

080118e2 <memcpy>:
 80118e2:	440a      	add	r2, r1
 80118e4:	4291      	cmp	r1, r2
 80118e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80118ea:	d100      	bne.n	80118ee <memcpy+0xc>
 80118ec:	4770      	bx	lr
 80118ee:	b510      	push	{r4, lr}
 80118f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80118f8:	4291      	cmp	r1, r2
 80118fa:	d1f9      	bne.n	80118f0 <memcpy+0xe>
 80118fc:	bd10      	pop	{r4, pc}
	...

08011900 <_free_r>:
 8011900:	b538      	push	{r3, r4, r5, lr}
 8011902:	4605      	mov	r5, r0
 8011904:	2900      	cmp	r1, #0
 8011906:	d041      	beq.n	801198c <_free_r+0x8c>
 8011908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801190c:	1f0c      	subs	r4, r1, #4
 801190e:	2b00      	cmp	r3, #0
 8011910:	bfb8      	it	lt
 8011912:	18e4      	addlt	r4, r4, r3
 8011914:	f000 f8e0 	bl	8011ad8 <__malloc_lock>
 8011918:	4a1d      	ldr	r2, [pc, #116]	@ (8011990 <_free_r+0x90>)
 801191a:	6813      	ldr	r3, [r2, #0]
 801191c:	b933      	cbnz	r3, 801192c <_free_r+0x2c>
 801191e:	6063      	str	r3, [r4, #4]
 8011920:	6014      	str	r4, [r2, #0]
 8011922:	4628      	mov	r0, r5
 8011924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011928:	f000 b8dc 	b.w	8011ae4 <__malloc_unlock>
 801192c:	42a3      	cmp	r3, r4
 801192e:	d908      	bls.n	8011942 <_free_r+0x42>
 8011930:	6820      	ldr	r0, [r4, #0]
 8011932:	1821      	adds	r1, r4, r0
 8011934:	428b      	cmp	r3, r1
 8011936:	bf01      	itttt	eq
 8011938:	6819      	ldreq	r1, [r3, #0]
 801193a:	685b      	ldreq	r3, [r3, #4]
 801193c:	1809      	addeq	r1, r1, r0
 801193e:	6021      	streq	r1, [r4, #0]
 8011940:	e7ed      	b.n	801191e <_free_r+0x1e>
 8011942:	461a      	mov	r2, r3
 8011944:	685b      	ldr	r3, [r3, #4]
 8011946:	b10b      	cbz	r3, 801194c <_free_r+0x4c>
 8011948:	42a3      	cmp	r3, r4
 801194a:	d9fa      	bls.n	8011942 <_free_r+0x42>
 801194c:	6811      	ldr	r1, [r2, #0]
 801194e:	1850      	adds	r0, r2, r1
 8011950:	42a0      	cmp	r0, r4
 8011952:	d10b      	bne.n	801196c <_free_r+0x6c>
 8011954:	6820      	ldr	r0, [r4, #0]
 8011956:	4401      	add	r1, r0
 8011958:	1850      	adds	r0, r2, r1
 801195a:	4283      	cmp	r3, r0
 801195c:	6011      	str	r1, [r2, #0]
 801195e:	d1e0      	bne.n	8011922 <_free_r+0x22>
 8011960:	6818      	ldr	r0, [r3, #0]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	6053      	str	r3, [r2, #4]
 8011966:	4408      	add	r0, r1
 8011968:	6010      	str	r0, [r2, #0]
 801196a:	e7da      	b.n	8011922 <_free_r+0x22>
 801196c:	d902      	bls.n	8011974 <_free_r+0x74>
 801196e:	230c      	movs	r3, #12
 8011970:	602b      	str	r3, [r5, #0]
 8011972:	e7d6      	b.n	8011922 <_free_r+0x22>
 8011974:	6820      	ldr	r0, [r4, #0]
 8011976:	1821      	adds	r1, r4, r0
 8011978:	428b      	cmp	r3, r1
 801197a:	bf04      	itt	eq
 801197c:	6819      	ldreq	r1, [r3, #0]
 801197e:	685b      	ldreq	r3, [r3, #4]
 8011980:	6063      	str	r3, [r4, #4]
 8011982:	bf04      	itt	eq
 8011984:	1809      	addeq	r1, r1, r0
 8011986:	6021      	streq	r1, [r4, #0]
 8011988:	6054      	str	r4, [r2, #4]
 801198a:	e7ca      	b.n	8011922 <_free_r+0x22>
 801198c:	bd38      	pop	{r3, r4, r5, pc}
 801198e:	bf00      	nop
 8011990:	20003b60 	.word	0x20003b60

08011994 <sbrk_aligned>:
 8011994:	b570      	push	{r4, r5, r6, lr}
 8011996:	4e0f      	ldr	r6, [pc, #60]	@ (80119d4 <sbrk_aligned+0x40>)
 8011998:	460c      	mov	r4, r1
 801199a:	6831      	ldr	r1, [r6, #0]
 801199c:	4605      	mov	r5, r0
 801199e:	b911      	cbnz	r1, 80119a6 <sbrk_aligned+0x12>
 80119a0:	f000 fda0 	bl	80124e4 <_sbrk_r>
 80119a4:	6030      	str	r0, [r6, #0]
 80119a6:	4621      	mov	r1, r4
 80119a8:	4628      	mov	r0, r5
 80119aa:	f000 fd9b 	bl	80124e4 <_sbrk_r>
 80119ae:	1c43      	adds	r3, r0, #1
 80119b0:	d103      	bne.n	80119ba <sbrk_aligned+0x26>
 80119b2:	f04f 34ff 	mov.w	r4, #4294967295
 80119b6:	4620      	mov	r0, r4
 80119b8:	bd70      	pop	{r4, r5, r6, pc}
 80119ba:	1cc4      	adds	r4, r0, #3
 80119bc:	f024 0403 	bic.w	r4, r4, #3
 80119c0:	42a0      	cmp	r0, r4
 80119c2:	d0f8      	beq.n	80119b6 <sbrk_aligned+0x22>
 80119c4:	1a21      	subs	r1, r4, r0
 80119c6:	4628      	mov	r0, r5
 80119c8:	f000 fd8c 	bl	80124e4 <_sbrk_r>
 80119cc:	3001      	adds	r0, #1
 80119ce:	d1f2      	bne.n	80119b6 <sbrk_aligned+0x22>
 80119d0:	e7ef      	b.n	80119b2 <sbrk_aligned+0x1e>
 80119d2:	bf00      	nop
 80119d4:	20003b5c 	.word	0x20003b5c

080119d8 <_malloc_r>:
 80119d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119dc:	1ccd      	adds	r5, r1, #3
 80119de:	f025 0503 	bic.w	r5, r5, #3
 80119e2:	3508      	adds	r5, #8
 80119e4:	2d0c      	cmp	r5, #12
 80119e6:	bf38      	it	cc
 80119e8:	250c      	movcc	r5, #12
 80119ea:	2d00      	cmp	r5, #0
 80119ec:	4606      	mov	r6, r0
 80119ee:	db01      	blt.n	80119f4 <_malloc_r+0x1c>
 80119f0:	42a9      	cmp	r1, r5
 80119f2:	d904      	bls.n	80119fe <_malloc_r+0x26>
 80119f4:	230c      	movs	r3, #12
 80119f6:	6033      	str	r3, [r6, #0]
 80119f8:	2000      	movs	r0, #0
 80119fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011ad4 <_malloc_r+0xfc>
 8011a02:	f000 f869 	bl	8011ad8 <__malloc_lock>
 8011a06:	f8d8 3000 	ldr.w	r3, [r8]
 8011a0a:	461c      	mov	r4, r3
 8011a0c:	bb44      	cbnz	r4, 8011a60 <_malloc_r+0x88>
 8011a0e:	4629      	mov	r1, r5
 8011a10:	4630      	mov	r0, r6
 8011a12:	f7ff ffbf 	bl	8011994 <sbrk_aligned>
 8011a16:	1c43      	adds	r3, r0, #1
 8011a18:	4604      	mov	r4, r0
 8011a1a:	d158      	bne.n	8011ace <_malloc_r+0xf6>
 8011a1c:	f8d8 4000 	ldr.w	r4, [r8]
 8011a20:	4627      	mov	r7, r4
 8011a22:	2f00      	cmp	r7, #0
 8011a24:	d143      	bne.n	8011aae <_malloc_r+0xd6>
 8011a26:	2c00      	cmp	r4, #0
 8011a28:	d04b      	beq.n	8011ac2 <_malloc_r+0xea>
 8011a2a:	6823      	ldr	r3, [r4, #0]
 8011a2c:	4639      	mov	r1, r7
 8011a2e:	4630      	mov	r0, r6
 8011a30:	eb04 0903 	add.w	r9, r4, r3
 8011a34:	f000 fd56 	bl	80124e4 <_sbrk_r>
 8011a38:	4581      	cmp	r9, r0
 8011a3a:	d142      	bne.n	8011ac2 <_malloc_r+0xea>
 8011a3c:	6821      	ldr	r1, [r4, #0]
 8011a3e:	1a6d      	subs	r5, r5, r1
 8011a40:	4629      	mov	r1, r5
 8011a42:	4630      	mov	r0, r6
 8011a44:	f7ff ffa6 	bl	8011994 <sbrk_aligned>
 8011a48:	3001      	adds	r0, #1
 8011a4a:	d03a      	beq.n	8011ac2 <_malloc_r+0xea>
 8011a4c:	6823      	ldr	r3, [r4, #0]
 8011a4e:	442b      	add	r3, r5
 8011a50:	6023      	str	r3, [r4, #0]
 8011a52:	f8d8 3000 	ldr.w	r3, [r8]
 8011a56:	685a      	ldr	r2, [r3, #4]
 8011a58:	bb62      	cbnz	r2, 8011ab4 <_malloc_r+0xdc>
 8011a5a:	f8c8 7000 	str.w	r7, [r8]
 8011a5e:	e00f      	b.n	8011a80 <_malloc_r+0xa8>
 8011a60:	6822      	ldr	r2, [r4, #0]
 8011a62:	1b52      	subs	r2, r2, r5
 8011a64:	d420      	bmi.n	8011aa8 <_malloc_r+0xd0>
 8011a66:	2a0b      	cmp	r2, #11
 8011a68:	d917      	bls.n	8011a9a <_malloc_r+0xc2>
 8011a6a:	1961      	adds	r1, r4, r5
 8011a6c:	42a3      	cmp	r3, r4
 8011a6e:	6025      	str	r5, [r4, #0]
 8011a70:	bf18      	it	ne
 8011a72:	6059      	strne	r1, [r3, #4]
 8011a74:	6863      	ldr	r3, [r4, #4]
 8011a76:	bf08      	it	eq
 8011a78:	f8c8 1000 	streq.w	r1, [r8]
 8011a7c:	5162      	str	r2, [r4, r5]
 8011a7e:	604b      	str	r3, [r1, #4]
 8011a80:	4630      	mov	r0, r6
 8011a82:	f000 f82f 	bl	8011ae4 <__malloc_unlock>
 8011a86:	f104 000b 	add.w	r0, r4, #11
 8011a8a:	1d23      	adds	r3, r4, #4
 8011a8c:	f020 0007 	bic.w	r0, r0, #7
 8011a90:	1ac2      	subs	r2, r0, r3
 8011a92:	bf1c      	itt	ne
 8011a94:	1a1b      	subne	r3, r3, r0
 8011a96:	50a3      	strne	r3, [r4, r2]
 8011a98:	e7af      	b.n	80119fa <_malloc_r+0x22>
 8011a9a:	6862      	ldr	r2, [r4, #4]
 8011a9c:	42a3      	cmp	r3, r4
 8011a9e:	bf0c      	ite	eq
 8011aa0:	f8c8 2000 	streq.w	r2, [r8]
 8011aa4:	605a      	strne	r2, [r3, #4]
 8011aa6:	e7eb      	b.n	8011a80 <_malloc_r+0xa8>
 8011aa8:	4623      	mov	r3, r4
 8011aaa:	6864      	ldr	r4, [r4, #4]
 8011aac:	e7ae      	b.n	8011a0c <_malloc_r+0x34>
 8011aae:	463c      	mov	r4, r7
 8011ab0:	687f      	ldr	r7, [r7, #4]
 8011ab2:	e7b6      	b.n	8011a22 <_malloc_r+0x4a>
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	42a3      	cmp	r3, r4
 8011aba:	d1fb      	bne.n	8011ab4 <_malloc_r+0xdc>
 8011abc:	2300      	movs	r3, #0
 8011abe:	6053      	str	r3, [r2, #4]
 8011ac0:	e7de      	b.n	8011a80 <_malloc_r+0xa8>
 8011ac2:	230c      	movs	r3, #12
 8011ac4:	6033      	str	r3, [r6, #0]
 8011ac6:	4630      	mov	r0, r6
 8011ac8:	f000 f80c 	bl	8011ae4 <__malloc_unlock>
 8011acc:	e794      	b.n	80119f8 <_malloc_r+0x20>
 8011ace:	6005      	str	r5, [r0, #0]
 8011ad0:	e7d6      	b.n	8011a80 <_malloc_r+0xa8>
 8011ad2:	bf00      	nop
 8011ad4:	20003b60 	.word	0x20003b60

08011ad8 <__malloc_lock>:
 8011ad8:	4801      	ldr	r0, [pc, #4]	@ (8011ae0 <__malloc_lock+0x8>)
 8011ada:	f7ff bef8 	b.w	80118ce <__retarget_lock_acquire_recursive>
 8011ade:	bf00      	nop
 8011ae0:	20003b58 	.word	0x20003b58

08011ae4 <__malloc_unlock>:
 8011ae4:	4801      	ldr	r0, [pc, #4]	@ (8011aec <__malloc_unlock+0x8>)
 8011ae6:	f7ff bef3 	b.w	80118d0 <__retarget_lock_release_recursive>
 8011aea:	bf00      	nop
 8011aec:	20003b58 	.word	0x20003b58

08011af0 <__ssputs_r>:
 8011af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011af4:	688e      	ldr	r6, [r1, #8]
 8011af6:	461f      	mov	r7, r3
 8011af8:	42be      	cmp	r6, r7
 8011afa:	680b      	ldr	r3, [r1, #0]
 8011afc:	4682      	mov	sl, r0
 8011afe:	460c      	mov	r4, r1
 8011b00:	4690      	mov	r8, r2
 8011b02:	d82d      	bhi.n	8011b60 <__ssputs_r+0x70>
 8011b04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011b08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011b0c:	d026      	beq.n	8011b5c <__ssputs_r+0x6c>
 8011b0e:	6965      	ldr	r5, [r4, #20]
 8011b10:	6909      	ldr	r1, [r1, #16]
 8011b12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b16:	eba3 0901 	sub.w	r9, r3, r1
 8011b1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011b1e:	1c7b      	adds	r3, r7, #1
 8011b20:	444b      	add	r3, r9
 8011b22:	106d      	asrs	r5, r5, #1
 8011b24:	429d      	cmp	r5, r3
 8011b26:	bf38      	it	cc
 8011b28:	461d      	movcc	r5, r3
 8011b2a:	0553      	lsls	r3, r2, #21
 8011b2c:	d527      	bpl.n	8011b7e <__ssputs_r+0x8e>
 8011b2e:	4629      	mov	r1, r5
 8011b30:	f7ff ff52 	bl	80119d8 <_malloc_r>
 8011b34:	4606      	mov	r6, r0
 8011b36:	b360      	cbz	r0, 8011b92 <__ssputs_r+0xa2>
 8011b38:	6921      	ldr	r1, [r4, #16]
 8011b3a:	464a      	mov	r2, r9
 8011b3c:	f7ff fed1 	bl	80118e2 <memcpy>
 8011b40:	89a3      	ldrh	r3, [r4, #12]
 8011b42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b4a:	81a3      	strh	r3, [r4, #12]
 8011b4c:	6126      	str	r6, [r4, #16]
 8011b4e:	6165      	str	r5, [r4, #20]
 8011b50:	444e      	add	r6, r9
 8011b52:	eba5 0509 	sub.w	r5, r5, r9
 8011b56:	6026      	str	r6, [r4, #0]
 8011b58:	60a5      	str	r5, [r4, #8]
 8011b5a:	463e      	mov	r6, r7
 8011b5c:	42be      	cmp	r6, r7
 8011b5e:	d900      	bls.n	8011b62 <__ssputs_r+0x72>
 8011b60:	463e      	mov	r6, r7
 8011b62:	6820      	ldr	r0, [r4, #0]
 8011b64:	4632      	mov	r2, r6
 8011b66:	4641      	mov	r1, r8
 8011b68:	f000 fc80 	bl	801246c <memmove>
 8011b6c:	68a3      	ldr	r3, [r4, #8]
 8011b6e:	1b9b      	subs	r3, r3, r6
 8011b70:	60a3      	str	r3, [r4, #8]
 8011b72:	6823      	ldr	r3, [r4, #0]
 8011b74:	4433      	add	r3, r6
 8011b76:	6023      	str	r3, [r4, #0]
 8011b78:	2000      	movs	r0, #0
 8011b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b7e:	462a      	mov	r2, r5
 8011b80:	f000 fcc0 	bl	8012504 <_realloc_r>
 8011b84:	4606      	mov	r6, r0
 8011b86:	2800      	cmp	r0, #0
 8011b88:	d1e0      	bne.n	8011b4c <__ssputs_r+0x5c>
 8011b8a:	6921      	ldr	r1, [r4, #16]
 8011b8c:	4650      	mov	r0, sl
 8011b8e:	f7ff feb7 	bl	8011900 <_free_r>
 8011b92:	230c      	movs	r3, #12
 8011b94:	f8ca 3000 	str.w	r3, [sl]
 8011b98:	89a3      	ldrh	r3, [r4, #12]
 8011b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b9e:	81a3      	strh	r3, [r4, #12]
 8011ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ba4:	e7e9      	b.n	8011b7a <__ssputs_r+0x8a>
	...

08011ba8 <_svfiprintf_r>:
 8011ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bac:	4698      	mov	r8, r3
 8011bae:	898b      	ldrh	r3, [r1, #12]
 8011bb0:	061b      	lsls	r3, r3, #24
 8011bb2:	b09d      	sub	sp, #116	@ 0x74
 8011bb4:	4607      	mov	r7, r0
 8011bb6:	460d      	mov	r5, r1
 8011bb8:	4614      	mov	r4, r2
 8011bba:	d510      	bpl.n	8011bde <_svfiprintf_r+0x36>
 8011bbc:	690b      	ldr	r3, [r1, #16]
 8011bbe:	b973      	cbnz	r3, 8011bde <_svfiprintf_r+0x36>
 8011bc0:	2140      	movs	r1, #64	@ 0x40
 8011bc2:	f7ff ff09 	bl	80119d8 <_malloc_r>
 8011bc6:	6028      	str	r0, [r5, #0]
 8011bc8:	6128      	str	r0, [r5, #16]
 8011bca:	b930      	cbnz	r0, 8011bda <_svfiprintf_r+0x32>
 8011bcc:	230c      	movs	r3, #12
 8011bce:	603b      	str	r3, [r7, #0]
 8011bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8011bd4:	b01d      	add	sp, #116	@ 0x74
 8011bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bda:	2340      	movs	r3, #64	@ 0x40
 8011bdc:	616b      	str	r3, [r5, #20]
 8011bde:	2300      	movs	r3, #0
 8011be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011be2:	2320      	movs	r3, #32
 8011be4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011be8:	f8cd 800c 	str.w	r8, [sp, #12]
 8011bec:	2330      	movs	r3, #48	@ 0x30
 8011bee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011d8c <_svfiprintf_r+0x1e4>
 8011bf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011bf6:	f04f 0901 	mov.w	r9, #1
 8011bfa:	4623      	mov	r3, r4
 8011bfc:	469a      	mov	sl, r3
 8011bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c02:	b10a      	cbz	r2, 8011c08 <_svfiprintf_r+0x60>
 8011c04:	2a25      	cmp	r2, #37	@ 0x25
 8011c06:	d1f9      	bne.n	8011bfc <_svfiprintf_r+0x54>
 8011c08:	ebba 0b04 	subs.w	fp, sl, r4
 8011c0c:	d00b      	beq.n	8011c26 <_svfiprintf_r+0x7e>
 8011c0e:	465b      	mov	r3, fp
 8011c10:	4622      	mov	r2, r4
 8011c12:	4629      	mov	r1, r5
 8011c14:	4638      	mov	r0, r7
 8011c16:	f7ff ff6b 	bl	8011af0 <__ssputs_r>
 8011c1a:	3001      	adds	r0, #1
 8011c1c:	f000 80a7 	beq.w	8011d6e <_svfiprintf_r+0x1c6>
 8011c20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c22:	445a      	add	r2, fp
 8011c24:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c26:	f89a 3000 	ldrb.w	r3, [sl]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	f000 809f 	beq.w	8011d6e <_svfiprintf_r+0x1c6>
 8011c30:	2300      	movs	r3, #0
 8011c32:	f04f 32ff 	mov.w	r2, #4294967295
 8011c36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c3a:	f10a 0a01 	add.w	sl, sl, #1
 8011c3e:	9304      	str	r3, [sp, #16]
 8011c40:	9307      	str	r3, [sp, #28]
 8011c42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011c46:	931a      	str	r3, [sp, #104]	@ 0x68
 8011c48:	4654      	mov	r4, sl
 8011c4a:	2205      	movs	r2, #5
 8011c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c50:	484e      	ldr	r0, [pc, #312]	@ (8011d8c <_svfiprintf_r+0x1e4>)
 8011c52:	f7ee fad5 	bl	8000200 <memchr>
 8011c56:	9a04      	ldr	r2, [sp, #16]
 8011c58:	b9d8      	cbnz	r0, 8011c92 <_svfiprintf_r+0xea>
 8011c5a:	06d0      	lsls	r0, r2, #27
 8011c5c:	bf44      	itt	mi
 8011c5e:	2320      	movmi	r3, #32
 8011c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c64:	0711      	lsls	r1, r2, #28
 8011c66:	bf44      	itt	mi
 8011c68:	232b      	movmi	r3, #43	@ 0x2b
 8011c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8011c72:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c74:	d015      	beq.n	8011ca2 <_svfiprintf_r+0xfa>
 8011c76:	9a07      	ldr	r2, [sp, #28]
 8011c78:	4654      	mov	r4, sl
 8011c7a:	2000      	movs	r0, #0
 8011c7c:	f04f 0c0a 	mov.w	ip, #10
 8011c80:	4621      	mov	r1, r4
 8011c82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c86:	3b30      	subs	r3, #48	@ 0x30
 8011c88:	2b09      	cmp	r3, #9
 8011c8a:	d94b      	bls.n	8011d24 <_svfiprintf_r+0x17c>
 8011c8c:	b1b0      	cbz	r0, 8011cbc <_svfiprintf_r+0x114>
 8011c8e:	9207      	str	r2, [sp, #28]
 8011c90:	e014      	b.n	8011cbc <_svfiprintf_r+0x114>
 8011c92:	eba0 0308 	sub.w	r3, r0, r8
 8011c96:	fa09 f303 	lsl.w	r3, r9, r3
 8011c9a:	4313      	orrs	r3, r2
 8011c9c:	9304      	str	r3, [sp, #16]
 8011c9e:	46a2      	mov	sl, r4
 8011ca0:	e7d2      	b.n	8011c48 <_svfiprintf_r+0xa0>
 8011ca2:	9b03      	ldr	r3, [sp, #12]
 8011ca4:	1d19      	adds	r1, r3, #4
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	9103      	str	r1, [sp, #12]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	bfbb      	ittet	lt
 8011cae:	425b      	neglt	r3, r3
 8011cb0:	f042 0202 	orrlt.w	r2, r2, #2
 8011cb4:	9307      	strge	r3, [sp, #28]
 8011cb6:	9307      	strlt	r3, [sp, #28]
 8011cb8:	bfb8      	it	lt
 8011cba:	9204      	strlt	r2, [sp, #16]
 8011cbc:	7823      	ldrb	r3, [r4, #0]
 8011cbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8011cc0:	d10a      	bne.n	8011cd8 <_svfiprintf_r+0x130>
 8011cc2:	7863      	ldrb	r3, [r4, #1]
 8011cc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8011cc6:	d132      	bne.n	8011d2e <_svfiprintf_r+0x186>
 8011cc8:	9b03      	ldr	r3, [sp, #12]
 8011cca:	1d1a      	adds	r2, r3, #4
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	9203      	str	r2, [sp, #12]
 8011cd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011cd4:	3402      	adds	r4, #2
 8011cd6:	9305      	str	r3, [sp, #20]
 8011cd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011d9c <_svfiprintf_r+0x1f4>
 8011cdc:	7821      	ldrb	r1, [r4, #0]
 8011cde:	2203      	movs	r2, #3
 8011ce0:	4650      	mov	r0, sl
 8011ce2:	f7ee fa8d 	bl	8000200 <memchr>
 8011ce6:	b138      	cbz	r0, 8011cf8 <_svfiprintf_r+0x150>
 8011ce8:	9b04      	ldr	r3, [sp, #16]
 8011cea:	eba0 000a 	sub.w	r0, r0, sl
 8011cee:	2240      	movs	r2, #64	@ 0x40
 8011cf0:	4082      	lsls	r2, r0
 8011cf2:	4313      	orrs	r3, r2
 8011cf4:	3401      	adds	r4, #1
 8011cf6:	9304      	str	r3, [sp, #16]
 8011cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cfc:	4824      	ldr	r0, [pc, #144]	@ (8011d90 <_svfiprintf_r+0x1e8>)
 8011cfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011d02:	2206      	movs	r2, #6
 8011d04:	f7ee fa7c 	bl	8000200 <memchr>
 8011d08:	2800      	cmp	r0, #0
 8011d0a:	d036      	beq.n	8011d7a <_svfiprintf_r+0x1d2>
 8011d0c:	4b21      	ldr	r3, [pc, #132]	@ (8011d94 <_svfiprintf_r+0x1ec>)
 8011d0e:	bb1b      	cbnz	r3, 8011d58 <_svfiprintf_r+0x1b0>
 8011d10:	9b03      	ldr	r3, [sp, #12]
 8011d12:	3307      	adds	r3, #7
 8011d14:	f023 0307 	bic.w	r3, r3, #7
 8011d18:	3308      	adds	r3, #8
 8011d1a:	9303      	str	r3, [sp, #12]
 8011d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d1e:	4433      	add	r3, r6
 8011d20:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d22:	e76a      	b.n	8011bfa <_svfiprintf_r+0x52>
 8011d24:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d28:	460c      	mov	r4, r1
 8011d2a:	2001      	movs	r0, #1
 8011d2c:	e7a8      	b.n	8011c80 <_svfiprintf_r+0xd8>
 8011d2e:	2300      	movs	r3, #0
 8011d30:	3401      	adds	r4, #1
 8011d32:	9305      	str	r3, [sp, #20]
 8011d34:	4619      	mov	r1, r3
 8011d36:	f04f 0c0a 	mov.w	ip, #10
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d40:	3a30      	subs	r2, #48	@ 0x30
 8011d42:	2a09      	cmp	r2, #9
 8011d44:	d903      	bls.n	8011d4e <_svfiprintf_r+0x1a6>
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d0c6      	beq.n	8011cd8 <_svfiprintf_r+0x130>
 8011d4a:	9105      	str	r1, [sp, #20]
 8011d4c:	e7c4      	b.n	8011cd8 <_svfiprintf_r+0x130>
 8011d4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d52:	4604      	mov	r4, r0
 8011d54:	2301      	movs	r3, #1
 8011d56:	e7f0      	b.n	8011d3a <_svfiprintf_r+0x192>
 8011d58:	ab03      	add	r3, sp, #12
 8011d5a:	9300      	str	r3, [sp, #0]
 8011d5c:	462a      	mov	r2, r5
 8011d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8011d98 <_svfiprintf_r+0x1f0>)
 8011d60:	a904      	add	r1, sp, #16
 8011d62:	4638      	mov	r0, r7
 8011d64:	f3af 8000 	nop.w
 8011d68:	1c42      	adds	r2, r0, #1
 8011d6a:	4606      	mov	r6, r0
 8011d6c:	d1d6      	bne.n	8011d1c <_svfiprintf_r+0x174>
 8011d6e:	89ab      	ldrh	r3, [r5, #12]
 8011d70:	065b      	lsls	r3, r3, #25
 8011d72:	f53f af2d 	bmi.w	8011bd0 <_svfiprintf_r+0x28>
 8011d76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011d78:	e72c      	b.n	8011bd4 <_svfiprintf_r+0x2c>
 8011d7a:	ab03      	add	r3, sp, #12
 8011d7c:	9300      	str	r3, [sp, #0]
 8011d7e:	462a      	mov	r2, r5
 8011d80:	4b05      	ldr	r3, [pc, #20]	@ (8011d98 <_svfiprintf_r+0x1f0>)
 8011d82:	a904      	add	r1, sp, #16
 8011d84:	4638      	mov	r0, r7
 8011d86:	f000 f9bb 	bl	8012100 <_printf_i>
 8011d8a:	e7ed      	b.n	8011d68 <_svfiprintf_r+0x1c0>
 8011d8c:	08013199 	.word	0x08013199
 8011d90:	080131a3 	.word	0x080131a3
 8011d94:	00000000 	.word	0x00000000
 8011d98:	08011af1 	.word	0x08011af1
 8011d9c:	0801319f 	.word	0x0801319f

08011da0 <__sfputc_r>:
 8011da0:	6893      	ldr	r3, [r2, #8]
 8011da2:	3b01      	subs	r3, #1
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	b410      	push	{r4}
 8011da8:	6093      	str	r3, [r2, #8]
 8011daa:	da08      	bge.n	8011dbe <__sfputc_r+0x1e>
 8011dac:	6994      	ldr	r4, [r2, #24]
 8011dae:	42a3      	cmp	r3, r4
 8011db0:	db01      	blt.n	8011db6 <__sfputc_r+0x16>
 8011db2:	290a      	cmp	r1, #10
 8011db4:	d103      	bne.n	8011dbe <__sfputc_r+0x1e>
 8011db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dba:	f7ff bbdc 	b.w	8011576 <__swbuf_r>
 8011dbe:	6813      	ldr	r3, [r2, #0]
 8011dc0:	1c58      	adds	r0, r3, #1
 8011dc2:	6010      	str	r0, [r2, #0]
 8011dc4:	7019      	strb	r1, [r3, #0]
 8011dc6:	4608      	mov	r0, r1
 8011dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dcc:	4770      	bx	lr

08011dce <__sfputs_r>:
 8011dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dd0:	4606      	mov	r6, r0
 8011dd2:	460f      	mov	r7, r1
 8011dd4:	4614      	mov	r4, r2
 8011dd6:	18d5      	adds	r5, r2, r3
 8011dd8:	42ac      	cmp	r4, r5
 8011dda:	d101      	bne.n	8011de0 <__sfputs_r+0x12>
 8011ddc:	2000      	movs	r0, #0
 8011dde:	e007      	b.n	8011df0 <__sfputs_r+0x22>
 8011de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011de4:	463a      	mov	r2, r7
 8011de6:	4630      	mov	r0, r6
 8011de8:	f7ff ffda 	bl	8011da0 <__sfputc_r>
 8011dec:	1c43      	adds	r3, r0, #1
 8011dee:	d1f3      	bne.n	8011dd8 <__sfputs_r+0xa>
 8011df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011df4 <_vfiprintf_r>:
 8011df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011df8:	460d      	mov	r5, r1
 8011dfa:	b09d      	sub	sp, #116	@ 0x74
 8011dfc:	4614      	mov	r4, r2
 8011dfe:	4698      	mov	r8, r3
 8011e00:	4606      	mov	r6, r0
 8011e02:	b118      	cbz	r0, 8011e0c <_vfiprintf_r+0x18>
 8011e04:	6a03      	ldr	r3, [r0, #32]
 8011e06:	b90b      	cbnz	r3, 8011e0c <_vfiprintf_r+0x18>
 8011e08:	f7ff faa4 	bl	8011354 <__sinit>
 8011e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e0e:	07d9      	lsls	r1, r3, #31
 8011e10:	d405      	bmi.n	8011e1e <_vfiprintf_r+0x2a>
 8011e12:	89ab      	ldrh	r3, [r5, #12]
 8011e14:	059a      	lsls	r2, r3, #22
 8011e16:	d402      	bmi.n	8011e1e <_vfiprintf_r+0x2a>
 8011e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e1a:	f7ff fd58 	bl	80118ce <__retarget_lock_acquire_recursive>
 8011e1e:	89ab      	ldrh	r3, [r5, #12]
 8011e20:	071b      	lsls	r3, r3, #28
 8011e22:	d501      	bpl.n	8011e28 <_vfiprintf_r+0x34>
 8011e24:	692b      	ldr	r3, [r5, #16]
 8011e26:	b99b      	cbnz	r3, 8011e50 <_vfiprintf_r+0x5c>
 8011e28:	4629      	mov	r1, r5
 8011e2a:	4630      	mov	r0, r6
 8011e2c:	f7ff fbe2 	bl	80115f4 <__swsetup_r>
 8011e30:	b170      	cbz	r0, 8011e50 <_vfiprintf_r+0x5c>
 8011e32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e34:	07dc      	lsls	r4, r3, #31
 8011e36:	d504      	bpl.n	8011e42 <_vfiprintf_r+0x4e>
 8011e38:	f04f 30ff 	mov.w	r0, #4294967295
 8011e3c:	b01d      	add	sp, #116	@ 0x74
 8011e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e42:	89ab      	ldrh	r3, [r5, #12]
 8011e44:	0598      	lsls	r0, r3, #22
 8011e46:	d4f7      	bmi.n	8011e38 <_vfiprintf_r+0x44>
 8011e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e4a:	f7ff fd41 	bl	80118d0 <__retarget_lock_release_recursive>
 8011e4e:	e7f3      	b.n	8011e38 <_vfiprintf_r+0x44>
 8011e50:	2300      	movs	r3, #0
 8011e52:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e54:	2320      	movs	r3, #32
 8011e56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e5e:	2330      	movs	r3, #48	@ 0x30
 8011e60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012010 <_vfiprintf_r+0x21c>
 8011e64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e68:	f04f 0901 	mov.w	r9, #1
 8011e6c:	4623      	mov	r3, r4
 8011e6e:	469a      	mov	sl, r3
 8011e70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e74:	b10a      	cbz	r2, 8011e7a <_vfiprintf_r+0x86>
 8011e76:	2a25      	cmp	r2, #37	@ 0x25
 8011e78:	d1f9      	bne.n	8011e6e <_vfiprintf_r+0x7a>
 8011e7a:	ebba 0b04 	subs.w	fp, sl, r4
 8011e7e:	d00b      	beq.n	8011e98 <_vfiprintf_r+0xa4>
 8011e80:	465b      	mov	r3, fp
 8011e82:	4622      	mov	r2, r4
 8011e84:	4629      	mov	r1, r5
 8011e86:	4630      	mov	r0, r6
 8011e88:	f7ff ffa1 	bl	8011dce <__sfputs_r>
 8011e8c:	3001      	adds	r0, #1
 8011e8e:	f000 80a7 	beq.w	8011fe0 <_vfiprintf_r+0x1ec>
 8011e92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e94:	445a      	add	r2, fp
 8011e96:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e98:	f89a 3000 	ldrb.w	r3, [sl]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	f000 809f 	beq.w	8011fe0 <_vfiprintf_r+0x1ec>
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011eac:	f10a 0a01 	add.w	sl, sl, #1
 8011eb0:	9304      	str	r3, [sp, #16]
 8011eb2:	9307      	str	r3, [sp, #28]
 8011eb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011eb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8011eba:	4654      	mov	r4, sl
 8011ebc:	2205      	movs	r2, #5
 8011ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ec2:	4853      	ldr	r0, [pc, #332]	@ (8012010 <_vfiprintf_r+0x21c>)
 8011ec4:	f7ee f99c 	bl	8000200 <memchr>
 8011ec8:	9a04      	ldr	r2, [sp, #16]
 8011eca:	b9d8      	cbnz	r0, 8011f04 <_vfiprintf_r+0x110>
 8011ecc:	06d1      	lsls	r1, r2, #27
 8011ece:	bf44      	itt	mi
 8011ed0:	2320      	movmi	r3, #32
 8011ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ed6:	0713      	lsls	r3, r2, #28
 8011ed8:	bf44      	itt	mi
 8011eda:	232b      	movmi	r3, #43	@ 0x2b
 8011edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8011ee4:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ee6:	d015      	beq.n	8011f14 <_vfiprintf_r+0x120>
 8011ee8:	9a07      	ldr	r2, [sp, #28]
 8011eea:	4654      	mov	r4, sl
 8011eec:	2000      	movs	r0, #0
 8011eee:	f04f 0c0a 	mov.w	ip, #10
 8011ef2:	4621      	mov	r1, r4
 8011ef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ef8:	3b30      	subs	r3, #48	@ 0x30
 8011efa:	2b09      	cmp	r3, #9
 8011efc:	d94b      	bls.n	8011f96 <_vfiprintf_r+0x1a2>
 8011efe:	b1b0      	cbz	r0, 8011f2e <_vfiprintf_r+0x13a>
 8011f00:	9207      	str	r2, [sp, #28]
 8011f02:	e014      	b.n	8011f2e <_vfiprintf_r+0x13a>
 8011f04:	eba0 0308 	sub.w	r3, r0, r8
 8011f08:	fa09 f303 	lsl.w	r3, r9, r3
 8011f0c:	4313      	orrs	r3, r2
 8011f0e:	9304      	str	r3, [sp, #16]
 8011f10:	46a2      	mov	sl, r4
 8011f12:	e7d2      	b.n	8011eba <_vfiprintf_r+0xc6>
 8011f14:	9b03      	ldr	r3, [sp, #12]
 8011f16:	1d19      	adds	r1, r3, #4
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	9103      	str	r1, [sp, #12]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	bfbb      	ittet	lt
 8011f20:	425b      	neglt	r3, r3
 8011f22:	f042 0202 	orrlt.w	r2, r2, #2
 8011f26:	9307      	strge	r3, [sp, #28]
 8011f28:	9307      	strlt	r3, [sp, #28]
 8011f2a:	bfb8      	it	lt
 8011f2c:	9204      	strlt	r2, [sp, #16]
 8011f2e:	7823      	ldrb	r3, [r4, #0]
 8011f30:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f32:	d10a      	bne.n	8011f4a <_vfiprintf_r+0x156>
 8011f34:	7863      	ldrb	r3, [r4, #1]
 8011f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f38:	d132      	bne.n	8011fa0 <_vfiprintf_r+0x1ac>
 8011f3a:	9b03      	ldr	r3, [sp, #12]
 8011f3c:	1d1a      	adds	r2, r3, #4
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	9203      	str	r2, [sp, #12]
 8011f42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011f46:	3402      	adds	r4, #2
 8011f48:	9305      	str	r3, [sp, #20]
 8011f4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012020 <_vfiprintf_r+0x22c>
 8011f4e:	7821      	ldrb	r1, [r4, #0]
 8011f50:	2203      	movs	r2, #3
 8011f52:	4650      	mov	r0, sl
 8011f54:	f7ee f954 	bl	8000200 <memchr>
 8011f58:	b138      	cbz	r0, 8011f6a <_vfiprintf_r+0x176>
 8011f5a:	9b04      	ldr	r3, [sp, #16]
 8011f5c:	eba0 000a 	sub.w	r0, r0, sl
 8011f60:	2240      	movs	r2, #64	@ 0x40
 8011f62:	4082      	lsls	r2, r0
 8011f64:	4313      	orrs	r3, r2
 8011f66:	3401      	adds	r4, #1
 8011f68:	9304      	str	r3, [sp, #16]
 8011f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f6e:	4829      	ldr	r0, [pc, #164]	@ (8012014 <_vfiprintf_r+0x220>)
 8011f70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f74:	2206      	movs	r2, #6
 8011f76:	f7ee f943 	bl	8000200 <memchr>
 8011f7a:	2800      	cmp	r0, #0
 8011f7c:	d03f      	beq.n	8011ffe <_vfiprintf_r+0x20a>
 8011f7e:	4b26      	ldr	r3, [pc, #152]	@ (8012018 <_vfiprintf_r+0x224>)
 8011f80:	bb1b      	cbnz	r3, 8011fca <_vfiprintf_r+0x1d6>
 8011f82:	9b03      	ldr	r3, [sp, #12]
 8011f84:	3307      	adds	r3, #7
 8011f86:	f023 0307 	bic.w	r3, r3, #7
 8011f8a:	3308      	adds	r3, #8
 8011f8c:	9303      	str	r3, [sp, #12]
 8011f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f90:	443b      	add	r3, r7
 8011f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f94:	e76a      	b.n	8011e6c <_vfiprintf_r+0x78>
 8011f96:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f9a:	460c      	mov	r4, r1
 8011f9c:	2001      	movs	r0, #1
 8011f9e:	e7a8      	b.n	8011ef2 <_vfiprintf_r+0xfe>
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	3401      	adds	r4, #1
 8011fa4:	9305      	str	r3, [sp, #20]
 8011fa6:	4619      	mov	r1, r3
 8011fa8:	f04f 0c0a 	mov.w	ip, #10
 8011fac:	4620      	mov	r0, r4
 8011fae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fb2:	3a30      	subs	r2, #48	@ 0x30
 8011fb4:	2a09      	cmp	r2, #9
 8011fb6:	d903      	bls.n	8011fc0 <_vfiprintf_r+0x1cc>
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d0c6      	beq.n	8011f4a <_vfiprintf_r+0x156>
 8011fbc:	9105      	str	r1, [sp, #20]
 8011fbe:	e7c4      	b.n	8011f4a <_vfiprintf_r+0x156>
 8011fc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fc4:	4604      	mov	r4, r0
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	e7f0      	b.n	8011fac <_vfiprintf_r+0x1b8>
 8011fca:	ab03      	add	r3, sp, #12
 8011fcc:	9300      	str	r3, [sp, #0]
 8011fce:	462a      	mov	r2, r5
 8011fd0:	4b12      	ldr	r3, [pc, #72]	@ (801201c <_vfiprintf_r+0x228>)
 8011fd2:	a904      	add	r1, sp, #16
 8011fd4:	4630      	mov	r0, r6
 8011fd6:	f3af 8000 	nop.w
 8011fda:	4607      	mov	r7, r0
 8011fdc:	1c78      	adds	r0, r7, #1
 8011fde:	d1d6      	bne.n	8011f8e <_vfiprintf_r+0x19a>
 8011fe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011fe2:	07d9      	lsls	r1, r3, #31
 8011fe4:	d405      	bmi.n	8011ff2 <_vfiprintf_r+0x1fe>
 8011fe6:	89ab      	ldrh	r3, [r5, #12]
 8011fe8:	059a      	lsls	r2, r3, #22
 8011fea:	d402      	bmi.n	8011ff2 <_vfiprintf_r+0x1fe>
 8011fec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011fee:	f7ff fc6f 	bl	80118d0 <__retarget_lock_release_recursive>
 8011ff2:	89ab      	ldrh	r3, [r5, #12]
 8011ff4:	065b      	lsls	r3, r3, #25
 8011ff6:	f53f af1f 	bmi.w	8011e38 <_vfiprintf_r+0x44>
 8011ffa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ffc:	e71e      	b.n	8011e3c <_vfiprintf_r+0x48>
 8011ffe:	ab03      	add	r3, sp, #12
 8012000:	9300      	str	r3, [sp, #0]
 8012002:	462a      	mov	r2, r5
 8012004:	4b05      	ldr	r3, [pc, #20]	@ (801201c <_vfiprintf_r+0x228>)
 8012006:	a904      	add	r1, sp, #16
 8012008:	4630      	mov	r0, r6
 801200a:	f000 f879 	bl	8012100 <_printf_i>
 801200e:	e7e4      	b.n	8011fda <_vfiprintf_r+0x1e6>
 8012010:	08013199 	.word	0x08013199
 8012014:	080131a3 	.word	0x080131a3
 8012018:	00000000 	.word	0x00000000
 801201c:	08011dcf 	.word	0x08011dcf
 8012020:	0801319f 	.word	0x0801319f

08012024 <_printf_common>:
 8012024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012028:	4616      	mov	r6, r2
 801202a:	4698      	mov	r8, r3
 801202c:	688a      	ldr	r2, [r1, #8]
 801202e:	690b      	ldr	r3, [r1, #16]
 8012030:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012034:	4293      	cmp	r3, r2
 8012036:	bfb8      	it	lt
 8012038:	4613      	movlt	r3, r2
 801203a:	6033      	str	r3, [r6, #0]
 801203c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012040:	4607      	mov	r7, r0
 8012042:	460c      	mov	r4, r1
 8012044:	b10a      	cbz	r2, 801204a <_printf_common+0x26>
 8012046:	3301      	adds	r3, #1
 8012048:	6033      	str	r3, [r6, #0]
 801204a:	6823      	ldr	r3, [r4, #0]
 801204c:	0699      	lsls	r1, r3, #26
 801204e:	bf42      	ittt	mi
 8012050:	6833      	ldrmi	r3, [r6, #0]
 8012052:	3302      	addmi	r3, #2
 8012054:	6033      	strmi	r3, [r6, #0]
 8012056:	6825      	ldr	r5, [r4, #0]
 8012058:	f015 0506 	ands.w	r5, r5, #6
 801205c:	d106      	bne.n	801206c <_printf_common+0x48>
 801205e:	f104 0a19 	add.w	sl, r4, #25
 8012062:	68e3      	ldr	r3, [r4, #12]
 8012064:	6832      	ldr	r2, [r6, #0]
 8012066:	1a9b      	subs	r3, r3, r2
 8012068:	42ab      	cmp	r3, r5
 801206a:	dc26      	bgt.n	80120ba <_printf_common+0x96>
 801206c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012070:	6822      	ldr	r2, [r4, #0]
 8012072:	3b00      	subs	r3, #0
 8012074:	bf18      	it	ne
 8012076:	2301      	movne	r3, #1
 8012078:	0692      	lsls	r2, r2, #26
 801207a:	d42b      	bmi.n	80120d4 <_printf_common+0xb0>
 801207c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012080:	4641      	mov	r1, r8
 8012082:	4638      	mov	r0, r7
 8012084:	47c8      	blx	r9
 8012086:	3001      	adds	r0, #1
 8012088:	d01e      	beq.n	80120c8 <_printf_common+0xa4>
 801208a:	6823      	ldr	r3, [r4, #0]
 801208c:	6922      	ldr	r2, [r4, #16]
 801208e:	f003 0306 	and.w	r3, r3, #6
 8012092:	2b04      	cmp	r3, #4
 8012094:	bf02      	ittt	eq
 8012096:	68e5      	ldreq	r5, [r4, #12]
 8012098:	6833      	ldreq	r3, [r6, #0]
 801209a:	1aed      	subeq	r5, r5, r3
 801209c:	68a3      	ldr	r3, [r4, #8]
 801209e:	bf0c      	ite	eq
 80120a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80120a4:	2500      	movne	r5, #0
 80120a6:	4293      	cmp	r3, r2
 80120a8:	bfc4      	itt	gt
 80120aa:	1a9b      	subgt	r3, r3, r2
 80120ac:	18ed      	addgt	r5, r5, r3
 80120ae:	2600      	movs	r6, #0
 80120b0:	341a      	adds	r4, #26
 80120b2:	42b5      	cmp	r5, r6
 80120b4:	d11a      	bne.n	80120ec <_printf_common+0xc8>
 80120b6:	2000      	movs	r0, #0
 80120b8:	e008      	b.n	80120cc <_printf_common+0xa8>
 80120ba:	2301      	movs	r3, #1
 80120bc:	4652      	mov	r2, sl
 80120be:	4641      	mov	r1, r8
 80120c0:	4638      	mov	r0, r7
 80120c2:	47c8      	blx	r9
 80120c4:	3001      	adds	r0, #1
 80120c6:	d103      	bne.n	80120d0 <_printf_common+0xac>
 80120c8:	f04f 30ff 	mov.w	r0, #4294967295
 80120cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120d0:	3501      	adds	r5, #1
 80120d2:	e7c6      	b.n	8012062 <_printf_common+0x3e>
 80120d4:	18e1      	adds	r1, r4, r3
 80120d6:	1c5a      	adds	r2, r3, #1
 80120d8:	2030      	movs	r0, #48	@ 0x30
 80120da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80120de:	4422      	add	r2, r4
 80120e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80120e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80120e8:	3302      	adds	r3, #2
 80120ea:	e7c7      	b.n	801207c <_printf_common+0x58>
 80120ec:	2301      	movs	r3, #1
 80120ee:	4622      	mov	r2, r4
 80120f0:	4641      	mov	r1, r8
 80120f2:	4638      	mov	r0, r7
 80120f4:	47c8      	blx	r9
 80120f6:	3001      	adds	r0, #1
 80120f8:	d0e6      	beq.n	80120c8 <_printf_common+0xa4>
 80120fa:	3601      	adds	r6, #1
 80120fc:	e7d9      	b.n	80120b2 <_printf_common+0x8e>
	...

08012100 <_printf_i>:
 8012100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012104:	7e0f      	ldrb	r7, [r1, #24]
 8012106:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012108:	2f78      	cmp	r7, #120	@ 0x78
 801210a:	4691      	mov	r9, r2
 801210c:	4680      	mov	r8, r0
 801210e:	460c      	mov	r4, r1
 8012110:	469a      	mov	sl, r3
 8012112:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012116:	d807      	bhi.n	8012128 <_printf_i+0x28>
 8012118:	2f62      	cmp	r7, #98	@ 0x62
 801211a:	d80a      	bhi.n	8012132 <_printf_i+0x32>
 801211c:	2f00      	cmp	r7, #0
 801211e:	f000 80d2 	beq.w	80122c6 <_printf_i+0x1c6>
 8012122:	2f58      	cmp	r7, #88	@ 0x58
 8012124:	f000 80b9 	beq.w	801229a <_printf_i+0x19a>
 8012128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801212c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012130:	e03a      	b.n	80121a8 <_printf_i+0xa8>
 8012132:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012136:	2b15      	cmp	r3, #21
 8012138:	d8f6      	bhi.n	8012128 <_printf_i+0x28>
 801213a:	a101      	add	r1, pc, #4	@ (adr r1, 8012140 <_printf_i+0x40>)
 801213c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012140:	08012199 	.word	0x08012199
 8012144:	080121ad 	.word	0x080121ad
 8012148:	08012129 	.word	0x08012129
 801214c:	08012129 	.word	0x08012129
 8012150:	08012129 	.word	0x08012129
 8012154:	08012129 	.word	0x08012129
 8012158:	080121ad 	.word	0x080121ad
 801215c:	08012129 	.word	0x08012129
 8012160:	08012129 	.word	0x08012129
 8012164:	08012129 	.word	0x08012129
 8012168:	08012129 	.word	0x08012129
 801216c:	080122ad 	.word	0x080122ad
 8012170:	080121d7 	.word	0x080121d7
 8012174:	08012267 	.word	0x08012267
 8012178:	08012129 	.word	0x08012129
 801217c:	08012129 	.word	0x08012129
 8012180:	080122cf 	.word	0x080122cf
 8012184:	08012129 	.word	0x08012129
 8012188:	080121d7 	.word	0x080121d7
 801218c:	08012129 	.word	0x08012129
 8012190:	08012129 	.word	0x08012129
 8012194:	0801226f 	.word	0x0801226f
 8012198:	6833      	ldr	r3, [r6, #0]
 801219a:	1d1a      	adds	r2, r3, #4
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	6032      	str	r2, [r6, #0]
 80121a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80121a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80121a8:	2301      	movs	r3, #1
 80121aa:	e09d      	b.n	80122e8 <_printf_i+0x1e8>
 80121ac:	6833      	ldr	r3, [r6, #0]
 80121ae:	6820      	ldr	r0, [r4, #0]
 80121b0:	1d19      	adds	r1, r3, #4
 80121b2:	6031      	str	r1, [r6, #0]
 80121b4:	0606      	lsls	r6, r0, #24
 80121b6:	d501      	bpl.n	80121bc <_printf_i+0xbc>
 80121b8:	681d      	ldr	r5, [r3, #0]
 80121ba:	e003      	b.n	80121c4 <_printf_i+0xc4>
 80121bc:	0645      	lsls	r5, r0, #25
 80121be:	d5fb      	bpl.n	80121b8 <_printf_i+0xb8>
 80121c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80121c4:	2d00      	cmp	r5, #0
 80121c6:	da03      	bge.n	80121d0 <_printf_i+0xd0>
 80121c8:	232d      	movs	r3, #45	@ 0x2d
 80121ca:	426d      	negs	r5, r5
 80121cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80121d0:	4859      	ldr	r0, [pc, #356]	@ (8012338 <_printf_i+0x238>)
 80121d2:	230a      	movs	r3, #10
 80121d4:	e011      	b.n	80121fa <_printf_i+0xfa>
 80121d6:	6821      	ldr	r1, [r4, #0]
 80121d8:	6833      	ldr	r3, [r6, #0]
 80121da:	0608      	lsls	r0, r1, #24
 80121dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80121e0:	d402      	bmi.n	80121e8 <_printf_i+0xe8>
 80121e2:	0649      	lsls	r1, r1, #25
 80121e4:	bf48      	it	mi
 80121e6:	b2ad      	uxthmi	r5, r5
 80121e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80121ea:	4853      	ldr	r0, [pc, #332]	@ (8012338 <_printf_i+0x238>)
 80121ec:	6033      	str	r3, [r6, #0]
 80121ee:	bf14      	ite	ne
 80121f0:	230a      	movne	r3, #10
 80121f2:	2308      	moveq	r3, #8
 80121f4:	2100      	movs	r1, #0
 80121f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80121fa:	6866      	ldr	r6, [r4, #4]
 80121fc:	60a6      	str	r6, [r4, #8]
 80121fe:	2e00      	cmp	r6, #0
 8012200:	bfa2      	ittt	ge
 8012202:	6821      	ldrge	r1, [r4, #0]
 8012204:	f021 0104 	bicge.w	r1, r1, #4
 8012208:	6021      	strge	r1, [r4, #0]
 801220a:	b90d      	cbnz	r5, 8012210 <_printf_i+0x110>
 801220c:	2e00      	cmp	r6, #0
 801220e:	d04b      	beq.n	80122a8 <_printf_i+0x1a8>
 8012210:	4616      	mov	r6, r2
 8012212:	fbb5 f1f3 	udiv	r1, r5, r3
 8012216:	fb03 5711 	mls	r7, r3, r1, r5
 801221a:	5dc7      	ldrb	r7, [r0, r7]
 801221c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012220:	462f      	mov	r7, r5
 8012222:	42bb      	cmp	r3, r7
 8012224:	460d      	mov	r5, r1
 8012226:	d9f4      	bls.n	8012212 <_printf_i+0x112>
 8012228:	2b08      	cmp	r3, #8
 801222a:	d10b      	bne.n	8012244 <_printf_i+0x144>
 801222c:	6823      	ldr	r3, [r4, #0]
 801222e:	07df      	lsls	r7, r3, #31
 8012230:	d508      	bpl.n	8012244 <_printf_i+0x144>
 8012232:	6923      	ldr	r3, [r4, #16]
 8012234:	6861      	ldr	r1, [r4, #4]
 8012236:	4299      	cmp	r1, r3
 8012238:	bfde      	ittt	le
 801223a:	2330      	movle	r3, #48	@ 0x30
 801223c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012240:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012244:	1b92      	subs	r2, r2, r6
 8012246:	6122      	str	r2, [r4, #16]
 8012248:	f8cd a000 	str.w	sl, [sp]
 801224c:	464b      	mov	r3, r9
 801224e:	aa03      	add	r2, sp, #12
 8012250:	4621      	mov	r1, r4
 8012252:	4640      	mov	r0, r8
 8012254:	f7ff fee6 	bl	8012024 <_printf_common>
 8012258:	3001      	adds	r0, #1
 801225a:	d14a      	bne.n	80122f2 <_printf_i+0x1f2>
 801225c:	f04f 30ff 	mov.w	r0, #4294967295
 8012260:	b004      	add	sp, #16
 8012262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012266:	6823      	ldr	r3, [r4, #0]
 8012268:	f043 0320 	orr.w	r3, r3, #32
 801226c:	6023      	str	r3, [r4, #0]
 801226e:	4833      	ldr	r0, [pc, #204]	@ (801233c <_printf_i+0x23c>)
 8012270:	2778      	movs	r7, #120	@ 0x78
 8012272:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012276:	6823      	ldr	r3, [r4, #0]
 8012278:	6831      	ldr	r1, [r6, #0]
 801227a:	061f      	lsls	r7, r3, #24
 801227c:	f851 5b04 	ldr.w	r5, [r1], #4
 8012280:	d402      	bmi.n	8012288 <_printf_i+0x188>
 8012282:	065f      	lsls	r7, r3, #25
 8012284:	bf48      	it	mi
 8012286:	b2ad      	uxthmi	r5, r5
 8012288:	6031      	str	r1, [r6, #0]
 801228a:	07d9      	lsls	r1, r3, #31
 801228c:	bf44      	itt	mi
 801228e:	f043 0320 	orrmi.w	r3, r3, #32
 8012292:	6023      	strmi	r3, [r4, #0]
 8012294:	b11d      	cbz	r5, 801229e <_printf_i+0x19e>
 8012296:	2310      	movs	r3, #16
 8012298:	e7ac      	b.n	80121f4 <_printf_i+0xf4>
 801229a:	4827      	ldr	r0, [pc, #156]	@ (8012338 <_printf_i+0x238>)
 801229c:	e7e9      	b.n	8012272 <_printf_i+0x172>
 801229e:	6823      	ldr	r3, [r4, #0]
 80122a0:	f023 0320 	bic.w	r3, r3, #32
 80122a4:	6023      	str	r3, [r4, #0]
 80122a6:	e7f6      	b.n	8012296 <_printf_i+0x196>
 80122a8:	4616      	mov	r6, r2
 80122aa:	e7bd      	b.n	8012228 <_printf_i+0x128>
 80122ac:	6833      	ldr	r3, [r6, #0]
 80122ae:	6825      	ldr	r5, [r4, #0]
 80122b0:	6961      	ldr	r1, [r4, #20]
 80122b2:	1d18      	adds	r0, r3, #4
 80122b4:	6030      	str	r0, [r6, #0]
 80122b6:	062e      	lsls	r6, r5, #24
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	d501      	bpl.n	80122c0 <_printf_i+0x1c0>
 80122bc:	6019      	str	r1, [r3, #0]
 80122be:	e002      	b.n	80122c6 <_printf_i+0x1c6>
 80122c0:	0668      	lsls	r0, r5, #25
 80122c2:	d5fb      	bpl.n	80122bc <_printf_i+0x1bc>
 80122c4:	8019      	strh	r1, [r3, #0]
 80122c6:	2300      	movs	r3, #0
 80122c8:	6123      	str	r3, [r4, #16]
 80122ca:	4616      	mov	r6, r2
 80122cc:	e7bc      	b.n	8012248 <_printf_i+0x148>
 80122ce:	6833      	ldr	r3, [r6, #0]
 80122d0:	1d1a      	adds	r2, r3, #4
 80122d2:	6032      	str	r2, [r6, #0]
 80122d4:	681e      	ldr	r6, [r3, #0]
 80122d6:	6862      	ldr	r2, [r4, #4]
 80122d8:	2100      	movs	r1, #0
 80122da:	4630      	mov	r0, r6
 80122dc:	f7ed ff90 	bl	8000200 <memchr>
 80122e0:	b108      	cbz	r0, 80122e6 <_printf_i+0x1e6>
 80122e2:	1b80      	subs	r0, r0, r6
 80122e4:	6060      	str	r0, [r4, #4]
 80122e6:	6863      	ldr	r3, [r4, #4]
 80122e8:	6123      	str	r3, [r4, #16]
 80122ea:	2300      	movs	r3, #0
 80122ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80122f0:	e7aa      	b.n	8012248 <_printf_i+0x148>
 80122f2:	6923      	ldr	r3, [r4, #16]
 80122f4:	4632      	mov	r2, r6
 80122f6:	4649      	mov	r1, r9
 80122f8:	4640      	mov	r0, r8
 80122fa:	47d0      	blx	sl
 80122fc:	3001      	adds	r0, #1
 80122fe:	d0ad      	beq.n	801225c <_printf_i+0x15c>
 8012300:	6823      	ldr	r3, [r4, #0]
 8012302:	079b      	lsls	r3, r3, #30
 8012304:	d413      	bmi.n	801232e <_printf_i+0x22e>
 8012306:	68e0      	ldr	r0, [r4, #12]
 8012308:	9b03      	ldr	r3, [sp, #12]
 801230a:	4298      	cmp	r0, r3
 801230c:	bfb8      	it	lt
 801230e:	4618      	movlt	r0, r3
 8012310:	e7a6      	b.n	8012260 <_printf_i+0x160>
 8012312:	2301      	movs	r3, #1
 8012314:	4632      	mov	r2, r6
 8012316:	4649      	mov	r1, r9
 8012318:	4640      	mov	r0, r8
 801231a:	47d0      	blx	sl
 801231c:	3001      	adds	r0, #1
 801231e:	d09d      	beq.n	801225c <_printf_i+0x15c>
 8012320:	3501      	adds	r5, #1
 8012322:	68e3      	ldr	r3, [r4, #12]
 8012324:	9903      	ldr	r1, [sp, #12]
 8012326:	1a5b      	subs	r3, r3, r1
 8012328:	42ab      	cmp	r3, r5
 801232a:	dcf2      	bgt.n	8012312 <_printf_i+0x212>
 801232c:	e7eb      	b.n	8012306 <_printf_i+0x206>
 801232e:	2500      	movs	r5, #0
 8012330:	f104 0619 	add.w	r6, r4, #25
 8012334:	e7f5      	b.n	8012322 <_printf_i+0x222>
 8012336:	bf00      	nop
 8012338:	080131aa 	.word	0x080131aa
 801233c:	080131bb 	.word	0x080131bb

08012340 <__swhatbuf_r>:
 8012340:	b570      	push	{r4, r5, r6, lr}
 8012342:	460c      	mov	r4, r1
 8012344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012348:	2900      	cmp	r1, #0
 801234a:	b096      	sub	sp, #88	@ 0x58
 801234c:	4615      	mov	r5, r2
 801234e:	461e      	mov	r6, r3
 8012350:	da0d      	bge.n	801236e <__swhatbuf_r+0x2e>
 8012352:	89a3      	ldrh	r3, [r4, #12]
 8012354:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012358:	f04f 0100 	mov.w	r1, #0
 801235c:	bf14      	ite	ne
 801235e:	2340      	movne	r3, #64	@ 0x40
 8012360:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012364:	2000      	movs	r0, #0
 8012366:	6031      	str	r1, [r6, #0]
 8012368:	602b      	str	r3, [r5, #0]
 801236a:	b016      	add	sp, #88	@ 0x58
 801236c:	bd70      	pop	{r4, r5, r6, pc}
 801236e:	466a      	mov	r2, sp
 8012370:	f000 f896 	bl	80124a0 <_fstat_r>
 8012374:	2800      	cmp	r0, #0
 8012376:	dbec      	blt.n	8012352 <__swhatbuf_r+0x12>
 8012378:	9901      	ldr	r1, [sp, #4]
 801237a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801237e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012382:	4259      	negs	r1, r3
 8012384:	4159      	adcs	r1, r3
 8012386:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801238a:	e7eb      	b.n	8012364 <__swhatbuf_r+0x24>

0801238c <__smakebuf_r>:
 801238c:	898b      	ldrh	r3, [r1, #12]
 801238e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012390:	079d      	lsls	r5, r3, #30
 8012392:	4606      	mov	r6, r0
 8012394:	460c      	mov	r4, r1
 8012396:	d507      	bpl.n	80123a8 <__smakebuf_r+0x1c>
 8012398:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801239c:	6023      	str	r3, [r4, #0]
 801239e:	6123      	str	r3, [r4, #16]
 80123a0:	2301      	movs	r3, #1
 80123a2:	6163      	str	r3, [r4, #20]
 80123a4:	b003      	add	sp, #12
 80123a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123a8:	ab01      	add	r3, sp, #4
 80123aa:	466a      	mov	r2, sp
 80123ac:	f7ff ffc8 	bl	8012340 <__swhatbuf_r>
 80123b0:	9f00      	ldr	r7, [sp, #0]
 80123b2:	4605      	mov	r5, r0
 80123b4:	4639      	mov	r1, r7
 80123b6:	4630      	mov	r0, r6
 80123b8:	f7ff fb0e 	bl	80119d8 <_malloc_r>
 80123bc:	b948      	cbnz	r0, 80123d2 <__smakebuf_r+0x46>
 80123be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123c2:	059a      	lsls	r2, r3, #22
 80123c4:	d4ee      	bmi.n	80123a4 <__smakebuf_r+0x18>
 80123c6:	f023 0303 	bic.w	r3, r3, #3
 80123ca:	f043 0302 	orr.w	r3, r3, #2
 80123ce:	81a3      	strh	r3, [r4, #12]
 80123d0:	e7e2      	b.n	8012398 <__smakebuf_r+0xc>
 80123d2:	89a3      	ldrh	r3, [r4, #12]
 80123d4:	6020      	str	r0, [r4, #0]
 80123d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123da:	81a3      	strh	r3, [r4, #12]
 80123dc:	9b01      	ldr	r3, [sp, #4]
 80123de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80123e2:	b15b      	cbz	r3, 80123fc <__smakebuf_r+0x70>
 80123e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123e8:	4630      	mov	r0, r6
 80123ea:	f000 f86b 	bl	80124c4 <_isatty_r>
 80123ee:	b128      	cbz	r0, 80123fc <__smakebuf_r+0x70>
 80123f0:	89a3      	ldrh	r3, [r4, #12]
 80123f2:	f023 0303 	bic.w	r3, r3, #3
 80123f6:	f043 0301 	orr.w	r3, r3, #1
 80123fa:	81a3      	strh	r3, [r4, #12]
 80123fc:	89a3      	ldrh	r3, [r4, #12]
 80123fe:	431d      	orrs	r5, r3
 8012400:	81a5      	strh	r5, [r4, #12]
 8012402:	e7cf      	b.n	80123a4 <__smakebuf_r+0x18>

08012404 <_putc_r>:
 8012404:	b570      	push	{r4, r5, r6, lr}
 8012406:	460d      	mov	r5, r1
 8012408:	4614      	mov	r4, r2
 801240a:	4606      	mov	r6, r0
 801240c:	b118      	cbz	r0, 8012416 <_putc_r+0x12>
 801240e:	6a03      	ldr	r3, [r0, #32]
 8012410:	b90b      	cbnz	r3, 8012416 <_putc_r+0x12>
 8012412:	f7fe ff9f 	bl	8011354 <__sinit>
 8012416:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012418:	07d8      	lsls	r0, r3, #31
 801241a:	d405      	bmi.n	8012428 <_putc_r+0x24>
 801241c:	89a3      	ldrh	r3, [r4, #12]
 801241e:	0599      	lsls	r1, r3, #22
 8012420:	d402      	bmi.n	8012428 <_putc_r+0x24>
 8012422:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012424:	f7ff fa53 	bl	80118ce <__retarget_lock_acquire_recursive>
 8012428:	68a3      	ldr	r3, [r4, #8]
 801242a:	3b01      	subs	r3, #1
 801242c:	2b00      	cmp	r3, #0
 801242e:	60a3      	str	r3, [r4, #8]
 8012430:	da05      	bge.n	801243e <_putc_r+0x3a>
 8012432:	69a2      	ldr	r2, [r4, #24]
 8012434:	4293      	cmp	r3, r2
 8012436:	db12      	blt.n	801245e <_putc_r+0x5a>
 8012438:	b2eb      	uxtb	r3, r5
 801243a:	2b0a      	cmp	r3, #10
 801243c:	d00f      	beq.n	801245e <_putc_r+0x5a>
 801243e:	6823      	ldr	r3, [r4, #0]
 8012440:	1c5a      	adds	r2, r3, #1
 8012442:	6022      	str	r2, [r4, #0]
 8012444:	701d      	strb	r5, [r3, #0]
 8012446:	b2ed      	uxtb	r5, r5
 8012448:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801244a:	07da      	lsls	r2, r3, #31
 801244c:	d405      	bmi.n	801245a <_putc_r+0x56>
 801244e:	89a3      	ldrh	r3, [r4, #12]
 8012450:	059b      	lsls	r3, r3, #22
 8012452:	d402      	bmi.n	801245a <_putc_r+0x56>
 8012454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012456:	f7ff fa3b 	bl	80118d0 <__retarget_lock_release_recursive>
 801245a:	4628      	mov	r0, r5
 801245c:	bd70      	pop	{r4, r5, r6, pc}
 801245e:	4629      	mov	r1, r5
 8012460:	4622      	mov	r2, r4
 8012462:	4630      	mov	r0, r6
 8012464:	f7ff f887 	bl	8011576 <__swbuf_r>
 8012468:	4605      	mov	r5, r0
 801246a:	e7ed      	b.n	8012448 <_putc_r+0x44>

0801246c <memmove>:
 801246c:	4288      	cmp	r0, r1
 801246e:	b510      	push	{r4, lr}
 8012470:	eb01 0402 	add.w	r4, r1, r2
 8012474:	d902      	bls.n	801247c <memmove+0x10>
 8012476:	4284      	cmp	r4, r0
 8012478:	4623      	mov	r3, r4
 801247a:	d807      	bhi.n	801248c <memmove+0x20>
 801247c:	1e43      	subs	r3, r0, #1
 801247e:	42a1      	cmp	r1, r4
 8012480:	d008      	beq.n	8012494 <memmove+0x28>
 8012482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012486:	f803 2f01 	strb.w	r2, [r3, #1]!
 801248a:	e7f8      	b.n	801247e <memmove+0x12>
 801248c:	4402      	add	r2, r0
 801248e:	4601      	mov	r1, r0
 8012490:	428a      	cmp	r2, r1
 8012492:	d100      	bne.n	8012496 <memmove+0x2a>
 8012494:	bd10      	pop	{r4, pc}
 8012496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801249a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801249e:	e7f7      	b.n	8012490 <memmove+0x24>

080124a0 <_fstat_r>:
 80124a0:	b538      	push	{r3, r4, r5, lr}
 80124a2:	4d07      	ldr	r5, [pc, #28]	@ (80124c0 <_fstat_r+0x20>)
 80124a4:	2300      	movs	r3, #0
 80124a6:	4604      	mov	r4, r0
 80124a8:	4608      	mov	r0, r1
 80124aa:	4611      	mov	r1, r2
 80124ac:	602b      	str	r3, [r5, #0]
 80124ae:	f7ef fb9c 	bl	8001bea <_fstat>
 80124b2:	1c43      	adds	r3, r0, #1
 80124b4:	d102      	bne.n	80124bc <_fstat_r+0x1c>
 80124b6:	682b      	ldr	r3, [r5, #0]
 80124b8:	b103      	cbz	r3, 80124bc <_fstat_r+0x1c>
 80124ba:	6023      	str	r3, [r4, #0]
 80124bc:	bd38      	pop	{r3, r4, r5, pc}
 80124be:	bf00      	nop
 80124c0:	20003b54 	.word	0x20003b54

080124c4 <_isatty_r>:
 80124c4:	b538      	push	{r3, r4, r5, lr}
 80124c6:	4d06      	ldr	r5, [pc, #24]	@ (80124e0 <_isatty_r+0x1c>)
 80124c8:	2300      	movs	r3, #0
 80124ca:	4604      	mov	r4, r0
 80124cc:	4608      	mov	r0, r1
 80124ce:	602b      	str	r3, [r5, #0]
 80124d0:	f7ef fb9b 	bl	8001c0a <_isatty>
 80124d4:	1c43      	adds	r3, r0, #1
 80124d6:	d102      	bne.n	80124de <_isatty_r+0x1a>
 80124d8:	682b      	ldr	r3, [r5, #0]
 80124da:	b103      	cbz	r3, 80124de <_isatty_r+0x1a>
 80124dc:	6023      	str	r3, [r4, #0]
 80124de:	bd38      	pop	{r3, r4, r5, pc}
 80124e0:	20003b54 	.word	0x20003b54

080124e4 <_sbrk_r>:
 80124e4:	b538      	push	{r3, r4, r5, lr}
 80124e6:	4d06      	ldr	r5, [pc, #24]	@ (8012500 <_sbrk_r+0x1c>)
 80124e8:	2300      	movs	r3, #0
 80124ea:	4604      	mov	r4, r0
 80124ec:	4608      	mov	r0, r1
 80124ee:	602b      	str	r3, [r5, #0]
 80124f0:	f7ef fba4 	bl	8001c3c <_sbrk>
 80124f4:	1c43      	adds	r3, r0, #1
 80124f6:	d102      	bne.n	80124fe <_sbrk_r+0x1a>
 80124f8:	682b      	ldr	r3, [r5, #0]
 80124fa:	b103      	cbz	r3, 80124fe <_sbrk_r+0x1a>
 80124fc:	6023      	str	r3, [r4, #0]
 80124fe:	bd38      	pop	{r3, r4, r5, pc}
 8012500:	20003b54 	.word	0x20003b54

08012504 <_realloc_r>:
 8012504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012508:	4680      	mov	r8, r0
 801250a:	4615      	mov	r5, r2
 801250c:	460c      	mov	r4, r1
 801250e:	b921      	cbnz	r1, 801251a <_realloc_r+0x16>
 8012510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012514:	4611      	mov	r1, r2
 8012516:	f7ff ba5f 	b.w	80119d8 <_malloc_r>
 801251a:	b92a      	cbnz	r2, 8012528 <_realloc_r+0x24>
 801251c:	f7ff f9f0 	bl	8011900 <_free_r>
 8012520:	2400      	movs	r4, #0
 8012522:	4620      	mov	r0, r4
 8012524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012528:	f000 f81a 	bl	8012560 <_malloc_usable_size_r>
 801252c:	4285      	cmp	r5, r0
 801252e:	4606      	mov	r6, r0
 8012530:	d802      	bhi.n	8012538 <_realloc_r+0x34>
 8012532:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012536:	d8f4      	bhi.n	8012522 <_realloc_r+0x1e>
 8012538:	4629      	mov	r1, r5
 801253a:	4640      	mov	r0, r8
 801253c:	f7ff fa4c 	bl	80119d8 <_malloc_r>
 8012540:	4607      	mov	r7, r0
 8012542:	2800      	cmp	r0, #0
 8012544:	d0ec      	beq.n	8012520 <_realloc_r+0x1c>
 8012546:	42b5      	cmp	r5, r6
 8012548:	462a      	mov	r2, r5
 801254a:	4621      	mov	r1, r4
 801254c:	bf28      	it	cs
 801254e:	4632      	movcs	r2, r6
 8012550:	f7ff f9c7 	bl	80118e2 <memcpy>
 8012554:	4621      	mov	r1, r4
 8012556:	4640      	mov	r0, r8
 8012558:	f7ff f9d2 	bl	8011900 <_free_r>
 801255c:	463c      	mov	r4, r7
 801255e:	e7e0      	b.n	8012522 <_realloc_r+0x1e>

08012560 <_malloc_usable_size_r>:
 8012560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012564:	1f18      	subs	r0, r3, #4
 8012566:	2b00      	cmp	r3, #0
 8012568:	bfbc      	itt	lt
 801256a:	580b      	ldrlt	r3, [r1, r0]
 801256c:	18c0      	addlt	r0, r0, r3
 801256e:	4770      	bx	lr

08012570 <log>:
 8012570:	b538      	push	{r3, r4, r5, lr}
 8012572:	ed2d 8b02 	vpush	{d8}
 8012576:	ec55 4b10 	vmov	r4, r5, d0
 801257a:	f000 f841 	bl	8012600 <__ieee754_log>
 801257e:	4622      	mov	r2, r4
 8012580:	462b      	mov	r3, r5
 8012582:	4620      	mov	r0, r4
 8012584:	4629      	mov	r1, r5
 8012586:	eeb0 8a40 	vmov.f32	s16, s0
 801258a:	eef0 8a60 	vmov.f32	s17, s1
 801258e:	f7ee fadd 	bl	8000b4c <__aeabi_dcmpun>
 8012592:	b998      	cbnz	r0, 80125bc <log+0x4c>
 8012594:	2200      	movs	r2, #0
 8012596:	2300      	movs	r3, #0
 8012598:	4620      	mov	r0, r4
 801259a:	4629      	mov	r1, r5
 801259c:	f7ee facc 	bl	8000b38 <__aeabi_dcmpgt>
 80125a0:	b960      	cbnz	r0, 80125bc <log+0x4c>
 80125a2:	2200      	movs	r2, #0
 80125a4:	2300      	movs	r3, #0
 80125a6:	4620      	mov	r0, r4
 80125a8:	4629      	mov	r1, r5
 80125aa:	f7ee fa9d 	bl	8000ae8 <__aeabi_dcmpeq>
 80125ae:	b160      	cbz	r0, 80125ca <log+0x5a>
 80125b0:	f7ff f962 	bl	8011878 <__errno>
 80125b4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 80125e0 <log+0x70>
 80125b8:	2322      	movs	r3, #34	@ 0x22
 80125ba:	6003      	str	r3, [r0, #0]
 80125bc:	eeb0 0a48 	vmov.f32	s0, s16
 80125c0:	eef0 0a68 	vmov.f32	s1, s17
 80125c4:	ecbd 8b02 	vpop	{d8}
 80125c8:	bd38      	pop	{r3, r4, r5, pc}
 80125ca:	f7ff f955 	bl	8011878 <__errno>
 80125ce:	ecbd 8b02 	vpop	{d8}
 80125d2:	2321      	movs	r3, #33	@ 0x21
 80125d4:	6003      	str	r3, [r0, #0]
 80125d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125da:	4803      	ldr	r0, [pc, #12]	@ (80125e8 <log+0x78>)
 80125dc:	f000 b808 	b.w	80125f0 <nan>
 80125e0:	00000000 	.word	0x00000000
 80125e4:	fff00000 	.word	0xfff00000
 80125e8:	0801319e 	.word	0x0801319e
 80125ec:	00000000 	.word	0x00000000

080125f0 <nan>:
 80125f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80125f8 <nan+0x8>
 80125f4:	4770      	bx	lr
 80125f6:	bf00      	nop
 80125f8:	00000000 	.word	0x00000000
 80125fc:	7ff80000 	.word	0x7ff80000

08012600 <__ieee754_log>:
 8012600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012604:	ec51 0b10 	vmov	r0, r1, d0
 8012608:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 801260c:	b087      	sub	sp, #28
 801260e:	460d      	mov	r5, r1
 8012610:	da26      	bge.n	8012660 <__ieee754_log+0x60>
 8012612:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012616:	4303      	orrs	r3, r0
 8012618:	4602      	mov	r2, r0
 801261a:	d10a      	bne.n	8012632 <__ieee754_log+0x32>
 801261c:	49ce      	ldr	r1, [pc, #824]	@ (8012958 <__ieee754_log+0x358>)
 801261e:	2200      	movs	r2, #0
 8012620:	2300      	movs	r3, #0
 8012622:	2000      	movs	r0, #0
 8012624:	f7ee f922 	bl	800086c <__aeabi_ddiv>
 8012628:	ec41 0b10 	vmov	d0, r0, r1
 801262c:	b007      	add	sp, #28
 801262e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012632:	2900      	cmp	r1, #0
 8012634:	da05      	bge.n	8012642 <__ieee754_log+0x42>
 8012636:	460b      	mov	r3, r1
 8012638:	f7ed fe36 	bl	80002a8 <__aeabi_dsub>
 801263c:	2200      	movs	r2, #0
 801263e:	2300      	movs	r3, #0
 8012640:	e7f0      	b.n	8012624 <__ieee754_log+0x24>
 8012642:	4bc6      	ldr	r3, [pc, #792]	@ (801295c <__ieee754_log+0x35c>)
 8012644:	2200      	movs	r2, #0
 8012646:	f7ed ffe7 	bl	8000618 <__aeabi_dmul>
 801264a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 801264e:	460d      	mov	r5, r1
 8012650:	4ac3      	ldr	r2, [pc, #780]	@ (8012960 <__ieee754_log+0x360>)
 8012652:	4295      	cmp	r5, r2
 8012654:	dd06      	ble.n	8012664 <__ieee754_log+0x64>
 8012656:	4602      	mov	r2, r0
 8012658:	460b      	mov	r3, r1
 801265a:	f7ed fe27 	bl	80002ac <__adddf3>
 801265e:	e7e3      	b.n	8012628 <__ieee754_log+0x28>
 8012660:	2300      	movs	r3, #0
 8012662:	e7f5      	b.n	8012650 <__ieee754_log+0x50>
 8012664:	152c      	asrs	r4, r5, #20
 8012666:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 801266a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801266e:	441c      	add	r4, r3
 8012670:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8012674:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8012678:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801267c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8012680:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8012684:	ea42 0105 	orr.w	r1, r2, r5
 8012688:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801268c:	2200      	movs	r2, #0
 801268e:	4bb5      	ldr	r3, [pc, #724]	@ (8012964 <__ieee754_log+0x364>)
 8012690:	f7ed fe0a 	bl	80002a8 <__aeabi_dsub>
 8012694:	1cab      	adds	r3, r5, #2
 8012696:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801269a:	2b02      	cmp	r3, #2
 801269c:	4682      	mov	sl, r0
 801269e:	468b      	mov	fp, r1
 80126a0:	f04f 0200 	mov.w	r2, #0
 80126a4:	dc53      	bgt.n	801274e <__ieee754_log+0x14e>
 80126a6:	2300      	movs	r3, #0
 80126a8:	f7ee fa1e 	bl	8000ae8 <__aeabi_dcmpeq>
 80126ac:	b1d0      	cbz	r0, 80126e4 <__ieee754_log+0xe4>
 80126ae:	2c00      	cmp	r4, #0
 80126b0:	f000 8120 	beq.w	80128f4 <__ieee754_log+0x2f4>
 80126b4:	4620      	mov	r0, r4
 80126b6:	f7ed ff45 	bl	8000544 <__aeabi_i2d>
 80126ba:	a391      	add	r3, pc, #580	@ (adr r3, 8012900 <__ieee754_log+0x300>)
 80126bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c0:	4606      	mov	r6, r0
 80126c2:	460f      	mov	r7, r1
 80126c4:	f7ed ffa8 	bl	8000618 <__aeabi_dmul>
 80126c8:	a38f      	add	r3, pc, #572	@ (adr r3, 8012908 <__ieee754_log+0x308>)
 80126ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ce:	4604      	mov	r4, r0
 80126d0:	460d      	mov	r5, r1
 80126d2:	4630      	mov	r0, r6
 80126d4:	4639      	mov	r1, r7
 80126d6:	f7ed ff9f 	bl	8000618 <__aeabi_dmul>
 80126da:	4602      	mov	r2, r0
 80126dc:	460b      	mov	r3, r1
 80126de:	4620      	mov	r0, r4
 80126e0:	4629      	mov	r1, r5
 80126e2:	e7ba      	b.n	801265a <__ieee754_log+0x5a>
 80126e4:	a38a      	add	r3, pc, #552	@ (adr r3, 8012910 <__ieee754_log+0x310>)
 80126e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ea:	4650      	mov	r0, sl
 80126ec:	4659      	mov	r1, fp
 80126ee:	f7ed ff93 	bl	8000618 <__aeabi_dmul>
 80126f2:	4602      	mov	r2, r0
 80126f4:	460b      	mov	r3, r1
 80126f6:	2000      	movs	r0, #0
 80126f8:	499b      	ldr	r1, [pc, #620]	@ (8012968 <__ieee754_log+0x368>)
 80126fa:	f7ed fdd5 	bl	80002a8 <__aeabi_dsub>
 80126fe:	4652      	mov	r2, sl
 8012700:	4606      	mov	r6, r0
 8012702:	460f      	mov	r7, r1
 8012704:	465b      	mov	r3, fp
 8012706:	4650      	mov	r0, sl
 8012708:	4659      	mov	r1, fp
 801270a:	f7ed ff85 	bl	8000618 <__aeabi_dmul>
 801270e:	4602      	mov	r2, r0
 8012710:	460b      	mov	r3, r1
 8012712:	4630      	mov	r0, r6
 8012714:	4639      	mov	r1, r7
 8012716:	f7ed ff7f 	bl	8000618 <__aeabi_dmul>
 801271a:	4606      	mov	r6, r0
 801271c:	460f      	mov	r7, r1
 801271e:	b914      	cbnz	r4, 8012726 <__ieee754_log+0x126>
 8012720:	4632      	mov	r2, r6
 8012722:	463b      	mov	r3, r7
 8012724:	e0a0      	b.n	8012868 <__ieee754_log+0x268>
 8012726:	4620      	mov	r0, r4
 8012728:	f7ed ff0c 	bl	8000544 <__aeabi_i2d>
 801272c:	a374      	add	r3, pc, #464	@ (adr r3, 8012900 <__ieee754_log+0x300>)
 801272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012732:	4680      	mov	r8, r0
 8012734:	4689      	mov	r9, r1
 8012736:	f7ed ff6f 	bl	8000618 <__aeabi_dmul>
 801273a:	a373      	add	r3, pc, #460	@ (adr r3, 8012908 <__ieee754_log+0x308>)
 801273c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012740:	4604      	mov	r4, r0
 8012742:	460d      	mov	r5, r1
 8012744:	4640      	mov	r0, r8
 8012746:	4649      	mov	r1, r9
 8012748:	f7ed ff66 	bl	8000618 <__aeabi_dmul>
 801274c:	e0a5      	b.n	801289a <__ieee754_log+0x29a>
 801274e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012752:	f7ed fdab 	bl	80002ac <__adddf3>
 8012756:	4602      	mov	r2, r0
 8012758:	460b      	mov	r3, r1
 801275a:	4650      	mov	r0, sl
 801275c:	4659      	mov	r1, fp
 801275e:	f7ee f885 	bl	800086c <__aeabi_ddiv>
 8012762:	e9cd 0100 	strd	r0, r1, [sp]
 8012766:	4620      	mov	r0, r4
 8012768:	f7ed feec 	bl	8000544 <__aeabi_i2d>
 801276c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012774:	4610      	mov	r0, r2
 8012776:	4619      	mov	r1, r3
 8012778:	f7ed ff4e 	bl	8000618 <__aeabi_dmul>
 801277c:	4602      	mov	r2, r0
 801277e:	460b      	mov	r3, r1
 8012780:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012784:	f7ed ff48 	bl	8000618 <__aeabi_dmul>
 8012788:	a363      	add	r3, pc, #396	@ (adr r3, 8012918 <__ieee754_log+0x318>)
 801278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278e:	4680      	mov	r8, r0
 8012790:	4689      	mov	r9, r1
 8012792:	f7ed ff41 	bl	8000618 <__aeabi_dmul>
 8012796:	a362      	add	r3, pc, #392	@ (adr r3, 8012920 <__ieee754_log+0x320>)
 8012798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279c:	f7ed fd86 	bl	80002ac <__adddf3>
 80127a0:	4642      	mov	r2, r8
 80127a2:	464b      	mov	r3, r9
 80127a4:	f7ed ff38 	bl	8000618 <__aeabi_dmul>
 80127a8:	a35f      	add	r3, pc, #380	@ (adr r3, 8012928 <__ieee754_log+0x328>)
 80127aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ae:	f7ed fd7d 	bl	80002ac <__adddf3>
 80127b2:	4642      	mov	r2, r8
 80127b4:	464b      	mov	r3, r9
 80127b6:	f7ed ff2f 	bl	8000618 <__aeabi_dmul>
 80127ba:	a35d      	add	r3, pc, #372	@ (adr r3, 8012930 <__ieee754_log+0x330>)
 80127bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c0:	f7ed fd74 	bl	80002ac <__adddf3>
 80127c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127c8:	f7ed ff26 	bl	8000618 <__aeabi_dmul>
 80127cc:	a35a      	add	r3, pc, #360	@ (adr r3, 8012938 <__ieee754_log+0x338>)
 80127ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80127d6:	4640      	mov	r0, r8
 80127d8:	4649      	mov	r1, r9
 80127da:	f7ed ff1d 	bl	8000618 <__aeabi_dmul>
 80127de:	a358      	add	r3, pc, #352	@ (adr r3, 8012940 <__ieee754_log+0x340>)
 80127e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e4:	f7ed fd62 	bl	80002ac <__adddf3>
 80127e8:	4642      	mov	r2, r8
 80127ea:	464b      	mov	r3, r9
 80127ec:	f7ed ff14 	bl	8000618 <__aeabi_dmul>
 80127f0:	a355      	add	r3, pc, #340	@ (adr r3, 8012948 <__ieee754_log+0x348>)
 80127f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f6:	f7ed fd59 	bl	80002ac <__adddf3>
 80127fa:	4642      	mov	r2, r8
 80127fc:	464b      	mov	r3, r9
 80127fe:	f7ed ff0b 	bl	8000618 <__aeabi_dmul>
 8012802:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8012806:	4602      	mov	r2, r0
 8012808:	460b      	mov	r3, r1
 801280a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 801280e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012812:	f7ed fd4b 	bl	80002ac <__adddf3>
 8012816:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 801281a:	3551      	adds	r5, #81	@ 0x51
 801281c:	4335      	orrs	r5, r6
 801281e:	2d00      	cmp	r5, #0
 8012820:	4680      	mov	r8, r0
 8012822:	4689      	mov	r9, r1
 8012824:	dd48      	ble.n	80128b8 <__ieee754_log+0x2b8>
 8012826:	4b50      	ldr	r3, [pc, #320]	@ (8012968 <__ieee754_log+0x368>)
 8012828:	2200      	movs	r2, #0
 801282a:	4650      	mov	r0, sl
 801282c:	4659      	mov	r1, fp
 801282e:	f7ed fef3 	bl	8000618 <__aeabi_dmul>
 8012832:	4652      	mov	r2, sl
 8012834:	465b      	mov	r3, fp
 8012836:	f7ed feef 	bl	8000618 <__aeabi_dmul>
 801283a:	4602      	mov	r2, r0
 801283c:	460b      	mov	r3, r1
 801283e:	4606      	mov	r6, r0
 8012840:	460f      	mov	r7, r1
 8012842:	4640      	mov	r0, r8
 8012844:	4649      	mov	r1, r9
 8012846:	f7ed fd31 	bl	80002ac <__adddf3>
 801284a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801284e:	f7ed fee3 	bl	8000618 <__aeabi_dmul>
 8012852:	4680      	mov	r8, r0
 8012854:	4689      	mov	r9, r1
 8012856:	b964      	cbnz	r4, 8012872 <__ieee754_log+0x272>
 8012858:	4602      	mov	r2, r0
 801285a:	460b      	mov	r3, r1
 801285c:	4630      	mov	r0, r6
 801285e:	4639      	mov	r1, r7
 8012860:	f7ed fd22 	bl	80002a8 <__aeabi_dsub>
 8012864:	4602      	mov	r2, r0
 8012866:	460b      	mov	r3, r1
 8012868:	4650      	mov	r0, sl
 801286a:	4659      	mov	r1, fp
 801286c:	f7ed fd1c 	bl	80002a8 <__aeabi_dsub>
 8012870:	e6da      	b.n	8012628 <__ieee754_log+0x28>
 8012872:	a323      	add	r3, pc, #140	@ (adr r3, 8012900 <__ieee754_log+0x300>)
 8012874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801287c:	f7ed fecc 	bl	8000618 <__aeabi_dmul>
 8012880:	a321      	add	r3, pc, #132	@ (adr r3, 8012908 <__ieee754_log+0x308>)
 8012882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012886:	4604      	mov	r4, r0
 8012888:	460d      	mov	r5, r1
 801288a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801288e:	f7ed fec3 	bl	8000618 <__aeabi_dmul>
 8012892:	4642      	mov	r2, r8
 8012894:	464b      	mov	r3, r9
 8012896:	f7ed fd09 	bl	80002ac <__adddf3>
 801289a:	4602      	mov	r2, r0
 801289c:	460b      	mov	r3, r1
 801289e:	4630      	mov	r0, r6
 80128a0:	4639      	mov	r1, r7
 80128a2:	f7ed fd01 	bl	80002a8 <__aeabi_dsub>
 80128a6:	4652      	mov	r2, sl
 80128a8:	465b      	mov	r3, fp
 80128aa:	f7ed fcfd 	bl	80002a8 <__aeabi_dsub>
 80128ae:	4602      	mov	r2, r0
 80128b0:	460b      	mov	r3, r1
 80128b2:	4620      	mov	r0, r4
 80128b4:	4629      	mov	r1, r5
 80128b6:	e7d9      	b.n	801286c <__ieee754_log+0x26c>
 80128b8:	4602      	mov	r2, r0
 80128ba:	460b      	mov	r3, r1
 80128bc:	4650      	mov	r0, sl
 80128be:	4659      	mov	r1, fp
 80128c0:	f7ed fcf2 	bl	80002a8 <__aeabi_dsub>
 80128c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80128c8:	f7ed fea6 	bl	8000618 <__aeabi_dmul>
 80128cc:	4606      	mov	r6, r0
 80128ce:	460f      	mov	r7, r1
 80128d0:	2c00      	cmp	r4, #0
 80128d2:	f43f af25 	beq.w	8012720 <__ieee754_log+0x120>
 80128d6:	a30a      	add	r3, pc, #40	@ (adr r3, 8012900 <__ieee754_log+0x300>)
 80128d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128e0:	f7ed fe9a 	bl	8000618 <__aeabi_dmul>
 80128e4:	a308      	add	r3, pc, #32	@ (adr r3, 8012908 <__ieee754_log+0x308>)
 80128e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ea:	4604      	mov	r4, r0
 80128ec:	460d      	mov	r5, r1
 80128ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128f2:	e729      	b.n	8012748 <__ieee754_log+0x148>
 80128f4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8012950 <__ieee754_log+0x350>
 80128f8:	e698      	b.n	801262c <__ieee754_log+0x2c>
 80128fa:	bf00      	nop
 80128fc:	f3af 8000 	nop.w
 8012900:	fee00000 	.word	0xfee00000
 8012904:	3fe62e42 	.word	0x3fe62e42
 8012908:	35793c76 	.word	0x35793c76
 801290c:	3dea39ef 	.word	0x3dea39ef
 8012910:	55555555 	.word	0x55555555
 8012914:	3fd55555 	.word	0x3fd55555
 8012918:	df3e5244 	.word	0xdf3e5244
 801291c:	3fc2f112 	.word	0x3fc2f112
 8012920:	96cb03de 	.word	0x96cb03de
 8012924:	3fc74664 	.word	0x3fc74664
 8012928:	94229359 	.word	0x94229359
 801292c:	3fd24924 	.word	0x3fd24924
 8012930:	55555593 	.word	0x55555593
 8012934:	3fe55555 	.word	0x3fe55555
 8012938:	d078c69f 	.word	0xd078c69f
 801293c:	3fc39a09 	.word	0x3fc39a09
 8012940:	1d8e78af 	.word	0x1d8e78af
 8012944:	3fcc71c5 	.word	0x3fcc71c5
 8012948:	9997fa04 	.word	0x9997fa04
 801294c:	3fd99999 	.word	0x3fd99999
	...
 8012958:	c3500000 	.word	0xc3500000
 801295c:	43500000 	.word	0x43500000
 8012960:	7fefffff 	.word	0x7fefffff
 8012964:	3ff00000 	.word	0x3ff00000
 8012968:	3fe00000 	.word	0x3fe00000

0801296c <_init>:
 801296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801296e:	bf00      	nop
 8012970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012972:	bc08      	pop	{r3}
 8012974:	469e      	mov	lr, r3
 8012976:	4770      	bx	lr

08012978 <_fini>:
 8012978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801297a:	bf00      	nop
 801297c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801297e:	bc08      	pop	{r3}
 8012980:	469e      	mov	lr, r3
 8012982:	4770      	bx	lr
